<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>tasmota - Tag - karl</title><link>https://karlquinsland.com/tags/tasmota/</link><description>tasmota - Tag - karl</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 22 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://karlquinsland.com/tags/tasmota/" rel="self" type="application/rss+xml"/><item><title>Installing Tasmota on the Xiaomi Desk Lamp</title><link>https://karlquinsland.com/xaomi-s1-monitor-lamp-teardown-and-tasmota/</link><pubDate>Sat, 22 Jan 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/xaomi-s1-monitor-lamp-teardown-and-tasmota/</guid><description><![CDATA[<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>MJGJD02YL vs MUGJD01YL<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">There are <em>at least two</em> versions of this lamp. Thanks to <code>@htvekov</code> for confirming that the <code>MUGJD01YL</code> variant <strong>does <em>not</em> contain an ESP32</strong>. It contains a <code>TLSR8368</code>.
Some photos of the <code>MUGJD01YL</code> internals are provided <a href="#mugjd01yl" rel="">below</a>.</div>
        </div>
    </div>
<p>If you&rsquo;re here just for &ldquo;how do I flash tasmota&rdquo; bit, skip to the <a href="#tasmota" rel="">Tasmota</a> section below.</p>
<hr>
<p>I was looking for a way to light my desk my desk without screen glare.
The easiest way to prevent glare on a screen is to change the orientation of the light relative to the screen either from under or behind the screen.
This is not practical for ceiling mounted lights or for any floor lamps.</p>
<p>You can get a nearly glare free light if you mount the light to the top of the screen and direct the light away from the screen at a <em>slight</em> angle.
Light hitting the screen and bouncing into eyes is minimized and the majority of the light ends up directed down onto the desk where it&rsquo;s needed.</p>
<p>This isn&rsquo;t a new problem; a quick search of any online retailor will reveal that there are <em>many</em> different options out there at all sorts of price points.
As this light source would be heavily used for all sorts of work, the <em>quality</em> of the light is incredibly important; a high General CRI (Ra) and adjustable color temperature are <em>requirements</em>.</p>
<p>I also wanted one that had some basic remote control functions so I don&rsquo;t have to reach to the top of my monitor and risk destabilizing whatever I am working on or getting finger prints on the panel.
A wired remote would be simpler and thus cheaper but my desk is already too crowded with wires and cords; if the cost difference between a wired and wireless remote was marginal, opt for wireless.</p>
<p>After a bit of searching, I found the <code>2021 Xiaomi Mijia Lite Desk Lamp 1S</code> which fit the bill exactly.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Beyond the basic puck shaped wireless remote, the listing indicated that the &lsquo;new 1s version&rsquo; could be controlled with the <code>Xiaomi</code> app.</p>
<p>ü§î</p>
<p>Instead of some very basic 433Mhz radio, the lamp/remote probably used BTLE.
In some ways, that&rsquo;s even better; the lamp only has a few simple functions and those shouldn&rsquo;t be that hard to reverse engineer from the Android app.</p>
<p>Once I know what data to send for on/off/dim/bright/ww/cw selection, I can use an ESP chip as a MQTT &lt;-&gt; BTLE gateway for relatively easy integration into my home automation system.
Worst case, the fall back plan of using a microcontroller to emulate interacting with the remote and then integrating that microcontroller with my home automation system would work.</p>
<p>Once the lamp showed up, I of course opened up the remote to see what type of wireless system I was going to be dealing with.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>Note<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">More photos of the remote are <a href="#teardown" rel="">below</a></div>
        </div>
    </div>
<p>Giving the model number <code>MHCB07P</code> a quick google didn&rsquo;t reveal much information other than confirm that it was using BTLE.
This almost certainly means that the phone app will <em>also</em> use BTLE to control the lamp!
If I&rsquo;m lucky, I can capture the entire discovery/pair/command packets using a rooted android device and then I won&rsquo;t have to bother with the puck at all.</p>
<h1 id="lamp---phone">Lamp &lt;-&gt; Phone</h1>
<p>After getting the app setup, it did discover the lamp and began to walk me through the setup flow.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>WiFi!? Really!? But why? This must be some generic screen shown for all devices, right?</p>
<p><strong>Nope</strong>.</p>
<p>There really is a simple access point inside this lamp!</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Well now I&rsquo;m curious.</p>
<p>What could this lamp <em>possibly need</em> WiFi credentials for? The remote used BTLE and every conceivable phone that will also control the lamp supports BTLE&hellip; so why spend the extra money for a WiFi enabled microcontroller at all!?</p>
<h1 id="et-lamp-phone-home"><del>ET</del> Lamp Phone Home:</h1>
<p>I threw the lamp behind an isolated access point and it sure is <em>chatty</em>&hellip;
After getting an IP address, the lamp looks up the <code>A</code> record for <code>dk.io.mi.com</code> and then attempts to open a TCP connection and send some bytes:</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Now I&rsquo;m more than a little bit curious.</p>
<p>Why send raw bytes to TCP/80 without at least the typical HTTP request headers?
Why even use WiFi at all for a <em>lamp</em>? Is there no way to use my phone to control the lamp over BTLE?</p>
<h2 id="dumping-the-fw">Dumping the FW</h2>
<p>Fortunately, this was pretty easy. After a cursory analysis, the dumped firmware did not appear to be encrypted or otherwise protected.
I did a quick search for a few things that I hoped would show up in the dumped OEM firmware and was not disappointed:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">‚ùØ cat lamp.bin.strings <span class="p">|</span> grep --ignore-case -E <span class="s1">&#39;certificate|encrypt|tls|agent|http|post|get|verify|remote|{&#34;&#39;</span> &gt; interesting_strings.txt
‚ùØ cat interesting_strings.txt<span class="p">|</span> wc -l
<span class="m">710</span>
</code></pre></td></tr></table>
</div>
</div><p>ü§®</p>
<p>Here are some of the highlights:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">[I] bluetooth_remote_double_click
[E] %s: verify root cert is not valid! (%s,%d)
[W] %s: Fail to get gatt db from connection %04x, ret = %d  (%s,%d)
[E] %s: mbedtls_ecdh_calc_secret error %d (%s,%d)
miio_signature_verify
[E] %s: --&gt;login verify send failed. (%s,%d)
-----BEGIN CERTIFICATE-----
[E] %s: https need root cert. (%s,%d)
User-Agent: MIoT
http://dlg.io.mi.com/v1/ot/upload
[W] %s: httpdns new resolve start failed, %d (%s,%d)
</code></pre></td></tr></table>
</div>
</div><p>There&rsquo;s a lot more interesting things in the dump but they&rsquo;ll have to wait for another day as
immediately after getting eyes on the PCB, I saw an ESP32 chip!</p>
<h2 id="a-change-of-plans">A change of plans</h2>
<p>Reverse engineering the firmware to figure out how/why the phone method of remote control was different from the remotes' method no longer really mattered.
An ESP based chip means Tasmota or ESPHome should be possible.</p>
<p>If I could get either of those alternative firmwares running on the lamp, then cluttering up the desk with yet another remote and/or hacking MQTT support into the lamp via the remote was no longer necessary!</p>
<h1 id="teardown">Teardown</h1>
<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>Warning<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">The plastic end caps on either end of the lamp tube are <em>glued in</em>.
You will need some force to break the glue.
Even with all possible precautions, getting access to the lamp PCB <em>is a <strong>destructive</strong> process</em>.
If you are <em>careful</em> you can keep the destruction and cosmetic damage to a minimum.</div>
        </div>
    </div>
<p>I did this teardown the hard way and damaged more of the lamp than necessary.
Some of the photos below reflect this.</p>
<p>Now that I know how it all is <em>meant</em> to come apart, you will hopefully have an easier time and incur less damage!</p>
<h2 id="the-lamp">The lamp</h2>
<p>A closer look at the marked device information before we move <em>into</em> the lamp.
The ESP that we will soon flash with Tasmota is just behind this product information.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Product info and regulatory markings
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>Locate the small rectangle shaped protrusion from the lamp tube that mates with the magnetic mount. The protrusion has two small pogo pins on it.
You can see the protrusion in the middle of the tube facing the coiled USB power cable:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Everything that came in the box
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>With the protrusion facing you, locate the plastic cap closest to the product information.
This should be plastic cap on the <em>left</em> side of the tube.</p>
<p>Use non-marring pliers or similar to grip the plastic cap and twist with enough force to break the glue.
Do not twist more than a few degrees!
The plastic cap has some features that will come into contact with and could damage the PCB if rotated too far!</p>
<p>Use a razor blade or similar to peel back the grip-tape sticker on the protrusion.
If you&rsquo;re careful and manage to remove the sticker in one piece you might be able to re-apply it during reassembly.
The lamp functions fine without the sticker, though.</p>
<p>Underneath the sticker will be two small philips screws.
Remove them and the metal protrusion and small plastic part containing the two pogo pins should come free.
Set these aside.</p>
<p>Gently remove the clear plastic diffuser from the lamp tube and set aside.</p>
<p>The matte finish on the interior side of the diffuser is a fingerprint magnet.
Consider using gloves for this step.</p>
<p>Carefully slide the PCB out of the aluminum tube.
Be mindful of the two spring like contacts on the back of the PCB that mated with the pogo pins!</p>
<p>You can see the small black plastic bracket holding the pogo pins and the protrusion bit with some of the grip-tape still attached:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        If it feels like you&#39;re using too much force to open the lamp... you probably are!
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>If you try to remove the PCB without first detaching the pogo pins, you&rsquo;ll damage one or both of the spring contacts that mate the PCB to the pogo pins!</p>
<p>You <em>don&rsquo;t</em> want your <code>GND</code> spring to look like mine!</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Before realizing that the pogo pins could be removed from the lamp, I removed <em>both</em> caps and tried push/pull the PCB out.</p>
<p>The PCB is supported inside the tube with a few black plastic &lsquo;sleds&rsquo; which are heat-staked on to the PCB.</p>
<p>The &lsquo;sled&rsquo; closest to the ESP partially covers the <code>3V3</code> test point.
Rather than use a dedicated 3V power supply during flashing, I found it easiest to use this pin to bring the <code>EN</code> pin up high.</p>
<p>If you&rsquo;re going to use the <code>3V3</code> test pin instead of a dedicated external power supply, you will probably want to remove the &lsquo;sled&rsquo; to get easy access to the test point.</p>
<p>You can do this with some flush-cut snips.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Be careful to not scratch the solder mask / PCB with the sharp edges of the snips
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>The sled isn&rsquo;t technically required for re-assembly but it&rsquo;s pretty easy to re-attach to the PCB with some hotglue. Discard it at your peril!</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Here&rsquo;s a closeup of the PCB with most of the test points labeled.
You can see the <code>3V3</code> test point immediately to the left of <code>R6</code> in the shadow of the &lsquo;sled&rsquo;.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Repeat these steps in reverse order to re-assemble the lamp.</p>
<h3 id="the-puck">The puck</h3>
<p>Fortunately, opening up the remote is not difficult.</p>
<p>Remove the two philips screws under the bottom cap.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>The main body / rotary knob lifts away from the midframe.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Like with the lamp PCB, there are a few test points:</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<h1 id="tasmota">Tasmota</h1>
<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>Warning<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>It is likely that both the WW and CW LEDs <em>will</em> briefly light up during the flashing process. When this happens, you <em>will</em> draw more current than a typical USB &lt;-&gt; Serial adapter can provide. At <em>best</em> you&rsquo;ll cause a brownout and the flash will be interrupted.</p>
<p><strong>Use a dedicated 5V supply that can provide <em>at least</em> 10W of power</strong> while flashing the lamp! Make sure that the <code>GND</code> wire from your serial programmer <em>and</em> the <code>GND</code> wire for your dedicated 5V@2A/10W supply are tied together or you will likely destroy some of the electronics on both the lamp, your serial adapter <em>and</em> possibly your computer!</p>
</div>
        </div>
    </div>
<p>Having said all that, it&rsquo;s totally worth it:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        When all is said and done, the lamp is easily integrated and controlled with Home Assistant
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h2 id="flashing">Flashing</h2>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>Info<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">The ESP32 chip on this PCB is a <em>single core</em> version.
Follow the <a href="https://tasmota.github.io/docs/ESP32/#flashing" target="_blank" rel="noopener noreffer">instructions for flashing the ESP32 version of Tasmota</a>, specifically the <code>tasmota32solo1</code> version!</div>
        </div>
    </div>
<p>Solder wires to the usual <code>RX</code>, <code>TX</code>, <code>GPIO0</code> and <code>GND</code> test points.
The <code>GPIO0</code> test point is the test point nearest to the ESP32 chip; directly off the bottom right corner.
I used some solid-core cable from a length of cat5 cable but any similarly high gauge wire will work.</p>
<p>Solder a jumper between the <code>EN</code> and <code>3V3</code> test point. I used a small yellow wire for this.
The solid blue wire attached to <code>GPIO0</code> and the blue/white wire attached to <code>GND</code> are joined together just out of frame.
The ESP will not boot into programming mode unless <code>GPIO0</code> is tied to ground.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Leads from a dedicated 5V power supply are attached to the main contacts with reg/green alligator clips</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>After confirming that each point is soldered sufficiently and wired to the correct pin on your USB &lt;-&gt; Serial programmer, turn the dedicated power supply on and you should be able to flash.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">‚ùØ esptool.py --chip esp32 --port /dev/ttyUSB0 --baud <span class="m">921600</span> --before default_reset --after hard_reset write_flash -z --flash_mode dout --flash_freq 40m --flash_size detect 0x1000 bootloader_dout_40m.bin 0x8000 partitions.bin 0xe000 boot_app0.bin 0x10000 tasmota32solo1.bin
esptool.py v3.2
Serial port /dev/ttyUSB0
Connecting.....
&lt;...&gt;
Stub running...
Changing baud rate to <span class="m">921600</span>
Changed.
Configuring flash size...
Auto-detected Flash size: 4MB
Flash will be erased from 0x00001000 to 0x00004fff...
Flash will be erased from 0x00008000 to 0x00008fff...
Flash will be erased from 0x0000e000 to 0x0000ffff...
Flash will be erased from 0x00010000 to 0x00157fff...
Compressed <span class="m">15536</span> bytes to 10862...
Wrote <span class="m">15536</span> bytes <span class="o">(</span><span class="m">10862</span> compressed<span class="o">)</span> at 0x00001000 in 0.4 seconds <span class="o">(</span>effective 353.8 kbit/s<span class="o">)</span>...
&lt;...&gt;
Hash of data verified.

Leaving...
Hard resetting via RTS pin...
</code></pre></td></tr></table>
</div>
</div><p>Turn off the dedicated 5V supply and desolder the <code>GPIO0</code> wire and the <code>3V3</code> &lt;-&gt; <code>EN</code> jumper.
Leave the <code>RX</code>, <code>TX</code>, and <code>GND</code> wires in place so you can easily check the boot logs to confirm Tasmota flashed OK:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">‚ùØ screen /dev/ttyUSB0 <span class="m">115200</span>
ets Jun  <span class="m">8</span> <span class="m">2016</span> 00:22:57

rst:0x1 <span class="o">(</span>POWERON_RESET<span class="o">)</span>,boot:0x13 <span class="o">(</span>SPI_FAST_FLASH_BOOT<span class="o">)</span>
configsip: 0, SPIWP:0xee
clk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x00
mode:DOUT, clock div:2
load:0x3fff0030,len:184
load:0x40078000,len:12352
load:0x40080400,len:2912
entry 0x400805c4

00:00:00.002-228/73 HDW: ESP32-S0WD-OEM 
./components/esp_littlefs/src/littlefs/lfs.c:1071:error: Corrupted dir pair at <span class="o">{</span>0x0, 0x1<span class="o">}</span>
00:00:00.777-231/73 UFS: FlashFS mounted with <span class="m">312</span> kB free
00:00:00.782-231/73 CFG: Use defaults
00:00:00.893 QPC: Reset
00:00:00.941 BRY: Berry initialized, RAM <span class="nv">used</span><span class="o">=</span><span class="m">3849</span>
00:00:00.950 BRY: no <span class="s1">&#39;preinit.be&#39;</span>
00:00:00.963 Project tasmota - Tasmota Version 10.1.0<span class="o">(</span>tasmota<span class="o">)</span>-2_0_1_1<span class="o">(</span>2021-12-08T14:50:34<span class="o">)</span>
00:00:00.984 BRY: no <span class="s1">&#39;autoexec.be&#39;</span>
00:00:00.243 WIF: WifiManager active <span class="k">for</span> <span class="m">3</span> minutes
00:00:01.200 HTP: Web server active on tasmota-197907-6407 with IP address 192.168.4.1

</code></pre></td></tr></table>
</div>
</div><p>After confirming a successful flash/boot, you can continue to configure Tasmota via the serial console or just power off and de-solder all wires and finish configuration after you re-assemble.</p>
<h2 id="templates">Templates</h2>
<p>The ESP32 controls the lamp via 3 GPIO pins:</p>
<ul>
<li><code>GPIO04</code>: Global light enable/disable.</li>
<li><code>GPIO19</code>: Cold White channel</li>
<li><code>GPIO21</code>: Warm White channel</li>
</ul>
<p>Irrespective of what the WW or CW channel are doing, there will be no light if <code>GPIO4</code> is not high.
This means you have two choices for how to configure the GPIO.</p>
<p>Tasmota will disable both <code>GPIO19</code> and <code>GPIO21</code> when the light is switched off so there really is no need for independent control via <code>GPIO4</code>.
This template keeps <code>GPIO4</code> high and relies on Tasmota setting  to fully off to shut the light off.</p>
<p>Most people should use this template.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span><span class="nt">&#34;NAME&#34;</span><span class="p">:</span><span class="s2">&#34;Mijia Desk Lamp 1S (MJGJD02YL)&#34;</span><span class="p">,</span><span class="nt">&#34;GPIO&#34;</span><span class="p">:[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">3840</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">416</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">417</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span><span class="nt">&#34;FLAG&#34;</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="nt">&#34;BASE&#34;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="nt">&#34;CMND&#34;</span><span class="p">:</span><span class="s2">&#34;DimmerRange 45,255&#34;</span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>If, for some reason, you want to control the global on/off (<code>GPIO04</code>) independently of the WW/CW channels, use this template:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span><span class="nt">&#34;NAME&#34;</span><span class="p">:</span><span class="s2">&#34;Mijia Desk Lamp 1S (MJGJD02YL)&#34;</span><span class="p">,</span><span class="nt">&#34;GPIO&#34;</span><span class="p">:[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">224</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">416</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">417</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span><span class="nt">&#34;FLAG&#34;</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="nt">&#34;BASE&#34;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="nt">&#34;CMND&#34;</span><span class="p">:</span><span class="s2">&#34;DimmerRange 45,255&#34;</span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>If you do not need dimmer control and only need full on/off control, you can adjust the module so <code>GPIO{04,19,21}</code> are always high, low or simple on/off outputs by configuring them to be of type <code>Relay</code> instead of <code>PWM</code> outputs.</p>
<h3 id="dimmer-range">Dimmer Range</h3>
<p>In testing, extremely low brightness values for both the WW and CW channel had some undesirable behavior:</p>
<ul>
<li>Values lower than ~30 didn&rsquo;t light at all</li>
<li>Values between 30-35 caused unpleasant flicker</li>
<li>Values lower than ~40 would also cause flicker when attempting to light the WW <em>and</em> CW channels together</li>
</ul>
<p>For this reason, a <code>DimmerRange</code> of 45-255 is suggested.
Tasmota will let you dim the light as low as possible without flicker.</p>
<p>Your lamp, eyes and needs will differ so feel free to see if a lower <code>dimmer</code> value will work for you by unlocking the full dimmer range with <code>DimmerRange 0,255</code> and then playing with the <code>ct</code> and <code>dimmer</code> commands to find the lowest tolerable brightness for your needs.</p>
<p>That is why you see the <code>DimmerRange 45,255</code> command in the above templates.</p>
<h3 id="pcbic-markings">PCB/IC Markings</h3>
<p>Some of the interesting ICs and PCB markings</p>
<h4 id="lamp">Lamp</h4>
<ul>
<li>PCB is labeled <code>Yeelight Spider 1S V06</code>, <code>20210714 by XJD</code>, <code>94V-0</code>,  <code>Y Y21M09D13</code>, <code>JUl 7.820.0874-1</code></li>
<li>PCB has a QR code / sticker with <code>WF-E32-RWY1</code>, <code>Spider1S</code>, and the device mac address</li>
<li><code>SGM4065</code>: <a href="https://www.sg-micro.de/show-product-611.html" target="_blank" rel="noopener noreffer">Over-Voltage Protection IC and Li+ Charger Front-End Protection IC with LDO Mode</a></li>
<li>Some DFN-10 package that is marked with either <code>WRDPA</code> or <code>WRQPA</code> or <code>WR0PA</code>. It&rsquo;s a little hard to tell as the markings are super faint and I can&rsquo;t get them super clear even with high contrast / inverted color image filters. There are several of them with identical circuitry through the length of the board so this IC is some sort of pwm dimmable constant current LED driver.</li>
<li><code>ESP32-D0WD</code>: the star of the show</li>
<li><code>GD25Q32(B)</code>: a 4096 kB SPI flash chip</li>
<li>The lamp body is marked with <code>CMIT ID: 2021DP11423</code></li>
</ul>
<h4 id="remote">Remote</h4>
<ul>
<li>PCB labeled with <code>100-P806D1-1B-A1</code>, <code>Yeelight Spider 1S RC Board V02</code>, <code>20210716 by XJD</code></li>
<li><code>MHCB07P</code>. This is marked on the tiny BTLE module inside the remote. Not too many search <a href="https://twitter.com/simransingh931/status/1418120923568246786" target="_blank" rel="noopener noreffer">results</a> show <a href="https://www.ec.ust.hk/hackathon/2021/document/xiaomi_0319_eng.pdf" target="_blank" rel="noopener noreffer">up</a>.</li>
<li><code>CMIT ID: 2020DP3172(M)</code></li>
</ul>
<h2 id="mugjd01yl">MUGJD01YL</h2>
<p><figure >

    
        
    

    

    <figcaption>
        
        <p>
        Product details for the lamp that can&#39;t be converted to run Tasmota.
        
            Courtesy of @htvekov
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The PCB is held in the tube with similar plastic &#39;sleds&#39;. They are secured with screws rather than heatstake so they are easier to remove. The move to heatstake in the revised edition was likely to reduce costs.
        
            Courtesy of @htvekov
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        
        
            Courtesy of @htvekov
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        
        
            Courtesy of @htvekov
        
        </p> 
    </figcaption>
    
</figure>

</p>
]]></description></item><item><title>Fixing Home Assistant discovery with Tasmota on the Treatlife DS03</title><link>https://karlquinsland.com/treatlife-ds03-tasmota-autoconfig-with-homeassistant/</link><pubDate>Wed, 12 May 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/treatlife-ds03-tasmota-autoconfig-with-homeassistant/</guid><description><![CDATA[<p><strong>UPDATE:</strong> (2021-10-22): Tasmota 9.5.0 has been superseded by the new <a href="https://github.com/arendst/Tasmota/releases/tag/v10.0.0" target="_blank" rel="noopener noreffer">Tasmota 10.0.0 release</a>. This release works perfectly with the rules/automation outlined below; you no longer need to avoid the problematic 9.5 release with the DS03. I am extremely grateful to every one of the people that contributes to the Tasmota project to keep it improving!</p>
<p><del><strong>UPDATE:</strong> (2021-09-19): Multiple have gotten in touch with me seeking some support with this post. At present, there is a <a href="https://github.com/arendst/Tasmota/issues/12684#event-5035253885" target="_blank" rel="noopener noreffer">bug</a> with the Tasmota 9.5.0 release which breaks the automation outlined below. If you are having trouble getting the steps below to work <strong><em>either use Tasmota 9.4 or the latest development release of tasmota 9.5 if you&rsquo;re going to continue on with this post!</em></strong></del></p>
<hr>
<p>The Treatlife DS03 is one of only a few Tasmota compatible ceiling fan controllers available in the US. It&rsquo;s internal architecture splits the task of dimming the lights and switching the fan speed electronics from communicating over the network.</p>
<p>A very resource constrained ESP8266 module handles the network comms while a dedicated microcontroller running it&rsquo;s own software manages the user-facing buttons/indicator-lights as well as dimming the light and adjusting the fan speed. The two components communicate over a simple UART.</p>
<p>This is a totally reasonable way to build such a device, but for reasons that I don&rsquo;t fully understand, Tasmota does not publish a completely functional <a href="https://www.home-assistant.io/docs/mqtt/discovery/" target="_blank" rel="noopener noreffer">auto-configuration</a> payload for Home Assistant.</p>
<p>Home Assistant automatically discovers the full light/dimmer capabilities of the DS03, but for some reason does not see that the DS03 is capable of running a fan at 4 different speeds; Home Assistant only allows for turning the fan on/off.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The default auto-configuration leads Home Assistant to believe the fan can only be switched on/off.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>The <a href="https://templates.blakadder.com/treatlife_DS03.html" target="_blank" rel="noopener noreffer">existing</a> guides on <a href="https://www.digiblur.com/2020/07/the-tasmota-fan-controller-ive-been.html" target="_blank" rel="noopener noreffer">how to flash the device</a> with Tasmota and integrate it with Home Assistant all work around this limitation by <em><em>manually</em></em> configuring Home Assistant to see the device as a multi-speed fan ü§¶.</p>
<p>I&rsquo;m not a huge fan of doing things manually, especially when there&rsquo;s a well documented and robust protocol designed to make manual configuration unnecessary! Why ignore the almost completely working auto-configuration in favor of manual configuration? Why not just fix the auto-config payload so Home Assistant exposes the full functionality of the device?</p>
<p>Both of the above guides were written long before <a href="https://www.home-assistant.io/blog/2021/03/03/release-20213/#fan-speeds-100" target="_blank" rel="noopener noreffer">Home Assistant gained support</a> for fans with more than 3 speeds so even if I were to configure Home Assistant with a copy their example YAML, I&rsquo;d <em>still</em> be missing the ability to control the 4th speed!</p>
<h2 id="how">How</h2>
<p>In short, Tasmota supports some basic scripting, called <a href="https://tasmota.github.io/docs/Rules/" target="_blank" rel="noopener noreffer">rules</a>. They work exactly as you&rsquo;re thinking: On <code>$someEvent</code> do <a href="https://tasmota.github.io/docs/Commands/" target="_blank" rel="noopener noreffer"><code>$someAction</code></a>. One of the actions allows the Tasmota device to publish a message to a MQTT topic. I&rsquo;m going to have the DS03 broadcast a <em>proper</em> auto-configuration message to Home Assistant.</p>
<p>The technique is basically the same one outlined in <a href="https://blakadder.com/pir-in-tasmota-integration/" target="_blank" rel="noopener noreffer">this</a> article, but I&rsquo;m posting this to document a few of the subtle differences in my approach.</p>
<p>I&rsquo;ll assume that you&rsquo;ve successfully flashed your DS03 with Tasmota and have already configured the module and issued the necessary <code>ledtable</code> commands. You will also need the native <a href="https://www.home-assistant.io/integrations/tasmota/" target="_blank" rel="noopener noreffer">Tasmota</a> integration installed.</p>
<p>If you&rsquo;re following either the blakadder or digiblur guides linked above, stop at the step where you&rsquo;re meant to configure <code>rule1</code>.</p>
<p>Issue a slightly modified rule:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Rule1 on TuyaReceived#Data=55AA03070005030400010016 do publish2 stat/%topic%/speed 25 endon
    on TuyaReceived#Data=55AA03070005030400010117 do publish2 stat/%topic%/speed 50 endon
    on TuyaReceived#Data=55AA03070005030400010218 do publish2 stat/%topic%/speed 75 endon
    on TuyaReceived#Data=55AA03070005030400010319 do publish2 stat/%topic%/speed 100 endon
</code></pre></td></tr></table>
</div>
</div><p>This tells Tasmota to publish an integer speed (25,50,75,100) when it receives a specific packet from the dedicated MCU over th UART.</p>
<p>Then, issue a second rule to actually publish the configuration data:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">rule2 on SetOption19#Data=OFF do publish2 homeassistant/fan/%macaddr%/config {&#34;uniq_id&#34;:&#34;AABBCC&#34;,&#34;~&#34;:&#34;%topic%/POWER1&#34;,&#34;cmd_t&#34;:&#34;cmnd/~&#34;,&#34;pl_off&#34;:&#34;OFF&#34;,&#34;pl_on&#34;:&#34;ON&#34;,&#34;stat_t&#34;:&#34;stat/~&#34;,&#34;avty_t&#34;:&#34;tele/%topic%/LWT&#34;,&#34;pl_avail&#34;:&#34;Online&#34;,&#34;pl_not_avail&#34;:&#34;Offline&#34;,&#34;pct_cmd_t&#34;:&#34;cmnd/%topic%/tuyasend4&#34;,&#34;pct_cmd_tpl&#34;:&#34;{%set v=value|int%}{%if v&lt;=25%}3,0{%elif v&lt;=50%}3,1{%elif v&lt;=75%}3,2{%elif v&lt;=100%}3,3{%endif%}&#34;,&#34;pct_stat_t&#34;:&#34;stat/%topic%/speed&#34;,&#34;dev&#34;:{&#34;cns&#34;:[[&#34;mac&#34;,&#34;%macaddr%&#34;]]}} endon
</code></pre></td></tr></table>
</div>
</div><p><strong>Note:</strong> You&rsquo;ll probably want to modify the above payload so the occurrences of the placeholder string <code>AABBCC</code> are replaced with the last 6 characters of your own device&rsquo;s MAC address!</p>
<p>For readability, here&rsquo;s the unminified JSON:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&#34;uniq_id&#34;</span><span class="p">:</span> <span class="s2">&#34;AABBCC&#34;</span><span class="p">,</span>
  <span class="nt">&#34;~&#34;</span><span class="p">:</span><span class="s2">&#34;%topic%/POWER1&#34;</span><span class="p">,</span>
  <span class="nt">&#34;cmd_t&#34;</span><span class="p">:</span> <span class="s2">&#34;cmnd/~&#34;</span><span class="p">,</span>
  <span class="nt">&#34;pl_off&#34;</span><span class="p">:</span> <span class="s2">&#34;OFF&#34;</span><span class="p">,</span>
  <span class="nt">&#34;pl_on&#34;</span><span class="p">:</span> <span class="s2">&#34;ON&#34;</span><span class="p">,</span>
  <span class="nt">&#34;stat_t&#34;</span><span class="p">:</span> <span class="s2">&#34;stat/~&#34;</span><span class="p">,</span>
  <span class="nt">&#34;avty_t&#34;</span><span class="p">:</span> <span class="s2">&#34;tele/%topic%/LWT&#34;</span><span class="p">,</span>
  <span class="nt">&#34;pl_avail&#34;</span><span class="p">:</span> <span class="s2">&#34;Online&#34;</span><span class="p">,</span>
  <span class="nt">&#34;pl_not_avail&#34;</span><span class="p">:</span> <span class="s2">&#34;Offline&#34;</span><span class="p">,</span>
  <span class="nt">&#34;pct_cmd_t&#34;</span><span class="p">:</span> <span class="s2">&#34;cmnd/%topic%/tuyasend4&#34;</span><span class="p">,</span>
  <span class="nt">&#34;pct_cmd_tpl&#34;</span><span class="p">:</span> <span class="s2">&#34;{%set v=value|int%}{%if v&lt;=25%}3,0{%elif v&lt;=50%}3,1{%elif v&lt;=75%}3,2{%elif v&lt;=100%}3,3{%endif%}&#34;</span><span class="p">,</span>
  <span class="nt">&#34;pct_stat_t&#34;</span><span class="p">:</span> <span class="s2">&#34;stat/%topic%/speed&#34;</span><span class="p">,</span>
  <span class="nt">&#34;dev&#34;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&#34;cns&#34;</span><span class="p">:</span> <span class="p">[</span>
      <span class="p">[</span>
        <span class="s2">&#34;mac&#34;</span><span class="p">,</span>
        <span class="s2">&#34;%macaddr%&#34;</span>
      <span class="p">]</span>
    <span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p><strong>Note:</strong> The <code>dev</code> portion of the payload is the <a href="https://www.home-assistant.io/integrations/fan.mqtt/#device" target="_blank" rel="noopener noreffer">magic that convinces Home Assistant to combine the multiple entities under once device</a>. Without that portion of the document, you will still have a properly configured DS03, but it will exist as an &lsquo;orphaned&rsquo; entity that belongs to no device!</p>
<p>All that&rsquo;s left is to enable <code>rule2</code> and then trigger it:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">rule2 1
so19 0
</code></pre></td></tr></table>
</div>
</div><p>Altogether, It&rsquo;ll look something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">18:23:54.140 CMD: Rule1 on TuyaReceived#Data=55AA03070005030400010016 do publish2 stat/%topic%/speed 25 endon on TuyaReceived#Data=55AA03070005030400010117 do publish2 stat/%topic%/speed 50 endon on TuyaReceived#Data=55AA03070005030400010218 do publish2 stat/%topic%/speed 75 endon on TuyaReceived#Data=55AA03070005030400010319 do publish2 stat/%topic%/speed 100 endon
18:23:54.149 RUL: Stored uncompressed, would compress from 344 to 98 (-72%)
18:23:54.155 MQT: stat/living_room_ceiling_fan/RESULT = {&#34;Rule1&#34;:{&#34;State&#34;:&#34;ON&#34;,&#34;Once&#34;:&#34;OFF&#34;,&#34;StopOnError&#34;:&#34;OFF&#34;,&#34;Length&#34;:344,&#34;Free&#34;:167,&#34;Rules&#34;:&#34;on TuyaReceived#Data=55AA03070005030400010016 do publish2 stat/%topic%/speed 25 endon on TuyaReceived#Data=55AA03070005030400010117 do publish2 stat/%topic%/speed 50 endon on TuyaReceived#Data=55AA03070005030400010218 do publish2 stat/%topic%/speed 75 endon on TuyaReceived#Data=55AA03070005030400010319 do publish2 stat/%topic%/speed 100 endon&#34;}}

18:24:05.061 CMD: rule2 on SetOption19#Data=OFF do publish2 homeassistant/fan/%macaddr%/config {&#34;uniq_id&#34;:&#34;AABBCC&#34;,&#34;~&#34;:&#34;%topic%/POWER1&#34;,&#34;cmd_t&#34;:&#34;cmnd/~&#34;,&#34;pl_off&#34;:&#34;OFF&#34;,&#34;pl_on&#34;:&#34;ON&#34;,&#34;stat_t&#34;:&#34;stat/~&#34;,&#34;avty_t&#34;:&#34;tele/%topic%/LWT&#34;,&#34;pl_avail&#34;:&#34;Online&#34;,&#34;pl_not_avail&#34;:&#34;Offline&#34;,&#34;pct_cmd_t&#34;:&#34;cmnd/%topic%/tuyasend4&#34;,&#34;pct_cmd_tpl&#34;:&#34;{%set v=value|int%}{%if v&lt;=25%}3,0{%elif v&lt;=50%}3,1{%elif v&lt;=75%}3,2{%elif v&lt;=100%}3,3{%endif%}&#34;,&#34;pct_stat_t&#34;:&#34;stat/%topic%/speed&#34;,&#34;dev&#34;:{&#34;cns&#34;:[[&#34;mac&#34;,&#34;%macaddr%&#34;]]}} endon
18:24:05.093 RUL: Stored uncompressed, would compress from 473 to 351 (-26%)
18:24:05.100 MQT: stat/living_room_ceiling_fan/RESULT = {&#34;Rule2&#34;:{&#34;State&#34;:&#34;OFF&#34;,&#34;Once&#34;:&#34;OFF&#34;,&#34;StopOnError&#34;:&#34;OFF&#34;,&#34;Length&#34;:473,&#34;Free&#34;:38,&#34;Rules&#34;:&#34;on SetOption19#Data=OFF do publish2 homeassistant/fan/%macaddr%/config {\&#34;uniq_id\&#34;:\&#34;AABBCC\&#34;,\&#34;~\&#34;:\&#34;%topic%/POWER1\&#34;,\&#34;cmd_t\&#34;:\&#34;cmnd/~\&#34;,\&#34;pl_off\&#34;:\&#34;OFF\&#34;,\&#34;pl_on\&#34;:\&#34;ON\&#34;,\&#34;stat_t\&#34;:\&#34;stat/~\&#34;,\&#34;avty_t\&#34;:\&#34;tele/%topic%/LWT\&#34;,\&#34;pl_avail\&#34;:\&#34;Online\&#34;,\&#34;pl_not_avail\&#34;:\&#34;Offline\&#34;,\&#34;pct_cmd_t\&#34;:\&#34;cmnd/%topic%/tuyasend4\&#34;,\&#34;pct_cmd_tpl\&#34;:\&#34;{%set v=value|int%}{%if v&lt;=25%}3,0{%elif v&lt;=50%}3,1{%elif v&lt;=75%}3,2{%elif v&lt;=100%}3,3{%endif%}\&#34;,\&#34;pct_stat_t\&#34;:\&#34;stat/%topic%/speed\&#34;,\&#34;dev\&#34;:{\&#34;cns\&#34;:[[\&#34;mac\&#34;,\&#34;%macaddr%\&#34;]]}} endon&#34;}}
18:24:07.494 CMD: rule2 1
18:24:07.503 MQT: stat/living_room_ceiling_fan/RESULT = {&#34;Rule2&#34;:{&#34;State&#34;:&#34;ON&#34;,&#34;Once&#34;:&#34;OFF&#34;,&#34;StopOnError&#34;:&#34;OFF&#34;,&#34;Length&#34;:473,&#34;Free&#34;:38,&#34;Rules&#34;:&#34;on SetOption19#Data=OFF do publish2 homeassistant/fan/%macaddr%/config {\&#34;uniq_id\&#34;:\&#34;AABBCC\&#34;,\&#34;~\&#34;:\&#34;%topic%/POWER1\&#34;,\&#34;cmd_t\&#34;:\&#34;cmnd/~\&#34;,\&#34;pl_off\&#34;:\&#34;OFF\&#34;,\&#34;pl_on\&#34;:\&#34;ON\&#34;,\&#34;stat_t\&#34;:\&#34;stat/~\&#34;,\&#34;avty_t\&#34;:\&#34;tele/%topic%/LWT\&#34;,\&#34;pl_avail\&#34;:\&#34;Online\&#34;,\&#34;pl_not_avail\&#34;:\&#34;Offline\&#34;,\&#34;pct_cmd_t\&#34;:\&#34;cmnd/%topic%/tuyasend4\&#34;,\&#34;pct_cmd_tpl\&#34;:\&#34;{%set v=value|int%}{%if v&lt;=25%}3,0{%elif v&lt;=50%}3,1{%elif v&lt;=75%}3,2{%elif v&lt;=100%}3,3{%endif%}\&#34;,\&#34;pct_stat_t\&#34;:\&#34;stat/%topic%/speed\&#34;,\&#34;dev\&#34;:{\&#34;cns\&#34;:[[\&#34;mac\&#34;,\&#34;%macaddr%\&#34;]]}} endon&#34;}}

18:24:10.362 CMD: so19 0
18:24:10.369 MQT: stat/living_room_ceiling_fan/RESULT = {&#34;SetOption19&#34;:&#34;OFF&#34;}
18:24:10.414 RUL: SETOPTION19#DATA=OFF performs &#34;publish2 homeassistant/fan/DDEEFFAABBCC/config {&#34;uniq_id&#34;:&#34;AABBCC&#34;,&#34;~&#34;:&#34;living_room_ceiling_...
18:24:10.421 MQT: home Assistant/fan/DDEEFFAABBCC/config = {&#34;uniq_id&#34;:&#34;AABBCC&#34;,&#34;~&#34;:&#34;living_room_ceiling_fan/POWER1&#34;,&#34;cmd_t&#34;:&#34;cmnd/~&#34;,&#34;pl_off&#34;:&#34;OFF&#34;,&#34;pl_on&#34;:&#34;ON&#34;,&#34;stat_t&#34;:&#34;stat/~&#34;,&#34;avty_t&#34;:&#34;tele/living_room_ceiling_fan/LWT&#34;,&#34;pl_avail&#34;:&#34;Online&#34;,&#34;pl_not_avail&#34;:&#34;Offline&#34;,&#34;pct_cmd_t&#34;:&#34;cmnd/living_room_ceiling_fan/tuyasend4&#34;,&#34;pct_cmd_tpl&#34;:&#34;{%set v=value|int%}{%if v&lt;=25%}3,0{%elif v&lt;=50%}3,1{%elif v&lt;=75%}3,2{%elif v&lt;=100%}3,3{%endif%}&#34;,&#34;pct_stat_t&#34;:&#34;stat/living_room_ceiling_fan/speed&#34;,&#34;dev&#34;:{&#34;cns&#34;:[[&#34;mac&#34;,&#34;DDEEFFAABBCC&#34;]]}} (retained)
18:24:10.509 LOG: Home Assistant MQTT Discovery disabled.
</code></pre></td></tr></table>
</div>
</div><p>If everything worked correctly, Home Assistant should now show a single device in the <a href="https://developers.home-assistant.io/docs/device_registry_index/" target="_blank" rel="noopener noreffer">device registry</a> with a dimmable light entity and a variable-speed fan entity!</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The DS03 device entity after the variable speed configuration document is received by Home Assistant.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p><strong>Note:</strong> Depending on weather or not Home Assistant has previously &lsquo;seen&rsquo; your DS03 via the native native <a href="https://www.home-assistant.io/integrations/tasmota/" target="_blank" rel="noopener noreffer">Tasmota</a> integration, you may see <em>three</em> entities on the device page; the light/dimmer, the switch/fan and the variable speed fan. Just disable the &lsquo;basic&rsquo; fan switch entity that Tasmota publishes as discussed below.</p>
<h4 id="updating-a-ds03-thats-already-integrated-with-home-assistant">Updating a DS03 that&rsquo;s already integrated with Home Assistant</h4>
<p>If you&rsquo;ve already got a DS03 that&rsquo;s integrated with Home Assistant, you can still get the device to properly auto-configure. Just remove the YAML configuration for both the light and fan entities.</p>
<p>You will likely need to restart HA to make sure all traces of the manual configurations are removed from the <a href="https://developers.home-assistant.io/docs/entity_registry_index/" target="_blank" rel="noopener noreffer">entity registry</a>.</p>
<p>Once Home Assistant has forgotten all about the manual entities and the native <a href="https://www.home-assistant.io/integrations/tasmota/" target="_blank" rel="noopener noreffer">Tasmota</a> integration in installed, all of the MQTT-connected Tasmota devices <em>should</em> get picked up and configured in Home Assistant. At this point, you should have the single device with two entities; dimmable light and binary-switch fan as shown in the first picture on this post.</p>
<p>If your DS03 was already configured with Home Assistant via the Tasmota integration, just disable the simple switch entity that Tasmota configures Home Assistant with:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Toggle &#39;Enable entity&#39; off to hide the basic binary switch that Tasmota configured Home Assistant with.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>After disabling the switch/fan entity, trigger <code>rule2</code> again and refresh the device entity page in Home Assistant to confirm that the device now has a <code>MQTT Fan</code> entity if it wasn&rsquo;t there already.</p>
<p>Enjoy :)</p>
<h4 id="why-use-setoption19off-as-the-trigger">Why use <code>SetOption19:OFF</code> as the trigger?</h4>
<p>I run my MQTT broker on Kubernetes and do not have any persistance configured for that pod. This means that regardless of what retention settings a message was published with, every message on every topic is wiped out whenever the MQTT broker pod is rescheduled. As a result almost every device that Home Assistant monitors or controls via MQTT drifts into an <code>Unavailable</code> state whenever I do any maintenance on my K8s cluster.</p>
<p>I&rsquo;m not the <a href="https://community.home-assistant.io/t/tasmota-going-offline-at-random-times/116299" target="_blank" rel="noopener noreffer">only one</a> with <a href="https://community.home-assistant.io/t/sonoff-tasmota-started-regularly-showing-unavailable-on-home-assistant/90157/83" target="_blank" rel="noopener noreffer">this issue</a>, even if the cause is different.</p>
<p>To get around this, I have a small automation that pokes the Tasmota devices every hour and when Home Assistant starts up. Since the Home Assistant pod takes longer than the MQTT pod to initialize, having HA poke the devices on startup minimizes the time a given entity is <code>Unavailable</code> in HA.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">alias</span><span class="p">:</span><span class="w"> </span><span class="l">Tasmotas Announce</span><span class="w">
</span><span class="w"></span><span class="nt">description</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;Prevents devices from going Unavailable&#39;</span><span class="w">
</span><span class="w"></span><span class="nt">trigger</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">home Assistant</span><span class="w">
</span><span class="w">    </span><span class="nt">event</span><span class="p">:</span><span class="w"> </span><span class="l">start</span><span class="w">
</span><span class="w">  </span>- <span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">time_pattern</span><span class="w">
</span><span class="w">    </span><span class="nt">hours</span><span class="p">:</span><span class="w"> </span><span class="l">/1</span><span class="w">
</span><span class="w"></span><span class="nt">condition</span><span class="p">:</span><span class="w"> </span><span class="p">[]</span><span class="w">
</span><span class="w"></span><span class="nt">action</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="c"># For reasons that I don&#39;t understand, different tasmota devices seem to </span><span class="w">
</span><span class="w">  </span><span class="c">#     subscribe to a different group topic. cmnd/tas vs tas/cmnd</span><span class="w">
</span><span class="w">  </span><span class="c">##</span><span class="w">
</span><span class="w">  </span>- <span class="nt">service</span><span class="p">:</span><span class="w"> </span><span class="l">mqtt.publish</span><span class="w">
</span><span class="w">    </span><span class="nt">data</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">topic</span><span class="p">:</span><span class="w"> </span><span class="l">cmnd/tasmotas/SetOption19</span><span class="w">
</span><span class="w">      </span><span class="nt">payload</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;0&#39;</span><span class="w">
</span><span class="w">  </span>- <span class="nt">service</span><span class="p">:</span><span class="w"> </span><span class="l">mqtt.publish</span><span class="w">
</span><span class="w">    </span><span class="nt">data</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">topic</span><span class="p">:</span><span class="w"> </span><span class="l">tasmotas/cmnd/SetOption19</span><span class="w">
</span><span class="w">      </span><span class="nt">payload</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;0&#39;</span><span class="w">
</span><span class="w"></span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">single</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>You could probably work around this whole thing by changing the trigger for <code>rule2</code> to something like <code>on Mqtt#Connected publish2</code>. Or storing the configuration payload as a <a href="https://tasmota.github.io/docs/Rules/#rule-variables" target="_blank" rel="noopener noreffer">variable</a> so you could write multiple triggers for the same <code>publish2 %mem1%</code> action ü§î.</p>
<h3 id="side-note-rules-crash">Side note: Rules Crash!</h3>
<p>While developing the configuration payload, I was able to reliably crash the ESP8266 module causing Tasmota to reboot. The crash / reboot symptoms are pretty similar to those outlined <a href="https://tasmota.github.io/docs/Troubleshooting/#running-out-of-ram" target="_blank" rel="noopener noreffer">here</a> so I assume that even though the rules &ldquo;fit&rdquo;, something about how the rule was parsed or the actions the rule drove caused the ESP to run out of RAM.</p>
<p>When I say &ldquo;fit&rdquo; I mean that I&rsquo;d see lines like this in the console after configuring a test payload for <code>rule2</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">MQT: stat/living_room_ceiling_fan/RESULT = {&#34;Rule2&#34;:{&#34;State&#34;:&#34;ON&#34;,...&#34;Free&#34;:9,&#34;Rules&#34;:&#34;on ... endon&#34;}}
</code></pre></td></tr></table>
</div>
</div><p>I could technically make the rule <code>9</code> characters longer and it&rsquo;d still fit&hellip; right?</p>
<p>Not quite. Looking at the result from issuing the <code>Rule1</code> command, it was clear that while <code>rule2</code> would have an absolute maximum length of 511 characters (<code>&quot;Length&quot;:344,&quot;Free&quot;:167</code>; 344+167=511) there was also a less well defined soft limit on rule length.</p>
<p>For some versions of my <code>rule2</code> payload, I was able to solve the crashing just by switching to the &lsquo;lite&rsquo; version of Tasmota. While the &lsquo;lite&rsquo; version of Tasmota does work with Tuya MCU (<code>USE_TUYA_MCU</code>), it <a href="https://github.com/arendst/Tasmota/blob/v9.4.0/BUILDS.md" target="_blank" rel="noopener noreffer">does <em>not</em> support</a> Home Assistant configuration (<code>USE_HOME_ASSISTANT</code>)!</p>
<p>After flashing back to the &lsquo;regular&rsquo; Tasmota build, I set out trying to compress the <code>rule2</code> payload as much as possible so that it would still work <em>and</em> not reliably crash the ESP8266 on the DS03.</p>
<p>After testing several things, I managed to get a working <code>rule2</code> that didn&rsquo;t reliably crash when triggered.</p>
]]></description></item><item><title>Two Tasmota rules</title><link>https://karlquinsland.com/two-tasmota-rules/</link><pubDate>Fri, 20 Nov 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/two-tasmota-rules/</guid><description><![CDATA[<p><a href="https://tasmota.github.io/" target="_blank" rel="noopener noreffer">Tasmota</a> is an incredibly powerful alternative/open source firmware for the ever popular Espressif family of WiFi equipped microcontrollers.
This does not need to be another post espousing it&rsquo;s many awesome qualities, so just trust me on this; Tasmota is AWESOME.</p>
<p>Tasmota supports user configurable <a href="https://tasmota.github.io/docs/Rules/" target="_blank" rel="noopener noreffer">rules</a> which are simple commands wired into various device triggers.
In short; a device running Tasmota gains some autonomy to react to events without needing to report the event to, and wait for commands from, a remote server.</p>
<p>I find the rules syntax to be a bit awkward and the list of practical examples feels like autodoc with a few practical examples sprinkled in.
I have <em>never</em> been able to craft a Tasmota rule without also consulting the list of <a href="https://tasmota.github.io/docs/Commands/" target="_blank" rel="noopener noreffer">commands</a>
and doing a few searches through the github issues looking for issues/questions similar to mine.</p>
<p>This post is a simple &ldquo;here&rsquo;s how i did it&rdquo; that I wish I had found when I needed to solve the problem.
Hopefully this will save you some trouble!</p>
<h3 id="mr-coffee">Mr. Coffee</h3>
<p>A $15 &lsquo;<a href="https://tasmota.github.io/docs/devices/Sonoff-Pow/" target="_blank" rel="noopener noreffer">smart relay</a>&rsquo; is all that&rsquo;s needed to turn a simple drip-over coffee maker into a remote-controllable coffee maker.
Immediately, you gain the ability to start brewing coffee in the morning from bed.
With a little extra integration work, start brewing coffee 10 minutes before your alarm is scheduled to go off. Simple quality of life improvement!</p>
<p>Every coffee maker has at least one safety interlock to disable the heating element if it gets too hot, but some have additional interlocks. Specifically,
my coffee maker has two more interlocks in series with the heating element; if the carafe is removed or the water tank is empty, the circuit is broken and
the heater immediately stops producing heat. From the perspective of the smart relay, the power consumption is either 0 Watts or a bit over 1100 Watts.</p>
<p>I was not comfortable using Home Assistant to monitor power consumption and then toggle the relay off after observing an interlock kick in.
If something happened to the WiFi connection or the MQTT server or Home Assistant, there&rsquo;s no way to disconnect power from the coffee maker; the relay will stay &lsquo;on&rsquo;.
If the interlock failed, somehow, the heating element would immediately begin pumping out heat when it <em>really</em> shouldn&rsquo;t be!</p>
<p>Writing a simple &ldquo;if power consumption drops below 1100 Watts, turn relay off&rdquo; rule would be enough, except there&rsquo;s no way to distinguish between the thermal interlock tripping
and the carafe being removed for a quick pour. The simple rule is incompatible with the extra interlocks; it will prematurely stop the brewing 100% of the time the carafe is removed.
If you want to pour a cup of coffee while it&rsquo;s still brewing, this is rather inconvenient.</p>
<p>Solution: give the user 30 seconds to return the carafe during brewing before turning the relay off.</p>
<p>From the perspective of the outlet, ignore any lulls in power consumption as long as they&rsquo;re shorter than 30 seconds. Otherwise, assume that an interlock <em>has</em> tripped.</p>
<p>This is implemented with two rules:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Rule1
    # When relay1 (heater) is turned on, activate rule2
    ON Power1#state=1 DO Rule2 1 ENDON

    # and deactivate rule2 when the heater is turned off
    ON Power1#state=0 DO Rule2 0 ENDON

    # When Timer1 expires, turn the heater off
    ON Rules#Timer=1 DO Power1 off ENDON

    # When the current used by the heating element rises above 1 Amp, disable Timer1
    ON Energy#Current&gt;1 DO RuleTimer1 0 ENDON

    # ... and enable rule 2
    ON Energy#Current&gt;1 DO Rule2 1 ENDON

Rule2
    # Wait for power use to drop to 0; start counting down
    ON Energy#Current&lt;.2 DO RuleTimer1 30 ENDON

    # and disable rule2 so the timer is not constantly reset
    ON Energy#Current&lt;.2 DO Rule2 0 ENDON
</code></pre></td></tr></table>
</div>
</div><p>I chose <code>.2</code> Amps as the trigger, but the logic works the exact same way with Power / Wattage.</p>
<h2 id="electric-kettle">Electric Kettle</h2>
<p>I wanted to detect when my electric kettle was done boiling the water so I could play a sound and flash the lights in whichever room I happened to be in at the time.
This is trivial to do with a &lsquo;<a href="https://tasmota.github.io/docs/devices/Sonoff-S31/" target="_blank" rel="noopener noreffer">smart outlet</a>&rsquo; and a <a href="https://www.home-assistant.io/integrations/binary_sensor.template/" target="_blank" rel="noopener noreffer">template sensor</a> in Home Assistant:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml">- <span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span><span class="w">  </span><span class="nt">sensors</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">kettle_running</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">friendly_name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Kettle Boiling&#34;</span><span class="w">
</span><span class="w">      </span><span class="c"># If the kettle is using more than 5w, assume its on / boiling water</span><span class="w">
</span><span class="w">      </span><span class="nt">icon_template</span><span class="p">:</span><span class="w"> </span><span class="p">&gt;-</span><span class="sd">
</span><span class="sd">        {% if states(&#39;sensor.kettle_energy_power&#39;) | float &gt; 5 %}
</span><span class="sd">          mdi:kettle-steam
</span><span class="sd">        {% else %}
</span><span class="sd">          mdi:kettle
</span><span class="sd">        {% endif %}</span><span class="w">        
</span><span class="w">      </span><span class="nt">value_template</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;{{states(&#39;sensor.kettle_energy_power&#39;) | float &gt; 5}}&#34;</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>Only problem, Tasmota only publishes the kettle&rsquo;s power once every 300 seconds. This means <code>sensor.kettle_energy_power</code> only gets updated every 300s which makes it really hard
to fire off a <em>timely</em> notification when the kettle is done.
The &lsquo;brute-force&rsquo; solution is to configure Tasmota to transmit the telemetry <a href="https://github.com/arendst/Tasmota/issues/2567" target="_blank" rel="noopener noreffer">continuously</a>.
Except there&rsquo;s no need for the Tasmota device on the kettle to be constantly informing Home Assistant that there&rsquo;s no power being used whenever the kettle is not on; my application only cares about the &lsquo;<a href="https://en.wikipedia.org/wiki/Signal_edge" target="_blank" rel="noopener noreffer">falling edge</a>&rsquo;.</p>
<p>Borrow the trigger from the <a href="#mr-coffee" rel="">Mr. Coffee</a> rule and shorten the <a href="https://tasmota.github.io/docs/Commands/#teleperiod" target="_blank" rel="noopener noreffer">telemetry period</a> only when the kettle
is consuming more than 1 Watt. Like the coffee maker, it&rsquo;s either consuming 0 Watts or about 1.1 Kilowatt.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Rule1
    on ENERGY#Power&gt;1 do Backlog TelePeriod 10; Rule2 1 endon

Rule2
    on ENERGY#Power=0 do Backlog TelePeriod 1; Rule2 0 endon
</code></pre></td></tr></table>
</div>
</div><p>As soon as the kettle starts using more than 1 Watt, configure Tasmota to publish its sensor data every 10 seconds.
I&rsquo;ll get notified that the water is boiling within 10s; much better than 300s!
Once the power consumption goes back down to 0, reset the telemetry update period and disable the rule.</p>
<p>The second rule must be disabled to prevent constant triggering of the rule when the kettle is not boiling.
Without the <code>Rule2 0</code>, the console/logs for the device would be full of statements like this repeating every few seconds:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">RUL: ENERGY#POWER&gt;1 performs &#34;TelePeriod 10&#34;
MQT: stat/tasmota_kettle/RESULT = {&#34;TelePeriod&#34;:10}
</code></pre></td></tr></table>
</div>
</div><p>Hope that helped!</p>
<hr>
<p><strong>EDIT:</strong> 2021-09-24: small typo fixes. Thanks for pointing them out :).</p>
]]></description></item></channel></rss>