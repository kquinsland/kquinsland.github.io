<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>esphome - Tag - karl</title><link>https://karlquinsland.com/tags/esphome/</link><description>esphome - Tag - karl</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 22 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://karlquinsland.com/tags/esphome/" rel="self" type="application/rss+xml"/><item><title>ESPHome for Sinilink PC remotes</title><link>https://karlquinsland.com/esphome-sinilink-pc-remotes/</link><pubDate>Sat, 22 Oct 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/esphome-sinilink-pc-remotes/</guid><description><![CDATA[<h1 id="pc-power-remote-control">PC (power) remote control</h1>
<p>While doing research for a potential project, I stumbled onto a device that fit&rsquo;s so squarely into that &ldquo;it&rsquo;s so simple and obvious, why didn&rsquo;t I think tof that?!&rdquo; category that I immediately placed an order for a few.</p>
<p>That device?</p>
<p>A simple WiFi equipped micro controller that gets wired between the power button on a PC and the motherboard.
This makes it possible to remotely control and monitor the power state of any PC!</p>
<p>I am using these devices in conjunction with my <a href="/hdmi-kvm-teardown-and-esphome/" rel="">previously integrated KVM switch</a> to automate turning hosts on/off as they are activated/deactivated on the KVM switch.</p>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>Note<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>There are <em>several</em> different types of device on Ali Express.
Most appear to use TuYa MCUs so it&rsquo;s not immediately clear if/how those devices can be converted to use ESPHome or not; buy those at your own risk.</p>
<p>The two Sinilink devices liked below are trivial to get working with ESPHome/Tasmota though!</p>
</div>
        </div>
    </div>
<ul>
<li><a href="https://templates.blakadder.com/sinilink_XY-WPCE.html" target="_blank" rel="noopener noreffer">Sinilink PCIe Computer Remote (XY-WPCE)</a></li>
<li><a href="https://templates.blakadder.com/sinilink_XY-WPCL.html" target="_blank" rel="noopener noreffer">Sinilink USB Computer Remote (XY-WPCL)</a></li>
</ul>
<p><figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>

</p>
<p>The PCI Express version is simpler to integrate with a PC as it uses the 3.3v power rails to determine when the PC is on.
The USB version does not have this luxury so power must be supplied via the DC barrel jack.
Additionally, the USB version is also wired series with the power LED(s) on the computer so the module can discern the PCs power state.</p>
<div class="details admonition question open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-question-circle fa-fw"></i>Why not just use Wake On Lan?<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>Yes, Home Assistant does have support for <a href="https://www.home-assistant.io/integrations/wake_on_lan/" target="_blank" rel="noopener noreffer">Wake On Lan</a> but I chose not to use it for a few reasons:</p>
<ul>
<li>
<p>Does not work across subnets. WoL uses a broadcast packet and routers tend to frown on forwarding those between subnets. As my HA instance runs inside of Kubernetes, it&rsquo;s going to be more than a little difficult to get the WoL packets out of the cluster!</p>
</li>
<li>
<p>Does not do status checking. The Sinilink modules have direct feedback about the state of the PC power.</p>
</li>
<li>
<p>Does not do shutdown. There is no WoL packet that can send a PC back to sleep!</p>
</li>
</ul>
</div>
        </div>
    </div>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Tip<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>If you use the PCI Express version and find that the module does not stay powered up while the PC is asleep/off, check your PC BIOS for <a href="https://superuser.com/questions/1074074/disadvantages-of-enabling-erp-in-bios" target="_blank" rel="noopener noreffer"><code>ErP</code> settings</a>.</p>
<p>I had to explicitly turn off ErP <em>and</em> permit the PC to wake from PCI-E devices before the 3.3v standby rail was activated.</p>
</div>
        </div>
    </div>
<h2 id="a-quick-detour-about-write_flash-errors">A quick detour about <code>write_flash</code> errors</h2>
<p>I don&rsquo;t see this error <em>often</em> but I do see it enough to warrant talking about.</p>
<p>I ordered 3 of the PCI Express <em>and</em> the USB version of the devices above.
Of the 6 devices I received, 3 didn&rsquo;t &ldquo;take&rdquo; the custom firmware.</p>
<p>Devices that have defects with the onboard flash will appear to be function when probed with <code>esptool.py</code> but will exhibit some sort of error when doing any <code>write_flash</code> operations.</p>
<p>The symptoms present like this</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># Note the baud rate; it&#39;s considerably slower than the default baud rate.</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Trying lower baud rates is a suggested &#39;fix&#39;.</span>
</span></span><span class="line"><span class="cl">❯ esptool.py -b <span class="m">19200</span> --port /dev/ttyUSB0 write_flash -fs 1MB -fm dout 0x0 ~/Downloads/tasmota-lite.bin
</span></span><span class="line"><span class="cl">esptool.py v3.3.1
</span></span><span class="line"><span class="cl">Serial port /dev/ttyUSB0
</span></span><span class="line"><span class="cl">Connecting...................
</span></span><span class="line"><span class="cl">Detecting chip type... Unsupported detection protocol, switching and trying again...
</span></span><span class="line"><span class="cl">Connecting...
</span></span><span class="line"><span class="cl">Detecting chip type... ESP8266
</span></span><span class="line"><span class="cl">Chip is ESP8285H16
</span></span><span class="line"><span class="cl">Features: WiFi, Embedded Flash
</span></span><span class="line"><span class="cl">Crystal is 26MHz
</span></span><span class="line"><span class="cl">MAC: e8:aa:bb:cc:dd:ee
</span></span><span class="line"><span class="cl">Uploading stub...
</span></span><span class="line"><span class="cl">Running stub...
</span></span><span class="line"><span class="cl">Stub running...
</span></span><span class="line"><span class="cl">Configuring flash size...
</span></span><span class="line"><span class="cl">Flash will be erased from 0x00000000 to 0x0007afff...
</span></span><span class="line"><span class="cl">Compressed <span class="m">501328</span> bytes to 358200...
</span></span><span class="line"><span class="cl">Wrote <span class="m">501328</span> bytes <span class="o">(</span><span class="m">358200</span> compressed<span class="o">)</span> at 0x00000000 in 188.8 seconds <span class="o">(</span>effective 21.2 kbit/s<span class="o">)</span>...
</span></span><span class="line"><span class="cl">File  md5: 693ff98fbada203ab23ced0650e45ab7
</span></span><span class="line"><span class="cl">Flash md5: 2a3e7abaf93800f4193d03a9da8c52fa
</span></span><span class="line"><span class="cl">MD5 of 0xFF is 36d49993e146cee00d35f8793084f71c
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">A fatal error occurred: MD5 of file does not match data in flash!
</span></span></code></pre></td></tr></table>
</div>
</div><p>and</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ esptool.py --port /dev/ttyUSB0 write_flash -fs 1MB -fm dout 0x0 ~/Downloads/tasmota-lite.bin
</span></span><span class="line"><span class="cl">esptool.py v3.3.1
</span></span><span class="line"><span class="cl">Serial port /dev/ttyUSB0
</span></span><span class="line"><span class="cl">Connecting...
</span></span><span class="line"><span class="cl">Detecting chip type... Unsupported detection protocol, switching and trying again...
</span></span><span class="line"><span class="cl">Connecting...
</span></span><span class="line"><span class="cl">Detecting chip type... ESP8266
</span></span><span class="line"><span class="cl">Chip is ESP8285H16
</span></span><span class="line"><span class="cl">Features: WiFi, Embedded Flash
</span></span><span class="line"><span class="cl">Crystal is 26MHz
</span></span><span class="line"><span class="cl">MAC: e8:aa:bb:cc:dd:ee
</span></span><span class="line"><span class="cl">Stub is already running. No upload is necessary.
</span></span><span class="line"><span class="cl">Configuring flash size...
</span></span><span class="line"><span class="cl">Flash will be erased from 0x00000000 to 0x0007afff...
</span></span><span class="line"><span class="cl">Compressed <span class="m">501328</span> bytes to 358200...
</span></span><span class="line"><span class="cl">Writing at 0x00075960... <span class="o">(</span><span class="m">100</span> %<span class="o">)</span>
</span></span><span class="line"><span class="cl">A fatal error occurred: Serial data stream stopped: Possible serial noise or corruption.
</span></span></code></pre></td></tr></table>
</div>
</div><p>There are a few &ldquo;fixes&rdquo; for this issue but none worked for me:</p>
<ul>
<li>Check for loose or fault connections.</li>
<li>Use a robust power supply</li>
<li>Try <code>write_flash_status</code> with <code>--non-volatile 0</code></li>
<li>Try a different USB &lt;-&gt; 232/TTL adapter</li>
</ul>
<p>I tried <em>all</em> of the above and nothing worked.</p>
<ul>
<li>I soldered wires directly to the modules instead of just inserting pins into the programming header.</li>
<li>I tried a <a href="/electronics-lab-enhanced-bench-psu/" rel="">power supply that can supply <em>considerably more</em> than</a> the ~200 ma needed to power/flash the chip.</li>
<li>I tried a few different USB ports and a few different USB &lt;-&gt; TTL adapters with both counterfeit and authentic FTDI chips.</li>
<li>I used <code>read_flash_status</code> and saw that the <code>--non-volatile</code> settings were already <code>0x0000</code>.</li>
</ul>
<p>None of the above worked for me.</p>
<p>While disappointing and frustrating, there&rsquo;s only one probable conclusion: there&rsquo;s a subtle defect in the flash memory that either wasn&rsquo;t noticed or checked for at the factory when the OEM firmware was flashed onto the devices.</p>
<p>I cut my losses and moved on.</p>
<h2 id="esphome-configurations">ESPHome configurations</h2>
<p>For SEO/Archival purposes, I have also uploaded a copy of the config to the <a href="https://github.com/esphome-devices/esphome-devices/pull/294" target="_blank" rel="noopener noreffer">esphome-devices.com</a> site.
<del>As of publishing <em>this</em> article, the PR is pending review.
If/When the page goes live, I&rsquo;ll update the link here.</del></p>
<div class="details admonition success open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-check-circle fa-fw"></i>Success<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">The pr is <a href="https://www.esphome-devices.com/devices/Sinilink-XY-WPCE" target="_blank" rel="noopener noreffer">LIVE</a>. Thanks to the super quick work of <a href="https://github.com/tekmaven" target="_blank" rel="noopener noreffer"><code>@tekmaven</code></a>!</div>
        </div>
    </div>
<p>The configurations there are bare-bones and cover <em>just</em> the basics required to get the GPIO working with ESPhome.</p>
<p>The configuration below is a bit more featured and is a lot closer to the versions that I use in production.
It features a &ldquo;pc power button lockout&rdquo; feature and more.</p>
<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>Warning<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">The code below will not compile &ldquo;as is&rdquo;.
All of the entities under the <code>packages:</code> heading are &ldquo;standard&rdquo; across all of my ESPHome configurations and are not included here.
Either remove them or substitute as needed to get something that works for <em>you</em>.</div>
        </div>
    </div>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span><span class="lnt">160
</span><span class="lnt">161
</span><span class="lnt">162
</span><span class="lnt">163
</span><span class="lnt">164
</span><span class="lnt">165
</span><span class="lnt">166
</span><span class="lnt">167
</span><span class="lnt">168
</span><span class="lnt">169
</span><span class="lnt">170
</span><span class="lnt">171
</span><span class="lnt">172
</span><span class="lnt">173
</span><span class="lnt">174
</span><span class="lnt">175
</span><span class="lnt">176
</span><span class="lnt">177
</span><span class="lnt">178
</span><span class="lnt">179
</span><span class="lnt">180
</span><span class="lnt">181
</span><span class="lnt">182
</span><span class="lnt">183
</span><span class="lnt">184
</span><span class="lnt">185
</span><span class="lnt">186
</span><span class="lnt">187
</span><span class="lnt">188
</span><span class="lnt">189
</span><span class="lnt">190
</span><span class="lnt">191
</span><span class="lnt">192
</span><span class="lnt">193
</span><span class="lnt">194
</span><span class="lnt">195
</span><span class="lnt">196
</span><span class="lnt">197
</span><span class="lnt">198
</span><span class="lnt">199
</span><span class="lnt">200
</span><span class="lnt">201
</span><span class="lnt">202
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">substitutions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Displayed in HA frontend</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">friendly_name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Desktop Power Control&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">friendly_name_short</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Desktop&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">hostname</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;desktop-power-control&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">esphome</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">${hostname}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Shows up in UI</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">comment</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Remote power button for ${friendly_name_short}.&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">esp8266</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Specifically a &#39;ESP8285H16&#39; with 2MB built in flash</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># See: https://docs.platformio.org/en/stable/boards/espressif8266/esp8285.html</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">board</span><span class="p">:</span><span class="w"> </span><span class="l">esp8285</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">logger</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">level</span><span class="p">:</span><span class="w"> </span><span class="l">INFO</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># See: https://esphome.io/guides/configuration-types.html#packages</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">packages</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># General</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">wifi</span><span class="p">:</span><span class="w"> </span>!<span class="l">include ../../packages/wifi.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">mqtt</span><span class="p">:</span><span class="w"> </span>!<span class="l">include ../../packages/mqtt.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">time</span><span class="p">:</span><span class="w"> </span>!<span class="l">include ../../packages/ntp.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ota</span><span class="p">:</span><span class="w"> </span>!<span class="l">include ../../packages/ota.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">web_server</span><span class="p">:</span><span class="w"> </span>!<span class="l">include ../../packages/web_server.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">status_led</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">pin</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO02</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">inverted</span><span class="p">:</span><span class="w"> </span><span class="kc">True</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Keep track of weather or not case button press should be forwarded to the motherboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">globals</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_relay_latched</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">bool</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_value</span><span class="p">:</span><span class="w"> </span><span class="kc">no</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">initial_value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;true&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">script</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">regular_press</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">single</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">output.turn_on</span><span class="p">:</span><span class="w"> </span><span class="l">out_relay</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">delay</span><span class="p">:</span><span class="w"> </span><span class="l">.5s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">output.turn_off</span><span class="p">:</span><span class="w"> </span><span class="l">out_relay</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">long_press</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">single</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">output.turn_on</span><span class="p">:</span><span class="w"> </span><span class="l">out_relay</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># MB seems to respond to 5s, add 2 just to be safe</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">delay</span><span class="p">:</span><span class="w"> </span><span class="l">7s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">output.turn_off</span><span class="p">:</span><span class="w"> </span><span class="l">out_relay</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">button</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># We expose a button to the HA web UI that mimics the &#34;forceful&#34; power down sequence</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;${friendly_name_short} Long Press&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">btn_forceful_down</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_press</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          // If the power state is off, we&#39;ll emit a WARN level message before running the script
</span></span></span><span class="line"><span class="cl"><span class="sd">          if( !id(inp_power_status).state ){
</span></span></span><span class="line"><span class="cl"><span class="sd">            ESP_LOGW(&#34;forcefulShutdown&#34;, &#34;Power state is OFF but forceful shutdown requested...&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">          } else {
</span></span></span><span class="line"><span class="cl"><span class="sd">            ESP_LOGW(&#34;forcefulShutdown&#34;, &#34;Power state is ON. Forceful shutdown requested...&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">          }
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(long_press).execute();</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">binary_sensor</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># React to connection status, if needed</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">&lt;&lt;</span><span class="p">:</span><span class="w"> </span>!<span class="l">include ../../packages/binary_sensor/connection_status.config.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;${friendly_name_short} WiFi Config Button&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">gpio</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">inp_wifi_cfg_btn</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;diagnostic&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:radiobox-marked&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO04</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">INPUT_PULLUP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">inverted</span><span class="p">:</span><span class="w"> </span><span class="kc">True</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;${friendly_name_short} Case Button&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">gpio</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">inp_pc_case_btn_status</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;diagnostic&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:power-standby&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO10</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">INPUT_PULLUP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">inverted</span><span class="p">:</span><span class="w"> </span><span class="kc">True</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_press</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">if</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">condition</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;return id(glbl_relay_latched);&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">output.turn_on</span><span class="p">:</span><span class="w"> </span><span class="l">out_relay</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">else</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">logger.log</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;PC Case button press but disarmed!&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_release</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">if</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">condition</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;return id(glbl_relay_latched);&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">output.turn_off</span><span class="p">:</span><span class="w"> </span><span class="l">out_relay</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">else</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">logger.log</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;PC Case button release but disarmed!&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Press is momentary quick</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_click</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">            // If relay isn&#39;t latched, do nothing
</span></span></span><span class="line"><span class="cl"><span class="sd">            if( !id(glbl_relay_latched) ){
</span></span></span><span class="line"><span class="cl"><span class="sd">              ESP_LOGD(&#34;caseBtnPress&#34;, &#34;button pressed, not latched so doing nothing.&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">              return;
</span></span></span><span class="line"><span class="cl"><span class="sd">            }
</span></span></span><span class="line"><span class="cl"><span class="sd">            ESP_LOGD(&#34;caseBtnPress&#34;, &#34;button pressed, latched. Toggling power now...&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(sw_pc_power).toggle();</span><span class="w">            
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_multi_click</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">timing</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="kc">ON</span><span class="w"> </span><span class="l">for at most 1s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="kc">OFF</span><span class="w"> </span><span class="l">for at most 2s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="kc">ON</span><span class="w"> </span><span class="l">for at most 1s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="kc">OFF</span><span class="w"> </span><span class="l">for at most 2s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="kc">ON</span><span class="w"> </span><span class="l">for at most 1s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="kc">OFF</span><span class="w"> </span><span class="l">for at most 2s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># We&#39;d want to press a virtual / template button for hard power down</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># That template button would run a script that just raised the output hight for 10s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">logger.log</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Triple clicked!&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">button.press</span><span class="p">:</span><span class="w"> </span><span class="l">btn_forceful_down</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;${friendly_name_short} Power Status&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">gpio</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">inp_power_status</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">device_class</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;power&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;diagnostic&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:power-settings&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO12</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">INPUT_PULLUP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">inverted</span><span class="p">:</span><span class="w"> </span><span class="kc">True</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">switch</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;${friendly_name_short} Relay Latch&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">sw_relay_mode</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">device_class</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;switch&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:link-variant&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;config&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      if (id(glbl_relay_latched)) {
</span></span></span><span class="line"><span class="cl"><span class="sd">        return true;
</span></span></span><span class="line"><span class="cl"><span class="sd">      } else {
</span></span></span><span class="line"><span class="cl"><span class="sd">        return false;
</span></span></span><span class="line"><span class="cl"><span class="sd">      }</span><span class="w">      
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">turn_on_action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">globals.set</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_relay_latched</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;true&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">turn_off_action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">globals.set</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_relay_latched</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;false&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;${friendly_name_short} Power&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">sw_pc_power</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:power-plug&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">device_class</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;switch&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      if (id(inp_power_status).state) {
</span></span></span><span class="line"><span class="cl"><span class="sd">        return true;
</span></span></span><span class="line"><span class="cl"><span class="sd">      } else {
</span></span></span><span class="line"><span class="cl"><span class="sd">        return false;
</span></span></span><span class="line"><span class="cl"><span class="sd">      }</span><span class="w">      
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Mimic the user pressing the button</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">turn_on_action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">script.execute</span><span class="p">:</span><span class="w"> </span><span class="l">regular_press</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">turn_off_action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">script.execute</span><span class="p">:</span><span class="w"> </span><span class="l">regular_press</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">output</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">gpio</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">out_relay</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO5</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>Dynamic timers in ESPHome</title><link>https://karlquinsland.com/esphome-dynamic-timer/</link><pubDate>Sun, 14 Aug 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/esphome-dynamic-timer/</guid><description><![CDATA[<!-- markdownlint-disable-file MD002 -->
<p>As much as I love the <a href="https://esphome.io/" target="_blank" rel="noopener noreffer">ESPHome</a> project, there are some features that seem like they&rsquo;d be essential in an embedded/IoT firmware sdk yet their implementation remain left as an exercise to the user.
This post is about one of those &ldquo;Wait, that&rsquo;s not built in?! <em>How</em> old is this project?&rdquo; features: timers.</p>
<h2 id="esphome-timers-and-you">ESPHome, Timers and You</h2>
<p>To be clear, ESPHome <em>does</em> <a href="https://github.com/esphome/feature-requests/issues/84#issuecomment-469678382" target="_blank" rel="noopener noreffer">have all of the primitives needed</a> to build <em>basic</em> timers.
You can get basic non-blocking pauses in automations with the <a href="https://esphome.io/guides/automations.html#delay-action" target="_blank" rel="noopener noreffer"><code>delay:</code></a> action.</p>
<p>For simple cases where the interval is well known and fixed, this is sufficient.</p>
<h3 id="delay-and-lambda"><code>delay:</code> and <code>!lambda</code></h3>
<p>The <code>delay:</code> component does have one downside: the length of the delay can&rsquo;t be adjusted after the fact.
You can use a <a href="https://esphome.io/guides/automations.html#lambda-action" target="_blank" rel="noopener noreffer">lambda function</a> to dynamically calculate the length of the delay, but there is no way to adjust the length of the delay once it&rsquo;s been initiated.</p>
<p>This is already <em>much</em> better than a static delay that&rsquo;s compiled into the binary, but this functionality is <em>relatively</em> new:</p>
<ul>
<li><a href="https://community.home-assistant.io/t/lambda-function-for-delay/298459" target="_blank" rel="noopener noreffer">Lambda Function for Delay?</a></li>
<li><a href="https://old.reddit.com/r/Esphome/comments/m4ic8q/need_help_to_increase_time_delay_by_an_automation/" target="_blank" rel="noopener noreffer">Need help to increase time delay by an automation - esphome</a></li>
<li><a href="https://community.home-assistant.io/t/lambda-value-on-delay/235794" target="_blank" rel="noopener noreffer">Lambda value on delay:</a></li>
</ul>
<h2 id="completely-configurable-timers">Completely configurable timers</h2>
<p>I have a few use cases that can&rsquo;t be solved with basic lambda functions; I need to be able to adjust the delay timer dynamically - ideally through the Home Assistant web interface.</p>
<p>This <em>also</em> isn&rsquo;t a new ask from the community:</p>
<ul>
<li><a href="https://community.home-assistant.io/t/use-home-assistant-number-as-delay-in-esphome/409525" target="_blank" rel="noopener noreffer">Use Home Assistant number as delay in ESPHome</a></li>
</ul>
<h3 id="a-solution">A solution</h3>
<p>As an example showcase for this particular solution/implementation, I&rsquo;ll use portions of a configuration file that I use with a <a href="https://templates.blakadder.com/sonoff_SwitchMan_M5-2C.html" target="_blank" rel="noopener noreffer">Sonoff SwitchMan M5</a> switch.</p>
<p>I want to implement basic &ldquo;turn light off after <code>$time</code>&rdquo; functionality with some additional requirements:</p>
<ul>
<li>The user should be able to arm/dis-arm this timer remotely</li>
<li>The user should be able to adjust this timer up/down remotely</li>
<li>The updated time should become active immediately</li>
<li>Should live 100% on device not require working network to function</li>
</ul>
<p>Other than the last point, this is trivial to do entirely within a basic Home Assistant automation.
The dynamic nature of the timer essentially means we need a place to store a) the number of seconds that an output has been ON for and b) the number of seconds that a user wants the output on for.
Additionally, we&rsquo;ll need to increment / evaluate the two numbers at a regular interval.</p>
<p>Simple enough; we can implement this all with a few global vars and some basic scripts.</p>
<p>Below is an edited/partial <code>yaml</code> file showing the core components and how they&rsquo;re wired together.
I have put clarifying comments throughout the file as there is some similar but unrelated arm/disarm functionality in this file.</p>
<p>The device shows up in HA like so:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        This is how my entity shows up in HA. I can toggle the timeout period and disable the functionality altogether.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>The count-down timer can be engaged at any time; if the light is already on, the timer begins counting.
The length of the timer can be adjusted at any time; the new value is used for the &ldquo;turn off now?&rdquo; calculation withing a second or so if it being updated.</p>
<p>In short, it does everything I need without having to write any HA automation :D.</p>
<p>Hopefully this helps somebody!</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span><span class="lnt">160
</span><span class="lnt">161
</span><span class="lnt">162
</span><span class="lnt">163
</span><span class="lnt">164
</span><span class="lnt">165
</span><span class="lnt">166
</span><span class="lnt">167
</span><span class="lnt">168
</span><span class="lnt">169
</span><span class="lnt">170
</span><span class="lnt">171
</span><span class="lnt">172
</span><span class="lnt">173
</span><span class="lnt">174
</span><span class="lnt">175
</span><span class="lnt">176
</span><span class="lnt">177
</span><span class="lnt">178
</span><span class="lnt">179
</span><span class="lnt">180
</span><span class="lnt">181
</span><span class="lnt">182
</span><span class="lnt">183
</span><span class="lnt">184
</span><span class="lnt">185
</span><span class="lnt">186
</span><span class="lnt">187
</span><span class="lnt">188
</span><span class="lnt">189
</span><span class="lnt">190
</span><span class="lnt">191
</span><span class="lnt">192
</span><span class="lnt">193
</span><span class="lnt">194
</span><span class="lnt">195
</span><span class="lnt">196
</span><span class="lnt">197
</span><span class="lnt">198
</span><span class="lnt">199
</span><span class="lnt">200
</span><span class="lnt">201
</span><span class="lnt">202
</span><span class="lnt">203
</span><span class="lnt">204
</span><span class="lnt">205
</span><span class="lnt">206
</span><span class="lnt">207
</span><span class="lnt">208
</span><span class="lnt">209
</span><span class="lnt">210
</span><span class="lnt">211
</span><span class="lnt">212
</span><span class="lnt">213
</span><span class="lnt">214
</span><span class="lnt">215
</span><span class="lnt">216
</span><span class="lnt">217
</span><span class="lnt">218
</span><span class="lnt">219
</span><span class="lnt">220
</span><span class="lnt">221
</span><span class="lnt">222
</span><span class="lnt">223
</span><span class="lnt">224
</span><span class="lnt">225
</span><span class="lnt">226
</span><span class="lnt">227
</span><span class="lnt">228
</span><span class="lnt">229
</span><span class="lnt">230
</span><span class="lnt">231
</span><span class="lnt">232
</span><span class="lnt">233
</span><span class="lnt">234
</span><span class="lnt">235
</span><span class="lnt">236
</span><span class="lnt">237
</span><span class="lnt">238
</span><span class="lnt">239
</span><span class="lnt">240
</span><span class="lnt">241
</span><span class="lnt">242
</span><span class="lnt">243
</span><span class="lnt">244
</span><span class="lnt">245
</span><span class="lnt">246
</span><span class="lnt">247
</span><span class="lnt">248
</span><span class="lnt">249
</span><span class="lnt">250
</span><span class="lnt">251
</span><span class="lnt">252
</span><span class="lnt">253
</span><span class="lnt">254
</span><span class="lnt">255
</span><span class="lnt">256
</span><span class="lnt">257
</span><span class="lnt">258
</span><span class="lnt">259
</span><span class="lnt">260
</span><span class="lnt">261
</span><span class="lnt">262
</span><span class="lnt">263
</span><span class="lnt">264
</span><span class="lnt">265
</span><span class="lnt">266
</span><span class="lnt">267
</span><span class="lnt">268
</span><span class="lnt">269
</span><span class="lnt">270
</span><span class="lnt">271
</span><span class="lnt">272
</span><span class="lnt">273
</span><span class="lnt">274
</span><span class="lnt">275
</span><span class="lnt">276
</span><span class="lnt">277
</span><span class="lnt">278
</span><span class="lnt">279
</span><span class="lnt">280
</span><span class="lnt">281
</span><span class="lnt">282
</span><span class="lnt">283
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c">###</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># The user-facing switch is not *directly* wired to the relay</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#   which allows us to insert arbitrary logic between button press</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#   and turning the relay on/off.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># When &#39;armed&#39; pressing the button will toggle the relay.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Regardless of arm/dis-arm state, the input event will be reported to HA.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Shelly uses the terminology &#34;linked/un-linked&#34; but the concept is the same.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># You can insert a shelly module between a cheap wall switch with PIR sensor</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#   and the load to squash nuisance triggers or simply expose the PIR sensor</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#   to HA as a presence detection device.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># See: https://esphome.io/guides/automations.html#global-variables</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">globals</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_relay_latched</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">bool</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_value</span><span class="p">:</span><span class="w"> </span><span class="kc">yes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">initial_value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;true&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># For the auto-off automation</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_timeout_armed</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">bool</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_value</span><span class="p">:</span><span class="w"> </span><span class="kc">yes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">initial_value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;true&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_timeout_length_ticks</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_value</span><span class="p">:</span><span class="w"> </span><span class="kc">yes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 5 min * 60 seconds = 300</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">initial_value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;300&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># We ALSO need to keep track of the number of &#39;ticks&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># add _prefix to indicate &#39;internal&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">_glbl_timeout_ticks</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_value</span><span class="p">:</span><span class="w"> </span><span class="kc">no</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">initial_value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">script</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># End meaning the natural conclusion of the timer. Do whatever we&#39;re supposed to do when the timer fires off</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">on_timer_end</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">single</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">light.turn_off</span><span class="p">:</span><span class="w"> </span><span class="l">light_1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">logger.log</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;on_timer_end: output should be off!&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Stop meaning the pre-mature ending of the timer</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">on_timer_stop</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Do not start a new run. Issue a warning.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">single</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># For now, just clean up the globals and stop the ticking.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># This hook could be used to do so much more, though.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          auto TAG = &#34;script.on_timer_stop&#34;;
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_timer_tick).stop();
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_glbl_timeout_ticks) = 0;
</span></span></span><span class="line"><span class="cl"><span class="sd">          ESP_LOGD(TAG, &#34;_timer_tick now stopped and _glbl_timeout_ticks is %d&#34;, id(_glbl_timeout_ticks));</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">_timer_tick</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Start a new run after previous runs completes. This will happen until timer.stop() is called on us</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">queued</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># A single &#39;tick&#39; is 1 second long</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">delay</span><span class="p">:</span><span class="w"> </span><span class="l">1s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          auto TAG = &#34;lambda._timer_tick&#34;;
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          // First, update the number of ticks
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_glbl_timeout_ticks) += 1;
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          // Then check if we have timed out
</span></span></span><span class="line"><span class="cl"><span class="sd">          if (id(_glbl_timeout_ticks) &gt;= id(glbl_timeout_length_ticks) ) {
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">            // If we have timed out, run the script to handle the timer expiration
</span></span></span><span class="line"><span class="cl"><span class="sd">            // It&#39;s cleaner to call out to a script rather than put all the &#34;what no?&#34; code in here!
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(on_timer_end).execute();
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">            ESP_LOGD(TAG, &#34;_glbl_timeout_ticks is &gt;= glbl_timeout_length_ticks  %d &gt;= %d &#34;, id(_glbl_timeout_ticks), id(glbl_timeout_length_ticks) );
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">            // And then re-set the internal counter
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(_glbl_timeout_ticks) = 0;
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">            // And finally, stop the ticking timer
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(_timer_tick).stop();
</span></span></span><span class="line"><span class="cl"><span class="sd">            ESP_LOGD(TAG, &#34;_timer_tick now stopped!&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          } else {
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">            ESP_LOGD(TAG, &#34;_glbl_timeout_ticks is &lt; glbl_timeout_length_ticks  %d &lt; %d &#34;, id(_glbl_timeout_ticks), id(glbl_timeout_length_ticks) );
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">            // make sure we run again.. unless we&#39;re not supposed to
</span></span></span><span class="line"><span class="cl"><span class="sd">            if( id(glbl_timeout_armed) ) {
</span></span></span><span class="line"><span class="cl"><span class="sd">              id(_timer_tick).execute();
</span></span></span><span class="line"><span class="cl"><span class="sd">            }
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          }</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Create a toggle in HA that allows us to arm/disarm the button &lt;-&gt; relay glue</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># See: https://esphome.io/components/switch/template.html</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">switch</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;${friendly_name_short} Relay Latch&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">sw_relay_mode</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">device_class</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;switch&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;config&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      if (id(glbl_relay_latched)) {
</span></span></span><span class="line"><span class="cl"><span class="sd">        return true;
</span></span></span><span class="line"><span class="cl"><span class="sd">      } else {
</span></span></span><span class="line"><span class="cl"><span class="sd">        return false;
</span></span></span><span class="line"><span class="cl"><span class="sd">      }</span><span class="w">      
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">turn_on_action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">globals.set</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_relay_latched</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;true&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">turn_off_action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">globals.set</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_relay_latched</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;false&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># UI toggle for the arm/disarm of the auto-off/timeout functionality</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;${friendly_name_short} Timeout Automation&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">sw_timeout_arm</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">device_class</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;switch&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;config&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      if (id(glbl_timeout_armed)) {
</span></span></span><span class="line"><span class="cl"><span class="sd">        return true;
</span></span></span><span class="line"><span class="cl"><span class="sd">      } else {
</span></span></span><span class="line"><span class="cl"><span class="sd">        return false;
</span></span></span><span class="line"><span class="cl"><span class="sd">      }</span><span class="w">      
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">turn_on_action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Update the global to store the new state</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># If the light is already on, also start the timer</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(glbl_timeout_armed) = true;
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">            auto TAG = &#34;template.Timeout Automation.turn_on_action&#34;;
</span></span></span><span class="line"><span class="cl"><span class="sd">            if ( id(light_1).current_values.is_on() ) {
</span></span></span><span class="line"><span class="cl"><span class="sd">              id(_timer_tick).execute();
</span></span></span><span class="line"><span class="cl"><span class="sd">            } else {
</span></span></span><span class="line"><span class="cl"><span class="sd">              ESP_LOGD(TAG, &#34;Timeout Automation ARMED, light NOT on. Nothing to do!&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">            }</span><span class="w">            
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">turn_off_action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Update the global and stop the ticking timer if needed</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">            // Set the global to OFF, it will be checked next time the _tick fires if the on_timer_stop doesn&#39;t
</span></span></span><span class="line"><span class="cl"><span class="sd">            // kill the ticking
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(glbl_timeout_armed) = false;
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(on_timer_stop).execute();</span><span class="w">            
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Give the user a graphical control over the timeout</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># See: https://esphome.io/components/number/template.html</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">number</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;${friendly_name_short} Timeout&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">timeout_length</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;config&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># TODO: maybe it&#39;s a better UX to do this in minutes and do the conversion in esphome</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">unit_of_measurement</span><span class="p">:</span><span class="w"> </span><span class="l">seconds</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">box</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">min_value</span><span class="p">:</span><span class="w"> </span><span class="m">30</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">max_value</span><span class="p">:</span><span class="w"> </span><span class="m">21600</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">step</span><span class="p">:</span><span class="w"> </span><span class="m">30</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      </span><span class="w">      </span><span class="l">return (int) id(glbl_timeout_length_ticks);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">set_action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">globals.set</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_timeout_length_ticks</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span>!<span class="l">lambda |-</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">// TODO</span><span class="p">:</span><span class="w"> </span><span class="l">we&#39;re relying on HA to pass an integer; perhaps we should do atoi() and catch any exceptions</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="l">return (int) x;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">binary_sensor</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">${friendly_name_short} Button</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">gpio</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;diagnostic&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">inverted</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_click</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">min_length</span><span class="p">:</span><span class="w"> </span><span class="l">50ms</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">max_length</span><span class="p">:</span><span class="w"> </span><span class="l">150ms</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">if</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c"># If the input -&gt; output functionality is armed</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">condition</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;return id(glbl_relay_latched);&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">light.toggle</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">light_1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">else</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">logger.log</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">level</span><span class="p">:</span><span class="w"> </span><span class="l">DEBUG</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">format</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Button1 pressed but relays unlinked&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">output</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># See&#34; https://esphome.io/components/output/ledc.html</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">ledc</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO18</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">gpio_18</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">gpio</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">relay_1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="m">23</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># See: https://esphome.io/components/light/index.html#config-light</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># See: https://esphome.io/components/light/monochromatic.html</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">light</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">${friendly_name_short} Indicator Lights</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">relay_status_leds</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">monochromatic</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">output</span><span class="p">:</span><span class="w"> </span><span class="l">gpio_18</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Classify this as a &#34;config&#34; entity rather than a primary entity</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="l">config</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># The LEDs technically do support some effects! Although there&#39;s really only one &#39;built-in&#39; effect that looks</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">#   any good on the tiny LEDs / switch.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">effects</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">pulse</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">transition_length</span><span class="p">:</span><span class="w"> </span><span class="l">1s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">update_interval</span><span class="p">:</span><span class="w"> </span><span class="l">1s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># See: https://esphome.io/components/light/binary.html</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">${friendly_name_short} Light</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">light_1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">binary</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">output</span><span class="p">:</span><span class="w"> </span><span class="l">relay_1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Resume last state on boot if possible. Else, off</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_mode</span><span class="p">:</span><span class="w"> </span><span class="l">RESTORE_DEFAULT_OFF</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Wire in the count down timer automation if enabled</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_turn_on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">if</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">condition</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="c"># If the countdown timer is enabled</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;return id(glbl_timeout_armed);&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="c"># The light is already on, start counting the seconds.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="c"># When timer ends, light will be turned off</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">script.execute</span><span class="p">:</span><span class="w"> </span><span class="l">_timer_tick</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">else</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">logger.log</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">level</span><span class="p">:</span><span class="w"> </span><span class="l">DEBUG</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">format</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Light1 turned on, countdown timer not armed&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># This can be called by the natural end of the timer OR manually through any other source.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Regardless of the source, we just need to stop the ticking if it&#39;s running.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_turn_off</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">if</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">condition</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;return id(_timer_tick).is_running();&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">script.execute</span><span class="p">:</span><span class="w"> </span><span class="l">on_timer_stop</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">else</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">logger.log</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">level</span><span class="p">:</span><span class="w"> </span><span class="l">DEBUG</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">format</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Light1 turned off, countdown timer not armed&#34;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>Using ESPHome with the Treatlife DS03</title><link>https://karlquinsland.com/treatlife-ds03-esphome/</link><pubDate>Thu, 09 Jun 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/treatlife-ds03-esphome/</guid><description><![CDATA[<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Post depreciation notice<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">This is an update to the <a href="/treatlife-ds03-tasmota-autoconfig-with-homeassistant/" rel=""><code>Fixing Home Assistant discovery with Tasmota on the Treatlife DS03</code> post</a>.</div>
        </div>
    </div>
<h1 id="tasmota-reliability">Tasmota reliability</h1>
<p>A few months ago, I started to notice some bizarre behavior with the DS03 ceiling fan controllers that I had previously flashed with Tasmota.
Very regularly, the devices would crash and reboot! I almost never noticed unless I was explicitly looking at the uptime / boot count graphs for the devices but every once in a while, the device would reboot <em>right as I was trying to control it remotely</em>.</p>
<p>I was able to confirm that the rules I was using to &lsquo;augment&rsquo; the Home Assistant auto-discovery payload were the culprit. Odd since nothing had changed; only the version of tasmota has been changing.</p>
<p>While it&rsquo;s not clear <em>what</em> the issue is, it <strong>probably</strong> has something to do with RAM exhaustion.
The details are <a href="https://github.com/arendst/Tasmota/issues/15636#issuecomment-1130511474" target="_blank" rel="noopener noreffer">in Tasmota issue #15636</a> if your curious.</p>
<p>The Tasmota rules were a workaround to a broader problem: tasmota offers very little to customize <em>how</em> the entity is advertised to Home Assistant. Since the workaround was no longer working, the next logical step is to re-evaluate if Tasmota is the appropriate firmware for the device.</p>
<h1 id="using-esphome-with-the-ds03">Using ESPHome with the DS03</h1>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>Beta software release<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>I <strong>strongly</strong> prefer MQTT for my Home Automation interoperability.</p>
<p>The MQTT &lt;-&gt; Home Assistant mechanism in ESPHome has been playing second fiddle to the native ESPHome &lt;-&gt; Home Assistant API as of late so there are more bugs and usability issues. As such, the YAML below depends on a fix for <code>mqtt.fan</code> component that exists in the  <a href="https://github.com/esphome/esphome/releases/tag/2022.6.0b2" target="_blank" rel="noopener noreffer">2022.06.b2</a> or later release.</p>
<p>Specifically, <a href="https://github.com/esphome/esphome/pull/3537" target="_blank" rel="noopener noreffer">this</a> commit.</p>
<p>If you do not use MQTT for your ESPHome &lt;-&gt; Home Assistant linking, you should be fine using the latest &lsquo;stable&rsquo; release of ESPHome.</p>
</div>
        </div>
    </div>
<p>After <a href="https://esphome.io/guides/migrate_sonoff_tasmota.html" target="_blank" rel="noopener noreffer">migrating the tasmota install to ESPHome</a>, I am happy to report that ESPHome is running on the DS03 and that the full/proper MQTT auto-discovery payload is published. 🥳</p>
<p>Here is a &lsquo;reference&rsquo; YAML file that is similar to the ones I use in &lsquo;production&rsquo;. You will need to add your own MQTT/WiFi&hellip; etc configuration.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">substitutions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">hostname</span><span class="p">:</span><span class="w"> </span><span class="l">YourHostNameHere</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">friendly_name</span><span class="p">:</span><span class="w"> </span><span class="l">YourDeviceNameHere</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">esphome</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">${hostname}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">ESP8266</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">board</span><span class="p">:</span><span class="w"> </span><span class="l">esp01_1m</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Enable logging</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">logger</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">level</span><span class="p">:</span><span class="w"> </span><span class="l">INFO</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Uses a TuYa MCU to drive the power components</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># See: https://esphome.io/components/tuya.html</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">tuya</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># See: https://esphome.io/components/uart.html</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">uart</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">rx_pin</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">tx_pin</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Not sure why/where/how this error shows up but seems functional as is /shrug</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># [E][uart:015]:   Invalid baud_rate: Integration requested baud_rate 9600 but you have 115200!</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">baud_rate</span><span class="p">:</span><span class="w"> </span><span class="m">115200</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># See: https://esphome.io/components/light/tuya.html</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">light</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">${friendly_name} Light</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">device_light</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;tuya&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">dimmer_datapoint</span><span class="p">:</span><span class="w"> </span><span class="m">10</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">switch_datapoint</span><span class="p">:</span><span class="w"> </span><span class="m">9</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">min_value</span><span class="p">:</span><span class="w"> </span><span class="m">100</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">max_value</span><span class="p">:</span><span class="w"> </span><span class="m">1000</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:ceiling-fan-light&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_mode</span><span class="p">:</span><span class="w"> </span><span class="l">ALWAYS_OFF</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># See: https://esphome.io/components/fan/tuya.html</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">fan</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">${friendly_name} Speed</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">device_fan</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;tuya&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">switch_datapoint</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">speed_datapoint</span><span class="p">:</span><span class="w"> </span><span class="m">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">speed_count</span><span class="p">:</span><span class="w"> </span><span class="m">4</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:ceiling-fan&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_mode</span><span class="p">:</span><span class="w"> </span><span class="l">ALWAYS_OFF</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>Inside a generic/white-label HDMI KVM Switch</title><link>https://karlquinsland.com/hdmi-kvm-teardown-and-esphome/</link><pubDate>Sat, 16 Apr 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/hdmi-kvm-teardown-and-esphome/</guid><description><![CDATA[<p>If you&rsquo;re here just for &ldquo;how do I get it working with ESPHome&rdquo; bit, skip to the <a href="#esphome-component" rel="">ESPHome Component</a> section below.</p>
<hr>
<div class="details admonition important open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>Update 2022.05.14<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">I have just uploaded a basic PCB and enclosure to the  <a href="#esphome-component" rel="">ESPHome Component Repository</a>.</div>
        </div>
    </div>
<p>For the last few months, I have been looking for a KVM switch to simplify switching between work and personal computers.
Initially, I didn&rsquo;t think my criteria were that unreasonable, but for whatever reason there is no KVM switch that:</p>
<ul>
<li>Supports at least 4 hosts. Preferably dual monitors per host to ensure relevancy for years. Converting between HDMI and Display Port isn&rsquo;t that difficult so no strong preference as long as the KVM uses HDMI2.0+ or Display Port 1.4+ as my primary monitor is 4k.</li>
<li>USB 3 support. At least 5 gbps and Ideally using a USBC jack.</li>
<li>Some sort of programmatic control over which host is &lsquo;active&rsquo;. Ideally this interface would be bi-directional (RS232/RS485 or IP) but I&rsquo;d settle for having to record the IR remote codes and re-broadcast those with my own microcontroller if needed.</li>
<li>Works with the <a href="https://drop.com/buy/drop-shift-mechanical-keyboard" target="_blank" rel="noopener noreffer">DROP: SHIFT keyboard</a>; internally this keyboard presents as it&rsquo;s own USB Hub and requires more than the standard 500ma to operate. Some KVM switches don&rsquo;t supply enough current and others results in the number of USB hubs between the root and the keyboard being &gt; 5 which the USB spec does not support.</li>
<li>Costs less than $75 per host/port.</li>
</ul>
<p>Try as I might, I was not able to find anything that could satisfy all the requirements. If you know of any, <a href="https://karlquinsland.com/contact/" rel="">please do get in touch</a>!</p>
<p>I spent a decent chunk of time searching through the usual consumer/IT electronics sites and they all had similar offerings&hellip; none of which were sufficient.
I had some close contenders, but they are victims of the current chip shortage or otherwise very expensive unobtanium.</p>
<p>I recently read <a href="https://overengineer.dev/blog/2021/04/25/usb-c-hub-madness.html" target="_blank" rel="noopener noreffer">USB-C hubs and my slow descent into madness - Dennis Schubert</a> which prompted me to broaden my search horizons to include the marketplaces closer to where all the KVM switches I was seeing in my searches were actually designed.
After a bit of searching, I found the <a href="https://www.aliexpress.com/item/1005003927404402.html" target="_blank" rel="noopener noreffer"><code>PX-UHDKVM801-2.0</code></a>:</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>A single video channel isn&rsquo;t a deal breaker; ultra wide screens can render more pixels off of one HDMI port than 2 screens from a few years ago could. Assuming this continues, by the time my current monitor dies dual video might not matter at all.
Likewise, speedy USB is a &ldquo;nice to have&rdquo;. My keyboard, mouse and web cam <strong>must</strong> work with the KVM. If the webcam streams in SD over USB2 but full HD over a USB3 link that&rsquo;s a <em>nice</em> benefit but not a deal breaker. For the occasional times where I need to transfer a file and can&rsquo;t do it over the network, I can either plug directly into the host computers&rsquo; USB3.2 port or settle for slow USB2 file transfer speeds. Not the end of the world!</p>
<p>Of all the KVMs that I considered, this one came with the least compromises and came with explicit documentation about how to integrate/control the switch via TCP or RS232. Buoyed by the thought of not having to reverse engineer any IR remote codes or otherwise resort to some hackery, I pulled the trigger.</p>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>A quick note about the &#39;generic&#39; switch<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>I say &ldquo;generic&rdquo; because there are a few different brands / names on this thing and it&rsquo;s not clear who the actual manufacturer is.</p>
<p>I got it from a seller by the name of <a href="https://www.pourxuan.com/Product/9867345045.html" target="_blank" rel="noopener noreffer"><code>PourXuan</code></a> which does seem to be the OEM behind it.
However, there are a few other <a href="#ics-and-distinguishing-markings" rel="">interesting markings</a> that could indicate other companies contributing to / designing some internal components.</p>
</div>
        </div>
    </div>
<p>Anyways, lets look inside.</p>
<h1 id="teardown">Teardown</h1>
<p>TL;DR: It&rsquo;s been built down to a cost&hellip; but not <em>the lowest possible cost</em>.
The construction isn&rsquo;t flimsy and I didn&rsquo;t find any glaringly obvious safety issues / construction shortcuts.
None of the ICs have their markings scraped off and the internal architecture is simple and scalable.
I did not check, but I suspect that each of the primary functions / PCBs communicates over a simple serial bus so this switch is likely pretty hackable/serviceable, too.</p>
<h2 id="packaging--shipping">Packaging / shipping</h2>
<p>The switch came well packed in some nondescript packaging.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>The small white box containing the power supply and some accessory hardware crumpled up the single page user manual.</p>
<p>I have uploaded a copy of this paper and the other software/documentation provided by the seller to the same git repository hosting the <a href="#esphome-component" rel="">ESPHome Component</a>.</p>
<p><figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        An overview of everything that came in the box
        
            
        
        </p> 
    </figcaption>
    
</figure>

</p>
<p><figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Rack Mount ears, two extra screws and the proper connector block needed to interface with the UART.
        
            
        
        </p> 
    </figcaption>
    
</figure>

</p>
<p>I have not opened up the power supply to check its construction but it doesn&rsquo;t feel incredibly cheap.
It&rsquo;s rated for 2 Amps @ 12v but the switch only drew about 3.75 Watt when measured from the wall.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Nothing special. It doesn&#39;t feel cheap.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h2 id="the-switch">The switch</h2>
<p>The metal shell is generic; there are holes on the side for ventilation fans that are not populated.
Other than not-so-well hidden screw, the case is easy to open.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Don&#39;t forget the screw behind the sticker
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>With all screws out, the two halves slide apart easily to give us the first look at the internals!</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>It looks like this is a pretty modular design:</p>
<ul>
<li>A standalone front panel input and network control.</li>
<li>A dedicated PCB for each type of data; a HDMI/video plane and a HID/USB plane.</li>
<li>Each plane uses dedicated ASICs to route the signals.</li>
<li>A minimal number of microprocessors / wires coordinating between the PCBs.</li>
</ul>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The small cable from the IR jack on the back is all that holds the two halves of the case together.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>The LAN module plugs into the HDMI PCB very close to where the RS232 port is and the protocol specific documentation from the seller indicates that the payloads to control the switch are the same irrespective of the transport.</p>
<p>Each group of 4 HDMI &lsquo;inputs&rsquo; is routed to an identical looking IC and the differential signal pairs from <em>those</em> ICs are routed to the big one next to the output and RS232 and LAN circuitry.</p>
<p>The little micro next to the buzzer and grey ribbon cable is likely the main controller for the entire switch.
The small IC <em>on</em> the front panel is probably watching for IR signals, scanning the physical buttons, driving the LED display and communicating with the rest of the system over some serial bus.</p>
<p>This architecture would be pretty scalable; for a 16 port model, just add another HDMI and USB PCB and tweak the firmware on the main controller.</p>
<h3 id="front-pcb">Front PCB</h3>
<p>Nothing particularly interesting here. The single IC (<code>STM8S003F3</code>) is a cheap 8 bit microcontroller that - based on the PCB traces - is driving the LED display and handling the button matrix scanning and IR codes.</p>
<p>Most of the lines from the grey ribbon cable are not actually connected to the pcb so I&rsquo;d bet that this micro communicates with the &lsquo;main&rsquo; PCBs over some serial bus.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Sorry for the glare. There&#39;s a lot of flux residue on this PCB.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Notice how at least 4 of the pins from the ribbon cable connector are note soldered to the PCB...
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        This PCB is means to be used in other SKUs that come with two extra buttons that are unpopulated here.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h3 id="the-lan-module">The LAN module</h3>
<p>Very simple / standalone module. There&rsquo;s a dedicated PHY (<code>CH395Q</code>) and the same <code>STM8S003F3</code> micro controller again. The documentation that I received from the seller indicated that the LAN module did NOT use DHCP and there didn&rsquo;t seem to be a way to change the IP address configuration so I didn&rsquo;t bother with trying to automate via LAN.</p>
<p>Only after I made it most of the way through the ESPHome integration development did the seller provide <em>additional</em> documentation that indicates the IP address <em>can</em> be changed&hellip; but only if you use a Windows program.
I opted to keep going with the ESPHome &lt;-&gt; RS232 integration as that would be the most flexible and accessible approach.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The small LAN pcb is attached directly to the front panel with screws mating with some 90 degree flanges soldered to the PCB
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h2 id="hdmi">HDMI</h2>
<p>In addition to the HDMI switching duties, the HDMI PCB hosts the UART electronics:</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>TTL to RS232 handled by the <code>SIPEX SP3223EEX</code>:</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>The main application processor appears to be a STM32 clone known as the <code>CHIPSEA F031C8T6</code>.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Switching / routing the HDMI is done with two <code>IT66341TE</code> chips reducing the 4 HDMI inputs down to a single output and a <code>IT66321E</code> to switch between those two streams.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        2 to 1 HDMI mux to switch between the two outputs from the 4 -&gt; 1 muxes on board.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        4 to 1 HDMI mux; one of two on the board
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>I would bet that the unpopulated connector in the bottom right is the bus connection to a second HDMI PCB in the 16 port model but I don&rsquo;t see where the differential pairs for the HDMI signal would come from so who knows 🤷.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        4 to 1 HDMI mux; one of two on the board
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<h2 id="usb">USB</h2>
<p>Like the HDMI PCB, the USB PCB uses a series of ASICs and a microprocessor to coordinate them all.
Near the 4 &lsquo;output&rsquo; USB ports, you can see the <code>CH559L</code> which runs the show. This IC is monitoring the USB bus for key codes from the keyboard for display switching purposes; press some key combination to switch inputs.</p>
<p>This is usually <code>PrtScrn</code> a few times quickly followed by the number of the input bank you wish to switch to.
I have not tested / verified this functionality but the seller does advertise that there is similar functionality</p>
<p><figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>

</p>
<p>Each &lsquo;input&rsquo; USB port is the same: unpopulated headphone jack footprint for audio input and a <code>FE1.1s USB 2.0 HUB</code> ASIC and an unknown IC that looks like it&rsquo;s related to the unpopulated headphone jack.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Each &#39;input&#39; USB port is managed with the same IC. Note the unpopulated Headphone jack footprint on the PCB
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        I can&#39;t make out the markings, but the 16 pin square IC is almost certainly an audio ID for the unpopulated headphone jack.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>There&rsquo;s some generic 8:1 GPIO mux chips in the form of <code>3251QE</code>.
They are simple IO expanders that would allow a microcontroller to read/write 8 GPIO pins using just 3 GPIO.
I don&rsquo;t know why they&rsquo;re here or why an 8 port switch needs 2 of them&hellip; both on the USB PCB.</p>
<p><figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>

</p>
<p>That&rsquo;s it for teardown!</p>
<h3 id="dmesg"><code>dmesg</code></h3>
<p>Just for completeness, here is how the KVM presents to the computer via USB.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">[</span>183000.909155<span class="o">]</span> usb 1-6: new high-speed USB device number <span class="m">63</span> using xhci_hcd
</span></span><span class="line"><span class="cl"><span class="o">[</span>183001.050545<span class="o">]</span> usb 1-6: New USB device found, <span class="nv">idVendor</span><span class="o">=</span>1a40, <span class="nv">idProduct</span><span class="o">=</span>0101, <span class="nv">bcdDevice</span><span class="o">=</span> 1.11
</span></span><span class="line"><span class="cl"><span class="o">[</span>183001.050550<span class="o">]</span> usb 1-6: New USB device strings: <span class="nv">Mfr</span><span class="o">=</span>0, <span class="nv">Product</span><span class="o">=</span>1, <span class="nv">SerialNumber</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>183001.050551<span class="o">]</span> usb 1-6: Product: USB 2.0 Hub
</span></span><span class="line"><span class="cl"><span class="o">[</span>183001.112333<span class="o">]</span> hub 1-6:1.0: USB hub found
</span></span><span class="line"><span class="cl"><span class="o">[</span>183001.112549<span class="o">]</span> hub 1-6:1.0: <span class="m">4</span> ports detected
</span></span><span class="line"><span class="cl"><span class="o">[</span>183001.495837<span class="o">]</span> usb 1-6.1: new high-speed USB device number <span class="m">64</span> using xhci_hcd
</span></span><span class="line"><span class="cl"><span class="o">[</span>183001.687327<span class="o">]</span> usb 1-6.1: New USB device found, <span class="nv">idVendor</span><span class="o">=</span>1a40, <span class="nv">idProduct</span><span class="o">=</span>0101, <span class="nv">bcdDevice</span><span class="o">=</span> 1.11
</span></span><span class="line"><span class="cl"><span class="o">[</span>183001.687332<span class="o">]</span> usb 1-6.1: New USB device strings: <span class="nv">Mfr</span><span class="o">=</span>0, <span class="nv">Product</span><span class="o">=</span>1, <span class="nv">SerialNumber</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>183001.687333<span class="o">]</span> usb 1-6.1: Product: USB 2.0 Hub
</span></span><span class="line"><span class="cl"><span class="o">[</span>183001.720379<span class="o">]</span> hub 1-6.1:1.0: USB hub found
</span></span><span class="line"><span class="cl"><span class="o">[</span>183001.720579<span class="o">]</span> hub 1-6.1:1.0: <span class="m">4</span> ports detected
</span></span><span class="line"><span class="cl"><span class="o">[</span>183001.912509<span class="o">]</span> usb 1-6.2: new low-speed USB device number <span class="m">65</span> using xhci_hcd
</span></span><span class="line"><span class="cl"><span class="o">[</span>183002.137295<span class="o">]</span> usb 1-6.2: New USB device found, <span class="nv">idVendor</span><span class="o">=</span>0c45, <span class="nv">idProduct</span><span class="o">=</span>7403, <span class="nv">bcdDevice</span><span class="o">=</span> 0.01
</span></span><span class="line"><span class="cl"><span class="o">[</span>183002.137300<span class="o">]</span> usb 1-6.2: New USB device strings: <span class="nv">Mfr</span><span class="o">=</span>1, <span class="nv">Product</span><span class="o">=</span>2, <span class="nv">SerialNumber</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>183002.137301<span class="o">]</span> usb 1-6.2: Product: USB Device
</span></span><span class="line"><span class="cl"><span class="o">[</span>183002.137303<span class="o">]</span> usb 1-6.2: Manufacturer: SONiX
</span></span><span class="line"><span class="cl"><span class="o">[</span>183002.239461<span class="o">]</span> input: SONiX USB Device as /devices/pci0000:00/0000:00:01.2/0000:02:00.0/0000:03:08.0/0000:05:00.1/usb1/1-6/1-6.2/1-6.2:1.0/0003:0C45:7403.00E4/input/input288
</span></span><span class="line"><span class="cl"><span class="o">[</span>183002.296065<span class="o">]</span> hid-generic 0003:0C45:7403.00E4: input,hidraw9: USB HID v1.00 Keyboard <span class="o">[</span>SONiX USB Device<span class="o">]</span> on usb-0000:05:00.1-6.2/input0
</span></span><span class="line"><span class="cl"><span class="o">[</span>183002.302457<span class="o">]</span> input: SONiX USB Device Mouse as /devices/pci0000:00/0000:00:01.2/0000:02:00.0/0000:03:08.0/0000:05:00.1/usb1/1-6/1-6.2/1-6.2:1.1/0003:0C45:7403.00E5/input/input289
</span></span><span class="line"><span class="cl"><span class="o">[</span>183002.302535<span class="o">]</span> input: SONiX USB Device System Control as /devices/pci0000:00/0000:00:01.2/0000:02:00.0/0000:03:08.0/0000:05:00.1/usb1/1-6/1-6.2/1-6.2:1.1/0003:0C45:7403.00E5/input/input290
</span></span><span class="line"><span class="cl"><span class="o">[</span>183002.359252<span class="o">]</span> hid-generic 0003:0C45:7403.00E5: input,hidraw10: USB HID v1.00 Mouse <span class="o">[</span>SONiX USB Device<span class="o">]</span> on usb-0000:05:00.1-6.2/input1
</span></span></code></pre></td></tr></table>
</div>
</div><p>And <code>lsusb</code> shows:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="p">|</span>__ Port 6: Dev 63, If 0, <span class="nv">Class</span><span class="o">=</span>Hub, <span class="nv">Driver</span><span class="o">=</span>hub/4p, 480M
</span></span><span class="line"><span class="cl">    ID 1a40:0101 Terminus Technology Inc. Hub
</span></span><span class="line"><span class="cl">    /sys/bus/usb/devices/1-6  /dev/bus/usb/001/063
</span></span><span class="line"><span class="cl">    <span class="p">|</span>__ Port 2: Dev 65, If 0, <span class="nv">Class</span><span class="o">=</span>Human Interface Device, <span class="nv">Driver</span><span class="o">=</span>usbhid, 1.5M
</span></span><span class="line"><span class="cl">        ID 0c45:7403 Microdia Foot Switch
</span></span><span class="line"><span class="cl">        /sys/bus/usb/devices/1-6.2  /dev/bus/usb/001/065
</span></span><span class="line"><span class="cl">    <span class="p">|</span>__ Port 2: Dev 65, If 1, <span class="nv">Class</span><span class="o">=</span>Human Interface Device, <span class="nv">Driver</span><span class="o">=</span>usbhid, 1.5M
</span></span><span class="line"><span class="cl">        ID 0c45:7403 Microdia Foot Switch
</span></span><span class="line"><span class="cl">        /sys/bus/usb/devices/1-6.2  /dev/bus/usb/001/065
</span></span><span class="line"><span class="cl">    <span class="p">|</span>__ Port 1: Dev 64, If 0, <span class="nv">Class</span><span class="o">=</span>Hub, <span class="nv">Driver</span><span class="o">=</span>hub/4p, 480M
</span></span><span class="line"><span class="cl">        ID 1a40:0101 Terminus Technology Inc. Hub
</span></span><span class="line"><span class="cl">        /sys/bus/usb/devices/1-6.1  /dev/bus/usb/001/064
</span></span></code></pre></td></tr></table>
</div>
</div><p>The <a href="http://blog.ssokolow.com/archives/2017/04/10/getting-your-cheap-chinese-usb-foot-pedal-doing-useful-things-on-linux/" target="_blank" rel="noopener noreffer"><code>Microdia Foot Switch</code> bit</a> is odd.
Could that have something to do with the <code>3251QE</code> muxes?
Perhaps this device indicates to the computer weather or not it is the activated one? 🤔 But why would you need two?</p>
<p>I did not dump <a href="https://en.wikipedia.org/wiki/Extended_Display_Identification_Data" target="_blank" rel="noopener noreffer"><code>EDID</code></a> information for the HDMI but I suspect that the switch is smart enough to just copy exactly what the display provides so the computers don&rsquo;t &lsquo;see&rsquo; the loss/change of a display which might re-arrange windows or adjust scaling.</p>
<h2 id="esphome-component">ESPHome component</h2>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>Info<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">The ESPHome component and some additional documentation/software/details are over at <a href="https://github.com/kquinsland/hdmi-kvm-esphome" target="_blank" rel="noopener noreffer"><code>kquinsland/hdmi-kvm-esphome</code></a>.</div>
        </div>
    </div>
<p>Yes, I wanted to be able to control this KVM from my Home Assistant install.
Some sort of API was a strong desire/requirement for KVM switches for a reason!</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>I am still working on a complementary ESPHome component to automate my standing desk (to be published soon!) but to give you an idea of the automations this KVM will be used in:</p>
<ul>
<li>
<p>Push a single button to:</p>
<ul>
<li>Turn on the VR computer</li>
<li>Switch KVM to the VR computer</li>
<li>Adjust the lighting as needed; turn most lights off as they&rsquo;re not needed with a VR headset on but turn on ambient lighting so the room isn&rsquo;t pitch dark when the headset is removed.</li>
</ul>
</li>
<li>
<p>When personal/work computer are not in use, switch to a host running Grafana dashboards on rotation</p>
</li>
<li>
<p>Allow me to track how much time per week is spent with each host</p>
</li>
</ul>
<h2 id="ics-and-distinguishing-markings">ICs and distinguishing markings</h2>
<p>The front panel PCB is labeled: <code>20170622</code> and features:</p>
<ul>
<li><a href="https://github.com/kquinsland/hdmi-kvm-esphome/blob/main/docs/datasheets/stm8s003f3.pdf" target="_blank" rel="noopener noreffer"><code>8S003F3P6</code></a> - A cheapish 8 bit micro controller.</li>
</ul>
<p>The LAN module PCB is marked with <code>20151030</code> and features:\</p>
<ul>
<li><a href="https://github.com/kquinsland/hdmi-kvm-esphome/blob/main/docs/datasheets/stm8s003f3.pdf" target="_blank" rel="noopener noreffer"><code>8S003F3P6</code></a> - The same micro used on the front panel</li>
<li><a href="https://github.com/kquinsland/hdmi-kvm-esphome/blob/main/docs/datasheets/2009031206_WCH-Jiangsu-Qin-Heng-CH395Q_C87390.pdf" target="_blank" rel="noopener noreffer"><code>CH395Q</code></a> - A dedicated ethernet interface.</li>
</ul>
<p>The HDMI PCB is populated with:</p>
<ul>
<li>
<p><a href="https://www.google.com/search?q=CHIPSEA&#43;F031C8T6" target="_blank" rel="noopener noreffer"><code>CHIPSEA F031C8T6</code></a> - STM32 clone; likely the main applications processor. I can&rsquo;t find a datasheet on this specific on the english speaking web but the naming is oddly similar to how some STM32 processors are named.</p>
</li>
<li>
<p><a href="https://github.com/kquinsland/hdmi-kvm-esphome/blob/main/docs/datasheets/sp3222_3232e.pdf" target="_blank" rel="noopener noreffer"><code>SIPEX SP3223EEX</code></a> - Basic TTL &lt;-&gt; RS232 chip, similar to MAX232.</p>
</li>
<li>
<p><a href="https://www.ite.com.tw/en/product/view?mid=100" target="_blank" rel="noopener noreffer"><code>IT66321E</code></a> - 2 IN to 1 OUT HDMI2.0 18Gb/s Switch with Audio In/Out</p>
</li>
<li>
<p><a href="https://www.ite.com.tw/en/product/view?mid=99" target="_blank" rel="noopener noreffer"><code>IT66341TE</code></a> - 4 IN to 1 OUT HDMI2.0 18Gb/s Switch with Audio In/Out</p>
</li>
<li>
<p>A sticker with the markings:</p>
<blockquote>
<p>XUFUNG
33.01.0072
2012020074</p>
</blockquote>
</li>
<li>
<p>The PCB is marked with:</p>
<blockquote>
<p>HK20801AU
32.02.0119
BJ</p>
</blockquote>
</li>
</ul>
<p>The USB PCB is marked with <code>HK20801A30-KVM</code> and is populated with:</p>
<ul>
<li><a href="https://github.com/kquinsland/hdmi-kvm-esphome/blob/main/docs/datasheets/PI5C3251QE-datasheetz.pdf" target="_blank" rel="noopener noreffer"><code>PI5C 3251QE</code></a> - 8:1 Mux/DeMux BusSwitch</li>
<li><a href="https://github.com/kquinsland/hdmi-kvm-esphome/blob/main/docs/datasheets//2008191807_WCH-Jiangsu-Qin-Heng-CH559L_C150548" target="_blank" rel="noopener noreffer"><code>CH559L</code></a> - 8 bit enhanced USB MCU CH559</li>
<li><a href="https://github.com/kquinsland/hdmi-kvm-esphome/blob/main/docs/datasheets/FE1.1s%2BData%2BSheet%2B%28Rev.%2B1.0%29.pdf" target="_blank" rel="noopener noreffer"><code>FE1.1s</code></a> - FE1.1S USB 2.0 HIGH SPEED 4-PORT HUB CONTROLLER</li>
</ul>
]]></description></item><item><title>PoE powered Stack Light</title><link>https://karlquinsland.com/poe-stack-light/</link><pubDate>Sun, 28 Feb 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/poe-stack-light/</guid><description><![CDATA[<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The lights are much brighter than they appear in this picture; had to intentionally darken the image to prevent camera from blowing out the colors.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p><a href="https://en.wikipedia.org/wiki/Stack_light" target="_blank" rel="noopener noreffer">Stack/signal lights</a> are <em>everywhere</em> in industrial applications for good reason: they&rsquo;re a compact and relatively information-dense indicator system. They always seemed like the kind of indicator that only people with expensive machines needed. Until I found that they can be had for just under $6/light from Ali Express, that is.</p>
<p>I don&rsquo;t have any giant industrial machines to attach one to, but I do have a non-trivial number of containers/servers/networked-devices running and they all emit various notifications, usually through email. Who wouldn&rsquo;t mind a novel way to move those notifications beyond email/push notifications into the physical world 🤔?</p>
<ul>
<li>🟢 =&gt; Everything is nominal</li>
<li>🟠 =&gt; Check your email; a <code>WARN</code> level event has occurred</li>
<li>🔴 =&gt; A <code>WARN</code> or <code>ERROR</code> level condition has occurred; something (ISP down?) is preventing delivery of notifications so check the logs/dashboards directly</li>
<li>🔵 =&gt; A new <code>INFO</code> level message available in Home Assistant</li>
<li>⚪ =&gt; Not sure; either a &ldquo;A HIGH priority task is past due&rdquo; or a &lsquo;modifier&rsquo; for above status</li>
</ul>
<p>While waiting for the light to arrive from China, I started to design something to drive it.
It was immediately obvious that an ESP32 module would be <strong>ideal</strong> to run the show, and just for the fun of it, I decided to make the entire thing (optionally) controlled and powered over Ethernet.</p>
<h2 id="home-assistant">Home Assistant</h2>
<p>It wouldn&rsquo;t be an ESP32 powered project w/o the the <em>fantastic</em> <a href="https://esphome.io/" target="_blank" rel="noopener noreffer">ESPHome</a> framework! With ESPHome comes trivial Home Assistant integration; each individual light / channel on the stack light is automatically configured via MQTT a a light:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Stack light is controlled via MQTT making it easy to control from Home Assistant or any other program that can speak MQTT.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>A slightly modified version of the ESPHome config that I use to build the firmware for the light is attached at the end of this post.</p>
<p>Unfortunately, the one Home Assistant integration that I had in mind is currently not feasible!
I wanted to light the blue light when there is any new/unread Home Assistant <a href="https://www.home-assistant.io/integrations/persistent_notification/" target="_blank" rel="noopener noreffer">persistent notifications</a>;
a real life &ldquo;unread&rdquo; badge of sorts.</p>
<p>There is no way to get the list / count of active notifications unless you&rsquo;re a <a href="https://github.com/home-assistant/core/blob/41b45c7f78f9937520b38126cedf228da7507d7d/homeassistant/components/persistent_notification/__init__.py#L203" target="_blank" rel="noopener noreffer">websocket client</a>, however.</p>
<p>Using the <a href="https://github.com/home-assistant/core/blob/41b45c7f78f9937520b38126cedf228da7507d7d/homeassistant/components/persistent_notification/__init__.py#L30" target="_blank" rel="noopener noreffer"><code>persistent_notifications_updated</code></a> event as a trigger won&rsquo;t work because the event payload lacks useful data; I can&rsquo;t figure out the number of notifications or their state&hellip; just that either notification has been created or dismissed.
If I wanted the blue light on any time a notification was either created or destroyed, I could use this trigger. But the light is no longer a useful indicator; it would be on the first time a notification was created or destroyed and then it would never be off.</p>
<p>Manually trying to <a href="https://community.home-assistant.io/t/dismiss-of-a-persistent-notification-as-trigger-for-automations/135621/5" target="_blank" rel="noopener noreffer">keep track of the number of notification created/dismissed actions</a> just feels like a hacky workaround that could easily get out of sync, too.</p>
<p>Oh well 😔.</p>
<h2 id="bom">BOM</h2>
<p>I&rsquo;ll cover the individual 3D printed and electronic components below. Beyond them, you&rsquo;ll need some additional hardware:</p>
<ul>
<li>4x <a href="https://www.mcmaster.com/catalog/91290A113" target="_blank" rel="noopener noreffer">m3x8mm</a> screws</li>
<li>4x <a href="https://www.mcmaster.com/catalog/91274A115" target="_blank" rel="noopener noreffer">m4x8mm</a> screws</li>
<li>4x <a href="https://www.mcmaster.com/catalog/91274A117" target="_blank" rel="noopener noreffer">m4x10mm</a> screws</li>
<li>6x <a href="https://www.kjmagnetics.com/proddetail.asp?prod=BC41" target="_blank" rel="noopener noreffer">Neodymium magnets</a> sized 20mm x 6mm x 2mm. These are optional and are leftover magnets from this <a href="https://www.google.com/search?client=firefox-b-1-d&amp;q=prusa&#43;mk3&#43;enclosure&#43;2" target="_blank" rel="noopener noreffer">build</a></li>
<li>10mm diameter <a href="https://www.amazon.com/s?k=10mm&#43;cabinet&#43;door&#43;pad" target="_blank" rel="noopener noreffer">anti-slip pads</a>. Thees are optional but will keep the base from sliding around.</li>
</ul>
<p>I&rsquo;ve linked to the screws that I used, but any similar ones should work. Strong glue could also work, but is not recommended.</p>
<p>The m3 screws are for attaching the PCB to the printed part (in yellow, below)
The shorter m4 screws are for attaching the base (yellow) to the lid (dark blue) and the longer screws are for attaching the stack light to the lid.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        About to start melting threads into the 3D printed parts.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h4 id="stack-light">Stack light</h4>
<p>Looking quickly through Ali Express, it seems that the lights come in a few different styles, but all appear to be modular in construction.
Regardless of lamp style, they all appear to come in 2-5 lamp variants and some have configuration switches that allow for customizing the behavior per lamp.</p>
<p>The ESPHome code and PCB are designed to accommodate up to 6 colors but will work with less.</p>
<p>No matter which style and colors you select, make sure you get one with a <strong>positive <a href="https://en.wikipedia.org/wiki/Anode" target="_blank" rel="noopener noreffer">anode</a></strong> rated for <strong>12V DC</strong>.</p>
<p>The exact lamp that I used is <a href="https://www.aliexpress.com/item/1005001391165850.html" target="_blank" rel="noopener noreffer">here</a>.</p>
<h4 id="esp32-module">ESP32 Module</h4>
<p>I chose to use the <a href="https://www.aliexpress.com/item/1005001739834076.html" target="_blank" rel="noopener noreffer">WirelessTag WT32-eth01</a> module for the onboard Ethernet circuitry at a relatively cheap price: about $10/module. Bonus: it&rsquo;s got a breadboard friendly footprint <em>and</em> castellated pads!</p>
<p>You do not need to use Ethernet for control <em>or</em> power; the ESPHome configuration below can be easily modified to use the WiFi.</p>
<p>In any case, you will need a dedicated UART programmer for the module as there is no built-in USB port on the WT32-eth01.</p>
<h4 id="pcb">PCB</h4>
<p>Nothing much to see here; just a simple board to consolidate connections for what would otherwise be a mess of wires.</p>
<p>Since I was already using Ethernet for the data, may as well use it for the power, too.
Designing my own PoE circuitry was not in scope for this project, so I went with another off-the-shelf <a href="https://www.aliexpress.com/item/32620368747.html" target="_blank" rel="noopener noreffer">module</a>. I ordered the <code>12V2A-Full 24W</code> version, but the others are likely to also have an identical internal PCB layout which should fit in the 3D printed parts. Make sure to get one that supplies the 12V that the stack light will need!</p>
<p>The PCB does not care <em>where</em> the 12V DC supply comes from.
It wouldn&rsquo;t be difficult to modify the enclosure to accommodate a <a href="https://www.aliexpress.com/item/1005001668143510.html" target="_blank" rel="noopener noreffer">USB-C Power Delivery module</a> or even just a standard barrel jack / LED power supply.</p>
<p>Like the PoE module, I use an off the shelf DC to DC converter <a href="https://www.aliexpress.com/item/32833398811.html" target="_blank" rel="noopener noreffer">module</a> to step the 12V down from the PoE dongle to 5V which the ESP32 module requires. That link is to a whole-sale lot of 10 converters. You can order the same module in quantities of one from similar listings. I buy them in bulk because it&rsquo;s more expensive to design and solder my own on each board that I build&hellip;</p>
<p>My testing isn&rsquo;t super through, but I see the total power draw (measured from the PoE supplying equipment) reaching about 4.5W when all lights are on and about 2W at at idle.</p>
<p>The ESP32 just drives some <a href="https://lcsc.com/product-detail/MOSFET_Diodes-Incorporated-DMN1019USN-7_C145103.html" target="_blank" rel="noopener noreffer">N-Channel MOSFETS</a> to switch the individual lights on/off.
They&rsquo;re the only surface mount (SOT-23-4) component; everything else can be done with through hole components. The board is designed for up to 6 colors/lights, but populate only as many MOSFETS as you need.</p>
<p>All of the screw terminals are optional; I had several spares left over from a different project, but soldering wires directly to the PCB would work as well.</p>
<p>The 6 pin screw terminal is LCSC part <a href="https://lcsc.com/product-detail/Screw-terminal_JILN-JL301-50007U02_C409139.html" target="_blank" rel="noopener noreffer"><code>C409139</code></a></p>
<p>The 2 pin screw terminal is LCSC part <a href="https://lcsc.com/product-detail/Screw-terminal_Ningbo-Kangnex-Elec-WJ129V-5-0-2P_C8463.html" target="_blank" rel="noopener noreffer"><code>C8463</code></a></p>
<p>The source and gerber files from EasyEDA are below. Upload them to your favorite PCB prototyping service or try your hand at making your own.</p>
<h4 id="printed-parts">Printed parts</h4>
<p>There are two parts: a <code>lid</code> and a <code>plate</code>. The electronics are attached to the plate and the stack light is attached to the lid. In the photos associated with this post, the <code>lid</code> is dark blue and the <code>plate</code> is yellow.</p>
<p>The plate has features for several attachment methods:</p>
<ul>
<li>magnets; meant for horizontal surfaces</li>
<li>3M command strip; probably wont be enough to do wall/ceilings, but should work in lieu of magnets on horizontal surfaces</li>
<li>4 circular indents (<code>10mm</code> diameter) included for anti-slip pads</li>
<li>drywall screw/slot mounting for walls/ceilings</li>
</ul>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        I wasn&#39;t sure where I&#39;d want to install this, so there are a few options for attaching the base to surfaces.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>Pause the print job at the correct layer if you intend to embed magnets:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Insert your magnets before the layer covering thee 6 cavities is printed.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>Both the <code>lid</code> and <code>base</code> are easy to print; material and color are up to you, as is layer height and quality settings. The <code>stl</code> and <code>step</code> files for both are at the end of this post.
Should you want to make your own enclosure from scratch, I have also included the <code>step</code> files for the PoE dongle and PCB below.</p>
<h2 id="assemble">Assemble</h2>
<p>Assembly is relatively straightforward; its mostly integrating a few components into a simple 3d printed enclosure.</p>
<h3 id="pcb-1">PCB</h3>
<p>Solder the electronic components to the PCB. If omitting screw terminals for the stack light wires, do not solder them to the PCB yet!</p>
<p>I created the castellated pad footprint for the ESP32 module by hand and, in the version of the PCB pictured, didn&rsquo;t get the pads as close as they should be so there are some ugly solder blobs to compensate. The pads are correctly placed on the most recent PCB revision.</p>
<p>I have included two programming headers on the PCB to flash your firmware; one at <code>2.54mm</code> pitch and the other at <code>1.0mm</code> pitch, the latter of which is intended for use with <a href="https://www.aliexpress.com/item/4001122992446.html" target="_blank" rel="noopener noreffer">this</a> programmer.</p>
<p>There is a solder bridge labeled <code>EXT 3v3</code>; short this out if you intend to use the programmer to power the ESP32 module. Leave it alone if you plan to use external DC to power the device during programming.</p>
<p>I suggest programming the module <em>now</em> to verify that you&rsquo;ve built the PCB correctly and that your stack light works as expected.
Once you&rsquo;ve confirmed the electronics and software all work together, proceed to final assembly.</p>
<h2 id="everything-else">Everything else</h2>
<p>The various holes designed to receive screw threads are intentionally undersized. If you&rsquo;re not using self-tapping screws, you&rsquo;ll find it MUCH EASER to insert a <em>hot</em> screw for the first time.</p>
<p>With the screw on the end of the driver, hold the tip of the screw/threads under a flame for 5-10 seconds and then quickly rotate the screw into the plastic using a bit of extra &lsquo;pushing&rsquo; force.
Once the screw is fully inserted, allow it to fully cool (~5min) so the softened plastic has a chance to solidify around the screw threads.</p>
<p>The screws that hold the base plate to the body of the enclosure are meant to sit flush. Ensure that you screw them in fully before the plastic cools!</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        If the screws protrude even a fraction of a millimeter, the light can wobble and the magnetic attachment is weakened.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>While waiting for the screws to cool, cut the Ethernet and power leads from the PoE dongle down to size. Desolder the leads from the dongle, trim to be as short as possible and re-solder.</p>
<p>The less &lsquo;slack&rsquo; cable in the enclosure, the easier it will be to finish assembly!</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        I cut a few inches off the Ethernet cable and power leads so everything fits in the enclosure better.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>After the screws have cooled, ensure that the PCB sits flush against the mounts.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        PCB should be flush against the mounting posts.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>With all wires connected, lift the PoE dongle off of the base plate slightly and align the RJ45 jack with the square hole in the enclosure.</p>
<p>Make sure the side of the base plate opposite the side with the RJ45 jack is securely mounts into the body of the enclosure!</p>
<p>Gently press the remaining side of the base plate into the enclosure. As the base plate gets closer to flush with the body, the RJ45 jack should slowly come into alignment with the wall.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Use the plate as a lever to carefully push, then hold, the PoE dongle in place.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>When the base blate is completely installed into the body, the RJ45 jack should be flush with the external wall of the enclosure.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        RJ45 jack should be flush to the outer wall of the enclosure.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>Attach the base plate to the enclosure body with the 4 screws, attach silicon feet or a 3M command strip and then you&rsquo;re done!</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Translucent white lenses for much less ambiguity than the stack lights with colored lenses.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h2 id="files">Files</h2>
<p>All files below are licensed under the <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="noopener noreffer">Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)</a> license unless otherwise explicitly noted.</p>
<p><strong>None of the files below may be used for commercial purposes</strong></p>
<ul>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/poe-stack-light/images/complete/01_all_off.jpg">
                    
                </a>
                
                <figcaption>
                    <small>Translucent white lenses for much less ambiguity than the stack lights with colored lenses.</small>
                </figcaption>
                
            </figure>

        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/poe-stack-light/images/assemble/base_mounting_options.png">
                    
                </a>
                
                <figcaption>
                    <small>I wasn&#39;t sure where I&#39;d want to install this, so there are a few options for attaching the base to surfaces.</small>
                </figcaption>
                
            </figure>

        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/poe-stack-light/images/assemble/04_close.jpg">
                    
                </a>
                
                <figcaption>
                    <small>Use the plate as a lever to carefully push, then hold, the PoE dongle in place.</small>
                </figcaption>
                
            </figure>

        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/poe-stack-light/images/complete/02_all_on.jpg">
                    
                </a>
                
                <figcaption>
                    <small>The lights are much brighter than they appear in this picture; had to intentionally darken the image to prevent camera from blowing out the colors.</small>
                </figcaption>
                
            </figure>

        
    </li>
    
    <li>
        
            <a target="_blank" href="https://karlquinsland.com/poe-stack-light/files/easy_eda_gerber.zip">
                <i class="far fa-file-"></i>
                files/easy_eda_gerber.zip:
                
                
                <br>
                <small>sha1: d7686b0ad88a1686a5a11cb009632b53ca474c75</small>
                
            </a>
        
    </li>
    
    <li>
        
            <a target="_blank" href="https://karlquinsland.com/poe-stack-light/files/easy_eda_source.zip">
                <i class="far fa-file-"></i>
                files/easy_eda_source.zip:
                
                
                <br>
                <small>sha1: e05a00cdca9af94dd0e8d1d8f3aa998b75c14a08</small>
                
            </a>
        
    </li>
    
    <li>
        
            <a target="_blank" href="https://karlquinsland.com/poe-stack-light/files/enclosure-lid-m1v2.stl">
                <i class="far fa-file-code"></i>
                files/enclosure-lid-m1v2.stl:
                
                <small style="font-family:'Lucida Console', monospace">stl</small> <small>file</small>
                
                
                <br>
                <small>sha1: 3870a674d9cf08bf26e3607e42ee766e9816ac6c</small>
                
            </a>
        
    </li>
    
    <li>
        
            <a target="_blank" href="https://karlquinsland.com/poe-stack-light/files/enclosure-plate-m1v2.stl">
                <i class="far fa-file-code"></i>
                files/enclosure-plate-m1v2.stl:
                
                <small style="font-family:'Lucida Console', monospace">stl</small> <small>file</small>
                
                
                <br>
                <small>sha1: 8f90b54be2a798cf87bc6ca4fc118b82669e0668</small>
                
            </a>
        
    </li>
    
    <li>
        
            <a target="_blank" href="https://karlquinsland.com/poe-stack-light/files/esphome_confg.yaml">
                <i class="far fa-file-code"></i>
                files/esphome_confg.yaml:
                
                <small style="font-family:'Lucida Console', monospace">yaml</small> <small>file</small>
                
                
                <br>
                <small>sha1: aa0076b7bee08f09568536463c8794f15a2f59b2</small>
                
            </a>
        
    </li>
    
    <li>
        
            <a target="_blank" href="https://karlquinsland.com/poe-stack-light/files/pcb.step">
                <i class="far fa-file-code"></i>
                files/pcb.step:
                
                <small style="font-family:'Lucida Console', monospace">step</small> <small>file</small>
                
                
                <br>
                <small>sha1: e212f3cd3d90a639e6518b7d11bc5cc20df09b67</small>
                
            </a>
        
    </li>
    
    <li>
        
            <a target="_blank" href="https://karlquinsland.com/poe-stack-light/files/poe-dongle.step">
                <i class="far fa-file-code"></i>
                files/poe-dongle.step:
                
                <small style="font-family:'Lucida Console', monospace">step</small> <small>file</small>
                
                
                <br>
                <small>sha1: a698c249d89f2ab2c981427df49620cb09ce5f66</small>
                
            </a>
        
    </li>
    
    <li>
        
            <a target="_blank" href="https://karlquinsland.com/poe-stack-light/files/stack-light-base.step">
                <i class="far fa-file-code"></i>
                files/stack-light-base.step:
                
                <small style="font-family:'Lucida Console', monospace">step</small> <small>file</small>
                
                
                <br>
                <small>sha1: 3c3d0d6162a985b4f09d0f9a58fdacb3f08beb78</small>
                
            </a>
        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/poe-stack-light/images/assemble/00_flush_screws.jpg">
                    
                </a>
                
                <figcaption>
                    <small>If the screws protrude even a fraction of a millimeter, the light can wobble and the magnetic attachment is weakened.</small>
                </figcaption>
                
            </figure>

        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/poe-stack-light/images/home-assistant.png">
                    
                </a>
                
                <figcaption>
                    <small>Stack light is controlled via MQTT making it easy to control from Home Assistant or any other program that can speak MQTT.</small>
                </figcaption>
                
            </figure>

        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/poe-stack-light/images/assemble/02_pcb_attached.jpg">
                    
                </a>
                
                <figcaption>
                    <small>PCB should be flush against the mounting posts.</small>
                </figcaption>
                
            </figure>

        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/poe-stack-light/images/complete/00_plugged_in.jpg">
                    
                </a>
                
                <figcaption>
                    <small>RJ45 jack should be flush to the outer wall of the enclosure.</small>
                </figcaption>
                
            </figure>

        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/poe-stack-light/images/assemble/01_prep.jpg">
                    
                </a>
                
                <figcaption>
                    <small>About to start melting threads into the 3D printed parts.</small>
                </figcaption>
                
            </figure>

        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/poe-stack-light/images/slicer.png">
                    
                </a>
                
                <figcaption>
                    <small>Insert your magnets before the layer covering thee 6 cavities is printed.</small>
                </figcaption>
                
            </figure>

        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/poe-stack-light/images/assemble/03_wire.jpg">
                    
                </a>
                
                <figcaption>
                    <small>I cut a few inches off the Ethernet cable and power leads so everything fits in the enclosure better.</small>
                </figcaption>
                
            </figure>

        
    </li>
    
</ul>

]]></description></item><item><title>Adding an airborne particulate mater sensor to WS3 Weather Station</title><link>https://karlquinsland.com/ws3-weather-station-pm25-sensor/</link><pubDate>Thu, 27 Aug 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/ws3-weather-station-pm25-sensor/</guid><description><![CDATA[<p>A while back, I <a href="https://github.com/kquinsland/ws3-to-esphome-bridge/" target="_blank" rel="noopener noreffer">posted a small bit of code</a> that could decode the data from the ubiquitous WS3 Weather Station and make it accessible to the amazing <a href="https://www.home-assistant.io/" target="_blank" rel="noopener noreffer">HomeAssistant</a> via the wonderful <a href="https://esphome.io/" target="_blank" rel="noopener noreffer">ESPHome</a> project. Since then, my weather station has been dutifully collecting data that&rsquo;s been invaluable for augmenting automation that deals with indoor climate.</p>
<p>As the numerous wild fires in California rage on, <a href="https://www.forbes.com/sites/ericmack/2020/08/21/wildfire-smoke-blankets-the-west-as-california-records-worlds-worst-air-quality/" target="_blank" rel="noopener noreffer">the air quality has gone from bad to dangerous</a>. Knowing that outside was warmer, but less humid, was no longer enough to make a smart decision about weather or not to open the windows for some cost-effective cooling. I now need HomeAssistant to be aware of how clean the outside air was before making the decision to pipe in outdoor air.</p>
<p>This post covers two things:</p>
<ul>
<li>A small update to the existing WS3 -&gt; ESPHome -&gt; HomeAssistant bridge code to take advantage of the WS3s&rsquo; support for the ubiquitous <code>PMS5003T</code> sensor.</li>
<li>A simple 3d-printable enclosure for deploying the particulate matter sensor outdoors</li>
</ul>
<p>When deployed, it looks like this:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Excuse the awkward camera angle; sensor is deployed in an awkward to photograph location.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>Please ignore the awkward camera angle as the sensor is deployed in a location where there&rsquo;s not quite enough room for proper camera placement.</p>
<p>And results in graphs that look like this:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Smoke particles are between .4μm to .7μm in size... which explains the elevated red line relative to other particle sizes.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>A simplified copy of this post appears on <a href="https://www.thingiverse.com/thing:4581351" target="_blank" rel="noopener noreffer">thingiverse</a> and <a href="https://www.prusaprinters.org/prints/39560-outdoor-enclosure-for-pms5003-particulate-matter-s" target="_blank" rel="noopener noreffer">prusaprinters</a>.</p>
<h2 id="the-enclosure">The enclosure</h2>
<p>As of writing, there&rsquo;s <a href="https://www.thingiverse.com/thing:4044492" target="_blank" rel="noopener noreffer">one existing enclosure</a> for the sensor on thingiverse. Unfortunately, the enclosure does not appear to have any design features for mounting to a pole nor does it have any bug-proofing design elements. I took this opportunity to design my own that could be easily mounted, features a slanted &lsquo;roof&rsquo; to prevent standing moisture ingress and could use standard size tobacco pipe filters to keep all but the tiniest of insects/particles out.</p>
<p>The sensor uses a small fan to draw ambient air past an infrared laser. As airborne particles cross the laser beam, they reflect a certain amount of light which can be correlated with the size of the particle. This data can then be turned into fairly accurate counts of how many particles of a given size are in the sampled air. The enclosure is a basic box with two circular air channels pointed downwards to prevent moisture ingress. The intake and exhaust ports are at staggered heights and pointed in opposite directions and to minimize the chance of recirculating the same air.</p>
<p>The lower port is the intake which connects to a few small holes on the front of the sensor and the exhaust port is the raised port which connects directly to the exhaust fan. If you could remove the first few mm from the front, it would look something like this:</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>From the side, you can see the two air channels and the few mm of room in the back for wiring. The sensor sits on a &lsquo;pedestal&rsquo; to keep it elevated away from any moisture that may collect on the bottom of the enclosure.</p>
<p>The base plate/pedestal are secured to the &lsquo;body&rsquo; with two M3 screws. I used <code>10mm</code> as that&rsquo;s what I had on hand, but screws between 6-12mm should work as well. The holes are sized for a M3, but any similar sized screw will work. Use a lighter or similar to heat the screw as you drive it into the plastic to create your own threads if using a larger/longer screw.</p>
<p>Besides the &lsquo;pedestal&rsquo; there are a few contact surfaces that hold on to the sensor with a friction fit. The &lsquo;ceiling&rsquo; is a few mm thick and shouldn&rsquo;t permit much moisture ingress but an optional slanted roof component can be printed as an extra precaution.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Upper and lower chambers for exhaust and intake.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>While designing the enclosure, I used this <a href="https://grabcad.com/library/pms5003-2" target="_blank" rel="noopener noreffer"><code>PMS5003</code> model</a> from Leclercq Gregory. 🙏</p>
<h3 id="printing">Printing</h3>
<p>This is a functional part with only three small surfaces that require reasonably tight precision to properly hold onto the sensor. The <code>SPEED</code> setting with a <code>.2mm</code> layer height and a reasonable 20% infill gave me part that works and feels water tight. The walls and ceiling need to keep water out so dipping below 15% infill or otherwise using settings that wont give solid layer adhesion is not advised. I printed using ABS for durability, but PLA will probably work if you can deploy into a shaded environment.</p>
<p>The shroud and the base are not optional, the triangle shaped block is intended to turn the flat roof of the shroud into a slanted roof so water can&rsquo;t collect. It is optional but shown below.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        No raft/support when printed in this orientation.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h2 id="assemble">Assemble</h2>
<p>Briefly:</p>
<ul>
<li>collect materials</li>
<li>press-fit the PM2.5 sensor into the enclosure</li>
<li>make a wire that can interface the PM2.5 sensor to the WS3 board via RJ11</li>
<li>seal everything up</li>
<li>glue on mesh screens and angled roof</li>
<li>plug into WS3</li>
<li>flash ESPHome onto</li>
</ul>
<h3 id="bill-of-materials">Bill of Materials</h3>
<p>More or less everything that is needed for assembly is pictured below.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        More or less everything needed to assemble.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>Components:</p>
<ul>
<li>
<p><a href="https://www.aliexpress.com/item/32921725022.html" target="_blank" rel="noopener noreffer">WS3 Weather Station</a> - Essential / Foundational</p>
</li>
<li>
<p><a href="https://rover.ebay.com/rover/1/711-53200-19255-0/1?mpre=https%3A%2F%2Fwww.ebay.com%2Fitm%2FDigital-Universal-Particle-Concentration-Laser-Sensor-PMS5003-PM1-0-PM2-5-PM10%2F254616699639&amp;campid=5338734064&amp;toolid=10001&amp;customid=" target="_blank" rel="noopener noreffer">ST5003T PM2.5 Sensor</a> - Essential / Foundational</p>
</li>
<li>
<p><a href="https://rover.ebay.com/rover/1/711-53200-19255-0/1?mpre=https%3A%2F%2Fwww.ebay.com%2Fitm%2FTTGO-Wemos-MINI-D1-ESP32-WiFi-Bluetooth-Wemos-D1-Mini-ESP8266-ESP-32-Module%2F183413480551&amp;campid=5338734064&amp;toolid=10001&amp;customid=" target="_blank" rel="noopener noreffer">ESP32 Device</a> - A link to the ESP32 based device that I use but any ESP platform with a spare GPIO that can be used as a UART will work.</p>
</li>
<li>
<p><a href="https://rover.ebay.com/rover/1/711-53200-19255-0/1?mpre=https%3A%2F%2Fwww.ebay.com%2Fitm%2F25-Stainless-Steel-Smoking-Pipe-Screens-3-4-19mm-Tobacco-HOOKAH-FILTER-Heavy%2F183969079809&amp;campid=5338734064&amp;toolid=10001&amp;customid=" target="_blank" rel="noopener noreffer">3/4 inch tobacco pipe screens</a> - For bug/critter proofing the enclosure. Strongly suggested for outdoor deployments.</p>
</li>
<li>
<p><a href="https://www.mcmaster.com/91292A113/" target="_blank" rel="noopener noreffer">2x M3 x 10mm screws</a> - Optional. The base can be glued to the shroud or any similar screw will work</p>
</li>
</ul>
<p><strong>Note</strong>: Where possible, I&rsquo;ve used referral links. The links don&rsquo;t raise the price of any item, they simply let the retailer know that I sent you and, in return, I get a small cut of your purchase. If you&rsquo;re not comfortable with that, you can use a URL unwinding service to get the &lsquo;raw&rsquo; product link and drop the attribution/commission part.</p>
<p>General bits:</p>
<ul>
<li>Superglue</li>
<li>Waterproofing caulk/sealant</li>
<li>Drill/Screwdriver</li>
<li>Driver bit for the screws</li>
</ul>
<p>The stepped drill bit in the above picture is not a requirement if you assemble things in the correct oder. The cable egress hole is sized for a &rsquo;typical&rsquo; 3 pair <a href="https://en.wikipedia.org/wiki/Registered_jack#RJ11,_RJ14,_RJ25_wiring" target="_blank" rel="noopener noreffer">RJ11 cable</a> plus a tiny bit of wiggle room. I needed a working cable to test the code while the parts were printing so the hole in the printed base needed to be enlarged slightly to fit the head of the cable.</p>
<h3 id="wiring">Wiring</h3>
<p>There&rsquo;s no ready-made cable out there that&rsquo;ll join the two devices so one must be made. Fortunately, there&rsquo;s only 6 wires to deal with&hellip; 4 of them are distinct.</p>
<p>Sacrifice the cable that comes with the PM2.5 sensor and the RJ11 cable by cutting them in half and solder the correct wires together. The <em>color</em> of the wires that come in both the RJ11 cable and the PM2.5 cable are likely going to differ from the ones I used so I&rsquo;ve left those details out and provided a table showing which pins are to be joined together:</p>
<table>
<thead>
<tr>
<th>Pin #</th>
<th>PM2.5 Sensor Pin</th>
<th>WS3 Pin</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>VCC</td>
<td>5V</td>
</tr>
<tr>
<td>2</td>
<td>GND</td>
<td>GND</td>
</tr>
<tr>
<td>3</td>
<td>SET</td>
<td>ENABLE</td>
</tr>
<tr>
<td>4</td>
<td>RX</td>
<td>RX</td>
</tr>
<tr>
<td>5</td>
<td>TX</td>
<td>GND</td>
</tr>
<tr>
<td>6</td>
<td>RESET</td>
<td>5V</td>
</tr>
<tr>
<td>7</td>
<td>NC</td>
<td></td>
</tr>
<tr>
<td>8</td>
<td>NC</td>
<td></td>
</tr>
</tbody>
</table>
<p>For reference, Pin 1 on both the WS3 and PM2.5 Sensor:</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>With the wiring done, the sensor just needs to be stuffed into the enclosure. Don&rsquo;t forget to thread the RJ11 cable through the hole in the base plate <em>BEFORE</em> soldering it to the cable for the PM2.5 sensor&hellip; otherwise you&rsquo;ll need that stepped drill bit! 🙃</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Sensor has been press-fit into the enclosure and wire fed through the base plate.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>To finish, secure the base with screws and a bit of water-proofing caulk for good measure:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        I suggest waiting until the end to glue on the optional roof and waiting until just before that to glue on the optional mesh screens.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h2 id="the-code">The code</h2>
<p>Setting up and using ESPHome is outside the scope of this post but there are several <a href="https://esphome.io/guides/getting_started_hassio.html" target="_blank" rel="noopener noreffer">good guides</a> out there. Once you have that set up, <a href="https://esphome.io/custom/custom_component.html" target="_blank" rel="noopener noreffer">include</a> the <code>ws3.h</code> file and set up your custom sensor as shown below. A working example and more detail is over on the
<a href="https://github.com/kquinsland/ws3-to-esphome-bridge/" target="_blank" rel="noopener noreffer">github repo</a>.</p>
<p>It&rsquo;ll look like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">uart</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">uart_bus</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># At this time, ESP does not Transmit anything to the WS3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">tx_pin</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO16</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">rx_pin</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO17</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">baud_rate</span><span class="p">:</span><span class="w"> </span><span class="m">2400</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">sensor</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">custom</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      auto ws3 = new WS3(id(uart_bus));
</span></span></span><span class="line"><span class="cl"><span class="sd">      App.register_component(ws3);
</span></span></span><span class="line"><span class="cl"><span class="sd">      return {
</span></span></span><span class="line"><span class="cl"><span class="sd">        ws3-&gt;temperature_sensor, 
</span></span></span><span class="line"><span class="cl"><span class="sd">        ws3-&gt;pressure_sensor, 
</span></span></span><span class="line"><span class="cl"><span class="sd">        ws3-&gt;humidity_sensor, 
</span></span></span><span class="line"><span class="cl"><span class="sd">        ws3-&gt;wind_speed_current_sensor,
</span></span></span><span class="line"><span class="cl"><span class="sd">        ws3-&gt;wind_speed_peak_5m_sensor,
</span></span></span><span class="line"><span class="cl"><span class="sd">        ws3-&gt;wind_direction_sensor,
</span></span></span><span class="line"><span class="cl"><span class="sd">        ws3-&gt;rain_fall_1h_sensor, 
</span></span></span><span class="line"><span class="cl"><span class="sd">        ws3-&gt;rain_fall_24h_sensor,
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">        ws3-&gt;particles_03um,
</span></span></span><span class="line"><span class="cl"><span class="sd">        ws3-&gt;particles_05um,
</span></span></span><span class="line"><span class="cl"><span class="sd">        ws3-&gt;particles_10um,
</span></span></span><span class="line"><span class="cl"><span class="sd">        ws3-&gt;particles_25um,
</span></span></span><span class="line"><span class="cl"><span class="sd">        ws3-&gt;particles_50um,
</span></span></span><span class="line"><span class="cl"><span class="sd">        ws3-&gt;particles_100um,
</span></span></span><span class="line"><span class="cl"><span class="sd">      };</span><span class="w">      
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>With that, check the logs from your instance of ESPHome and you should see something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[D][ws3:157]: pkt_read_ok!
</span></span><span class="line"><span class="cl">[D][WS3:410]: VALID! Packet: [c000s000g000t093r000p000h35b09880,050,080,088,502,056,065,*18
</span></span><span class="line"><span class="cl">], Checksum: [18] chksum: [18]
</span></span><span class="line"><span class="cl">[E][WS3:342]: Validating: [c000s000g000t093r000p000h35b09880,050,080,088,502,056,065]
</span></span></code></pre></td></tr></table>
</div>
</div><p>indicating that the WS3 has detected the PM2.5 sensor and is reporting it&rsquo;s readings in addition to the temperature/wind data. Then just check your HomeAssistant install for the data.</p>
<h2 id="files">Files</h2>
<p>For archive / posterity, all source files are included here. All files are licensed as <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="noopener noreffer">Creative Commons Attribution-NonCommercial-ShareAlike</a> (CC BY-NC-SA).</p>
<ul>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/ws3-weather-station-pm25-sensor/images/02.assemble.jpg">
                    
                </a>
                
                <figcaption>
                    <small>Sensor has been press-fit into the enclosure and wire fed through the base plate.</small>
                </figcaption>
                
            </figure>

        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/ws3-weather-station-pm25-sensor/images/03.glue.jpg">
                    
                </a>
                
                <figcaption>
                    <small>I suggest waiting until the end to glue on the optional roof and waiting until just before that to glue on the optional mesh screens.</small>
                </figcaption>
                
            </figure>

        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/ws3-weather-station-pm25-sensor/images/example_dashboard.jpg">
                    
                </a>
                
                <figcaption>
                    <small>Smoke particles are between .4μm to .7μm in size... which explains the elevated red line relative to other particle sizes.</small>
                </figcaption>
                
            </figure>

        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/ws3-weather-station-pm25-sensor/images/04.installed.jpg">
                    
                </a>
                
                <figcaption>
                    <small>Excuse the awkward camera angle; sensor is deployed in an awkward to photograph location.</small>
                </figcaption>
                
            </figure>

        
    </li>
    
    <li>
        
            <a target="_blank" href="https://karlquinsland.com/ws3-weather-station-pm25-sensor/models/BASE.step">
                <i class="far fa-file-code"></i>
                models/BASE.step:
                
                <small style="font-family:'Lucida Console', monospace">step</small> <small>file</small>
                
                
            </a>
        
    </li>
    
    <li>
        
            <a target="_blank" href="https://karlquinsland.com/ws3-weather-station-pm25-sensor/models/BODY.step">
                <i class="far fa-file-code"></i>
                models/BODY.step:
                
                <small style="font-family:'Lucida Console', monospace">step</small> <small>file</small>
                
                
            </a>
        
    </li>
    
    <li>
        
            <a target="_blank" href="https://karlquinsland.com/ws3-weather-station-pm25-sensor/models/LID.step">
                <i class="far fa-file-code"></i>
                models/LID.step:
                
                <small style="font-family:'Lucida Console', monospace">step</small> <small>file</small>
                
                
            </a>
        
    </li>
    
    <li>
        
            <a target="_blank" href="https://karlquinsland.com/ws3-weather-station-pm25-sensor/models/base.stl">
                <i class="far fa-file-code"></i>
                models/base.stl:
                
                <small style="font-family:'Lucida Console', monospace">stl</small> <small>file</small>
                
                
            </a>
        
    </li>
    
    <li>
        
            <a target="_blank" href="https://karlquinsland.com/ws3-weather-station-pm25-sensor/models/body.stl">
                <i class="far fa-file-code"></i>
                models/body.stl:
                
                <small style="font-family:'Lucida Console', monospace">stl</small> <small>file</small>
                
                
            </a>
        
    </li>
    
    <li>
        
            <a target="_blank" href="https://karlquinsland.com/ws3-weather-station-pm25-sensor/models/combined.3mf">
                <i class="far fa-file-archive"></i>
                models/combined.3mf:
                
                <small style="font-family:'Lucida Console', monospace">3mf</small> <small>file</small>
                
                
            </a>
        
    </li>
    
    <li>
        
            <a target="_blank" href="https://karlquinsland.com/ws3-weather-station-pm25-sensor/models/lid.stl">
                <i class="far fa-file-code"></i>
                models/lid.stl:
                
                <small style="font-family:'Lucida Console', monospace">stl</small> <small>file</small>
                
                
            </a>
        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/ws3-weather-station-pm25-sensor/images/pin_out/PM2.5_Pins.jpg">
                    
                </a>
                
                
            </figure>

        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/ws3-weather-station-pm25-sensor/images/pin_out/WS3_Pins.jpg">
                    
                </a>
                
                
            </figure>

        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/ws3-weather-station-pm25-sensor/images/01.collect.jpg">
                    
                </a>
                
                <figcaption>
                    <small>More or less everything needed to assemble.</small>
                </figcaption>
                
            </figure>

        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/ws3-weather-station-pm25-sensor/images/suggested_print_orientation.jpg">
                    
                </a>
                
                <figcaption>
                    <small>No raft/support when printed in this orientation.</small>
                </figcaption>
                
            </figure>

        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/ws3-weather-station-pm25-sensor/images/f360_air_channels.jpg">
                    
                </a>
                
                
            </figure>

        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/ws3-weather-station-pm25-sensor/images/f360_side_profile.jpg">
                    
                </a>
                
                <figcaption>
                    <small>Upper and lower chambers for exhaust and intake.</small>
                </figcaption>
                
            </figure>

        
    </li>
    
</ul>

]]></description></item></channel></rss>