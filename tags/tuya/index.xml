<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Tuya - Tag - karl</title><link>https://karlquinsland.com/tags/tuya/</link><description>Tuya - Tag - karl</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 10 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://karlquinsland.com/tags/tuya/" rel="self" type="application/rss+xml"/><item><title>Using Qi charging to fix the biggest design flaw with the HidrateSpark Steel Pro bottle</title><link>https://karlquinsland.com/hidrate-spark-qi-retrofit/</link><pubDate>Fri, 10 Jun 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/hidrate-spark-qi-retrofit/</guid><description><![CDATA[<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>Parts and Instructions<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">The majority of this post covers the &ldquo;why&rdquo; this mod came to be. If you&rsquo;re just looking for the mod, you can find
the 3d printable parts, BOM and instructions in <a href="https://github.com/kquinsland/hidrate-spark-qi-charging" target="_blank" rel="noopener noreffer">accompanying github repo</a>.</div>
        </div>
    </div>
<h1 id="what">What</h1>
<p><a href="https://hidratespark.com/" target="_blank" rel="noopener noreffer">Hidrate Spark</a> bottles are one of a small but growing number of &lsquo;smart&rsquo; water bottles.
In this instance, &lsquo;smart&rsquo; refers to some mechanism for reporting on and tracking the bottles content over time.</p>
<p>There are a few ways to measure liquid levels but the current generation of Hidrate Spark bottles uses a small sensor puck which contains a <a href="https://en.wikipedia.org/wiki/Load_cell" target="_blank" rel="noopener noreffer">load cell</a>.
As the bottle is emptied or filled, the puck measures a difference in weight which can then be compared with the known weight of a full/empty bottle to determine exactly how full the bottle is.</p>
<p>There are a <em>ton</em> of reasons why you might want to track your water intake but they all generally fall into one of a few broad categories:</p>
<ul>
<li>Dietary restrictions: Athletes and competitors of all sorts need to precisely track their diets and water intake is no exception.</li>
<li>Medication side effects:  Any medication with &lsquo;diminishes thirst&rsquo; as a side effect almost guarantees dehydration. A bottle that knows how long it&rsquo;s been since your last drink is a very effective way to mitigate these side effects.</li>
<li>Personal curiosity / <a href="https://en.wikipedia.org/wiki/Quantified_self" target="_blank" rel="noopener noreffer">quantified self</a>: If you&rsquo;re already tracking other aspects of your physical/mental health throughout the day, knowing when/how much water you had makes for some more interesting graphs.
<ul>
<li>In the same vein, your levels of hydration can effect: cognition, blood pressure, mood, blood glucose levels, energy, complexion and more.</li>
</ul>
</li>
</ul>
<p>Now as for why you&rsquo;d need to bolt a kitchen scale and a BTLE radio onto the bottom of a water bottle in order to record this, there&rsquo;s really only one reason: Automation.</p>
<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>Warning<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">I&rsquo;m not going to entertain the &ldquo;now you&rsquo;re just being silly; there&rsquo;s no need for a water bottle to have a radio or battery in it&rdquo; crowd. If you don&rsquo;t value any of the reasons outlined above then we agree&hellip; this is a silly water bottle and <strong>you</strong> don&rsquo;t have a good reason to own one.</div>
        </div>
    </div>
<h2 id="design-evaluation">Design evaluation</h2>
<p>Overall, the Hidrate Spark bottle works. It is not without some drawbacks, though.
The primary and obvious downside is charging the battery 🪫.</p>
<p>Depending on how aggressive you have the LEDs configured, the battery will need charging somewhere between 1-5 times a week.
The app will inform you when the battery is low, but sometimes the notifications come far to late to be useful. I have lost data because the warning came less than an hour before the battery was dead and about 9 hours before I&rsquo;d be able to charge it again.</p>
<p>To charge the battery, you need to remove the sensor puck from the bottle and then attach a fiddly and proprietary USB connector. Worse, this connector uses prone-to-failure <a href="https://en.wikipedia.org/wiki/Pogo_pin" target="_blank" rel="noopener noreffer">Pogo pins</a>.</p>
<p>Ignoring the shameful and unnecessary use of a non-standard USB micro/C port for charing, you now have to wait a few hours for the battery to charge; during this time, the puck can&rsquo;t be inserted into the bottle so it can&rsquo;t record data while it&rsquo;s being charged.
Remind you of anything?</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Apple won all sorts of &#39;asshole design&#39; awards for this. Hidrate spark was inspired to also win such an award! src: YouTube/Tony H
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>So to re-cap:</p>
<ul>
<li>Anywhere from 1-5 times a week you&rsquo;ll need to remove the sensor from the bottle. During this time you&rsquo;ll have to manually track any consumed water&hellip;. defeating the entire point of the bottle!</li>
<li>If you don&rsquo;t charge the puck in time, you&rsquo;ll also loose automatic tracking of consumption&hellip; with little or no notice from either the puck or the app. The puck does not store measurements in flash so any data recorded before the battery died but not yet synced to the phone is <em>gone</em>.</li>
<li>You will need to pack a dedicated cable for charging the bottle if you travel. Don&rsquo;t loose or damage it because you can&rsquo;t go to the closest electronics shop to get another compatible cable!</li>
</ul>
<p>When I did my initial tear down, I didn&rsquo;t spot any electrical reason why the bottle could not charge and measure at the same time.
After some additional testing, I was able to confirm that the firmware also does not object.</p>
<p>At the <strong><em>very least</em></strong> the Hidrate team could have put the pogo pins on the bottom and shipped the bottle with a charging dock/base similar to how Ember does their mugs.</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Pogo pins and slip-rings are not perfect but at least you can charge and use the mug at the same time!
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>The proprietary nature of the charge connection is still not ideal but at least the bottle could be &ldquo;used&rdquo; while it was charging.
If the charging dock was centrally or conveniently located, the sensor puck could be consistently &rsquo;topped off&rsquo;; trickle charing while idle in the same way wireless charging of phots works; take a sip and put the bottle back down to charge and measure the consumption.</p>
<p>Alternatively, the Hidrate designers could have at least used a standard USBC or micro USB jack in the same location as the current charging pogo pins.
Since the charge location is at the &rsquo;top&rsquo; of the sensor puck which is deeply embedded in the base of the water bottle, they might not have even needed to bother with a &lsquo;fancy&rsquo; waterproof USB port and the additional electronics necessary to detect water/debris and cut off charging.</p>
<p>Going with a standard USB C port in place of pogo pins would have the &ldquo;can&rsquo;t use it and charge it at the same time&rdquo; draw back but it would have at least eliminated a proprietary cable!</p>
<h2 id="the-other-draw-backs">The other draw backs</h2>
<p>While the biggest design flaw is related to battery charging, the Hidrate spark does have a few other noteworthy issues.</p>
<h3 id="recalibration">Recalibration</h3>
<p>The sensor puck measures changes in weight.
To know how full the bottle is, the sensor puck must also be aware of the weight of a full and empty bottle.
This weight range will change based on the density of the liquid inside.
A bottle that is full of water will have a different weight compared to a bottle that is full of orange juice, for example.
Any time the liquid in the bottle changes, the sensor puck will need to be recalibrated.</p>
<p>To measure changes in weight/weight, the sensor puck relies on a load cell which (slightly) deforms as the load on it changes.
All mechanical parts will wear with time so the bottle will periodically need to be recalibrated from time to time just to stay accurate.
Likewise, if the bottle is dropped or otherwise experiences a sharp impact, the sensor will most certainly need to be recalibrated.</p>
<h3 id="misc">Misc</h3>
<ul>
<li>No temperature. The sensor is completely independent from the primary bottle so there is no easy way to record the temperature of the liquid. It would be nice to know how cold the liquid inside is from time to time. The hidrate team could have engineered a temperature sensor into the bottle body that would come into contact with the sensor puck when inserted but this almost certainly would have increased manufacturing costs for a relatively small benefit.</li>
<li>Imprecise and limited user feedback. The only way the sensor puck can communicate with the user is through the ring of addressable LEDs around the permitter and through BTLE; the latter of which is unreliable as the user might not have their phone nearby or the app might be closed. There is no way for the lights to communicate <em>exactly</em> how long it&rsquo;s been since the last drink or how much battery life is left. There are 10 LEDs and they can each be individually controlled so this drawback probably can be addressed through software; let the user pick when/how to display battery life remaining or to design a sequence of lights to indicate when the last drink took place.</li>
<li>Most of the mass needs to be suspended above and not directly connected to the sensor puck. This means that the bottle has a high center of gravity which - when coupled with the small base - makes for a slightly unstable bottle. There isn&rsquo;t any real way to avoid this though; if you&rsquo;re going to use a load cell, the liquid must <del>necessarily</del> reasonably be above the load cell.</li>
</ul>
<h2 id="a-quick-look-at-the-tuya-bottle">A quick look at the TuYa bottle</h2>
<p>If you search the usual eastern import sites, you&rsquo;ll see that the <em>massive</em> TuYa ecosystem has it&rsquo;s own smart water bottle that can keep track of liquid intake.
As best as I can tell, this is branded for TuYa but the OEM is <a href="https://expo.tuya.com/product/839372" target="_blank" rel="noopener noreffer"><code>Maxevis Smart Bottle(BLE)</code></a> but the best FCC ID listing that I could find has <a href="https://fccid.io/2ALQ5-M1/Internal-Photos/Internal-photos-5000615" target="_blank" rel="noopener noreffer"><code>2ALQ5-M1</code></a> listed.</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Example aliexpress listing.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>Rather than use a load cell to measure the weight of the bottle and then calculate the liquid volume, the TuYa bottle uses an AMS IR range detector (probably <code>TMF8805</code>) to measure the distance to the top of the liquid.</p>
<p>This approach is superior in virtually every way:</p>
<ul>
<li>All the electronics are in the lid: The entire top of the lid &lsquo;free&rsquo; to communicate information to the user via a numeric screen. As a bonus, the TuYa lid supports charging while measuring the liquid level!</li>
<li>Cheaper to manufacture: There is no complicated silicon overmolding as there is nothing in the lid that needs to fled or bend or otherwise deform.</li>
<li>Sensor measures distance to the top of the liquid. Assuming a fixed volume, the density of the liquid does not matter; as long as the surface of the liquid is level and reflects IR, the sensor can tell you how full the bottle is.</li>
</ul>
<p>Downsides:</p>
<ul>
<li>Similar recalibration will be required if changing the bottle size&hellip; but at least no re-calibration needed when changing the liquid! As far as I can tell, there is only one size of bottle so this is a bit of a moot point.</li>
<li>The data is not easily accessible. You can only get the data using their proprietary app and the TuYa app does not seem to have any easy way to exfiltrate this data to the sources where I&rsquo;d prefer to record and manage it: FitBit.</li>
</ul>
<h3 id="brief-bit-of-tuya--maxevis--sguai-m1-btle-logs">Brief bit of TuYa / Maxevis / Sguai M1 BTLE logs</h3>
<p>Below is a (lightly) obfuscated log file from the <em>amazing</em> <a href="https://play.google.com/store/apps/details?id=no.nordicsemi.android.mcp&amp;hl=en_US&amp;gl=US" target="_blank" rel="noopener noreffer">nRF connect app</a>.
I am dumping the BTLE characteristics and data here for SEO purposes. If you do find this post and these logs and <em>do</em> manage to reverse engineer the packet format&hellip; <a href="/contact/" rel="">do let me know!</a>.</p>
<!-- markdownlint-disable-file MD010 -->
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">nRF Connect, 2022-06-12
</span></span><span class="line"><span class="cl">M1 (DC:23:4D:DE:AD:BE)
</span></span><span class="line"><span class="cl">D	11:35:37.604	[Broadcast] Action received: android.bluetooth.device.action.ACL_CONNECTED
</span></span><span class="line"><span class="cl">V	11:35:37.796	Connecting to DC:23:4D:DE:AD:BE...
</span></span><span class="line"><span class="cl">D	11:35:37.796	gatt = device.connectGatt(autoConnect = false, TRANSPORT_LE, preferred PHY = LE 1M)
</span></span><span class="line"><span class="cl">D	11:35:37.799	[Callback] Connection state changed with status: 0 and new state: CONNECTED (2)
</span></span><span class="line"><span class="cl">I	11:35:37.799	Connected to DC:23:4D:DE:AD:BE
</span></span><span class="line"><span class="cl">V	11:35:37.809	Discovering services...
</span></span><span class="line"><span class="cl">D	11:35:37.809	gatt.discoverServices()
</span></span><span class="line"><span class="cl">D	11:35:37.811	[Callback] Services discovered with status: 0
</span></span><span class="line"><span class="cl">I	11:35:37.811	Services discovered
</span></span><span class="line"><span class="cl">V	11:35:37.816	Generic Access (0x1800)
</span></span><span class="line"><span class="cl">- Device Name [R] (0x2A00)
</span></span><span class="line"><span class="cl">- Appearance [R] (0x2A01)
</span></span><span class="line"><span class="cl">Generic Attribute (0x1801)
</span></span><span class="line"><span class="cl">Unknown Service (00001910-0000-1000-8000-00805f9b34fb)
</span></span><span class="line"><span class="cl">- Unknown Characteristic [W WNR] (00002b11-0000-1000-8000-00805f9b34fb)
</span></span><span class="line"><span class="cl">- Unknown Characteristic [N] (00002b10-0000-1000-8000-00805f9b34fb)
</span></span><span class="line"><span class="cl">   Client Characteristic Configuration (0x2902)
</span></span><span class="line"><span class="cl">D	11:35:37.816	gatt.setCharacteristicNotification(00002b10-0000-1000-8000-00805f9b34fb, true)
</span></span><span class="line"><span class="cl">V	11:36:09.013	Refreshing device cache...
</span></span><span class="line"><span class="cl">D	11:36:09.013	gatt.refresh() (hidden)
</span></span><span class="line"><span class="cl">I	11:36:09.015	Cache refreshed
</span></span><span class="line"><span class="cl">V	11:36:09.019	Discovering services...
</span></span><span class="line"><span class="cl">D	11:36:09.019	gatt.discoverServices()
</span></span><span class="line"><span class="cl">D	11:36:09.928	[Callback] Services discovered with status: 0
</span></span><span class="line"><span class="cl">I	11:36:09.928	Services discovered
</span></span><span class="line"><span class="cl">V	11:36:09.931	Generic Access (0x1800)
</span></span><span class="line"><span class="cl">- Device Name [R] (0x2A00)
</span></span><span class="line"><span class="cl">- Appearance [R] (0x2A01)
</span></span><span class="line"><span class="cl">Generic Attribute (0x1801)
</span></span><span class="line"><span class="cl">Unknown Service (00001910-0000-1000-8000-00805f9b34fb)
</span></span><span class="line"><span class="cl">- Unknown Characteristic [W WNR] (00002b11-0000-1000-8000-00805f9b34fb)
</span></span><span class="line"><span class="cl">- Unknown Characteristic [N] (00002b10-0000-1000-8000-00805f9b34fb)
</span></span><span class="line"><span class="cl">   Client Characteristic Configuration (0x2902)
</span></span><span class="line"><span class="cl">D	11:36:09.931	gatt.setCharacteristicNotification(00002b10-0000-1000-8000-00805f9b34fb, true)
</span></span><span class="line"><span class="cl">V	11:36:12.944	Reading all characteristics...
</span></span><span class="line"><span class="cl">V	11:36:12.944	Reading characteristic 00002a00-0000-1000-8000-00805f9b34fb
</span></span><span class="line"><span class="cl">D	11:36:12.944	gatt.readCharacteristic(00002a00-0000-1000-8000-00805f9b34fb)
</span></span><span class="line"><span class="cl">I	11:36:13.027	Read Response received from 00002a00-0000-1000-8000-00805f9b34fb, value: 0 bytes
</span></span><span class="line"><span class="cl">V	11:36:13.030	Reading characteristic 00002a01-0000-1000-8000-00805f9b34fb
</span></span><span class="line"><span class="cl">D	11:36:13.030	gatt.readCharacteristic(00002a01-0000-1000-8000-00805f9b34fb)
</span></span><span class="line"><span class="cl">I	11:36:13.126	Read Response received from 00002a01-0000-1000-8000-00805f9b34fb, value: (0x) 00-00
</span></span><span class="line"><span class="cl">A	11:36:13.126	&#34;[0] Unknown&#34; received
</span></span><span class="line"><span class="cl">V	11:36:13.128	2 characteristics read
</span></span><span class="line"><span class="cl">I	11:36:14.079	Connection parameters updated (interval: 7.5ms, latency: 0, timeout: 5000ms)
</span></span><span class="line"><span class="cl">I	11:36:14.176	Connection parameters updated (interval: 50.0ms, latency: 0, timeout: 5000ms)
</span></span><span class="line"><span class="cl">V	11:36:22.198	Reading characteristic 00002a01-0000-1000-8000-00805f9b34fb
</span></span><span class="line"><span class="cl">D	11:36:22.198	gatt.readCharacteristic(00002a01-0000-1000-8000-00805f9b34fb)
</span></span><span class="line"><span class="cl">I	11:36:22.276	Read Response received from 00002a01-0000-1000-8000-00805f9b34fb, value: (0x) 00-00
</span></span><span class="line"><span class="cl">A	11:36:22.276	&#34;[0] Unknown&#34; received
</span></span><span class="line"><span class="cl">V	11:36:22.734	Reading characteristic 00002a01-0000-1000-8000-00805f9b34fb
</span></span><span class="line"><span class="cl">D	11:36:22.734	gatt.readCharacteristic(00002a01-0000-1000-8000-00805f9b34fb)
</span></span><span class="line"><span class="cl">I	11:36:22.826	Read Response received from 00002a01-0000-1000-8000-00805f9b34fb, value: (0x) 00-00
</span></span><span class="line"><span class="cl">A	11:36:22.826	&#34;[0] Unknown&#34; received
</span></span><span class="line"><span class="cl">V	11:36:27.086	Reading all characteristics...
</span></span><span class="line"><span class="cl">V	11:36:27.086	Reading characteristic 00002a00-0000-1000-8000-00805f9b34fb
</span></span><span class="line"><span class="cl">D	11:36:27.086	gatt.readCharacteristic(00002a00-0000-1000-8000-00805f9b34fb)
</span></span><span class="line"><span class="cl">I	11:36:27.176	Read Response received from 00002a00-0000-1000-8000-00805f9b34fb, value: 0 bytes
</span></span><span class="line"><span class="cl">V	11:36:27.179	Reading characteristic 00002a01-0000-1000-8000-00805f9b34fb
</span></span><span class="line"><span class="cl">D	11:36:27.179	gatt.readCharacteristic(00002a01-0000-1000-8000-00805f9b34fb)
</span></span><span class="line"><span class="cl">I	11:36:27.277	Read Response received from 00002a01-0000-1000-8000-00805f9b34fb, value: (0x) 00-00
</span></span><span class="line"><span class="cl">A	11:36:27.277	&#34;[0] Unknown&#34; received
</span></span><span class="line"><span class="cl">V	11:36:27.281	2 characteristics read
</span></span><span class="line"><span class="cl">V	11:36:41.136	Reading PHY...
</span></span><span class="line"><span class="cl">D	11:36:41.136	gatt.readPhy()
</span></span><span class="line"><span class="cl">I	11:36:41.160	PHY read (TX: LE 1M, RX: LE 1M)
</span></span><span class="line"><span class="cl">V	11:36:45.223	Reading all characteristics...
</span></span><span class="line"><span class="cl">V	11:36:45.223	Reading characteristic 00002a00-0000-1000-8000-00805f9b34fb
</span></span><span class="line"><span class="cl">D	11:36:45.223	gatt.readCharacteristic(00002a00-0000-1000-8000-00805f9b34fb)
</span></span><span class="line"><span class="cl">I	11:36:45.326	Read Response received from 00002a00-0000-1000-8000-00805f9b34fb, value: 0 bytes
</span></span><span class="line"><span class="cl">V	11:36:45.329	Reading characteristic 00002a01-0000-1000-8000-00805f9b34fb
</span></span><span class="line"><span class="cl">D	11:36:45.329	gatt.readCharacteristic(00002a01-0000-1000-8000-00805f9b34fb)
</span></span><span class="line"><span class="cl">I	11:36:45.426	Read Response received from 00002a01-0000-1000-8000-00805f9b34fb, value: (0x) 00-00
</span></span><span class="line"><span class="cl">A	11:36:45.426	&#34;[0] Unknown&#34; received
</span></span><span class="line"><span class="cl">V	11:36:45.429	2 characteristics read
</span></span><span class="line"><span class="cl">V	11:36:48.225	Enabling services...
</span></span><span class="line"><span class="cl">V	11:36:48.225	Enabling notifications for 00002b10-0000-1000-8000-00805f9b34fb
</span></span><span class="line"><span class="cl">D	11:36:48.225	gatt.setCharacteristicNotification(00002b10-0000-1000-8000-00805f9b34fb, true)
</span></span><span class="line"><span class="cl">D	11:36:48.226	gatt.writeDescriptor(00002902-0000-1000-8000-00805f9b34fb, value=0x0100)
</span></span><span class="line"><span class="cl">I	11:36:48.327	Data written to descr. 00002902-0000-1000-8000-00805f9b34fb, value: (0x) 01-00
</span></span><span class="line"><span class="cl">A	11:36:48.327	&#34;Notifications enabled&#34; sent
</span></span><span class="line"><span class="cl">V	11:36:48.331	Notifications enabled for 00002b10-0000-1000-8000-00805f9b34fb
</span></span><span class="line"><span class="cl">V	11:36:48.335	All services enabled
</span></span><span class="line"><span class="cl">I	11:36:48.427	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 00-31-3A-05-27-3C-3B-DF-88-0F-BF-B6-2C-9A-28-E5-47-9D-93-2C
</span></span><span class="line"><span class="cl">A	11:36:48.427	&#34;(0x) 00-31-3A-05-27-3C-3B-DF-88-0F-BF-B6-2C-9A-28-E5-47-9D-93-2C&#34; received
</span></span><span class="line"><span class="cl">I	11:36:48.427	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 01-C3-81-F8-D3-88-1F-C5-F0-68-9E-3E-21-71-97-E0-CF-69-B8-D2
</span></span><span class="line"><span class="cl">A	11:36:48.427	&#34;(0x) 01-C3-81-F8-D3-88-1F-C5-F0-68-9E-3E-21-71-97-E0-CF-69-B8-D2&#34; received
</span></span><span class="line"><span class="cl">I	11:36:48.427	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 02-76-24-15-EA-88-4C-E9-F6-2D-98-D3-F5-30
</span></span><span class="line"><span class="cl">A	11:36:48.427	&#34;(0x) 02-76-24-15-EA-88-4C-E9-F6-2D-98-D3-F5-30&#34; received
</span></span><span class="line"><span class="cl">V	11:36:51.059	Reading all characteristics...
</span></span><span class="line"><span class="cl">V	11:36:51.059	Reading characteristic 00002a00-0000-1000-8000-00805f9b34fb
</span></span><span class="line"><span class="cl">D	11:36:51.059	gatt.readCharacteristic(00002a00-0000-1000-8000-00805f9b34fb)
</span></span><span class="line"><span class="cl">I	11:36:51.126	Read Response received from 00002a00-0000-1000-8000-00805f9b34fb, value: 0 bytes
</span></span><span class="line"><span class="cl">V	11:36:51.128	Reading characteristic 00002a01-0000-1000-8000-00805f9b34fb
</span></span><span class="line"><span class="cl">D	11:36:51.128	gatt.readCharacteristic(00002a01-0000-1000-8000-00805f9b34fb)
</span></span><span class="line"><span class="cl">I	11:36:51.226	Read Response received from 00002a01-0000-1000-8000-00805f9b34fb, value: (0x) 00-00
</span></span><span class="line"><span class="cl">A	11:36:51.226	&#34;[0] Unknown&#34; received
</span></span><span class="line"><span class="cl">V	11:36:51.227	2 characteristics read
</span></span><span class="line"><span class="cl">I	11:37:29.428	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 00-31-3B-05-29-D8-E0-4B-72-0B-28-02-BC-F6-A8-11-D5-59-34-38
</span></span><span class="line"><span class="cl">A	11:37:29.428	&#34;(0x) 00-31-3B-05-29-D8-E0-4B-72-0B-28-02-BC-F6-A8-11-D5-59-34-38&#34; received
</span></span><span class="line"><span class="cl">I	11:37:29.478	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 01-77-3B-AE-22-0C-A7-5A-F8-31-41-0C-FF-53-B7-97-D0-17-BE-43
</span></span><span class="line"><span class="cl">A	11:37:29.478	&#34;(0x) 01-77-3B-AE-22-0C-A7-5A-F8-31-41-0C-FF-53-B7-97-D0-17-BE-43&#34; received
</span></span><span class="line"><span class="cl">I	11:37:29.478	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 02-8F-38-BE-8E-5C-9F-1F-40-FC-15-66-1F-01
</span></span><span class="line"><span class="cl">A	11:37:29.478	&#34;(0x) 02-8F-38-BE-8E-5C-9F-1F-40-FC-15-66-1F-01&#34; received
</span></span><span class="line"><span class="cl">I	11:37:29.478	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 00-31-3C-05-63-F4-26-37-1F-87-CD-CE-7C-D2-60-BD-DE-95-6A-C4
</span></span><span class="line"><span class="cl">A	11:37:29.478	&#34;(0x) 00-31-3C-05-63-F4-26-37-1F-87-CD-CE-7C-D2-60-BD-DE-95-6A-C4&#34; received
</span></span><span class="line"><span class="cl">I	11:37:29.479	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 01-75-AA-47-4F-6F-4D-5C-3F-8E-DC-32-3F-A3-F5-36-51-8C-8F-AA
</span></span><span class="line"><span class="cl">A	11:37:29.479	&#34;(0x) 01-75-AA-47-4F-6F-4D-5C-3F-8E-DC-32-3F-A3-F5-36-51-8C-8F-AA&#34; received
</span></span><span class="line"><span class="cl">I	11:37:29.479	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 02-4C-6F-7E-67-92-77-D4-E7-E4-18-2C-59-E5
</span></span><span class="line"><span class="cl">A	11:37:29.479	&#34;(0x) 02-4C-6F-7E-67-92-77-D4-E7-E4-18-2C-59-E5&#34; received
</span></span><span class="line"><span class="cl">I	11:37:38.427	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 00-31-3D-05-45-90-BD-A3-80-83-E1-1A-DC-2E-02-E9-53-51-66-D0
</span></span><span class="line"><span class="cl">A	11:37:38.427	&#34;(0x) 00-31-3D-05-45-90-BD-A3-80-83-E1-1A-DC-2E-02-E9-53-51-66-D0&#34; received
</span></span><span class="line"><span class="cl">I	11:37:38.428	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 01-6D-C3-48-81-2B-E4-D1-CD-BB-55-20-54-31-97-4F-22-FB-A7-C7
</span></span><span class="line"><span class="cl">A	11:37:38.428	&#34;(0x) 01-6D-C3-48-81-2B-E4-D1-CD-BB-55-20-54-31-97-4F-22-FB-A7-C7&#34; received
</span></span><span class="line"><span class="cl">I	11:37:38.428	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 02-E1-EF-8D-FC-A7-AC-17-C7-10-80-EC-09-2E
</span></span><span class="line"><span class="cl">A	11:37:38.428	&#34;(0x) 02-E1-EF-8D-FC-A7-AC-17-C7-10-80-EC-09-2E&#34; received
</span></span><span class="line"><span class="cl">I	11:37:41.428	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 00-31-3E-05-3E-AC-56-8F-84-FF-91-E6-4B-0A-3E-95-23-8D-58-5C
</span></span><span class="line"><span class="cl">A	11:37:41.428	&#34;(0x) 00-31-3E-05-3E-AC-56-8F-84-FF-91-E6-4B-0A-3E-95-23-8D-58-5C&#34; received
</span></span><span class="line"><span class="cl">I	11:37:41.428	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 01-DA-FC-E3-F6-BC-AA-A0-C8-15-84-7B-80-AA-29-C4-61-7A-91-DA
</span></span><span class="line"><span class="cl">A	11:37:41.428	&#34;(0x) 01-DA-FC-E3-F6-BC-AA-A0-C8-15-84-7B-80-AA-29-C4-61-7A-91-DA&#34; received
</span></span><span class="line"><span class="cl">I	11:37:41.428	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 02-E9-78-C0-8A-F4-89-EC-8B-9E-B3-99-74-DC
</span></span><span class="line"><span class="cl">A	11:37:41.428	&#34;(0x) 02-E9-78-C0-8A-F4-89-EC-8B-9E-B3-99-74-DC&#34; received
</span></span><span class="line"><span class="cl">I	11:38:32.829	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 00-31-3F-05-BF-48-A0-FB-1C-FB-10-32-39-66-C3-C1-3F-49-6F-68
</span></span><span class="line"><span class="cl">A	11:38:32.829	&#34;(0x) 00-31-3F-05-BF-48-A0-FB-1C-FB-10-32-39-66-C3-C1-3F-49-6F-68&#34; received
</span></span><span class="line"><span class="cl">I	11:38:32.829	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 01-FF-00-EB-5E-50-22-71-6C-5F-C1-82-8D-95-13-C9-F4-5F-9F-E0
</span></span><span class="line"><span class="cl">A	11:38:32.829	&#34;(0x) 01-FF-00-EB-5E-50-22-71-6C-5F-C1-82-8D-95-13-C9-F4-5F-9F-E0&#34; received
</span></span><span class="line"><span class="cl">I	11:38:32.830	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 02-C1-47-3D-34-8A-5D-85-69-C8-7F-21-DB-4E
</span></span><span class="line"><span class="cl">A	11:38:32.830	&#34;(0x) 02-C1-47-3D-34-8A-5D-85-69-C8-7F-21-DB-4E&#34; received
</span></span><span class="line"><span class="cl">I	11:38:33.430	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 00-31-30-05-37-64-4C-E7-38-77-8B-FE-17-42-42-6D-96-85-DB-F4
</span></span><span class="line"><span class="cl">A	11:38:33.430	&#34;(0x) 00-31-30-05-37-64-4C-E7-38-77-8B-FE-17-42-42-6D-96-85-DB-F4&#34; received
</span></span><span class="line"><span class="cl">I	11:38:33.430	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 01-7D-C6-26-19-9C-C4-64-C3-CE-9B-BD-1F-8F-41-30-4E-D5-81-31
</span></span><span class="line"><span class="cl">A	11:38:33.430	&#34;(0x) 01-7D-C6-26-19-9C-C4-64-C3-CE-9B-BD-1F-8F-41-30-4E-D5-81-31&#34; received
</span></span><span class="line"><span class="cl">I	11:38:33.430	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 02-FE-01-83-24-0F-A7-4C-2A-07-0E-00-22-F2
</span></span><span class="line"><span class="cl">A	11:38:33.430	&#34;(0x) 02-FE-01-83-24-0F-A7-4C-2A-07-0E-00-22-F2&#34; received
</span></span><span class="line"><span class="cl">I	11:38:35.830	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 00-31-30-05-17-00-0A-53-C7-73-35-4A-54-9E-6A-99-19-41-CE-00
</span></span><span class="line"><span class="cl">A	11:38:35.830	&#34;(0x) 00-31-30-05-17-00-0A-53-C7-73-35-4A-54-9E-6A-99-19-41-CE-00&#34; received
</span></span><span class="line"><span class="cl">I	11:38:35.830	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 01-DB-8B-0F-A0-8E-61-43-4F-EC-F2-70-91-17-CE-A7-5F-2D-CA-64
</span></span><span class="line"><span class="cl">A	11:38:35.830	&#34;(0x) 01-DB-8B-0F-A0-8E-61-43-4F-EC-F2-70-91-17-CE-A7-5F-2D-CA-64&#34; received
</span></span><span class="line"><span class="cl">I	11:38:35.830	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 02-00-0E-6B-D8-FF-9E-47-CA-AB-45-1F-A3-EB
</span></span><span class="line"><span class="cl">A	11:38:35.830	&#34;(0x) 02-00-0E-6B-D8-FF-9E-47-CA-AB-45-1F-A3-EB&#34; received
</span></span><span class="line"><span class="cl">I	11:38:41.880	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 00-31-30-05-CE-1C-89-3F-B9-EF-3C-16-61-7A-EC-45-B7-7D-75-8C
</span></span><span class="line"><span class="cl">A	11:38:41.880	&#34;(0x) 00-31-30-05-CE-1C-89-3F-B9-EF-3C-16-61-7A-EC-45-B7-7D-75-8C&#34; received
</span></span><span class="line"><span class="cl">I	11:38:41.880	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 01-03-CF-67-7F-14-6C-54-5A-B7-DB-4D-D7-6E-E9-D7-28-17-3D-64
</span></span><span class="line"><span class="cl">A	11:38:41.880	&#34;(0x) 01-03-CF-67-7F-14-6C-54-5A-B7-DB-4D-D7-6E-E9-D7-28-17-3D-64&#34; received
</span></span><span class="line"><span class="cl">I	11:38:41.880	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 02-D0-68-E2-25-13-D9-18-A3-1E-A9-39-C5-5C
</span></span><span class="line"><span class="cl">A	11:38:41.880	&#34;(0x) 02-D0-68-E2-25-13-D9-18-A3-1E-A9-39-C5-5C&#34; received
</span></span><span class="line"><span class="cl">I	11:38:46.881	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 00-31-30-05-CC-B8-79-AB-FF-EB-D0-62-AD-D6-77-71-61-39-02-98
</span></span><span class="line"><span class="cl">A	11:38:46.881	&#34;(0x) 00-31-30-05-CC-B8-79-AB-FF-EB-D0-62-AD-D6-77-71-61-39-02-98&#34; received
</span></span><span class="line"><span class="cl">I	11:38:46.881	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 01-4C-68-73-AB-5E-37-67-25-64-7F-EF-7D-2C-EA-CF-8D-4E-CB-90
</span></span><span class="line"><span class="cl">A	11:38:46.881	&#34;(0x) 01-4C-68-73-AB-5E-37-67-25-64-7F-EF-7D-2C-EA-CF-8D-4E-CB-90&#34; received
</span></span><span class="line"><span class="cl">I	11:38:46.881	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 02-A2-01-AF-59-35-60-7F-4F-29-AC-7A-0A-0A
</span></span><span class="line"><span class="cl">A	11:38:46.881	&#34;(0x) 02-A2-01-AF-59-35-60-7F-4F-29-AC-7A-0A-0A&#34; received
</span></span><span class="line"><span class="cl">I	11:38:52.881	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 00-31-30-05-82-D4-8B-97-89-67-22-2E-A9-B2-BC-1D-06-75-A5-24
</span></span><span class="line"><span class="cl">A	11:38:52.881	&#34;(0x) 00-31-30-05-82-D4-8B-97-89-67-22-2E-A9-B2-BC-1D-06-75-A5-24&#34; received
</span></span><span class="line"><span class="cl">I	11:38:52.881	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 01-93-D9-CB-C6-6B-37-89-31-5E-A3-9F-8A-ED-B4-D1-13-7D-0A-FD
</span></span><span class="line"><span class="cl">A	11:38:52.881	&#34;(0x) 01-93-D9-CB-C6-6B-37-89-31-5E-A3-9F-8A-ED-B4-D1-13-7D-0A-FD&#34; received
</span></span><span class="line"><span class="cl">I	11:38:52.881	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 02-6E-4D-34-CD-EF-B0-C5-81-F1-E8-7A-1E-E3
</span></span><span class="line"><span class="cl">A	11:38:52.881	&#34;(0x) 02-6E-4D-34-CD-EF-B0-C5-81-F1-E8-7A-1E-E3&#34; received
</span></span></code></pre></td></tr></table>
</div>
</div><p>Perhaps <code>00002b10-0000-1000-8000-00805f9b34fb</code> is <a href="https://developer.tizen.org/community/code-snippet/embed/20776" target="_blank" rel="noopener noreffer">temperature</a> or <a href="https://pub.dev/documentation/flutter_web_bluetooth/latest/flutter_web_bluetooth/BluetoothDefaultCharacteristicUUIDS/temperatureRange-constant.html" target="_blank" rel="noopener noreffer"><code>tempRange</code></a>?</p>
<p>And <code>00002b11-0000-1000-8000-00805f9b34fb</code> is <a href="https://pub.dev/documentation/flutter_web_bluetooth/latest/flutter_web_bluetooth/BluetoothDefaultCharacteristicUUIDS/temperatureStatistics-constant.html" target="_blank" rel="noopener noreffer"><code>temperatureStatistics</code></a>?</p>
<p>Not sure about packets for volume or battery level (if they&rsquo;re even in the above log dump).</p>
<h1 id="the-mod">The mod</h1>
<p>I still don&rsquo;t know why the Hidrate team didn&rsquo;t make the puck charge wirelessly to begin with but that&rsquo;s the simplest modification to address most of the biggest shortcomings:</p>
<ul>
<li>Qi is a standard. If the charging base is lost/damaged, replacements are not difficult to get and any wireless charging that a user might travel with&hellip; will just work with the bottle.</li>
<li>Wireless charging means no liquid to accidentally get in a USB port or onto pogo pins / slip rings. Electric current through a liquid results in corrosion&hellip; which is how my original cable got damaged!</li>
<li>The bottle can be &ldquo;in use&rdquo; while it&rsquo;s charging. Take a sip, place bottle back on charger!</li>
</ul>
<p>Here is a quick &ldquo;proof of concept&rdquo; video taken just before final testing and assembly.</p>
<video controls preload="auto" width="100%"  playsinline class="html-video">
    <source src="/hidrate-spark-qi-retrofit/images/it%20works.mp4" type="video/mp4">
  <span>Your browser doesn't support embedded videos, but don't worry, you can <a href="/hidrate-spark-qi-retrofit/images/it%20works.mp4">download it</a> and watch it with your favorite video player!</span>
</video>
<p>The version shown above is &ldquo;mark 2&rdquo;. It is simpler to assemble, uses less material and is about 30% thinner relative to the &ldquo;mark 1&rdquo; designs.
I put a <em>ton</em> of effort into making the design as approachable and affordable as possible. The idea was to make it easy for average people to make their bottle <em>better the stock</em> in just a few hours.</p>
<ul>
<li>Parts can be printed easily and quickly on all but the sloppiest printers.</li>
<li>Basic hand / power tools are all that are required. At no point do you need an extremely expensive and precise machine to perform some critical step.</li>
<li>Cheap! Requires a few $ in easy to source parts and pennies in plastic and electricity.</li>
</ul>
<p>My hope is that the engineers at Hidrate will see that it&rsquo;s not <em><strong>that difficult</strong></em> to design an objectively better experience into their products, that it&rsquo;s an anti-consumer dark pattern to needlessly require a proprietary charging cable.</p>
<p>Fingers crossed that their next generation of hardware won&rsquo;t look like this 🤞:</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Source is still &#39;YouTube/Tony H&#39; but I&#39;ve had a bit of fun trying to figure out how to blend images with GIMP :P.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>You can find a through set of instructions, printable part files and BOM at the <a href="https://github.com/kquinsland/hidrate-spark-qi-charging" target="_blank" rel="noopener noreffer"><code>kquinsland/hidrate-spark-qi-charging</code></a> repo.
If you do follow the instructions and manage to make your bottle charge wirelessly, let me know!</p>
]]></description></item><item><title>Using Home Assistant to dynamically layout openHasp widgets</title><link>https://karlquinsland.com/lanbon-l8-tuya-lcd-switch-openhasp/</link><pubDate>Tue, 18 Jan 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/lanbon-l8-tuya-lcd-switch-openhasp/</guid><description><![CDATA[<h1 id="background">Background</h1>
<p>This is one of those posts that sat in the <code>Drafts</code> folder for <em>way</em> too long.
Just before release, I&rsquo;d discover something new that would warrant substantial rewrites.
After several delays, false starts and re-writes, I finally have something that is mostly new <em>and</em> worth sharing with the world.</p>
<p>Like with the past few <a href="https://karlquinsland.com/categories/teardown/" rel="">teardown</a> posts, this one also started off as a &lsquo;cart-stuffer&rsquo; item so I could unlock a more generous discount on the total purchase. The listing that caught my eye had the generic title:</p>
<pre><code>EU US Wifi LCD Smart Wall Light Touch Switch Tuya Smart Life App Remote Control ON OFF Timer Voice Control For Google Home Alexa
</code></pre>
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Naturally, a cursory check for existing writeups / teardowns didn&rsquo;t yield much.</p>
<p>I did have some hope that the <code>Tuya</code> compatibility meant an easily hacked ESP module running the show and not a proprietary module.
It was unlikely that the device would be Android powered at that price-point and an ESP8266 series would be woefully under powered for direct LCD control so &hellip; fingers crossed for an ESP32 module!
Or, at the very least there might be a way to retrofit in an ESP module like with the recent Mi-Boxer LED controller that <a href="https://github.com/arendst/Tasmota/issues/7385#issuecomment-991848762" target="_blank" rel="noopener noreffer">I helped to integrate with Tasmota</a>.</p>
<p>The <em>plan</em> was to do a teardown and dump as much technical data as I could possibly gather in an evening or two and conclude with a feasibility assessment of hacking the device for use with Home Assistant.</p>
<h2 id="generic-becomes-lanbon">Generic becomes Lanbon</h2>
<p>Immediately after opening the shipping box and getting eyes on the actual product packaging, it was clear that this was a Lanbon L8 series module.</p>
<p>A quick google later and it turns out that the venerable blakadder.com has <a href="https://blakadder.com/lanbon-L8/" target="_blank" rel="noopener noreffer">already covered this device</a>&hellip; <em>and</em> documented <a href="https://blakadder.com/lanbon-L8-custom-firmware/" target="_blank" rel="noopener noreffer">it&rsquo;s Tasmota compatibility</a>!</p>
<p>So much for publishing a teardown and trying to figure out if Home Assistant integration was feasible 😕.</p>
<p>Funny how once you have the &lsquo;magic query string&rsquo;, google starts to yield <em>a ton</em> of relevant results!
Just after finding the aforementioned blakadder.com posts on the L8 device, I found two <em>very</em> helpful sources of more information:</p>
<ul>
<li>Somebody by the name of Jan Newmarch has published a <a href="https://jan.newmarch.name/IoT/Home/Lanbon/" target="_blank" rel="noopener noreffer">comprehensive dive</a> into the protocol(s) used by the stock firmware / other devices in the Lanbon family.</li>
<li>This <a href="https://haswitchplate.github.io/openHASP-docs/latest/devices/lanbon-l8/" target="_blank" rel="noopener noreffer">page dedicated to the Lanbon L8</a> from a project called openHasp.</li>
</ul>
<p>I thought that second link seemed familiar&hellip;🤔.</p>
<p>Turns out, the <a href="https://haswitchplate.github.io/openHASP-docs/latest/" target="_blank" rel="noopener noreffer">openHASP project</a> is a <em>substantial</em> rewrite of the initial software that powered my <a href="/enhanced-homeassistantswitchplate/" rel="">Enhanced HomeAssistant Switch Plate (eHasp)</a> project.</p>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>Info<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">While digging through the above links, I realized that the model I had opened up had a different PCB layout.
In the interest of adding to the collective internet KB, photos and some other technical details from the model I tore apart are <a href="#teardown" rel="">below</a>.</div>
        </div>
    </div>
<h1 id="openhasp">openHasp</h1>
<p>As opposed to the <a href="https://github.com/aderusha/HASwitchPlate" target="_blank" rel="noopener noreffer">old HASP project</a>, openHasp leverages more powerful processors that can drive the LCD directly; graphical assets no longer need to be compiled down to a LCD-specific firmware before use and the content of the <em>entire</em> display <strong>can be arbitrarily manipulated at runtime</strong>!</p>
<p>openHasp <a href="https://haswitchplate.github.io/openHASP-docs/0.6/design/pages/" target="_blank" rel="noopener noreffer">uses <code>json</code> like files</a> to store the UI/widgets layout and configuration.
On boot, the content of the <code>jsonl</code> is parsed and turned into the actual UI widgets that are displayed on screen.
For example, <a href="https://haswitchplate.github.io/openHASP-docs/0.6/design/objects/#button" target="_blank" rel="noopener noreffer">here is the example <code>jsonl</code></a> that renders two buttons:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span><span class="nt">&#34;page&#34;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="nt">&#34;id&#34;</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span><span class="nt">&#34;obj&#34;</span><span class="p">:</span><span class="s2">&#34;btn&#34;</span><span class="p">,</span><span class="nt">&#34;x&#34;</span><span class="p">:</span><span class="mi">10</span><span class="p">,</span><span class="nt">&#34;y&#34;</span><span class="p">:</span><span class="mi">40</span><span class="p">,</span><span class="nt">&#34;w&#34;</span><span class="p">:</span><span class="mi">105</span><span class="p">,</span><span class="nt">&#34;h&#34;</span><span class="p">:</span><span class="mi">90</span><span class="p">,</span><span class="nt">&#34;toggle&#34;</span><span class="p">:</span><span class="kc">false</span><span class="p">,</span><span class="nt">&#34;text&#34;</span><span class="p">:</span><span class="s2">&#34;Button&#34;</span><span class="p">,</span><span class="nt">&#34;mode&#34;</span><span class="p">:</span><span class="s2">&#34;break&#34;</span><span class="p">,</span><span class="nt">&#34;align&#34;</span><span class="p">:</span><span class="s2">&#34;center&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span><span class="nt">&#34;page&#34;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="nt">&#34;id&#34;</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span><span class="nt">&#34;obj&#34;</span><span class="p">:</span><span class="s2">&#34;btn&#34;</span><span class="p">,</span><span class="nt">&#34;x&#34;</span><span class="p">:</span><span class="mi">125</span><span class="p">,</span><span class="nt">&#34;y&#34;</span><span class="p">:</span><span class="mi">40</span><span class="p">,</span><span class="nt">&#34;w&#34;</span><span class="p">:</span><span class="mi">105</span><span class="p">,</span><span class="nt">&#34;h&#34;</span><span class="p">:</span><span class="mi">90</span><span class="p">,</span><span class="nt">&#34;toggle&#34;</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span><span class="nt">&#34;text&#34;</span><span class="p">:</span><span class="s2">&#34;#FFD700 Toggle# Button&#34;</span><span class="p">,</span><span class="nt">&#34;mode&#34;</span><span class="p">:</span><span class="s2">&#34;break&#34;</span><span class="p">,</span><span class="nt">&#34;align&#34;</span><span class="p">:</span><span class="s2">&#34;center&#34;</span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><figure >

    
        
        

    

    <figcaption>
        
        <p>
            Image credit/source:
            <a href="https://haswitchplate.github.io/openHASP-docs/0.6/design/objects/#button"> 
                openHasp Docs
                </a> 
        </p> 
    </figcaption>
    
</figure>


<p>Notice how the absolute coordinates on screen (<code>x</code> and <code>y</code>) and and absolute width (<code>w</code>) and height (<code>w</code>) properties are explicitly declared.
The only reason the buttons look appropriately sized/positioned in the above screenshot is because someone took the time to calculate the appropriate values for the particular screen resolution and orientation.</p>
<p>The above <code>jsonl</code> example would look different on any openHasp device with a different screen orientation or resolution!
Manually calculating the exact size and position of every widget for <em>each</em> class of device isn&rsquo;t so bad if you&rsquo;re planning on deploying the same file to several instances of the same device&hellip; but it starts be become a real headache if you want to deploy the same layout to 2+ different types of device.</p>
<p>The L8 devices are designed to be installed into a wall electrical box; they don&rsquo;t sit well on my desk so prototyping various interface files on a L8 device isn&rsquo;t the easiest.
Instead, I am using a <a href="https://haswitchplate.github.io/openHASP-docs/latest/devices/wt32-sc01/" target="_blank" rel="noopener noreffer">device with a higher resolution</a> and bigger screen that <em>does</em> work well on a desk to prototype the various <code>jsonl</code> files.</p>
<p>If you&rsquo;re thinking that calculating the appropriate location for various UI widgets on one device and then having to re-do the math for the intended deploy targets sounds like a task better suited to a computer&hellip; you&rsquo;re right!</p>
<h2 id="dynamic-layouts-with-home-assistant">Dynamic Layouts with Home Assistant</h2>
<p>Fortunately, the properties of <em>every</em> UI widget can be modified over the network even <em>after</em> the <code>jsonl</code> file has been parsed and the initial display has been painted!</p>
<p>My C++ skills are pretty weak so contributing new code to enable dynamic layouts directly to the openHasp codebase is not immediately practical.
There is, however, a robust <a href="https://haswitchplate.github.io/openHASP-docs/latest/integrations/home-assistant/howto/" target="_blank" rel="noopener noreffer">Home Assistant integration</a> published in the form of a <a href="https://github.com/HASwitchPlate/openHASP-custom-component" target="_blank" rel="noopener noreffer">custom component</a>.
Home Assistant means Python and some Python code to calculate the appropriate position/size for a given element <em>is</em> immediately within my means.</p>
<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>Warning<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">A few <a href="https://github.com/HASwitchPlate/openHASP/issues/278" target="_blank" rel="noopener noreffer">(small) changes to the openHasp firmware</a> were required to make this work.
Any <em>recent</em> build of <code>0.7</code> should work.
As of 2022-01, there is no release of the custom component that works with <code>0.7</code> out of the box so if installing through <a href="https://hacs.xyz/" target="_blank" rel="noopener noreffer">HACS</a>, <a href="https://github.com/HASwitchPlate/openHASP-custom-component/issues/87" target="_blank" rel="noopener noreffer">you will need to patch the custom component</a> so devices running <code>.0.7</code> can be controlled via Home Assistant.</div>
        </div>
    </div>
<p>Please see the <a href="https://haswitchplate.github.io/openHASP-docs/latest/integrations/home-assistant/sampl_conf/" target="_blank" rel="noopener noreffer">openHasp &lt;-&gt; Home Assistant docs</a> for background information, examples and a lot more detail on how Home Assistant and openHasp work together or if any of the <code>jsonl</code> and <code>yaml</code> below does not make sense.</p>
<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>Warning<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Please make sure that your openHasp device can connect to your MQTT broker and that the openHasp custom integration can discover and &lsquo;register&rsquo; your device with Home Assistant before proceeding!</div>
        </div>
    </div>
<h3 id="two-devices-one-pagesjsonl">Two devices, one <code>pages.jsonl</code></h3>
<p>The <code>pages.jsonl</code> file used for this post and the screenshots below is a (lightly) modified versions of the <a href="https://haswitchplate.github.io/openHASP-docs/latest/integrations/home-assistant/sampl_conf/#display-clock-and-temperature" target="_blank" rel="noopener noreffer">clock and temperature example</a> and the
<a href="https://haswitchplate.github.io/openHASP-docs/latest/integrations/examples/example-pagination/" target="_blank" rel="noopener noreffer">simple page navigation</a> examples with a room specific set of ui widgets.</p>
<p>That <em>singular</em> <code>pages.jsonl</code> file was uploaded it to two devices:</p>
<ul>
<li>Lanbon L8 with a 240x320 resolution</li>
<li>WT32-SC01 module with a 320x480 resolution</li>
</ul>
<p>Each screenshot was taken with the device display configured to 0º and 90º of rotation.
A reboot was required for the configuration change to take effect but I made <em>zero</em> changes to the <code>pages.jsonl</code> file on the device between changing the screen orientation.</p>
<p><figure >

    
        
        

    

    <figcaption>
        
        <p>
            Lanbon L8 in it&#39;s rotated &#39;landscape&#39; orientation
            
                
                
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Lanbon L8 in it&#39;s default &#39;portrait&#39; orientation
            
                
                
        </p> 
    </figcaption>
    
</figure>

</p>
<p><figure >

    
        
        

    

    <figcaption>
        
        <p>
            wt32-sc01 in &#39;landscape&#39; orientation.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
        

    

    <figcaption>
        
        <p>
            wt32-sc01 in &#39;portrait&#39; orientation.
            
                
                
        </p> 
    </figcaption>
    
</figure>

</p>
<h3 id="building-a-pagesjsonl">building a <code>pages.jsonl</code></h3>
<p>You don&rsquo;t need to use this <em>exact</em> technique to build the <code>pages.jsonl</code> file; it works well for my needs / development flow.
All that matters is that you get every UI element for every page into a single <code>pages.jsonl</code> file and then get that file uploaded to the device(s) in question.
The page/id values declared in your <code>jsonl</code> file <em>must match</em> the object IDs that you will use to configure the Home Assistant integration.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ cat header.frag.jsonl footer.frag.jsonl room.frag.jsonl &gt; pages.jsonl
</span></span><span class="line"><span class="cl">❯ curl http://roomPlateIpv4Here/edit --form <span class="nv">name</span><span class="o">=</span>data --form <span class="nv">data</span><span class="o">=</span>@pages.jsonl
</span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>Info<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>I store the combined files in <code>pages.jsonl</code> because this is the default page that an openHasp device will render.
You can change this setting via the web UI: <code>http://roomPlateIpv4Here/config/hasp</code> or via telnet:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ telnet roomPlateIpv4Here
</span></span><span class="line"><span class="cl">&lt;...&gt;
</span></span><span class="line"><span class="cl">prompt&gt; config/hasp <span class="o">{</span><span class="s2">&#34;pages&#34;</span>:<span class="s2">&#34;/foo.jsonl&#34;</span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<h4 id="headerfragjsonl"><code>header.frag.jsonl</code></h4>
<p>This contains the three text labels that I wish to have at the top of <em>every</em> openHasp device I deploy.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;page&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;comment&#34;</span><span class="p">:</span> <span class="s2">&#34;Default to page0 as the header and page/layout&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;comment&#34;</span><span class="p">:</span> <span class="s2">&#34;Time in the top left&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;obj&#34;</span><span class="p">:</span> <span class="s2">&#34;label&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;text&#34;</span><span class="p">:</span> <span class="s2">&#34;00:00&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;align&#34;</span><span class="p">:</span> <span class="s2">&#34;center&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;bg_color&#34;</span><span class="p">:</span> <span class="s2">&#34;#2C3E50&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;comment&#34;</span><span class="p">:</span> <span class="s2">&#34;Temp in the middle&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;obj&#34;</span><span class="p">:</span> <span class="s2">&#34;label&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;text&#34;</span><span class="p">:</span> <span class="s2">&#34;00.0°C&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;align&#34;</span><span class="p">:</span> <span class="s2">&#34;center&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;bg_color&#34;</span><span class="p">:</span> <span class="s2">&#34;#2C3E50&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;comment&#34;</span><span class="p">:</span> <span class="s2">&#34;Humidity in the top right&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;obj&#34;</span><span class="p">:</span> <span class="s2">&#34;label&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;text&#34;</span><span class="p">:</span> <span class="s2">&#34;00.0%&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;align&#34;</span><span class="p">:</span> <span class="s2">&#34;right&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;bg_color&#34;</span><span class="p">:</span> <span class="s2">&#34;#2C3E50&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="footerfragjsonl"><code>footer.frag.jsonl</code></h4>
<p>This contains the three page navigation buttons that I wish to have at the bottom of <em>every</em> openHasp device that I deploy.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;comment&#34;</span><span class="p">:</span> <span class="s2">&#34;tab nav on the bottom, prev&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;obj&#34;</span><span class="p">:</span> <span class="s2">&#34;btn&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;action&#34;</span><span class="p">:</span> <span class="s2">&#34;prev&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;bg_color&#34;</span><span class="p">:</span> <span class="s2">&#34;#2C3E50&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;text&#34;</span><span class="p">:</span> <span class="s2">&#34;\uE141&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;text_color&#34;</span><span class="p">:</span> <span class="s2">&#34;#FFFFFF&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;radius&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;border_side&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;text_font&#34;</span><span class="p">:</span> <span class="mi">28</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;obj&#34;</span><span class="p">:</span> <span class="s2">&#34;btn&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;action&#34;</span><span class="p">:</span> <span class="s2">&#34;back&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;bg_color&#34;</span><span class="p">:</span> <span class="s2">&#34;#2C3E50&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;text&#34;</span><span class="p">:</span> <span class="s2">&#34;\uE2DC&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;text_color&#34;</span><span class="p">:</span> <span class="s2">&#34;#FFFFFF&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;radius&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;border_side&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;text_font&#34;</span><span class="p">:</span> <span class="mi">22</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;obj&#34;</span><span class="p">:</span> <span class="s2">&#34;btn&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;action&#34;</span><span class="p">:</span> <span class="s2">&#34;next&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;bg_color&#34;</span><span class="p">:</span> <span class="s2">&#34;#2C3E50&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;text&#34;</span><span class="p">:</span> <span class="s2">&#34;\uE142&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;text_color&#34;</span><span class="p">:</span> <span class="s2">&#34;#FFFFFF&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;radius&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;border_side&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;text_font&#34;</span><span class="p">:</span> <span class="mi">28</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="roomfragjson"><code>room.frag.json</code></h4>
<p>This file should contain all the page(s) and UI widgets that are unique to the openHasp device deployed into the room that I will call <code>room</code> for the purposes of this post.
As a <strong>demonstration</strong>, I have set up three buttons that control each of the three relays on a L8 device; you will almost certainly want to add multiple pages / other UI widgets as needed.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;page&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;comment&#34;</span><span class="p">:</span> <span class="s2">&#34;primary controls for the 3 relays&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">101</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;comment&#34;</span><span class="p">:</span> <span class="s2">&#34;relay1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;obj&#34;</span><span class="p">:</span> <span class="s2">&#34;btn&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;toggle&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;text&#34;</span><span class="p">:</span> <span class="s2">&#34;relay1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;mode&#34;</span><span class="p">:</span> <span class="s2">&#34;break&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;align&#34;</span><span class="p">:</span> <span class="s2">&#34;center&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;groupid&#34;</span><span class="p">:</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">102</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;comment&#34;</span><span class="p">:</span> <span class="s2">&#34;relay2&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;obj&#34;</span><span class="p">:</span> <span class="s2">&#34;btn&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;toggle&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;text&#34;</span><span class="p">:</span> <span class="s2">&#34;relay2&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;mode&#34;</span><span class="p">:</span> <span class="s2">&#34;break&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;align&#34;</span><span class="p">:</span> <span class="s2">&#34;center&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;groupid&#34;</span><span class="p">:</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">103</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;comment&#34;</span><span class="p">:</span> <span class="s2">&#34;relay3&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;obj&#34;</span><span class="p">:</span> <span class="s2">&#34;btn&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;toggle&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;text&#34;</span><span class="p">:</span> <span class="s2">&#34;relay3&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;mode&#34;</span><span class="p">:</span> <span class="s2">&#34;break&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;align&#34;</span><span class="p">:</span> <span class="s2">&#34;center&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;groupid&#34;</span><span class="p">:</span> <span class="mi">3</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="configure-home-assistant">Configure Home Assistant</h3>
<p>After the <code>pages.jsonl</code> is deployed to <em>each</em> of the openHasp devices, you will need to create a configuration file for Home Assistant.
For the above screenshots, I created two <em>identical</em> ⃰ copies of the yaml below</p>
<p>⃰  Other than the device name; in one file, the name was changed from <code>plate00</code> to <code>plate01</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span><span class="lnt">160
</span><span class="lnt">161
</span><span class="lnt">162
</span><span class="lnt">163
</span><span class="lnt">164
</span><span class="lnt">165
</span><span class="lnt">166
</span><span class="lnt">167
</span><span class="lnt">168
</span><span class="lnt">169
</span><span class="lnt">170
</span><span class="lnt">171
</span><span class="lnt">172
</span><span class="lnt">173
</span><span class="lnt">174
</span><span class="lnt">175
</span><span class="lnt">176
</span><span class="lnt">177
</span><span class="lnt">178
</span><span class="lnt">179
</span><span class="lnt">180
</span><span class="lnt">181
</span><span class="lnt">182
</span><span class="lnt">183
</span><span class="lnt">184
</span><span class="lnt">185
</span><span class="lnt">186
</span><span class="lnt">187
</span><span class="lnt">188
</span><span class="lnt">189
</span><span class="lnt">190
</span><span class="lnt">191
</span><span class="lnt">192
</span><span class="lnt">193
</span><span class="lnt">194
</span><span class="lnt">195
</span><span class="lnt">196
</span><span class="lnt">197
</span><span class="lnt">198
</span><span class="lnt">199
</span><span class="lnt">200
</span><span class="lnt">201
</span><span class="lnt">202
</span><span class="lnt">203
</span><span class="lnt">204
</span><span class="lnt">205
</span><span class="lnt">206
</span><span class="lnt">207
</span><span class="lnt">208
</span><span class="lnt">209
</span><span class="lnt">210
</span><span class="lnt">211
</span><span class="lnt">212
</span><span class="lnt">213
</span><span class="lnt">214
</span><span class="lnt">215
</span><span class="lnt">216
</span><span class="lnt">217
</span><span class="lnt">218
</span><span class="lnt">219
</span><span class="lnt">220
</span><span class="lnt">221
</span><span class="lnt">222
</span><span class="lnt">223
</span><span class="lnt">224
</span><span class="lnt">225
</span><span class="lnt">226
</span><span class="lnt">227
</span><span class="lnt">228
</span><span class="lnt">229
</span><span class="lnt">230
</span><span class="lnt">231
</span><span class="lnt">232
</span><span class="lnt">233
</span><span class="lnt">234
</span><span class="lnt">235
</span><span class="lnt">236
</span><span class="lnt">237
</span><span class="lnt">238
</span><span class="lnt">239
</span><span class="lnt">240
</span><span class="lnt">241
</span><span class="lnt">242
</span><span class="lnt">243
</span><span class="lnt">244
</span><span class="lnt">245
</span><span class="lnt">246
</span><span class="lnt">247
</span><span class="lnt">248
</span><span class="lnt">249
</span><span class="lnt">250
</span><span class="lnt">251
</span><span class="lnt">252
</span><span class="lnt">253
</span><span class="lnt">254
</span><span class="lnt">255
</span><span class="lnt">256
</span><span class="lnt">257
</span><span class="lnt">258
</span><span class="lnt">259
</span><span class="lnt">260
</span><span class="lnt">261
</span><span class="lnt">262
</span><span class="lnt">263
</span><span class="lnt">264
</span><span class="lnt">265
</span><span class="lnt">266
</span><span class="lnt">267
</span><span class="lnt">268
</span><span class="lnt">269
</span><span class="lnt">270
</span><span class="lnt">271
</span><span class="lnt">272
</span><span class="lnt">273
</span><span class="lnt">274
</span><span class="lnt">275
</span><span class="lnt">276
</span><span class="lnt">277
</span><span class="lnt">278
</span><span class="lnt">279
</span><span class="lnt">280
</span><span class="lnt">281
</span><span class="lnt">282
</span><span class="lnt">283
</span><span class="lnt">284
</span><span class="lnt">285
</span><span class="lnt">286
</span><span class="lnt">287
</span><span class="lnt">288
</span><span class="lnt">289
</span><span class="lnt">290
</span><span class="lnt">291
</span><span class="lnt">292
</span><span class="lnt">293
</span><span class="lnt">294
</span><span class="lnt">295
</span><span class="lnt">296
</span><span class="lnt">297
</span><span class="lnt">298
</span><span class="lnt">299
</span><span class="lnt">300
</span><span class="lnt">301
</span><span class="lnt">302
</span><span class="lnt">303
</span><span class="lnt">304
</span><span class="lnt">305
</span><span class="lnt">306
</span><span class="lnt">307
</span><span class="lnt">308
</span><span class="lnt">309
</span><span class="lnt">310
</span><span class="lnt">311
</span><span class="lnt">312
</span><span class="lnt">313
</span><span class="lnt">314
</span><span class="lnt">315
</span><span class="lnt">316
</span><span class="lnt">317
</span><span class="lnt">318
</span><span class="lnt">319
</span><span class="lnt">320
</span><span class="lnt">321
</span><span class="lnt">322
</span><span class="lnt">323
</span><span class="lnt">324
</span><span class="lnt">325
</span><span class="lnt">326
</span><span class="lnt">327
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># plate00 is a test L8 module</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Has a resolution of 240x320</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># The top left corner is 0,0, X grows positive to the right and Y grows positive down</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">plate00</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">## TODO: is there a way to fix this? Maybe a HA feature request or openHasp/CC change...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Would be really nice if HA had some way to save templates and load them</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#   that way I don&#39;t have to declare the same variables over and over...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">objects</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">###</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># COMMON</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">###</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Header: Time</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">obj</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;p0b1&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Align left most, If we do go over our permitted length, loop</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;align&#34;: </span><span class="s2">&#34;left&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;text&#34;: </span><span class="s2">&#34;{{ states(&#39;sensor.time&#39;) }}&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;mode&#34;: </span><span class="s2">&#34;loop&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Draw the labels with a 1% margin from the top and sides</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;x&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrHorMargin}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;y&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrVrtMargin}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Width is 1/3 of the screen width after subtracting margins</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;w&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set numObj = 3 %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set usableHdrWd = scnWd-(2*hdrHorMargin) %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrLblWd = (usableHdrWd/numObj) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrLblWd}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Height is 10% of the screen, after margin</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;h&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrLblHt = hdrHt-hdrVrtMargin %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrLblHt}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Header: Temp</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">obj</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;p0b2&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Align center, If we do go over our permitted length, loop</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;align&#34;: </span><span class="s2">&#34;center&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;text&#34;: </span><span class="s2">&#34;{{ states(&#39;sensor.room_temperature&#39;) }}°C&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;mode&#34;: </span><span class="s2">&#34;loop&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Draw the labels with a 1% margin from the top and sides</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;x&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set numObj = 3 %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set usableHdrWd = scnWd-(2*hdrHorMargin) %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrLblWd = (usableHdrWd/numObj) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrHorMargin+hdrLblWd}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;y&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrVrtMargin}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Width is 1/3 of the screen width after subtracting margins</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;w&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set numObj = 3 %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set usableHdrWd = scnWd-(2*hdrHorMargin) %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrLblWd = (usableHdrWd/numObj) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrLblWd}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Height is 10% of the screen, after margin</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;h&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrLblHt = hdrHt-hdrVrtMargin %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrLblHt}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Header: Humidity</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">obj</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;p0b3&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Align right most, If we do go over our permitted length, loop</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;align&#34;: </span><span class="s2">&#34;right&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;text&#34;: </span><span class="s2">&#34;{{ states(&#39;sensor.room_humidity&#39;) }}%&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;mode&#34;: </span><span class="s2">&#34;loop&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Draw the labels with a 1% margin from the top and sides</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;x&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set numObj = 3 %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set usableHdrWd = scnWd-(2*hdrHorMargin) %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrLblWd = (usableHdrWd/numObj) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrHorMargin+(2*hdrLblWd)}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;y&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrVrtMargin}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Width is 1/3 of the screen width after subtracting margins</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;w&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set numObj = 3 %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set usableHdrWd = scnWd-(2*hdrHorMargin) %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrLblWd = (usableHdrWd/numObj) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrLblWd}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Height is 10% of the screen, after margin</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;h&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrLblHt = hdrHt-hdrVrtMargin %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrLblHt}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># bottom nav: previous</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">obj</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;p0b6&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Left most button sits all the way up against the left side of the screen</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;x&#34;: </span><span class="m">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Start drawing the button from the bottom most pixel</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;y&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{scnHt-hdrHt}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># And since we have 3 buttons, 1/3 of the width</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;w&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set numObj = 3 %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set ftrBtnWd = (scnWd/numObj) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{ftrBtnWd-1}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># We want the bottom nav buttons to consume the bottom 10% of the screen</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;h&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set ftrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{ftrHt}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># bottom nav: home</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">obj</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;p0b7&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Start drawing exactly the next pixel over from where the first button stopped</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;x&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set numObj = 3 %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set ftrBtnWd = (scnWd/numObj) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{ftrBtnWd}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Start drawing the button from the bottom most pixel</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;y&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{scnHt-hdrHt}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># And since we have 3 buttons, 1/3 of the width</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;w&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set numObj = 3 %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set ftrBtnWd = (scnWd/numObj) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{ftrBtnWd-1}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># We want the bottom nav buttons to consume the bottom 10% of the screen</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;h&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set ftrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{ftrHt}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># bottom nav: next</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">obj</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;p0b8&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Start drawing exactly the next pixel over from where the first button stopped</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;x&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set numObj = 3 %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set ftrBtnWd = (scnWd/numObj) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{ftrBtnWd*2}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Start drawing the button from the bottom most pixel</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;y&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{scnHt-hdrHt}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># And since we have 3 buttons, 1/3 of the width</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;w&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set numObj = 3 %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set ftrBtnWd = (scnWd/numObj) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{ftrBtnWd}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># We want the bottom nav buttons to consume the bottom 10% of the screen</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;h&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set ftrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{ftrHt}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># ###</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># # Room Specific</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># ###</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># relay toggle 1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">obj</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;p1b101&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;x&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrHorMargin}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Figure out how tall the display is, subtract out the height of the header/footer and that&#39;s the usable</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">#   space. Within that usable space, we will want small margins.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;y&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrHt+hdrVrtMargin}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;w&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set usableHdrWd = scnWd-(2*hdrHorMargin) %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyWd = usableHdrWd %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{bdyWd}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># We want the bottom nav buttons to consume the bottom 10% of the screen</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;h&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set numObj = 3 %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set ftrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyHt = (scnHt - (hdrHt+ftrHt) - (2*hdrVrtMargin)) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyBtnVrtMargin = (bdyHt * 0.02) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyBtnHt = ((bdyHt-((numObj-1)*bdyBtnVrtMargin))/numObj) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{bdyBtnHt}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># relay toggle 2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">obj</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;p1b102&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;x&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrHorMargin}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Figure out how tall the display is, subtract out the height of the header/footer and that&#39;s the usable</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">#   space. Within that usable space, we will want small margins.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;y&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set numObj = 3 %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set ftrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyHt = (scnHt - (hdrHt+ftrHt) - (2*hdrVrtMargin)) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyBtnVrtMargin = (bdyHt * 0.02) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyBtnHt = ((bdyHt-((numObj-1)*bdyBtnVrtMargin))/numObj) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrHt+hdrVrtMargin+(1*bdyBtnHt+bdyBtnVrtMargin)}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;w&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set usableHdrWd = scnWd-(2*hdrHorMargin) %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyWd = usableHdrWd %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{bdyWd}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># We want the bottom nav buttons to consume the bottom 10% of the screen</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;h&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set numObj = 3 %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set ftrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyHt = (scnHt - (hdrHt+ftrHt) - (2*hdrVrtMargin)) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyBtnVrtMargin = (bdyHt * 0.02) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyBtnHt = ((bdyHt-((numObj-1)*bdyBtnVrtMargin))/numObj) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{bdyBtnHt}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># relay toggle 3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">obj</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;p1b103&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;x&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrHorMargin}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Figure out how tall the display is, subtract out the height of the header/footer and that&#39;s the usable</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">#   space. Within that usable space, we will want small margins.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;y&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set numObj = 3 %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set ftrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyHt = (scnHt - (hdrHt+ftrHt) - (2*hdrVrtMargin)) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyBtnVrtMargin = (bdyHt * 0.02) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyBtnHt = ((bdyHt-((numObj-1)*bdyBtnVrtMargin))/numObj) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrHt+hdrVrtMargin+(2*(bdyBtnHt+bdyBtnVrtMargin))}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;w&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set usableHdrWd = scnWd-(2*hdrHorMargin) %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyWd = usableHdrWd %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{bdyWd}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># We want the bottom nav buttons to consume the bottom 10% of the screen</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;h&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set numObj = 3 %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set ftrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyHt = (scnHt - (hdrHt+ftrHt) - (2*hdrVrtMargin)) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyBtnVrtMargin = (bdyHt * 0.02) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyBtnHt = ((bdyHt-((numObj-1)*bdyBtnVrtMargin))/numObj) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{bdyBtnHt}}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Tip<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>This technique <em>could</em> be considered overkill. Each template incurs some additional memory/cpu overhead on the Home Assistant instance.</p>
<p>While this technique is pretty helpful during rapid prototyping, at some point the additional resource usage is hard to justify for layouts that do not change often.</p>
<p>A reasonable compromise would be to leverage the template evaluation functionality via the Home Assistant Developer tools to calculate the positions and locations for each UI elements while building out your interface(s) and then copy the computed values into your <code>pages.jsonl</code> file once the layout has been more or less finalized.</p>
</div>
        </div>
    </div>
<p>And you&rsquo;re done!
You might need to restart Home Assistant or reload the openHasp component/configuration so your update YAML is picked up.
Assuming everything works, you should see a flurry of activity on your MQTT broker or the plate telnet console as the openHasp component renders each template and commands the plate to re-draw each UI element.</p>
<p>You can then re-configure your device with a new display orientation and then reboot it. As it connects back to your MQTT broker, Home Assistant will re-evaluate the templates with the inverted screen height/width and each UI widget should get re-painted.</p>
<p>If I had a way to reliably capture the content of the framebuffer as a video rather than a screenshot, I&rsquo;d include it here.
You&rsquo;ll just have to trust me when I say that It&rsquo;s kinda neat to watch this happen in real time.</p>
<h2 id="teardown">Teardown</h2>
<h3 id="product-packaging">Product packaging</h3>
<p>Since it&rsquo;s all but impossible to find any photos of the product packaging online, here&rsquo;s a few of those:</p>
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Minimal instructions and wasteful packaging. Other than the small foam insert, this entire package can be recycled!
            
                
                
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
        

    

    <figcaption>
        
        <p>
            The provided screws are NOT the US standard #6 32 thread-per-inch. They are slightly larger and will strip out any screw holes in an electrical box!
            
                
                
        </p> 
    </figcaption>
    
</figure>


<h3 id="internals">Internals</h3>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            This particular model is the 3 relay version. Packaging claims 200W power. It&#39;s not clear if that is per channel or total. My money is on total.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>You can clearly see the revised PCB that is substantially different from the one featured on <a href="https://blakadder.com/lanbon-L8-custom-firmware/#disassembly" target="_blank" rel="noopener noreffer">this blakadder post</a>.
My PCB has a parasitic TuYa module also attached.
Almost none of the pins are connected to the PCB so the TuYa module is 100% self contained and commands the main ESP module via UART.</p>
<p>Removing the TuYa module is pretty painless with some hot air.
It can also be left alone and the openHasp binaries will just ignore it.
You can also place an order directly with Lanbon for units that do not have the TuYa module populated but this will require a minimum order quantity.</p>
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Generic relays, generic caps, generic transformers... don&#39;t switch any critical loads with this!
            
                
                
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
        

    

    <figcaption>
        
        <p>
            A closer look at what appears to be a dedicated power monitoring IC. It appears to monitor the aggregate of all three channels, not each individually. Very likely to make sure no more than 200W is switched at one time...
            
                
                
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<h3 id="pcbic-markings">PCB/IC Markings</h3>
<p>Some of the interesting ICs and PCB markings:</p>
<ul>
<li>
<p><code>CB3S</code>: TuYa <a href="https://developer.tuya.com/en/docs/iot/cb3s?id=Kai94mec0s076" target="_blank" rel="noopener noreffer">wifi module</a></p>
</li>
<li>
<p><code>HLW8012</code>: Single phase energy monitor chip</p>
</li>
<li>
<p><code>ESP32-WROVER-IB</code>: the primary ESP32 module that runs the show</p>
</li>
<li>
<p>Primary PCB is marked: <code>L8-HS_CB_V1.17(20210805)</code></p>
</li>
<li>
<p>Daughter / &lsquo;power&rsquo; board <code>L8-HS MB V1,14</code></p>
</li>
</ul>
]]></description></item><item><title>Generic RGB Wall Switch teardown</title><link>https://karlquinsland.com/rgb-wall-switch-teardown/</link><pubDate>Sat, 01 Jan 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/rgb-wall-switch-teardown/</guid><description><![CDATA[<p>Yep! Another teardown post! This one was also a cheap &ldquo;because i&rsquo;m curious&rdquo; post.</p>
<hr>
<h1 id="what">What</h1>
<p>It&rsquo;s a &lsquo;decora&rsquo; style wall switch with WiFI and an RGB color changing paddle.</p>
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>The product listing was very non specific:</p>
<blockquote>
<p>EU US WiFi Smart Wall Switch Push Button Timer Relay Switch Voice Remote Control RGB LED Night Light Lamp TUYA Alexa Google Home</p></blockquote>
<p>I saw <code>TuYa</code> in the item description and hoped that it would be based on an ESP8266 module or at least use a pin-compatible module. After all, there are a few such devices on the <a href="https://templates.blakadder.com/switch.html" target="_blank" rel="noopener noreffer">Wall Switches and Dimmers section</a> of the tasmota templates repository.</p>
<h2 id="teardown">Teardown</h2>
<p>Almost immediately after opening it became clear: the item is a variant of the <a href="https://templates.blakadder.com/moko_SSMS118-01AI.html" target="_blank" rel="noopener noreffer"><code>SSMS118-01AI</code></a> switch.</p>
<p>Other than that, the internals are pretty predictable / standard.</p>
<p>From the side you can see plastic clips holding the paddle to the Aluminum substrate.</p>
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>No screws on the back, so we probably open it from the front.</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Not sure about how code compliant those wire terminal/lugs are.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>If the paddle was removed, the philips screws would be unobstructed.</p>
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>RGB leds on a thin PCB with a reflective sticker attached. The sticker probably makes the LEDs appear brighter.</p>
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Philips screws removed and the switch immediately splits in half. I wish everything was this easy to get into!</p>
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Almost textbook design at this point; keep the mains voltage on it&rsquo;s own PCB and only send back low voltage / signal to the controller PCB.</p>
<p>The mains PCB attaches to the controller PCB via 3 sets of three male/female pin headers along the top and bottom of the left edge and one side of the right edge.</p>
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Sparsely populated and a generic no-name relay. But at least there&rsquo;s a fuse!</p>
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Mains PCB is marked <code>HYS-00-004-MAIN_V1.1</code> with a datecode of <code>2019-5-7</code>.</p>
<p>Equally sparse controller PCB. Aside from the <em>massive</em> mechanical switch and the three transistors for the RGB leds, everything lives on the ESP module.
At first glance, the module looks like a standard ESP-12&hellip; but it isn&rsquo;t! There are 6 pins on each of the three edges, not the 8 that would be present on an ESP-12 module.</p>
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Controller PCB is marked <code>HYS-00-004-WIFI_V1.1</code> with a datecode of <code>2019-4-11</code>.</p>
<p>After a bit of reverse image searching, the ESP based module appears to be a WT8266-S1s. The datasheet can be found <a href="https://www.seeedstudio.com/document/word/WT8266-S1%20DataSheet%20V1.0.pdf" target="_blank" rel="noopener noreffer">here</a>.</p>
<p>To save you a click, here&rsquo;s the useful bit:</p>
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>I checked a few of the pins listed on the  <a href="https://templates.blakadder.com/moko_SSMS118-01AI.html" target="_blank" rel="noopener noreffer"><code>SSMS118-01AI template</code></a> switch and they appeared to match the PCB shown above.</p>
<p>Thats all for this one!</p>
]]></description></item><item><title>Tuya Smart Curtain Driver Robot Teardown</title><link>https://karlquinsland.com/tuya-smart-curtain-driver-robot-teardown/</link><pubDate>Sat, 11 Dec 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/tuya-smart-curtain-driver-robot-teardown/</guid><description><![CDATA[<p>I am trying something new out with this post; some mix of hardware teardown and a brief product review.</p>
<hr>
<h1 id="why">Why</h1>
<p>I was looking for a way to actuate some heavy blackout curtains.</p>
<p>There have been <em>several</em> DIY projects out there that manipulate curtains but they all appear to be relatively involved as they are often designed for a very specific type of curtain; servos that fit on the &rsquo;tilt rod&rsquo; or motors that can manipulate the pull chain&hellip; etc.</p>
<p>The specific curtains that I wanted to power-actuate  are curtains that do not have a pull string or a set of wheels/track to facilitate their movement. Just folds of fabric hanging directly from a telescopic metal rod.</p>
<p>After a quick review of hte existing commercial solutions for my application/style of curtains, it became clear that they all work in about the same way: some battery powered motor mechanically couples to the curtain rod and moves along the rod dragging / pushing the curtain as it does so.</p>
<p>Since they all more or less use the same design, I figured that most of the differentiation between products would be in the software side of things. No product immediately stood out as having <strong>local</strong> Home Assistant integration so it didn&rsquo;t matter which product I selected; I will inevitably have to do some reverse engineering / hacking to get <strong>local</strong> Home Assistant integration.</p>
<p>I selected the <code>Tuya Smart Curtain Driver Robot</code> because:</p>
<ol>
<li>Cheap</li>
<li>Appeared to use USB-C for charging</li>
<li>I was vaguely aware that <a href="https://github.com/ct-Open-Source/tuya-convert" target="_blank" rel="noopener noreffer">TuYa was pumping out a <em>ton</em> of ESP8266 based hardware</a> and hoped that I&rsquo;d find the familiar microcontroller inside.</li>
</ol>
<p>Below is a collection of photos and some thoughts that are - roughly - what I wish I had been able to find when doing the product research.
If I had found the equivalent of this post while doing my research, I would have been able to save myself a purchase!</p>
<h1 id="what">What</h1>
<p>Searching for rod-based curtain actuators will turn up a <em>ton</em> of results. A fair number of them use product images very similar to these:</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Official marketing photo
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>How well the robot performs will depend on how well the little white wheel is held against the bottom of the curtain rod.
The arms that the upper sled attaches to are spring loaded for additional clamping force.</p>
<p>The case seems to be fairly generic and used across multiple brands so it&rsquo;s safe to say that depending on the version / hardware variant, you may or may not have all of the featured inputs/sensors.</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Only one of the two units in a pair comes equipped with the light sensor.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>The light sensor is a nice touch. I will absolutely be borrowing that idea when designing my own solution 💡🤔!</p>
<h2 id="teardown">Teardown</h2>
<p>I&rsquo;m not a huge fan of unboxing videos. The box is rather unremarkable; it sustained some damage in transit, but that&rsquo;s what it&rsquo;s supposed to do.</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Relatively well packaged. The seller that I purchased from had explicit listings for different curtain rod styles so I am not sure why I received hardware for all styles. There does not appear to be any easy way to install this hardware.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>The upper sled is coupled to the main body through two spring-loaded arms with a ratchet and paw setup. The arms can be easily removed from the main body if needed.</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            I am getting some vague Portal2 Turret vibes...
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>Since the entire weight of the robot will be hanging from the upper sled, the springs are the only thing that will pull the actuator wheel into the curtain rod. I don&rsquo;t know how the springs will last over time, but I absolutely can forsee needing to re-tension things as the springs inevitably stretch out.</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            The ratchet/paws seem to indicate compatibility with some comically large diameter curtain rods!
            
                
                
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Obligatory &#39;i void warranties&#39; reference.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>Use a Philips style <code>J00</code> or <code>J000</code> screwdriver to remove the four screws holding the thing together. Use any flat pry tool to crack the two halves apart.</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Screw hiding under warranty void sticker and obvious mechanical/snap seam make it pretty obvious how this will come apart.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>And with that, our first real look at the electronics inside!</p>
<p>I expected a simple PCB that contained a charge controller circuit for the battery and a simple motor driver with over current protection&hellip; and nothing else. I was sure that <em>everything</em> else would be handled directly by a the radio-on-module.</p>
<p>I <em>absolutely</em> did not expect the PCB to have provisions for &hellip; <strong>two</strong> radio modules!</p>
<p>A few other quick observations:</p>
<ul>
<li>The unpopulated radio module footprint does not match any ESP-8266 modules that I am familiar with.</li>
<li>The populated radio module <em>does</em> look like a common ESP-12E module footprint&hellip; but the module is <em>clearly</em> not an ESP.</li>
<li>The markings have been erased from all the interesting ICs 🤬.</li>
<li>The 20 pin chip closest to the unpopulated module footprint could be anything but is likely the &lsquo;housekeeping&rsquo; CPU. The populated radio module likely communicates with this chip to command the motor and check the sensors</li>
<li>The product marketing photos indicated that there would be a light sensor. The PCB appears to have a foot print for an LDR&hellip; but it&rsquo;s not populated&hellip;
only a few passive components besides some radio-on-module</li>
<li>The USB-C port does not have any active electronics connected to it. The port likely does not speak any power delivery protocols and certainly does not have a hidden UART for talking to either of the microcontrollers.</li>
<li>No motor is visible so that means that it must be embedded in the comically small drive wheel&hellip;</li>
</ul>
<p>Some more technical details are discussed <a href="#technical-details" rel="">below</a>.</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Huh. Was not expecting the PCB to be quite so big or complex!
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>Lifting up the PCB reveals the battery pack. I did not slice the pack open to see which brand of cells went into the pack.
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Grateful that they didn&#39;t solder the battery directly to the PCB.
            
                
                
        </p> 
    </figcaption>
    
</figure>

</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            I have not tested the battery to see accurate the labeled capacity is.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>I was still looking for that elusive light sensor so I opened up the second unit&hellip; and found it!</p>
<p>Other than the populated second radio module, <code>R20</code> and the LDR, the PCBs appear identical.</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Something tells me that the PCB with two radio modules is the &#39;leader&#39; out of the two.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>On the rear we can see an obvious programming / debug port and a PCB/product designator: <code>ZNCL_TY_V1.5</code>.</p>
<p>Giving that a quick google returns almost nothing.
I did find <a href="https://old.reddit.com/r/esp32/comments/q3omwh/can_somebody_tell_me_what_were_looking_at_here/hft52t1/" target="_blank" rel="noopener noreffer">this</a> post from <a href="https://old.reddit.com/user/coned_miro" target="_blank" rel="noopener noreffer">/u/coned_miro</a> asking about a very similar PCB revision:</p>
<pre><code>    ...The main board says 'ZNCL_TY_V1.3' on the back
</code></pre>
<p>Nothing new to be learned about the tuya device from that thread, sadly.</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            No, I didn&#39;t hook a scope up or trace out the obvious programming/debug header.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<h2 id="the-app">The App</h2>
<p>I never intended to use the manufacturer provided app for anything other than the initial setup so this will be a very brief section. The robot was quickly discovered and provisioned through the app.</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            BTLE Pair/Provisioning was straightforward
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>The device calibration process is pretty rudimentary and does not have an easy &ldquo;undo&rdquo; process.</p>
<p>If you make a mistake in configuring the direction/distance that the robot needs to travel for curtain open/close, you have to factory reset the device. Fortunately this is easy to do in app and discovering/re-provisioning the device takes only a few seconds.</p>
<p>The <em>two</em> firmware version strings strongly hints at a &ldquo;two processors for two domains&rdquo; architecture: the anonymous 20pin chip runs everything on the PCB and the <code>BT7L</code> module deals with external communications and is only abstractly aware of the PCB/motor/sensor/battery state.</p>
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
        

    

    <figcaption>
        
        <p>
            I have only skimmed the TuYa developer documentation but I think that the VirtualID is common to _all_ of the curtain robots.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<h1 id="verdict">Verdict</h1>
<p>While disappointing that there was no easily hackable ESP microcontroller running the show, it doesn&rsquo;t matter.
I can&rsquo;t use this product as is for my intended application; the motor is just too puny for the task.</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            The brains(?)
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>My curtains are rather thick and heavy. A tiny motor can&rsquo;t <em>possibly</em> have enough power to do this on it&rsquo;s own&hellip; especially with a sub-optimal coupling mechanism!</p>
<p>To give the motor a fighting chance, the engineers went with a TON of reduction-gearing.
The gearbox allows a wimpy but fast motor to become a more grunty motor at the expense of speed.
Almost anything small that rotates at high speed will come with some unpleasant sounds. This is ESPECIALLY true for cheaply made gearbox full of small gears.</p>
<p>This means that any invocation of the robot will be noisy.
You can expect the noisy little device to <em>slowly</em> move across the curtain rod. 🙄</p>
<p>The robot struggled to push the curtains together towards the end of an opening cycle&hellip; it would often skip in place as the drive wheel struggled to keep enough traction on the curtin rod.</p>
<p>Likewise, asking the robot to pull the bucked up curtains closed was out of the question without some sort of an assist.</p>
<p>Because the robot has no fixed position sensor, it can&rsquo;t really measure where on the curtain rod it is.
Every time the drive wheel skips, the difference between where the robot thinks it is and where it <em>actually</em> is will grow.</p>
<p>If you can stand the whiny/slow movement, expect frequent re-calibrations 👎.</p>
<br>
<p><strong>TL;DR</strong>: Looks like there&rsquo;s a reason why the hobbyist/DIY community has produced such a <em>wide variety</em> of bespoke curtain/drape actuators&hellip; most of the commercial ones have sacrificed too much in order to be widely usable.
The solution that I end up implementing will be designed with my heavy drapes in mind and will use an appropriately sized and quiet motor!</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            A simple brushed DC motor with no position encoder and what is probably a cheaply made gearbox. What could go wrong?
            
                
                
        </p> 
    </figcaption>
    
</figure>


<h1 id="technical-details">Technical Details</h1>
<p>A highly condensed version of my initial notes from setup/teardown:</p>
<ul>
<li>
<p>Was not expecting multiple radio units. The blue radio-module that both PCBs have in common appears to be a <code>JDY-25M</code>.</p>
</li>
<li>
<p>There is a SDK for the <code>JDY-25M</code> available <a href="https://github.com/Edragon/JDY-MESH/tree/main/JDY-25M/SDK" target="_blank" rel="noopener noreffer">here</a>. It contains some english documentation.</p>
</li>
<li>
<p>The <code>JDY-25M</code> SDK does not appear to contain any information about how to program the chip or build a custom firmware. You are meant to interface with the &lsquo;stock&rsquo; firmware via <code>AT+</code> commands. The firmware appears to support multiple modes&hellip; including a bi-directional communication link. I suspect that the unique radio module is the connection to the outside world and the the two identical radio modules are used to coordinate movement between the two pods</p>
</li>
<li>
<p>I was never able to get the &lsquo;follower&rsquo; unit to pair or otherwise command the second unit.</p>
</li>
<li>
<p>The unique radio module is a module made specifically by/for TuYa: <a href="https://developer.tuya.com/en/docs/iot/bt7l?id=K96gqp1dp6iiw" target="_blank" rel="noopener noreffer">https://developer.tuya.com/en/docs/iot/bt7l?id=K96gqp1dp6iiw</a></p>
</li>
</ul>
<h2 id="pcb-markings">PCB Markings</h2>
<p>AKA SEO optimization 😉</p>
<ul>
<li>PCB is marked: <code>ZNCL_TY_V1.5</code></li>
<li>&ldquo;primary&rdquo; radio: <a href="https://developer.tuya.com/en/docs/iot/bt7l?id=K96gqp1dp6iiw" target="_blank" rel="noopener noreffer"><code>BT7L</code></a></li>
<li>&ldquo;secondary&rdquo; radio <a href="https://github.com/Edragon/JDY-MESH/tree/main/JDY-25M/SDK" target="_blank" rel="noopener noreffer"><code>JDY-25M</code></a></li>
</ul>
]]></description></item></channel></rss>