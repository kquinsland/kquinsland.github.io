<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>digital-ocean - Tag - karl</title><link>https://karlquinsland.com/tags/digital-ocean/</link><description>digital-ocean - Tag - karl</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 21 Jul 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://karlquinsland.com/tags/digital-ocean/" rel="self" type="application/rss+xml"/><item><title>CAPP: Cloud Agnostic Proxy Protocol</title><link>https://karlquinsland.com/capp-cloud-agnostic-proxy-protocol/</link><pubDate>Tue, 21 Jul 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/capp-cloud-agnostic-proxy-protocol/</guid><description><![CDATA[<p>It&rsquo;s another &ldquo;i made a thing!&rdquo; post. ðŸ™ƒ</p>
<hr>
<p>I&rsquo;m playing around with porting a few different applications over to k8. Some of them - like <a href="https://github.com/kquinsland/skyhole/" target="_blank" rel="noopener noreffer">skyhole</a> -  rely on UDP packets which my hosted k8 provider of choice (read: cheapest! ðŸ’°) <a href="https://ideas.digitalocean.com/ideas/DO-I-310" target="_blank" rel="noopener noreffer">does not support</a>.</p>
<p>The solution is either:</p>
<ol>
<li>
<p>Keep track of all of the node IP addresses that have an exposed <code>nodePort</code> and have the client connect directly to the cluster on the <code>nodePort</code></p>
</li>
<li>
<p>Set up some sort of intermediary to re-write the packet from the <code>targetPort</code> <strong>to</strong> the <code>nodePort</code></p>
</li>
</ol>
<p>Option 1 seems fragile; if a cluster host / node is recycled, the client needs to learn the new correct IP addresses.</p>
<p>Option 2 seems far more flexible and is basically how most hosted k8 providers do ingress already. In fact, if digital ocean <em>had</em> UDP support, this tool would never have been created. Bonus: clients that expect a specific port can still connect to the service no matter what <code>nodePort</code> is used.</p>
<p>So that&rsquo;s what <a href="https://github.com/kquinsland/cloud-agnostic-protocol-proxy" target="_blank" rel="noopener noreffer"><code>CAPP</code></a> is: <strong>C</strong>loud <strong>A</strong>gnostic <strong>P</strong>rotocol <strong>P</strong>roxy.</p>
<p>It&rsquo;s a repo w/ a small python tool which can collect the IP addresses(s) belonging to each node in an arbitrary k8 cluster and - when combined with a small  user config file - generate configuration files for <code>traefik</code>.</p>
<p>A &lsquo;reference&rsquo; packer job is included to generate a basic machine image to host traefik. A few lines of <code>cloud_init</code> is all that&rsquo;s needed to kick the tool off.</p>
]]></description></item></channel></rss>