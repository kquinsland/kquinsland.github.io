<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>All Posts - karl</title><link>https://karlquinsland.com/posts/</link><description>All Posts | karl</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 01 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://karlquinsland.com/posts/" rel="self" type="application/rss+xml"/><item><title>Generic RGB Wall Switch teardown</title><link>https://karlquinsland.com/rgb-wall-switch-teardown/</link><pubDate>Sat, 01 Jan 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/rgb-wall-switch-teardown/</guid><description><![CDATA[<p>Yep! Another teardown post! This one was also a cheap &ldquo;because i&rsquo;m curious&rdquo; post.</p>
<hr>
<h1 id="what">What</h1>
<p>It&rsquo;s a &lsquo;decora&rsquo; style wall switch with WiFI and an RGB color changing paddle.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>The product listing was very non specific:</p>
<blockquote>
<p>EU US WiFi Smart Wall Switch Push Button Timer Relay Switch Voice Remote Control RGB LED Night Light Lamp TUYA Alexa Google Home</p>
</blockquote>
<p>I saw <code>TuYa</code> in the item description and hoped that it would be based on an ESP8266 module or at least use a pin-compatible module. After all, there are a few such devices on the <a href="https://templates.blakadder.com/switch.html" target="_blank" rel="noopener noreffer">Wall Switches and Dimmers section</a> of the tasmota templates repository.</p>
<h2 id="teardown">Teardown</h2>
<p>Almost immediately after opening it became clear: the item is a variant of the <a href="https://templates.blakadder.com/moko_SSMS118-01AI.html" target="_blank" rel="noopener noreffer"><code>SSMS118-01AI</code></a> switch.</p>
<p>Other than that, the internals are pretty predictable / standard.</p>
<p>From the side you can see plastic clips holding the paddle to the Aluminum substrate.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>No screws on the back, so we probably open it from the front.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Not sure about how code compliant those wire terminal/lugs are.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>If the paddle was removed, the philips screws would be unobstructed.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>RGB leds on a thin PCB with a reflective sticker attached. The sticker probably makes the LEDs appear brighter.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Philips screws removed and the switch immediately splits in half. I wish everything was this easy to get into!</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Almost textbook design at this point; keep the mains voltage on it&rsquo;s own PCB and only send back low voltage / signal to the controller PCB.</p>
<p>The mains PCB attaches to the controller PCB via 3 sets of three male/female pin headers along the top and bottom of the left edge and one side of the right edge.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Sparsely populated and a generic no-name relay. But at least there&rsquo;s a fuse!</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Mains PCB is marked <code>HYS-00-004-MAIN_V1.1</code> with a datecode of <code>2019-5-7</code>.</p>
<p>Equally sparse controller PCB. Aside from the <em>massive</em> mechanical switch and the three transistors for the RGB leds, everything lives on the ESP module.
At first glance, the module looks like a standard ESP-12&hellip; but it isn&rsquo;t! There are 6 pins on each of the three edges, not the 8 that would be present on an ESP-12 module.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Controller PCB is marked <code>HYS-00-004-WIFI_V1.1</code> with a datecode of <code>2019-4-11</code>.</p>
<p>After a bit of reverse image searching, the ESP based module appears to be a WT8266-S1s. The datasheet can be found <a href="https://www.seeedstudio.com/document/word/WT8266-S1%20DataSheet%20V1.0.pdf" target="_blank" rel="noopener noreffer">here</a>.</p>
<p>To save you a click, here&rsquo;s the useful bit:</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>I checked a few of the pins listed on the  <a href="https://templates.blakadder.com/moko_SSMS118-01AI.html" target="_blank" rel="noopener noreffer"><code>SSMS118-01AI template</code></a> switch and they appeared to match the PCB shown above.</p>
<p>Thats all for this one!</p>
]]></description></item><item><title>Shelly Pro 4PM teardown</title><link>https://karlquinsland.com/shelly-pro-4pm-teardown/</link><pubDate>Sat, 01 Jan 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/shelly-pro-4pm-teardown/</guid><description><![CDATA[<p>Yet another teardown post!</p>
<p>Curiosity got the better of me while putting together a BOM for a project and I decided to add one of the new Shelly devices to my order to bump the total over the threshold for a nice discount.</p>
<p>I have not seen a ton of discussion about what&rsquo;s inside of a any of the new Shelly Pro devices.
These &lsquo;next generation&rsquo; devices appear to all use a <a href="https://shelly-api-docs.shelly.cloud/gen2/" target="_blank" rel="noopener noreffer">common and more <em>uniform</em> API</a> which, apparently, is too demanding of the ESP8266 based hardware so it won&rsquo;t be backported.</p>
<p>A cursory google only reveals some light technical details from a <a href="https://www.shelly-support.eu/forum/index.php?thread/10795-shelly-pro-4pm-teardown/" target="_blank" rel="noopener noreffer">teardown post on a german site</a>. All of the pictures attached ot that post require a login üôÅ.</p>
<p>So here is <em>my</em> teardown. No login required!</p>
<hr>
<h1 id="what">What</h1>
<p>The Shelly Pro 4 PM is a rather compact DIN mounted relay/power monitoring module with some connectivity. The <code>4</code> is for the number of channels that can be independently switches and monitored.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>As for connectivity, the <a href="https://shelly.cloud/knowledge-base/devices/shelly-pro-4pm/" target="_blank" rel="noopener noreffer">official product page</a> sums it up nicely:</p>
<blockquote>
<p>Professional 4 channels relay with Wi-Fi, LAN, and Bluetooth connection, suitable for home and facility automation with remote control and precise power management. DIN rail mountable inside a breaker box. Enhanced safety features and compatible with most used home automation platforms.</p>
</blockquote>
<h2 id="teardown">Teardown</h2>
<p>This Shelly 4PM feels like a step backwards in terms of build quality. The prior generation of devices were very dense little pucks and this feels pretty hollow; the plastic DIN case creaks and squeaks.</p>
<p>The internal layout isn&rsquo;t my favorite and it made both disassembly and reassembly a bit tenuous at a few points.
The layout may be inevitable, though, as DIN case is more or less a standard shape and size.
Layouts are almost always a bit weird when the electronics have to be designed to fit the case rather than the other way around.</p>
<p>Other than the layout quirks, the Shelly team continues to go with what they know: the <a href="https://www.espressif.com/" target="_blank" rel="noopener noreffer">espressif</a> line of chips. This time the ESP826x series is out and the much more capable ESP32 series is in&hellip; which allows for both the color LCD and the ethernet interface.</p>
<p>As is common with these types of devices, the ESP runs the show&hellip; but it has a few deputies: dedicated power monitoring ICs and an ethernet PHY.</p>
<p>And with that, let&rsquo;s get into it:</p>
<p>The main body of the shelly is clipped to the rear &lsquo;plate&rsquo; which houses the DIN rail attachment mechanism. You can see the clips on the very top and bottom along the left edge:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        40A at 240V is a _lot_ of power to fit into a fairly compact device!
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>Viewed from the rear, the clips are easier to see in the four corners:</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>The rear plate lifts off to reveal the largest PCB. There are 4 copies of the same circuit. Very nice to see big traces with extra solder and some beefy current shunts!</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Just behind the &lsquo;input trigger&rsquo; terminals on the main PCB is a <code>2x10 @ 2.54mm pitch</code> female header. Into which slides the &lsquo;smarts&rsquo; PCB which hosts the main ESP32 MCU as well as the ethernet jack.</p>
<p>On this smaller PCB and next to the ethernet jack is a very small <code>1x6 @ 1mm pitch</code> female header block. It is cleverly hidden next to the jack but could probably be accessed with the case on if you&rsquo;re careful.</p>
<p>If I had to guess, this is a debug/programming header for at least the main MCU.</p>
<p>It&rsquo;s not pictured until later, but there is a <code>2x2 @ 2.54mm pitch</code> male header block on the other side of the smarts PCB. This is where a small daughterboard containing only the 3 buttons connects.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        How much do you want to bet that the pins on the debug header are the usual &#43;3.3, GND, IO0, RX, TX for ESP flashing?
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>On the main PCB, behind the &lsquo;smarts&rsquo; PCB is a set of two ICs marked with <code>ADE7953ACPZ</code>. As expected, these are <a href="https://www.digikey.com/en/products/detail/analog-devices-inc/ADE7953ACPZ/2700176" target="_blank" rel="noopener noreffer">the energy management / monitoring ICs</a>.</p>
<p>Why two crystals, though?</p>
<p>The IC marked <code>MCP23S17</code> is a simple SPI based IO expander&hellip; almost certainly used to drive the relays and possibly command the power management ICs.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>On the rear of the &lsquo;smarts&rsquo; PCB is the star of the show: <a href="https://www.mouser.com/ProductDetail/Espressif-Systems/ESP32-D0WDQ6?qs=chTDxNqvsykWgzfXx0gR%252BQ%3D%3D" target="_blank" rel="noopener noreffer">ESP32-D0WDQ6</a>.</p>
<p>In addition to the passives and the flat flex socket for the LCD, we have:</p>
<ul>
<li>cFeon QH64-104HIP 64 Megabit flash chip</li>
<li>SMSC8720A: 10/100 Megabit ethernet PHY</li>
</ul>
<p>There is also <em>another</em> daughterboard covered in kapton tape. This is soldered to the main PCB and just has a few electrolytic caps. I guess this arrangement was easier than trying to clear some room on the back of the main PCB so the heavy current traces could be kept simple ü§î?</p>
<p>In the top right corner you can see the 4 pin header where the button daughter board attaches&hellip; just next to the ethernet phy.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>From this angle, still in the top right corner, you can see the button daughter board attached to the 4 pin header.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Just a few very tiny passives!
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>Electrically, nothing unusual or bizarre. Layout was a bit &lsquo;inventive&rsquo; but the unusual but standard shape of the case probably drove at least some of the decision to have 4 different PCBs that all have to be tediously connected by hand during manufacture!</p>
<p>Thats all for this one!</p>
<h2 id="pcbic-markings">PCB/IC Markings</h2>
<p>AKA SEO optimization üòâ</p>
<ul>
<li>
<p><code>ADE7953ACPZ</code>: Power monitoring</p>
</li>
<li>
<p><code>MCP23S17</code>: IO expansion</p>
</li>
<li>
<p><code>ESP32-D0WDQ6</code>: main CPU</p>
</li>
<li>
<p><code>EN25QH64</code>: 8 MB flash chip</p>
</li>
<li>
<p>Primary PCB is marked: <code>Shelly4ProPM_Relays_v0.1.2</code></p>
</li>
<li>
<p>Daughter boards not really marked with anything other than the usual component IDs and the date code of <code>211015</code></p>
</li>
</ul>
]]></description></item><item><title>Using Home Assistant to dynamically layout openHasp widgets</title><link>https://karlquinsland.com/lanbon-l8-tuya-lcd-switch-openhasp/</link><pubDate>Sat, 01 Jan 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/lanbon-l8-tuya-lcd-switch-openhasp/</guid><description><![CDATA[<h1 id="background">Background</h1>
<p>This is one of those posts that sat in the <code>Drafts</code> folder for <em>way</em> too long.
Just before release, I&rsquo;d discover something new that would warrant substantial rewrites.
After several delays, false starts and re-writes, I finally have something that is mostly new <em>and</em> worth sharing with the world.</p>
<p>Like with the past few <a href="https://karlquinsland.com/categories/teardown/" rel="">teardown</a> posts, this one also started off as a &lsquo;cart-stuffer&rsquo; item so I could unlock a more generous discount on the total purchase. The listing that caught my eye had the generic title:</p>
<pre><code>EU US Wifi LCD Smart Wall Light Touch Switch Tuya Smart Life App Remote Control ON OFF Timer Voice Control For Google Home Alexa
</code></pre>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Naturally, a cursory check for existing writeups / teardowns didn&rsquo;t yield much.</p>
<p>I did have some hope that the <code>Tuya</code> compatibility meant an easily hacked ESP module running the show and not a proprietary module.
It was unlikely that the device would be Android powered at that price-point and an ESP8266 series would be woefully under powered for direct LCD control so &hellip; fingers crossed for an ESP32 module!
Or, at the very least there might be a way to retrofit in an ESP module like with the recent Mi-Boxer LED controller that <a href="https://github.com/arendst/Tasmota/issues/7385#issuecomment-991848762" target="_blank" rel="noopener noreffer">I helped to integrate with Tasmota</a>.</p>
<p>The <em>plan</em> was to do a teardown and dump as much technical data as I could possibly gather in an evening or two and conclude with a feasibility assessment of hacking the device for use with Home Assistant.</p>
<h2 id="generic-becomes-lanbon">Generic becomes Lanbon</h2>
<p>Immediately after opening the shipping box and getting eyes on the actual product packaging, it was clear that this was a Lanbon L8 series module.</p>
<p>A quick google later and it turns out that the venerable blakadder.com has <a href="https://blakadder.com/lanbon-L8/" target="_blank" rel="noopener noreffer">already covered this device</a>&hellip; <em>and</em> documented <a href="https://blakadder.com/lanbon-L8-custom-firmware/" target="_blank" rel="noopener noreffer">it&rsquo;s Tasmota compatibility</a>!</p>
<p>So much for publishing a teardown and trying to figure out if Home Assistant integration was feasible üòï.</p>
<p>Funny how once you have the &lsquo;magic query string&rsquo;, google starts to yield <em>a ton</em> of relevant results!
Just after finding the aforementioned blakadder.com posts on the L8 device, I found two <em>very</em> helpful sources of more information:</p>
<ul>
<li>Somebody by the name of Jan Newmarch has published a <a href="https://jan.newmarch.name/IoT/Home/Lanbon/" target="_blank" rel="noopener noreffer">comprehensive dive</a> into the protocol(s) used by the stock firmware / other devices in the Lanbon family.</li>
<li>This <a href="https://haswitchplate.github.io/openHASP-docs/latest/devices/lanbon-l8/" target="_blank" rel="noopener noreffer">page dedicated to the Lanbon L8</a> from a project called openHasp.</li>
</ul>
<p>I thought that second link seemed familiar&hellip;ü§î.</p>
<p>Turns out, the <a href="https://haswitchplate.github.io/openHASP-docs/latest/" target="_blank" rel="noopener noreffer">openHASP project</a> is a <em>substantial</em> rewrite of the initial software that powered my <a href="https://karlquinsland.com/enhanced-homeassistantswitchplate/" rel="">Enhanced HomeAssistant Switch Plate (eHasp)</a> project.</p>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>Info<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">While digging through the above links, I realized that the model I had opened up had a different PCB layout.
In the interest of adding to the collective internet KB, photos and some other technical details from the model I tore apart are <a href="#teardown" rel="">below</a>.</div>
        </div>
    </div>
<h1 id="openhasp">openHasp</h1>
<p>As opposed to the <a href="https://github.com/aderusha/HASwitchPlate" target="_blank" rel="noopener noreffer">old HASP project</a>, openHasp leverages more powerful processors that can drive the LCD directly; graphical assets no longer need to be compiled down to a LCD-specific firmware before use and the content of the <em>entire</em> display <strong>can be arbitrarily manipulated at runtime</strong>!</p>
<p>openHasp <a href="https://haswitchplate.github.io/openHASP-docs/0.6/design/pages/" target="_blank" rel="noopener noreffer">uses <code>json</code> like files</a> to store the UI/widgets layout and configuration.
On boot, the content of the <code>jsonl</code> is parsed and turned into the actual UI widgets that are displayed on screen.
For example, <a href="https://haswitchplate.github.io/openHASP-docs/0.6/design/objects/#button" target="_blank" rel="noopener noreffer">here is the example <code>jsonl</code></a> that renders two buttons:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span><span class="nt">&#34;page&#34;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="nt">&#34;id&#34;</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span><span class="nt">&#34;obj&#34;</span><span class="p">:</span><span class="s2">&#34;btn&#34;</span><span class="p">,</span><span class="nt">&#34;x&#34;</span><span class="p">:</span><span class="mi">10</span><span class="p">,</span><span class="nt">&#34;y&#34;</span><span class="p">:</span><span class="mi">40</span><span class="p">,</span><span class="nt">&#34;w&#34;</span><span class="p">:</span><span class="mi">105</span><span class="p">,</span><span class="nt">&#34;h&#34;</span><span class="p">:</span><span class="mi">90</span><span class="p">,</span><span class="nt">&#34;toggle&#34;</span><span class="p">:</span><span class="kc">false</span><span class="p">,</span><span class="nt">&#34;text&#34;</span><span class="p">:</span><span class="s2">&#34;Button&#34;</span><span class="p">,</span><span class="nt">&#34;mode&#34;</span><span class="p">:</span><span class="s2">&#34;break&#34;</span><span class="p">,</span><span class="nt">&#34;align&#34;</span><span class="p">:</span><span class="s2">&#34;center&#34;</span><span class="p">}</span>

<span class="p">{</span><span class="nt">&#34;page&#34;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="nt">&#34;id&#34;</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span><span class="nt">&#34;obj&#34;</span><span class="p">:</span><span class="s2">&#34;btn&#34;</span><span class="p">,</span><span class="nt">&#34;x&#34;</span><span class="p">:</span><span class="mi">125</span><span class="p">,</span><span class="nt">&#34;y&#34;</span><span class="p">:</span><span class="mi">40</span><span class="p">,</span><span class="nt">&#34;w&#34;</span><span class="p">:</span><span class="mi">105</span><span class="p">,</span><span class="nt">&#34;h&#34;</span><span class="p">:</span><span class="mi">90</span><span class="p">,</span><span class="nt">&#34;toggle&#34;</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span><span class="nt">&#34;text&#34;</span><span class="p">:</span><span class="s2">&#34;#FFD700 Toggle# Button&#34;</span><span class="p">,</span><span class="nt">&#34;mode&#34;</span><span class="p">:</span><span class="s2">&#34;break&#34;</span><span class="p">,</span><span class="nt">&#34;align&#34;</span><span class="p">:</span><span class="s2">&#34;center&#34;</span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><figure >

    
        
    

    

    <figcaption>
        
        <p>
        Image credit/source:
        <a href="https://haswitchplate.github.io/openHASP-docs/0.6/design/objects/#button"> 
            openHasp Docs
        </a> 
        </p> 
    </figcaption>
    
</figure>


<p>Notice how the absolute coordinates on screen (<code>x</code> and <code>y</code>) and and absolute width (<code>w</code>) and height (<code>w</code>) properties are explicitly declared.
The only reason the buttons look appropriately sized/positioned in the above screenshot is because someone took the time to calculate the appropriate values for the particular screen resolution and orientation.</p>
<p>The above <code>jsonl</code> example would look different on any openHasp device with a different screen orientation or resolution!
Manually calculating the exact size and position of every widget for <em>each</em> class of device isn&rsquo;t so bad if you&rsquo;re planning on deploying the same file to several instances of the same device&hellip; but it starts be become a real headache if you want to deploy the same layout to 2+ different types of device.</p>
<p>The L8 devices are designed to be installed into a wall electrical box; they don&rsquo;t sit well on my desk so prototyping various interface files on a L8 device isn&rsquo;t the easiest.
Instead, I am using a <a href="https://haswitchplate.github.io/openHASP-docs/latest/devices/wt32-sc01/" target="_blank" rel="noopener noreffer">device with a higher resolution</a> and bigger screen that <em>does</em> work well on a desk to prototype the various <code>jsonl</code> files.</p>
<p>If you&rsquo;re thinking that calculating the appropriate location for various UI widgets on one device and then having to re-do the math for the intended deploy targets sounds like a task better suited to a computer&hellip; you&rsquo;re right!</p>
<h2 id="dynamic-layouts-with-home-assistant">Dynamic Layouts with Home Assistant</h2>
<p>Fortunately, the properties of <em>every</em> UI widget can be modified over the network even <em>after</em> the <code>jsonl</code> file has been parsed and the initial display has been painted!</p>
<p>My C++ skills are pretty weak so contributing new code to enable dynamic layouts directly to the openHasp codebase is not immediately practical.
There is, however, a robust <a href="https://haswitchplate.github.io/openHASP-docs/latest/integrations/home-assistant/howto/" target="_blank" rel="noopener noreffer">Home Assistant integration</a> published in the form of a <a href="https://github.com/HASwitchPlate/openHASP-custom-component" target="_blank" rel="noopener noreffer">custom component</a>.
Home Assistant means Python and some Python code to calculate the appropriate position/size for a given element <em>is</em> immediately within my means.</p>
<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>Warning<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">A few <a href="https://github.com/HASwitchPlate/openHASP/issues/278" target="_blank" rel="noopener noreffer">(small) changes to the openHasp firmware</a> were required to make this work.
Any <em>recent</em> build of <code>0.7</code> should work.
As of 2022-01, there is no release of the custom component that works with <code>0.7</code> out of the box so if installing through <a href="https://hacs.xyz/" target="_blank" rel="noopener noreffer">HACS</a>, <a href="https://github.com/HASwitchPlate/openHASP-custom-component/issues/87" target="_blank" rel="noopener noreffer">you will need to patch the custom component</a> so devices running <code>.0.7</code> can be controlled via Home Assistant.</div>
        </div>
    </div>
<p>Please see the <a href="https://haswitchplate.github.io/openHASP-docs/latest/integrations/home-assistant/sampl_conf/" target="_blank" rel="noopener noreffer">openHasp &lt;-&gt; Home Assistant docs</a> for background information, examples and a lot more detail on how Home Assistant and openHasp work together or if any of the <code>jsonl</code> and <code>yaml</code> below does not make sense.</p>
<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>Warning<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Please make sure that your openHasp device can connect to your MQTT broker and that the openHasp custom integration can discover and &lsquo;register&rsquo; your device with Home Assistant before proceeding!</div>
        </div>
    </div>
<h3 id="two-devices-one-pagesjsonl">Two devices, one <code>pages.jsonl</code></h3>
<p>The <code>pages.jsonl</code> file used for this post and the screenshots below is a (lightly) modified versions of the <a href="https://haswitchplate.github.io/openHASP-docs/latest/integrations/home-assistant/sampl_conf/#display-clock-and-temperature" target="_blank" rel="noopener noreffer">clock and temperature example</a> and the
<a href="https://haswitchplate.github.io/openHASP-docs/latest/integrations/examples/example-pagination/" target="_blank" rel="noopener noreffer">simple page navigation</a> examples with a room specific set of ui widgets.</p>
<p>That <em>singular</em> <code>pages.jsonl</code> file was uploaded it to two devices:</p>
<ul>
<li>Lanbon L8 with a 240x320 resolution</li>
<li>WT32-SC01 module with a 320x480 resolution</li>
</ul>
<p>Each screenshot was taken with the device display configured to 0¬∫ and 90¬∫ of rotation.
A reboot was required for the configuration change to take effect but I made <em>zero</em> changes to the <code>pages.jsonl</code> file on the device between changing the screen orientation.</p>
<p><figure >

    
        
    

    

    <figcaption>
        
        <p>
        Lanbon L8 in it&#39;s rotated &#39;landscape&#39; orientation
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Lanbon L8 in it&#39;s default &#39;portrait&#39; orientation
        
            
        
        </p> 
    </figcaption>
    
</figure>

</p>
<p><figure >

    
        
    

    

    <figcaption>
        
        <p>
        wt32-sc01 in &#39;landscape&#39; orientation.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        wt32-sc01 in &#39;portrait&#39; orientation.
        
            
        
        </p> 
    </figcaption>
    
</figure>

</p>
<h3 id="building-a-pagesjsonl">building a <code>pages.jsonl</code></h3>
<p>You don&rsquo;t need to use this <em>exact</em> technique to build the <code>pages.jsonl</code> file; it works well for my needs / development flow.
All that matters is that you get every UI element for every page into a single <code>pages.jsonl</code> file and then get that file uploaded to the device(s) in question.
The page/id values declared in your <code>jsonl</code> file <em>must match</em> the object IDs that you will use to configure the Home Assistant integration.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">‚ùØ cat header.frag.jsonl footer.frag.jsonl room.frag.jsonl &gt; pages.jsonl
‚ùØ curl http://roomPlateIpv4Here/edit --form <span class="nv">name</span><span class="o">=</span>data --form <span class="nv">data</span><span class="o">=</span>@pages.jsonl
</code></pre></td></tr></table>
</div>
</div><div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>Info<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>I store the combined files in <code>pages.jsonl</code> because this is the default page that an openHasp device will render.
You can change this setting via the web UI: <code>http://roomPlateIpv4Here/config/hasp</code> or via telnet:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">‚ùØ telnet roomPlateIpv4Here
&lt;...&gt;
prompt&gt; config/hasp <span class="o">{</span><span class="s2">&#34;pages&#34;</span>:<span class="s2">&#34;/foo.jsonl&#34;</span><span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<h4 id="headerfragjsonl"><code>header.frag.jsonl</code></h4>
<p>This contains the three text labels that I wish to have at the top of <em>every</em> openHasp device I deploy.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&#34;page&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="nt">&#34;comment&#34;</span><span class="p">:</span> <span class="s2">&#34;Default to page0 as the header and page/layout&#34;</span>
<span class="p">}</span>
<span class="p">{</span>
    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="nt">&#34;comment&#34;</span><span class="p">:</span> <span class="s2">&#34;Time in the top left&#34;</span><span class="p">,</span>
    <span class="nt">&#34;obj&#34;</span><span class="p">:</span> <span class="s2">&#34;label&#34;</span><span class="p">,</span>
    <span class="nt">&#34;text&#34;</span><span class="p">:</span> <span class="s2">&#34;00:00&#34;</span><span class="p">,</span>
    <span class="nt">&#34;align&#34;</span><span class="p">:</span> <span class="s2">&#34;center&#34;</span><span class="p">,</span>
    <span class="nt">&#34;bg_color&#34;</span><span class="p">:</span> <span class="s2">&#34;#2C3E50&#34;</span>
<span class="p">}</span>
<span class="p">{</span>
    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
    <span class="nt">&#34;comment&#34;</span><span class="p">:</span> <span class="s2">&#34;Temp in the middle&#34;</span><span class="p">,</span>
    <span class="nt">&#34;obj&#34;</span><span class="p">:</span> <span class="s2">&#34;label&#34;</span><span class="p">,</span>
    <span class="nt">&#34;text&#34;</span><span class="p">:</span> <span class="s2">&#34;00.0¬∞C&#34;</span><span class="p">,</span>
    <span class="nt">&#34;align&#34;</span><span class="p">:</span> <span class="s2">&#34;center&#34;</span><span class="p">,</span>
    <span class="nt">&#34;bg_color&#34;</span><span class="p">:</span> <span class="s2">&#34;#2C3E50&#34;</span>
<span class="p">}</span>
<span class="p">{</span>
    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
    <span class="nt">&#34;comment&#34;</span><span class="p">:</span> <span class="s2">&#34;Humidity in the top right&#34;</span><span class="p">,</span>
    <span class="nt">&#34;obj&#34;</span><span class="p">:</span> <span class="s2">&#34;label&#34;</span><span class="p">,</span>
    <span class="nt">&#34;text&#34;</span><span class="p">:</span> <span class="s2">&#34;00.0%&#34;</span><span class="p">,</span>
    <span class="nt">&#34;align&#34;</span><span class="p">:</span> <span class="s2">&#34;right&#34;</span><span class="p">,</span>
    <span class="nt">&#34;bg_color&#34;</span><span class="p">:</span> <span class="s2">&#34;#2C3E50&#34;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="footerfragjsonl"><code>footer.frag.jsonl</code></h4>
<p>This contains the three page navigation buttons that I wish to have at the bottom of <em>every</em> openHasp device that I deploy.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
    <span class="nt">&#34;comment&#34;</span><span class="p">:</span> <span class="s2">&#34;tab nav on the bottom, prev&#34;</span><span class="p">,</span>
    <span class="nt">&#34;obj&#34;</span><span class="p">:</span> <span class="s2">&#34;btn&#34;</span><span class="p">,</span>
    <span class="nt">&#34;action&#34;</span><span class="p">:</span> <span class="s2">&#34;prev&#34;</span><span class="p">,</span>
    <span class="nt">&#34;bg_color&#34;</span><span class="p">:</span> <span class="s2">&#34;#2C3E50&#34;</span><span class="p">,</span>
    <span class="nt">&#34;text&#34;</span><span class="p">:</span> <span class="s2">&#34;\uE141&#34;</span><span class="p">,</span>
    <span class="nt">&#34;text_color&#34;</span><span class="p">:</span> <span class="s2">&#34;#FFFFFF&#34;</span><span class="p">,</span>
    <span class="nt">&#34;radius&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="nt">&#34;border_side&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="nt">&#34;text_font&#34;</span><span class="p">:</span> <span class="mi">28</span>
<span class="p">}</span>
<span class="p">{</span>
    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span>
    <span class="nt">&#34;obj&#34;</span><span class="p">:</span> <span class="s2">&#34;btn&#34;</span><span class="p">,</span>
    <span class="nt">&#34;action&#34;</span><span class="p">:</span> <span class="s2">&#34;back&#34;</span><span class="p">,</span>
    <span class="nt">&#34;bg_color&#34;</span><span class="p">:</span> <span class="s2">&#34;#2C3E50&#34;</span><span class="p">,</span>
    <span class="nt">&#34;text&#34;</span><span class="p">:</span> <span class="s2">&#34;\uE2DC&#34;</span><span class="p">,</span>
    <span class="nt">&#34;text_color&#34;</span><span class="p">:</span> <span class="s2">&#34;#FFFFFF&#34;</span><span class="p">,</span>
    <span class="nt">&#34;radius&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="nt">&#34;border_side&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="nt">&#34;text_font&#34;</span><span class="p">:</span> <span class="mi">22</span>
<span class="p">}</span>
<span class="p">{</span>
    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span>
    <span class="nt">&#34;obj&#34;</span><span class="p">:</span> <span class="s2">&#34;btn&#34;</span><span class="p">,</span>
    <span class="nt">&#34;action&#34;</span><span class="p">:</span> <span class="s2">&#34;next&#34;</span><span class="p">,</span>
    <span class="nt">&#34;bg_color&#34;</span><span class="p">:</span> <span class="s2">&#34;#2C3E50&#34;</span><span class="p">,</span>
    <span class="nt">&#34;text&#34;</span><span class="p">:</span> <span class="s2">&#34;\uE142&#34;</span><span class="p">,</span>
    <span class="nt">&#34;text_color&#34;</span><span class="p">:</span> <span class="s2">&#34;#FFFFFF&#34;</span><span class="p">,</span>
    <span class="nt">&#34;radius&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="nt">&#34;border_side&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="nt">&#34;text_font&#34;</span><span class="p">:</span> <span class="mi">28</span>
<span class="p">}</span>

</code></pre></td></tr></table>
</div>
</div><h4 id="roomfragjson"><code>room.frag.json</code></h4>
<p>This file should contain all the page(s) and UI widgets that are unique to the openHasp device deployed into the room that I will call <code>room</code> for the purposes of this post.
As a <strong>demonstration</strong>, I have set up three buttons that control each of the three relays on a L8 device; you will almost certainly want to add multiple pages / other UI widgets as needed.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&#34;page&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="nt">&#34;comment&#34;</span><span class="p">:</span> <span class="s2">&#34;primary controls for the 3 relays&#34;</span>
<span class="p">}</span>
<span class="p">{</span>
    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">101</span><span class="p">,</span>
    <span class="nt">&#34;comment&#34;</span><span class="p">:</span> <span class="s2">&#34;relay1&#34;</span><span class="p">,</span>
    <span class="nt">&#34;obj&#34;</span><span class="p">:</span> <span class="s2">&#34;btn&#34;</span><span class="p">,</span>
    <span class="nt">&#34;toggle&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="nt">&#34;text&#34;</span><span class="p">:</span> <span class="s2">&#34;relay1&#34;</span><span class="p">,</span>
    <span class="nt">&#34;mode&#34;</span><span class="p">:</span> <span class="s2">&#34;break&#34;</span><span class="p">,</span>
    <span class="nt">&#34;align&#34;</span><span class="p">:</span> <span class="s2">&#34;center&#34;</span><span class="p">,</span>
    <span class="nt">&#34;groupid&#34;</span><span class="p">:</span> <span class="mi">1</span>
<span class="p">}</span>
<span class="p">{</span>
    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">102</span><span class="p">,</span>
    <span class="nt">&#34;comment&#34;</span><span class="p">:</span> <span class="s2">&#34;relay2&#34;</span><span class="p">,</span>
    <span class="nt">&#34;obj&#34;</span><span class="p">:</span> <span class="s2">&#34;btn&#34;</span><span class="p">,</span>
    <span class="nt">&#34;toggle&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="nt">&#34;text&#34;</span><span class="p">:</span> <span class="s2">&#34;relay2&#34;</span><span class="p">,</span>
    <span class="nt">&#34;mode&#34;</span><span class="p">:</span> <span class="s2">&#34;break&#34;</span><span class="p">,</span>
    <span class="nt">&#34;align&#34;</span><span class="p">:</span> <span class="s2">&#34;center&#34;</span><span class="p">,</span>
    <span class="nt">&#34;groupid&#34;</span><span class="p">:</span> <span class="mi">2</span>
<span class="p">}</span>
<span class="p">{</span>
    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">103</span><span class="p">,</span>
    <span class="nt">&#34;comment&#34;</span><span class="p">:</span> <span class="s2">&#34;relay3&#34;</span><span class="p">,</span>
    <span class="nt">&#34;obj&#34;</span><span class="p">:</span> <span class="s2">&#34;btn&#34;</span><span class="p">,</span>
    <span class="nt">&#34;toggle&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="nt">&#34;text&#34;</span><span class="p">:</span> <span class="s2">&#34;relay3&#34;</span><span class="p">,</span>
    <span class="nt">&#34;mode&#34;</span><span class="p">:</span> <span class="s2">&#34;break&#34;</span><span class="p">,</span>
    <span class="nt">&#34;align&#34;</span><span class="p">:</span> <span class="s2">&#34;center&#34;</span><span class="p">,</span>
    <span class="nt">&#34;groupid&#34;</span><span class="p">:</span> <span class="mi">3</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="configure-home-assistant">Configure Home Assistant</h3>
<p>After the <code>pages.jsonl</code> is deployed to <em>each</em> of the openHasp devices, you will need to create a configuration file for Home Assistant.
For the above screenshots, I created two <em>identical</em> ‚É∞ copies of the yaml below</p>
<p>‚É∞  Other than the device name; in one file, the name was changed from <code>plate00</code> to <code>plate01</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span><span class="lnt">160
</span><span class="lnt">161
</span><span class="lnt">162
</span><span class="lnt">163
</span><span class="lnt">164
</span><span class="lnt">165
</span><span class="lnt">166
</span><span class="lnt">167
</span><span class="lnt">168
</span><span class="lnt">169
</span><span class="lnt">170
</span><span class="lnt">171
</span><span class="lnt">172
</span><span class="lnt">173
</span><span class="lnt">174
</span><span class="lnt">175
</span><span class="lnt">176
</span><span class="lnt">177
</span><span class="lnt">178
</span><span class="lnt">179
</span><span class="lnt">180
</span><span class="lnt">181
</span><span class="lnt">182
</span><span class="lnt">183
</span><span class="lnt">184
</span><span class="lnt">185
</span><span class="lnt">186
</span><span class="lnt">187
</span><span class="lnt">188
</span><span class="lnt">189
</span><span class="lnt">190
</span><span class="lnt">191
</span><span class="lnt">192
</span><span class="lnt">193
</span><span class="lnt">194
</span><span class="lnt">195
</span><span class="lnt">196
</span><span class="lnt">197
</span><span class="lnt">198
</span><span class="lnt">199
</span><span class="lnt">200
</span><span class="lnt">201
</span><span class="lnt">202
</span><span class="lnt">203
</span><span class="lnt">204
</span><span class="lnt">205
</span><span class="lnt">206
</span><span class="lnt">207
</span><span class="lnt">208
</span><span class="lnt">209
</span><span class="lnt">210
</span><span class="lnt">211
</span><span class="lnt">212
</span><span class="lnt">213
</span><span class="lnt">214
</span><span class="lnt">215
</span><span class="lnt">216
</span><span class="lnt">217
</span><span class="lnt">218
</span><span class="lnt">219
</span><span class="lnt">220
</span><span class="lnt">221
</span><span class="lnt">222
</span><span class="lnt">223
</span><span class="lnt">224
</span><span class="lnt">225
</span><span class="lnt">226
</span><span class="lnt">227
</span><span class="lnt">228
</span><span class="lnt">229
</span><span class="lnt">230
</span><span class="lnt">231
</span><span class="lnt">232
</span><span class="lnt">233
</span><span class="lnt">234
</span><span class="lnt">235
</span><span class="lnt">236
</span><span class="lnt">237
</span><span class="lnt">238
</span><span class="lnt">239
</span><span class="lnt">240
</span><span class="lnt">241
</span><span class="lnt">242
</span><span class="lnt">243
</span><span class="lnt">244
</span><span class="lnt">245
</span><span class="lnt">246
</span><span class="lnt">247
</span><span class="lnt">248
</span><span class="lnt">249
</span><span class="lnt">250
</span><span class="lnt">251
</span><span class="lnt">252
</span><span class="lnt">253
</span><span class="lnt">254
</span><span class="lnt">255
</span><span class="lnt">256
</span><span class="lnt">257
</span><span class="lnt">258
</span><span class="lnt">259
</span><span class="lnt">260
</span><span class="lnt">261
</span><span class="lnt">262
</span><span class="lnt">263
</span><span class="lnt">264
</span><span class="lnt">265
</span><span class="lnt">266
</span><span class="lnt">267
</span><span class="lnt">268
</span><span class="lnt">269
</span><span class="lnt">270
</span><span class="lnt">271
</span><span class="lnt">272
</span><span class="lnt">273
</span><span class="lnt">274
</span><span class="lnt">275
</span><span class="lnt">276
</span><span class="lnt">277
</span><span class="lnt">278
</span><span class="lnt">279
</span><span class="lnt">280
</span><span class="lnt">281
</span><span class="lnt">282
</span><span class="lnt">283
</span><span class="lnt">284
</span><span class="lnt">285
</span><span class="lnt">286
</span><span class="lnt">287
</span><span class="lnt">288
</span><span class="lnt">289
</span><span class="lnt">290
</span><span class="lnt">291
</span><span class="lnt">292
</span><span class="lnt">293
</span><span class="lnt">294
</span><span class="lnt">295
</span><span class="lnt">296
</span><span class="lnt">297
</span><span class="lnt">298
</span><span class="lnt">299
</span><span class="lnt">300
</span><span class="lnt">301
</span><span class="lnt">302
</span><span class="lnt">303
</span><span class="lnt">304
</span><span class="lnt">305
</span><span class="lnt">306
</span><span class="lnt">307
</span><span class="lnt">308
</span><span class="lnt">309
</span><span class="lnt">310
</span><span class="lnt">311
</span><span class="lnt">312
</span><span class="lnt">313
</span><span class="lnt">314
</span><span class="lnt">315
</span><span class="lnt">316
</span><span class="lnt">317
</span><span class="lnt">318
</span><span class="lnt">319
</span><span class="lnt">320
</span><span class="lnt">321
</span><span class="lnt">322
</span><span class="lnt">323
</span><span class="lnt">324
</span><span class="lnt">325
</span><span class="lnt">326
</span><span class="lnt">327
</span><span class="lnt">328
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="c"># plate00 is a test L8 module</span><span class="w">
</span><span class="w"></span><span class="c"># Has a resolution of 240x320</span><span class="w">
</span><span class="w"></span><span class="c"># The top left corner is 0,0, X grows positive to the right and Y grows positive down</span><span class="w">
</span><span class="w"></span><span class="c">##</span><span class="w">
</span><span class="w"></span><span class="nt">plate00</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="c">## TODO: is there a way to fix this? Maybe a HA feature request or openHasp/CC change...</span><span class="w">
</span><span class="w">  </span><span class="c"># Would be really nice if HA had some way to save templates and load them</span><span class="w">
</span><span class="w">  </span><span class="c">#   that way I don&#39;t have to declare the same variables over and over...</span><span class="w">
</span><span class="w">  </span><span class="nt">objects</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="c">###</span><span class="w">
</span><span class="w">    </span><span class="c"># COMMON</span><span class="w">
</span><span class="w">    </span><span class="c">###</span><span class="w">
</span><span class="w">    </span><span class="c"># Header: Time</span><span class="w">
</span><span class="w">    </span>- <span class="nt">obj</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;p0b1&#34;</span><span class="w">
</span><span class="w">      </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="c"># Align left most, If we do go over our permitted length, loop</span><span class="w">
</span><span class="w">        </span><span class="nt">&#34;align&#34;: </span><span class="s2">&#34;left&#34;</span><span class="w">
</span><span class="w">        </span><span class="nt">&#34;text&#34;: </span><span class="s2">&#34;{{ states(&#39;sensor.time&#39;) }}&#34;</span><span class="w">
</span><span class="w">        </span><span class="nt">&#34;mode&#34;: </span><span class="s2">&#34;loop&#34;</span><span class="w">
</span><span class="w">        </span><span class="c">##</span><span class="w">
</span><span class="w">        </span><span class="c"># Draw the labels with a 1% margin from the top and sides</span><span class="w">
</span><span class="w">        </span><span class="nt">&#34;x&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span><span class="sd">          {{hdrHorMargin}}</span><span class="w">          
</span><span class="w">
</span><span class="w">        </span><span class="nt">&#34;y&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span><span class="sd">          {{hdrVrtMargin}}</span><span class="w">          
</span><span class="w">
</span><span class="w">        </span><span class="c"># Width is 1/3 of the screen width after subtracting margins</span><span class="w">
</span><span class="w">        </span><span class="c">##</span><span class="w">
</span><span class="w">        </span><span class="nt">&#34;w&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span><span class="sd">          {% set numObj = 3 %}
</span><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span><span class="sd">          {% set usableHdrWd = scnWd-(2*hdrHorMargin) %}
</span><span class="sd">          {% set hdrLblWd = (usableHdrWd/numObj) | int %}
</span><span class="sd">          {{hdrLblWd}}</span><span class="w">          
</span><span class="w">
</span><span class="w">        </span><span class="c"># Height is 10% of the screen, after margin</span><span class="w">
</span><span class="w">        </span><span class="c">##</span><span class="w">
</span><span class="w">        </span><span class="nt">&#34;h&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span><span class="sd">          {% set hdrLblHt = hdrHt-hdrVrtMargin %}
</span><span class="sd">          {{hdrLblHt}}</span><span class="w">          
</span><span class="w">
</span><span class="w">    </span><span class="c"># Header: Temp</span><span class="w">
</span><span class="w">    </span>- <span class="nt">obj</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;p0b2&#34;</span><span class="w">
</span><span class="w">      </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="c"># Align center, If we do go over our permitted length, loop</span><span class="w">
</span><span class="w">        </span><span class="nt">&#34;align&#34;: </span><span class="s2">&#34;center&#34;</span><span class="w">
</span><span class="w">        </span><span class="nt">&#34;text&#34;: </span><span class="s2">&#34;{{ states(&#39;sensor.room_temperature&#39;) }}¬∞C&#34;</span><span class="w">
</span><span class="w">        </span><span class="nt">&#34;mode&#34;: </span><span class="s2">&#34;loop&#34;</span><span class="w">
</span><span class="w">        </span><span class="c">##</span><span class="w">
</span><span class="w">        </span><span class="c"># Draw the labels with a 1% margin from the top and sides</span><span class="w">
</span><span class="w">        </span><span class="nt">&#34;x&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span><span class="sd">          {% set numObj = 3 %}
</span><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span><span class="sd">          {% set usableHdrWd = scnWd-(2*hdrHorMargin) %}
</span><span class="sd">          {% set hdrLblWd = (usableHdrWd/numObj) | int %}
</span><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span><span class="sd">          {{hdrHorMargin+hdrLblWd}}</span><span class="w">          
</span><span class="w">
</span><span class="w">        </span><span class="nt">&#34;y&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span><span class="sd">          {{hdrVrtMargin}}</span><span class="w">          
</span><span class="w">
</span><span class="w">        </span><span class="c"># Width is 1/3 of the screen width after subtracting margins</span><span class="w">
</span><span class="w">        </span><span class="c">##</span><span class="w">
</span><span class="w">        </span><span class="nt">&#34;w&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span><span class="sd">          {% set numObj = 3 %}
</span><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span><span class="sd">          {% set usableHdrWd = scnWd-(2*hdrHorMargin) %}
</span><span class="sd">          {% set hdrLblWd = (usableHdrWd/numObj) | int %}
</span><span class="sd">          {{hdrLblWd}}</span><span class="w">          
</span><span class="w">
</span><span class="w">        </span><span class="c"># Height is 10% of the screen, after margin</span><span class="w">
</span><span class="w">        </span><span class="c">##</span><span class="w">
</span><span class="w">        </span><span class="nt">&#34;h&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span><span class="sd">          {% set hdrLblHt = hdrHt-hdrVrtMargin %}
</span><span class="sd">          {{hdrLblHt}}</span><span class="w">          
</span><span class="w">
</span><span class="w">    </span><span class="c"># Header: Humidity</span><span class="w">
</span><span class="w">    </span>- <span class="nt">obj</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;p0b3&#34;</span><span class="w">
</span><span class="w">      </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="c"># Align right most, If we do go over our permitted length, loop</span><span class="w">
</span><span class="w">        </span><span class="nt">&#34;align&#34;: </span><span class="s2">&#34;right&#34;</span><span class="w">
</span><span class="w">        </span><span class="nt">&#34;text&#34;: </span><span class="s2">&#34;{{ states(&#39;sensor.room_humidity&#39;) }}%&#34;</span><span class="w">
</span><span class="w">        </span><span class="nt">&#34;mode&#34;: </span><span class="s2">&#34;loop&#34;</span><span class="w">
</span><span class="w">        </span><span class="c">##</span><span class="w">
</span><span class="w">        </span><span class="c"># Draw the labels with a 1% margin from the top and sides</span><span class="w">
</span><span class="w">        </span><span class="nt">&#34;x&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span><span class="sd">          {% set numObj = 3 %}
</span><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span><span class="sd">          {% set usableHdrWd = scnWd-(2*hdrHorMargin) %}
</span><span class="sd">          {% set hdrLblWd = (usableHdrWd/numObj) | int %}
</span><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span><span class="sd">          {{hdrHorMargin+(2*hdrLblWd)}}</span><span class="w">          
</span><span class="w">
</span><span class="w">        </span><span class="nt">&#34;y&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span><span class="sd">          {{hdrVrtMargin}}</span><span class="w">          
</span><span class="w">
</span><span class="w">        </span><span class="c"># Width is 1/3 of the screen width after subtracting margins</span><span class="w">
</span><span class="w">        </span><span class="c">##</span><span class="w">
</span><span class="w">        </span><span class="nt">&#34;w&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span><span class="sd">          {% set numObj = 3 %}
</span><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span><span class="sd">          {% set usableHdrWd = scnWd-(2*hdrHorMargin) %}
</span><span class="sd">          {% set hdrLblWd = (usableHdrWd/numObj) | int %}
</span><span class="sd">          {{hdrLblWd}}</span><span class="w">          
</span><span class="w">
</span><span class="w">        </span><span class="c"># Height is 10% of the screen, after margin</span><span class="w">
</span><span class="w">        </span><span class="c">##</span><span class="w">
</span><span class="w">        </span><span class="nt">&#34;h&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span><span class="sd">          {% set hdrLblHt = hdrHt-hdrVrtMargin %}
</span><span class="sd">          {{hdrLblHt}}</span><span class="w">          
</span><span class="w">
</span><span class="w">    </span><span class="c"># bottom nav: previous</span><span class="w">
</span><span class="w">    </span>- <span class="nt">obj</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;p0b6&#34;</span><span class="w">
</span><span class="w">      </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="c"># Left most button sits all the way up against the left side of the screen</span><span class="w">
</span><span class="w">        </span><span class="nt">&#34;x&#34;: </span><span class="m">0</span><span class="w">
</span><span class="w">        </span><span class="c"># Start drawing the button from the bottom most pixel</span><span class="w">
</span><span class="w">        </span><span class="nt">&#34;y&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span><span class="sd">          {{scnHt-hdrHt}}</span><span class="w">          
</span><span class="w">        </span><span class="c"># And since we have 3 buttons, 1/3 of the width</span><span class="w">
</span><span class="w">        </span><span class="nt">&#34;w&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span><span class="sd">          {% set numObj = 3 %}
</span><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span><span class="sd">          {% set ftrBtnWd = (scnWd/numObj) | int %}
</span><span class="sd">          {{ftrBtnWd-1}}</span><span class="w">          
</span><span class="w">        </span><span class="c"># We want the bottom nav buttons to consume the bottom 10% of the screen</span><span class="w">
</span><span class="w">        </span><span class="nt">&#34;h&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span><span class="sd">          {% set ftrHt = (scnHt*0.1) | int %}
</span><span class="sd">          {{ftrHt}}</span><span class="w">          
</span><span class="w">
</span><span class="w">    </span><span class="c"># bottom nav: home</span><span class="w">
</span><span class="w">    </span>- <span class="nt">obj</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;p0b7&#34;</span><span class="w">
</span><span class="w">      </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="c"># Start drawing exactly the next pixel over from where the first button stopped</span><span class="w">
</span><span class="w">        </span><span class="nt">&#34;x&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span><span class="sd">          {% set numObj = 3 %}
</span><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span><span class="sd">          {% set ftrBtnWd = (scnWd/numObj) | int %}
</span><span class="sd">          {{ftrBtnWd}}</span><span class="w">          
</span><span class="w">        </span><span class="c"># Start drawing the button from the bottom most pixel</span><span class="w">
</span><span class="w">        </span><span class="nt">&#34;y&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span><span class="sd">          {{scnHt-hdrHt}}</span><span class="w">          
</span><span class="w">        </span><span class="c"># And since we have 3 buttons, 1/3 of the width</span><span class="w">
</span><span class="w">        </span><span class="nt">&#34;w&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span><span class="sd">          {% set numObj = 3 %}
</span><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span><span class="sd">          {% set ftrBtnWd = (scnWd/numObj) | int %}
</span><span class="sd">          {{ftrBtnWd-1}}</span><span class="w">          
</span><span class="w">        </span><span class="c"># We want the bottom nav buttons to consume the bottom 10% of the screen</span><span class="w">
</span><span class="w">        </span><span class="nt">&#34;h&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span><span class="sd">          {% set ftrHt = (scnHt*0.1) | int %}
</span><span class="sd">          {{ftrHt}}</span><span class="w">          
</span><span class="w">
</span><span class="w">    </span><span class="c"># bottom nav: next</span><span class="w">
</span><span class="w">    </span>- <span class="nt">obj</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;p0b8&#34;</span><span class="w">
</span><span class="w">      </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="c"># Start drawing exactly the next pixel over from where the first button stopped</span><span class="w">
</span><span class="w">        </span><span class="nt">&#34;x&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span><span class="sd">          {% set numObj = 3 %}
</span><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span><span class="sd">          {% set ftrBtnWd = (scnWd/numObj) | int %}
</span><span class="sd">          {{ftrBtnWd*2}}</span><span class="w">          
</span><span class="w">        </span><span class="c"># Start drawing the button from the bottom most pixel</span><span class="w">
</span><span class="w">        </span><span class="nt">&#34;y&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span><span class="sd">          {{scnHt-hdrHt}}</span><span class="w">          
</span><span class="w">        </span><span class="c"># And since we have 3 buttons, 1/3 of the width</span><span class="w">
</span><span class="w">        </span><span class="nt">&#34;w&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span><span class="sd">          {% set numObj = 3 %}
</span><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span><span class="sd">          {% set ftrBtnWd = (scnWd/numObj) | int %}
</span><span class="sd">          {{ftrBtnWd}}</span><span class="w">          
</span><span class="w">        </span><span class="c"># We want the bottom nav buttons to consume the bottom 10% of the screen</span><span class="w">
</span><span class="w">        </span><span class="nt">&#34;h&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span><span class="sd">          {% set ftrHt = (scnHt*0.1) | int %}
</span><span class="sd">          {{ftrHt}}</span><span class="w">          
</span><span class="w">
</span><span class="w">    </span><span class="c"># ###</span><span class="w">
</span><span class="w">    </span><span class="c"># # Room Specific</span><span class="w">
</span><span class="w">    </span><span class="c"># ###</span><span class="w">
</span><span class="w">    </span><span class="c"># relay toggle 1</span><span class="w">
</span><span class="w">    </span>- <span class="nt">obj</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;p1b101&#34;</span><span class="w">
</span><span class="w">      </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">&#34;x&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span><span class="sd">          {{hdrHorMargin}}</span><span class="w">          
</span><span class="w">        </span><span class="c"># Figure out how tall the display is, subtract out the height of the header/footer and that&#39;s the usable</span><span class="w">
</span><span class="w">        </span><span class="c">#   space. Within that usable space, we will want small margins.</span><span class="w">
</span><span class="w">        </span><span class="c">##</span><span class="w">
</span><span class="w">        </span><span class="nt">&#34;y&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span><span class="sd">          {{hdrHt+hdrVrtMargin}}</span><span class="w">          
</span><span class="w">
</span><span class="w">        </span><span class="nt">&#34;w&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span><span class="sd">          {% set usableHdrWd = scnWd-(2*hdrHorMargin) %}
</span><span class="sd">          {% set bdyWd = usableHdrWd %}
</span><span class="sd">          {{bdyWd}}</span><span class="w">          
</span><span class="w">
</span><span class="w">        </span><span class="c"># We want the bottom nav buttons to consume the bottom 10% of the screen</span><span class="w">
</span><span class="w">        </span><span class="nt">&#34;h&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span><span class="sd">          {% set numObj = 3 %}
</span><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span><span class="sd">          {% set ftrHt = (scnHt*0.1) | int %}
</span><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span><span class="sd">          {% set bdyHt = (scnHt - (hdrHt+ftrHt) - (2*hdrVrtMargin)) | int %}
</span><span class="sd">          {% set bdyBtnVrtMargin = (bdyHt * 0.02) | int %}
</span><span class="sd">          {% set bdyBtnHt = ((bdyHt-((numObj-1)*bdyBtnVrtMargin))/numObj) | int %}
</span><span class="sd">          {{bdyBtnHt}}</span><span class="w">          
</span><span class="w">
</span><span class="w">    </span><span class="c"># relay toggle 2</span><span class="w">
</span><span class="w">    </span>- <span class="nt">obj</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;p1b102&#34;</span><span class="w">
</span><span class="w">      </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">&#34;x&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span><span class="sd">          {{hdrHorMargin}}</span><span class="w">          
</span><span class="w">
</span><span class="w">        </span><span class="c"># Figure out how tall the display is, subtract out the height of the header/footer and that&#39;s the usable</span><span class="w">
</span><span class="w">        </span><span class="c">#   space. Within that usable space, we will want small margins.</span><span class="w">
</span><span class="w">        </span><span class="c">##</span><span class="w">
</span><span class="w">        </span><span class="nt">&#34;y&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span><span class="sd">          {% set numObj = 3 %}
</span><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span><span class="sd">          {% set ftrHt = (scnHt*0.1) | int %}
</span><span class="sd">          {% set bdyHt = (scnHt - (hdrHt+ftrHt) - (2*hdrVrtMargin)) | int %}
</span><span class="sd">          {% set bdyBtnVrtMargin = (bdyHt * 0.02) | int %}
</span><span class="sd">          {% set bdyBtnHt = ((bdyHt-((numObj-1)*bdyBtnVrtMargin))/numObj) | int %}
</span><span class="sd">          {{hdrHt+hdrVrtMargin+(1*bdyBtnHt+bdyBtnVrtMargin)}}</span><span class="w">          
</span><span class="w">
</span><span class="w">        </span><span class="nt">&#34;w&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span><span class="sd">          {% set usableHdrWd = scnWd-(2*hdrHorMargin) %}
</span><span class="sd">          {% set bdyWd = usableHdrWd %}
</span><span class="sd">          {{bdyWd}}</span><span class="w">          
</span><span class="w">
</span><span class="w">        </span><span class="c"># We want the bottom nav buttons to consume the bottom 10% of the screen</span><span class="w">
</span><span class="w">        </span><span class="nt">&#34;h&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span><span class="sd">          {% set numObj = 3 %}
</span><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span><span class="sd">          {% set ftrHt = (scnHt*0.1) | int %}
</span><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span><span class="sd">          {% set bdyHt = (scnHt - (hdrHt+ftrHt) - (2*hdrVrtMargin)) | int %}
</span><span class="sd">          {% set bdyBtnVrtMargin = (bdyHt * 0.02) | int %}
</span><span class="sd">          {% set bdyBtnHt = ((bdyHt-((numObj-1)*bdyBtnVrtMargin))/numObj) | int %}
</span><span class="sd">          {{bdyBtnHt}}</span><span class="w">          
</span><span class="w">
</span><span class="w">    </span><span class="c"># relay toggle 3</span><span class="w">
</span><span class="w">    </span>- <span class="nt">obj</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;p1b103&#34;</span><span class="w">
</span><span class="w">      </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="nt">&#34;x&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span><span class="sd">          {{hdrHorMargin}}</span><span class="w">          
</span><span class="w">
</span><span class="w">        </span><span class="c"># Figure out how tall the display is, subtract out the height of the header/footer and that&#39;s the usable</span><span class="w">
</span><span class="w">        </span><span class="c">#   space. Within that usable space, we will want small margins.</span><span class="w">
</span><span class="w">        </span><span class="c">##</span><span class="w">
</span><span class="w">        </span><span class="nt">&#34;y&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span><span class="sd">          {% set numObj = 3 %}
</span><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span><span class="sd">          {% set ftrHt = (scnHt*0.1) | int %}
</span><span class="sd">          {% set bdyHt = (scnHt - (hdrHt+ftrHt) - (2*hdrVrtMargin)) | int %}
</span><span class="sd">          {% set bdyBtnVrtMargin = (bdyHt * 0.02) | int %}
</span><span class="sd">          {% set bdyBtnHt = ((bdyHt-((numObj-1)*bdyBtnVrtMargin))/numObj) | int %}
</span><span class="sd">          {{hdrHt+hdrVrtMargin+(2*(bdyBtnHt+bdyBtnVrtMargin))}}</span><span class="w">          
</span><span class="w">
</span><span class="w">        </span><span class="nt">&#34;w&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span><span class="sd">          {% set usableHdrWd = scnWd-(2*hdrHorMargin) %}
</span><span class="sd">          {% set bdyWd = usableHdrWd %}
</span><span class="sd">          {{bdyWd}}</span><span class="w">          
</span><span class="w">
</span><span class="w">        </span><span class="c"># We want the bottom nav buttons to consume the bottom 10% of the screen</span><span class="w">
</span><span class="w">        </span><span class="nt">&#34;h&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span><span class="sd">          {% set numObj = 3 %}
</span><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span><span class="sd">          {% set ftrHt = (scnHt*0.1) | int %}
</span><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span><span class="sd">          {% set bdyHt = (scnHt - (hdrHt+ftrHt) - (2*hdrVrtMargin)) | int %}
</span><span class="sd">          {% set bdyBtnVrtMargin = (bdyHt * 0.02) | int %}
</span><span class="sd">          {% set bdyBtnHt = ((bdyHt-((numObj-1)*bdyBtnVrtMargin))/numObj) | int %}
</span><span class="sd">          {{bdyBtnHt}}</span><span class="w">          
</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>And you&rsquo;re done!
You might need to restart Home Assistant or reload the openHasp component/configuration so your update YAML is picked up.
Assuming everything works, you should see a flurry of activity on your MQTT broker or the plate telnet console as the openHasp component renders each template and commands the plate to re-draw each UI element.</p>
<p>You can then re-configure your device with a new display orientation and then reboot it. As it connects back to your MQTT broker, Home Assistant will re-evaluate the templates with the inverted screen height/width and each UI widget should get re-painted.</p>
<p>If I had a way to reliably capture the content of the framebuffer as a video rather than a screenshot, I&rsquo;d include it here.
You&rsquo;ll just have to trust me when I say that It&rsquo;s kinda neat to watch this happen in real time.</p>
<h2 id="teardown">Teardown</h2>
<h3 id="product-packaging">Product packaging</h3>
<p>Since it&rsquo;s all but impossible to find any photos of the product packaging online, here&rsquo;s a few of those:</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Minimal instructions and wasteful packaging. Other than the small foam insert, this entire package can be recycled!
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The provided screws are NOT the US standard #6 32 thread-per-inch. They are slightly larger and will strip out any screw holes in an electrical box!
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h3 id="internals">Internals</h3>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        This particular model is the 3 relay version. Packaging claims 200W power. It&#39;s not clear if that is per channel or total. My money is on total.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>You can clearly see the revised PCB that is substantially different from the one featured on <a href="https://blakadder.com/lanbon-L8-custom-firmware/#disassembly" target="_blank" rel="noopener noreffer">this blakadder post</a>.
My PCB has a parasitic TuYa module also attached.
Almost none of the pins are connected to the PCB so the TuYa module is 100% self contained and commands the main ESP module via UART.</p>
<p>Removing the TuYa module is pretty painless with some hot air.
It can also be left alone and the openHasp binaries will just ignore it.
You can also place an order directly with Lanbon for units that do not have the TuYa module populated but this will require a minimum order quantity.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Generic relays, generic caps, generic transformers... don&#39;t switch any critical loads with this!
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        A closer look at what appears to be a dedicated power monitoring IC. It appears to monitor the aggregate of all three channels, not each individually. Very likely to make sure no more than 200W is switched at one time...
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<h3 id="pcbic-markings">PCB/IC Markings</h3>
<p>Some of the interesting ICs and PCB markings:</p>
<ul>
<li>
<p><code>CB3S</code>: TuYa <a href="https://developer.tuya.com/en/docs/iot/cb3s?id=Kai94mec0s076" target="_blank" rel="noopener noreffer">wifi module</a></p>
</li>
<li>
<p><code>HLW8012</code>: Single phase energy monitor chip</p>
</li>
<li>
<p><code>ESP32-WROVER-IB</code>: the primary ESP32 module that runs the show</p>
</li>
<li>
<p>Primary PCB is marked: <code>L8-HS_CB_V1.17(20210805)</code></p>
</li>
<li>
<p>Daughter / &lsquo;power&rsquo; board <code>L8-HS MB V1,14</code></p>
</li>
</ul>
]]></description></item><item><title>Tuya Smart Curtain Driver Robot Teardown</title><link>https://karlquinsland.com/tuya-smart-curtain-driver-robot-teardown/</link><pubDate>Sat, 11 Dec 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/tuya-smart-curtain-driver-robot-teardown/</guid><description><![CDATA[<p>I am trying something new out with this post; some mix of hardware teardown and a brief product review.</p>
<hr>
<h1 id="why">Why</h1>
<p>I was looking for a way to actuate some heavy blackout curtains.</p>
<p>There have been <em>several</em> DIY projects out there that manipulate curtains but they all appear to be relatively involved as they are often designed for a very specific type of curtain; servos that fit on the &lsquo;tilt rod&rsquo; or motors that can manipulate the pull chain&hellip; etc.</p>
<p>The specific curtains that I wanted to power-actuate  are curtains that do not have a pull string or a set of wheels/track to facilitate their movement. Just folds of fabric hanging directly from a telescopic metal rod.</p>
<p>After a quick review of hte existing commercial solutions for my application/style of curtains, it became clear that they all work in about the same way: some battery powered motor mechanically couples to the curtain rod and moves along the rod dragging / pushing the curtain as it does so.</p>
<p>Since they all more or less use the same design, I figured that most of the differentiation between products would be in the software side of things. No product immediately stood out as having <strong>local</strong> Home Assistant integration so it didn&rsquo;t matter which product I selected; I will inevitably have to do some reverse engineering / hacking to get <strong>local</strong> Home Assistant integration.</p>
<p>I selected the <code>Tuya Smart Curtain Driver Robot</code> because:</p>
<ol>
<li>Cheap</li>
<li>Appeared to use USB-C for charging</li>
<li>I was vaguely aware that <a href="https://github.com/ct-Open-Source/tuya-convert" target="_blank" rel="noopener noreffer">TuYa was pumping out a <em>ton</em> of ESP8266 based hardware</a> and hoped that I&rsquo;d find the familiar microcontroller inside.</li>
</ol>
<p>Below is a collection of photos and some thoughts that are - roughly - what I wish I had been able to find when doing the product research.
If I had found the equivalent of this post while doing my research, I would have been able to save myself a purchase!</p>
<h1 id="what">What</h1>
<p>Searching for rod-based curtain actuators will turn up a <em>ton</em> of results. A fair number of them use product images very similar to these:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Official marketing photo
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>How well the robot performs will depend on how well the little white wheel is held against the bottom of the curtain rod.
The arms that the upper sled attaches to are spring loaded for additional clamping force.</p>
<p>The case seems to be fairly generic and used across multiple brands so it&rsquo;s safe to say that depending on the version / hardware variant, you may or may not have all of the featured inputs/sensors.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Only one of the two units in a pair comes equipped with the light sensor.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>The light sensor is a nice touch. I will absolutely be borrowing that idea when designing my own solution üí°ü§î!</p>
<h2 id="teardown">Teardown</h2>
<p>I&rsquo;m not a huge fan of unboxing videos. The box is rather unremarkable; it sustained some damage in transit, but that&rsquo;s what it&rsquo;s supposed to do.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Relatively well packaged. The seller that I purchased from had explicit listings for different curtain rod styles so I am not sure why I received hardware for all styles. There does not appear to be any easy way to install this hardware.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>The upper sled is coupled to the main body through two spring-loaded arms with a ratchet and paw setup. The arms can be easily removed from the main body if needed.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        I am getting some vague Portal2 Turret vibes...
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>Since the entire weight of the robot will be hanging from the upper sled, the springs are the only thing that will pull the actuator wheel into the curtain rod. I don&rsquo;t know how the springs will last over time, but I absolutely can forsee needing to re-tension things as the springs inevitably stretch out.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The ratchet/paws seem to indicate compatibility with some comically large diameter curtain rods!
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Obligatory &#39;i void warranties&#39; reference.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>Use a Philips style <code>J00</code> or <code>J000</code> screwdriver to remove the four screws holding the thing together. Use any flat pry tool to crack the two halves apart.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Screw hiding under warranty void sticker and obvious mechanical/snap seam make it pretty obvious how this will come apart.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>And with that, our first real look at the electronics inside!</p>
<p>I expected a simple PCB that contained a charge controller circuit for the battery and a simple motor driver with over current protection&hellip; and nothing else. I was sure that <em>everything</em> else would be handled directly by a the radio-on-module.</p>
<p>I <em>absolutely</em> did not expect the PCB to have provisions for &hellip; <strong>two</strong> radio modules!</p>
<p>A few other quick observations:</p>
<ul>
<li>The unpopulated radio module footprint does not match any ESP-8266 modules that I am familiar with.</li>
<li>The populated radio module <em>does</em> look like a common ESP-12E module footprint&hellip; but the module is <em>clearly</em> not an ESP.</li>
<li>The markings have been erased from all the interesting ICs ü§¨.</li>
<li>The 20 pin chip closest to the unpopulated module footprint could be anything but is likely the &lsquo;housekeeping&rsquo; CPU. The populated radio module likely communicates with this chip to command the motor and check the sensors</li>
<li>The product marketing photos indicated that there would be a light sensor. The PCB appears to have a foot print for an LDR&hellip; but it&rsquo;s not populated&hellip;
only a few passive components besides some radio-on-module</li>
<li>The USB-C port does not have any active electronics connected to it. The port likely does not speak any power delivery protocols and certainly does not have a hidden UART for talking to either of the microcontrollers.</li>
<li>No motor is visible so that means that it must be embedded in the comically small drive wheel&hellip;</li>
</ul>
<p>Some more technical details are discussed <a href="#technical-details" rel="">below</a>.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Huh. Was not expecting the PCB to be quite so big or complex!
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>Lifting up the PCB reveals the battery pack. I did not slice the pack open to see which brand of cells went into the pack.
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Grateful that they didn&#39;t solder the battery directly to the PCB.
        
            
        
        </p> 
    </figcaption>
    
</figure>

</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        I have not tested the battery to see accurate the labeled capacity is.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>I was still looking for that elusive light sensor so I opened up the second unit&hellip; and found it!</p>
<p>Other than the populated second radio module, <code>R20</code> and the LDR, the PCBs appear identical.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Something tells me that the PCB with two radio modules is the &#39;leader&#39; out of the two.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>On the rear we can see an obvious programming / debug port and a PCB/product designator: <code>ZNCL_TY_V1.5</code>.</p>
<p>Giving that a quick google returns almost nothing.
I did find <a href="https://old.reddit.com/r/esp32/comments/q3omwh/can_somebody_tell_me_what_were_looking_at_here/hft52t1/" target="_blank" rel="noopener noreffer">this</a> post from <a href="https://old.reddit.com/user/coned_miro" target="_blank" rel="noopener noreffer">/u/coned_miro</a> asking about a very similar PCB revision:</p>
<pre><code>    ...The main board says 'ZNCL_TY_V1.3' on the back
</code></pre>
<p>Nothing new to be learned about the tuya device from that thread, sadly.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        No, I didn&#39;t hook a scope up or trace out the obvious programming/debug header.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h2 id="the-app">The App</h2>
<p>I never intended to use the manufacturer provided app for anything other than the initial setup so this will be a very brief section. The robot was quickly discovered and provisioned through the app.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        BTLE Pair/Provisioning was straightforward
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>The device calibration process is pretty rudimentary and does not have an easy &ldquo;undo&rdquo; process.</p>
<p>If you make a mistake in configuring the direction/distance that the robot needs to travel for curtain open/close, you have to factory reset the device. Fortunately this is easy to do in app and discovering/re-provisioning the device takes only a few seconds.</p>
<p>The <em>two</em> firmware version strings strongly hints at a &ldquo;two processors for two domains&rdquo; architecture: the anonymous 20pin chip runs everything on the PCB and the <code>BT7L</code> module deals with external communications and is only abstractly aware of the PCB/motor/sensor/battery state.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        I have only skimmed the TuYa developer documentation but I think that the VirtualID is common to _all_ of the curtain robots.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h1 id="verdict">Verdict</h1>
<p>While disappointing that there was no easily hackable ESP microcontroller running the show, it doesn&rsquo;t matter.
I can&rsquo;t use this product as is for my intended application; the motor is just too puny for the task.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The brains(?)
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>My curtains are rather thick and heavy. A tiny motor can&rsquo;t <em>possibly</em> have enough power to do this on it&rsquo;s own&hellip; especially with a sub-optimal coupling mechanism!</p>
<p>To give the motor a fighting chance, the engineers went with a TON of reduction-gearing.
The gearbox allows a wimpy but fast motor to become a more grunty motor at the expense of speed.
Almost anything small that rotates at high speed will come with some unpleasant sounds. This is ESPECIALLY true for cheaply made gearbox full of small gears.</p>
<p>This means that any invocation of the robot will be noisy.
You can expect the noisy little device to <em>slowly</em> move across the curtain rod. üôÑ</p>
<p>The robot struggled to push the curtains together towards the end of an opening cycle&hellip; it would often skip in place as the drive wheel struggled to keep enough traction on the curtin rod.</p>
<p>Likewise, asking the robot to pull the bucked up curtains closed was out of the question without some sort of an assist.</p>
<p>Because the robot has no fixed position sensor, it can&rsquo;t really measure where on the curtain rod it is.
Every time the drive wheel skips, the difference between where the robot thinks it is and where it <em>actually</em> is will grow.</p>
<p>If you can stand the whiny/slow movement, expect frequent re-calibrations üëé.</p>
<br>
<p><strong>TL;DR</strong>: Looks like there&rsquo;s a reason why the hobbyist/DIY community has produced such a <em>wide variety</em> of bespoke curtain/drape actuators&hellip; most of the commercial ones have sacrificed too much in order to be widely usable.
The solution that I end up implementing will be designed with my heavy drapes in mind and will use an appropriately sized and quiet motor!</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        A simple brushed DC motor with no position encoder and what is probably a cheaply made gearbox. What could go wrong?
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h1 id="technical-details">Technical Details</h1>
<p>A highly condensed version of my initial notes from setup/teardown:</p>
<ul>
<li>
<p>Was not expecting multiple radio units. The blue radio-module that both PCBs have in common appears to be a <code>JDY-25M</code>.</p>
</li>
<li>
<p>There is a SDK for the <code>JDY-25M</code> available <a href="https://github.com/Edragon/JDY-MESH/tree/main/JDY-25M/SDK" target="_blank" rel="noopener noreffer">here</a>. It contains some english documentation.</p>
</li>
<li>
<p>The <code>JDY-25M</code> SDK does not appear to contain any information about how to program the chip or build a custom firmware. You are meant to interface with the &lsquo;stock&rsquo; firmware via <code>AT+</code> commands. The firmware appears to support multiple modes&hellip; including a bi-directional communication link. I suspect that the unique radio module is the connection to the outside world and the the two identical radio modules are used to coordinate movement between the two pods</p>
</li>
<li>
<p>I was never able to get the &lsquo;follower&rsquo; unit to pair or otherwise command the second unit.</p>
</li>
<li>
<p>The unique radio module is a module made specifically by/for TuYa: <a href="https://developer.tuya.com/en/docs/iot/bt7l?id=K96gqp1dp6iiw" target="_blank" rel="noopener noreffer">https://developer.tuya.com/en/docs/iot/bt7l?id=K96gqp1dp6iiw</a></p>
</li>
</ul>
<h2 id="pcb-markings">PCB Markings</h2>
<p>AKA SEO optimization üòâ</p>
<ul>
<li>PCB is marked: <code>ZNCL_TY_V1.5</code></li>
<li>&ldquo;primary&rdquo; radio: <a href="https://developer.tuya.com/en/docs/iot/bt7l?id=K96gqp1dp6iiw" target="_blank" rel="noopener noreffer"><code>BT7L</code></a></li>
<li>&ldquo;secondary&rdquo; radio <a href="https://github.com/Edragon/JDY-MESH/tree/main/JDY-25M/SDK" target="_blank" rel="noopener noreffer"><code>JDY-25M</code></a></li>
</ul>
]]></description></item><item><title>Hardware accelerated graphics on the raspberry pi4 for a speedier KDS</title><link>https://karlquinsland.com/hardware-accelerated-graphics-on-the-raspberry-pi-4-a-snappier-kds/</link><pubDate>Sat, 20 Nov 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/hardware-accelerated-graphics-on-the-raspberry-pi-4-a-snappier-kds/</guid><description><![CDATA[<p>Surfacing the right information at the right time in the right place is a difficult but essential task for any credible automation system.</p>
<p>I have been experimenting with the concept of a Home Assistant powered <a href="https://www.qsrautomations.com/blog/kitchen-automation/what-is-a-kds/" target="_blank" rel="noopener noreffer">KDS</a> for a few years now and have found that the refrigerator happens to be an especially good place to surface some information and device controls.</p>
<br>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Yes, it&#39;s over-exposed and shot at an awkward angle but that&#39;s what it took to minimize glare!
        
            
        
        </p> 
    </figcaption>
    
</figure>


<br>
<p>This <strong>is not</strong> a post about how to build the KDS pictured above; you can follow any of the numerous &ldquo;how to use a raspberry pi as a kiosk&rdquo; guides out there and you&rsquo;d be 90% of the way there.
The last 10% is highly application specific; the hardware <em>you</em> design and 3d-print or otherwise fabricate will depend on your particular screen and selected mounting location.</p>
<p>This <strong>is</strong> a post about solving a performance issue with the dashboard hosted on the device.
Earlier versions of this KDS were powered by a raspberry pi 3 B (not even the <code>+</code> variant!) with 1 GB of ram.
The <a href="https://www.home-assistant.io/lovelace/" target="_blank" rel="noopener noreffer">Lovelace</a> dashboard that the KDS displays is quite javascript heavy and would frequently hang on the pi3b.</p>
<p>I use this dashboard to adjust grocery lists, control lights, set appliance timers and more. If the dashboard is sluggish or otherwise unresponsive, it&rsquo;s worse than useless!</p>
<p>As soon as I swapped in a raspberry pi 4 with 4 GB ram, things got &hellip;. marginally better üòë.</p>
<p>Sure, it booted much faster and the JS heavy graphs didn&rsquo;t cause the box to wedge anymore, but manipulating things on screen still was still a choppy experience.
Animations didn&rsquo;t show at all or had all but a few frames dropped :(.</p>
<p>I know that the <a href="https://medium.com/@ghalfacree/benchmarking-the-raspberry-pi-4-73e5afbcd54b" target="_blank" rel="noopener noreffer">raspberry pi 4 is more than capable</a> of running a single web page in a headless browser so <em>something</em> is wrong.</p>
<p>After a bit of digging, it turns out that chromium does NOT use hardware acceleration by default on the raspberry pi.</p>
<p>Ok, that&rsquo;s an easy fix. Just enable the gpu and reboot:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">pi@kds:~ $ cat /boot/config.txt 
&lt;...&gt;
<span class="c1"># Enable DRM VC4 V3D driver for much more performant chrome</span>
<span class="nv">dtoverlay</span><span class="o">=</span>vc4-kms-v3d
&lt;...&gt;
pi@kds:~ $ sudo reboot
</code></pre></td></tr></table>
</div>
</div><p>&hellip; right?</p>
<p><strong>No.</strong></p>
<p>Turning on the gpu acceleration broke the various screen rotation / resolution directives that I had configured in <code>/boot/config.txt</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">pi@kds:~ $ cat /boot/config.txt 
&lt;...&gt;
<span class="o">[</span>all<span class="o">]</span>
<span class="c1"># We need to rotate the display 90degrees as the &#39;default&#39; orientation from the manufacturer assumes a horizontal orientation, not a vertical one</span>
<span class="c1"># See: https://www.waveshare.com/wiki/13.3inch_HDMI_LCD_(H)</span>
<span class="nv">display_rotate</span><span class="o">=</span><span class="m">1</span>

<span class="c1"># Force correct resolution</span>
<span class="c1"># Use &#39;DMT/Display Monitor Timings</span>
<span class="c1"># See: https://www.raspberrypi.com/documentation/computers/config_txt.html#video-options</span>
<span class="nv">hdmi_group</span><span class="o">=</span><span class="m">2</span>
<span class="nv">hdmi_mode</span><span class="o">=</span><span class="m">82</span>
</code></pre></td></tr></table>
</div>
</div><p>One of the Raspberry Pi Engineers <a href="https://forums.raspberrypi.com/viewtopic.php?t=267954#p1626774" target="_blank" rel="noopener noreffer">explains why</a>:</p>
<blockquote>
<p>display_rotate only does anything if the firmware is in charge of the display, which isn&rsquo;t the case when using vc4-kms-v3d.</p>
</blockquote>
<p>Even when the video out could be configured with <code>config.txt</code>, the firmware offers no such mechanism to rotate input events to match the orientation.
Fortunately, the LCD manufacturer <a href="https://www.waveshare.com/wiki/13.3inch_HDMI_LCD_%28H%29#Rotation.28Working_with_Raspberry_Pi.29" target="_blank" rel="noopener noreffer">provides good documentation about how to configure the touch inputs with X11</a></p>
<p>Unfortunately, the manufacturer <em>does <strong>not</strong></em> provide corresponding documentation about how to configure the display with X11. Not that I can blame them! Configuring X11 has always been&hellip; tedious &hellip; to use a &lsquo;polite&rsquo; term for the experience!</p>
<h2 id="xorg-and-ssh">Xorg and SSH</h2>
<p>I&rsquo;ll spare you the bulk of the rant and summarize with this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Can&#39;t open display :0.0
</code></pre></td></tr></table>
</div>
</div><p>For reasons that don&rsquo;t make a ton of sense to me, <em>all</em> of the command line tools for probing display hardware and creating X11 configurations really don&rsquo;t like working over SSH ü§î. Yes, I of course tried the <code>export DISPLAY=:0.0</code> <a href="https://www.linuxquestions.org/questions/linux-general-1/xrandr-from-remote-through-ssh-869084/page2.html" target="_blank" rel="noopener noreffer">trick</a>.</p>
<p><code>xrandr</code> and friends are fine when running in a <em>local</em> shell, but just don&rsquo;t play nice when a local user connects via SSH.
This makes things a lot harder than they needed to be as the location of the KDS does not lend its self to easily hooking up a keyboard and mouse.</p>
<p>Furthermore, the <em>intended</em> purpose of this install is to display a web page. <strong>Thats it.</strong>
There is next to no desktop environment installed because one is not needed for a full screen headless chrome instance.</p>
<p>Installing a virtual console application was going to involve a lot of bloat and other unnecessary packages which is <em>overkill</em> for a few CLI utilities that <strong>should just work over any console weather that be local PTY or ssh!</strong></p>
<p>After a few hours of anguish and trial/error later, I had everything working as expected! But before we get there and while i&rsquo;m still ranting, <a href="https://unix.stackexchange.com/questions/435702/check-syntax-of-conf-file-in-etc-x11-xorg-conf-d" target="_blank" rel="noopener noreffer">why is there no <code>xorg -checkconf ...</code> command</a>?!</p>
<p>Ok. Now it&rsquo;s all out of my system.</p>
<p><code>&lt;/rant&gt;</code></p>
<h2 id="solution">Solution</h2>
<p>Every tap registers instantly and there&rsquo;s no jank or stutter in any animation. Likewise, graphs animate as quickly as they load&hellip; Perfect!</p>
<p>This is the X11 configuration that rotated the display and would &lsquo;see&rsquo; the display attached to the GPU:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">pi@kds:~ $ cat /etc/X11/xorg.conf.d/monitor.conf
<span class="c1"># Device = GPU</span>
<span class="c1"># When using rPi 4 with GPU instead of software render, the `modesetting` driver is the one to use... apparently.</span>
Section <span class="s2">&#34;Device&#34;</span>
        Identifier      <span class="s2">&#34;default&#34;</span>
        Driver          <span class="s2">&#34;modesetting&#34;</span>
EndSection

Section <span class="s2">&#34;Monitor&#34;</span>
        Identifier <span class="s2">&#34;default&#34;</span>
        <span class="c1"># equivalent to `display_rotate = 1` in config.txt </span>
        Option <span class="s2">&#34;Rotate&#34;</span> <span class="s2">&#34;right&#34;</span>
EndSection

Section <span class="s2">&#34;Screen&#34;</span>
        Identifier <span class="s2">&#34;default&#34;</span>
        Monitor <span class="s2">&#34;default&#34;</span>
EndSection
</code></pre></td></tr></table>
</div>
</div><p>In addition to the X11 config, some ram needs to be allocated as dedicated graphics memory:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">pi@kds:~ $ cat /boot/config.txt <span class="p">|</span> grep -B2 gpu_mem
<span class="o">[</span>all<span class="o">]</span>
<span class="c1"># Allocate 256MB of ram for the GPU</span>
<span class="nv">gpu_mem</span><span class="o">=</span><span class="m">256</span>
pi@kds:~ $ sudo reboot
</code></pre></td></tr></table>
</div>
</div><p>Chrome did not automatically switch over to the GPU backed rendering pipe but it&rsquo;s easy enough to <a href="https://lemariva.com/blog/2020/08/raspberry-pi-4-video-acceleration-decode-chromium" target="_blank" rel="noopener noreffer">configure chrome to use the GPU</a> manually.</p>
<p>And with all that in place, a quick <code>sudo systemctl restart lightdm</code> and a brief screen flicker later, chromium launched in full screen mode with the correct orientation. After the dashboard finished loading, the scroll/tap/animation performance was as good as it would be on any competent computer!</p>
<p>I really don&rsquo;t know why I couldn&rsquo;t easily find a working X11 configuration example for use with the rPi 4 GPU, but I wasn&rsquo;t able to ü§∑.</p>
<p>Hopefully the above helps somebody else!</p>
]]></description></item><item><title>Using new Lets Encrypt intermediate chain with SkyHole</title><link>https://karlquinsland.com/skyhole-expired-lets-encrypt-ca/</link><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/skyhole-expired-lets-encrypt-ca/</guid><description><![CDATA[<p>If you somehow missed it, one of the certificates used by Lets Encrypt chain of trust <a href="https://letsencrypt.org/docs/dst-root-ca-x3-expiration-september-2021/" target="_blank" rel="noopener noreffer">expired</a> this week.
As expected, things broke&hellip;. including my private, filtered DNS over TLS server - <a href="https://github.com/kquinsland/skyhole/" target="_blank" rel="noopener noreffer">SkyHole</a>. Below is a condensed form of my notes to create the exact document that I wish I had while trying to triage broken DNS on my phone.</p>
<p><strong>TL;DR:</strong> Implement solution 3 from <a href="https://www.openssl.org/blog/blog/2021/09/13/LetsEncryptRootCertExpire/" target="_blank" rel="noopener noreffer">this</a> post.</p>
<hr>
<p><strong>Note:</strong> After releasing the initial version of SkyHole, I re-factored most of the code to eliminate the dependency on Docker. This was to make the project easier to deploy on resource constrained hardware.
At the time, I was working with <a href="https://saltproject.io/" target="_blank" rel="noopener noreffer">SaltStack</a> a lot and took the opportunity to re-do the entire thing as a salt state for a bit of practice. The <em>exact</em> steps and commands shown below are unique to my particular instance. Use them as <em>guidance</em> for fixing an issue with the publicly released version of SkyHole.</p>
<h1 id="symptoms">Symptoms</h1>
<p>My current daily driver runs Android 11. When configured to use a <a href="https://android-developers.googleblog.com/2018/04/dns-over-tls-support-in-android-p.html" target="_blank" rel="noopener noreffer">private DNS server</a>, Android essentially behaves as if you&rsquo;ve turned WiFi/Cell data off if there is any issue when talking to the DoT server.
While this &lsquo;fail private&rsquo; approach is commendable, the lack of debug info in the UI is not; no details are given about the failure other than a generic &lsquo;the private dns server could not be reached&rsquo; message.</p>
<p>I have seen this behavior once before when the certificate renewal timer failed to fire off&hellip; except I implemented email based notifications after that incident and had recently received a notification from the renewal script.</p>
<p>Just to be sure, I checked the <code>notAfter</code> in each certificate and they all had plenty of life left:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">me@dot-host:/etc/coredns/tls# gawk <span class="s1">&#39;BEGIN { pipe=&#34;openssl x509 -noout -subject -dates&#34;} \
</span><span class="s1">&gt;   /^-+BEGIN CERT/,/^-+END CERT/ { print | pipe }
</span><span class="s1">&gt;   /^-+END CERT/                 { close(pipe); printf(&#34;\n&#34;)}  &#39;</span> chain.pem
<span class="nv">subject</span><span class="o">=</span><span class="nv">CN</span> <span class="o">=</span> dot.my-test-domain.tld
<span class="nv">notBefore</span><span class="o">=</span>Oct  <span class="m">1</span> 01:50:58 <span class="m">2021</span> GMT
<span class="nv">notAfter</span><span class="o">=</span>Dec <span class="m">30</span> 01:50:57 <span class="m">2021</span> GMT

<span class="nv">subject</span><span class="o">=</span><span class="nv">C</span> <span class="o">=</span> US, <span class="nv">O</span> <span class="o">=</span> Let<span class="err">&#39;</span>s Encrypt, <span class="nv">CN</span> <span class="o">=</span> R3
<span class="nv">notBefore</span><span class="o">=</span>Sep  <span class="m">4</span> 00:00:00 <span class="m">2020</span> GMT
<span class="nv">notAfter</span><span class="o">=</span>Sep <span class="m">15</span> 16:00:00 <span class="m">2025</span> GMT

<span class="nv">subject</span><span class="o">=</span><span class="nv">C</span> <span class="o">=</span> US, <span class="nv">O</span> <span class="o">=</span> Internet Security Research Group, <span class="nv">CN</span> <span class="o">=</span> ISRG Root X1
<span class="nv">notBefore</span><span class="o">=</span>Jan <span class="m">20</span> 19:14:03 <span class="m">2021</span> GMT
<span class="nv">notAfter</span><span class="o">=</span>Sep <span class="m">30</span> 18:14:03 <span class="m">2024</span> GMT
</code></pre></td></tr></table>
</div>
</div><p>Borrowed that command from <a href="https://serverfault.com/questions/541262/checking-the-issued-and-expiry-dates-for-the-certificates-involved-a-certificate" target="_blank" rel="noopener noreffer">this</a> post.</p>
<p>Looking for more information, <code>adb</code> yielded something:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">‚ùØ adb logcat <span class="p">|</span> grep resolv
09-30 21:28:12.995   <span class="m">962</span> <span class="m">15448</span> W resolv  : Validating DnsTlsServer 12.34.56.78 with mark 0xf0084
09-30 21:28:13.085   <span class="m">962</span> <span class="m">15448</span> W resolv  : SSL_connect ssl <span class="nv">error</span> <span class="o">=</span>1, mark 0xf0084: No such file or directory
09-30 21:28:13.085   <span class="m">962</span> <span class="m">15448</span> W resolv  : TLS Handshake failed
09-30 21:28:13.085   <span class="m">962</span> <span class="m">15448</span> W resolv  : query failed
09-30 21:28:13.085   <span class="m">962</span> <span class="m">15448</span> W resolv  : validateDnsTlsServer returned <span class="m">0</span> <span class="k">for</span> 12.34.56.78
</code></pre></td></tr></table>
</div>
</div><p>The <code>No such file or directory</code> message came from <a href="https://android.googlesource.com/platform/packages/modules/DnsResolver/&#43;/refs/heads/master/DnsTlsSocket.cpp" target="_blank" rel="noopener noreffer">here</a>.</p>
<p>Google uses their own fork of openSSL in Android so spent some time trying to figure out what an error code of <code>1</code> means in the openSSL project.
I <em>think</em> <code>1</code> is <a href="https://github.com/OneSignal/openssl/blob/main/include/openssl/ssl.h#L1168" target="_blank" rel="noopener noreffer"><code>SSL_ERROR_SSL</code></a> but that seems to be a relatively <a href="https://www.openssl.org/docs/man1.1.1/man3/SSL_get_error.html" target="_blank" rel="noopener noreffer">&lsquo;generic&rsquo;</a> error.
Furthermore, in context of <code>No such file or directory</code> &hellip; it makes even less sense.</p>
<p>Oh well. So much for that theory. From this point on, I&rsquo;m treating all of the TLS connection stuff as a black box.</p>
<h1 id="investigating">Investigating</h1>
<p>I was able to confirm that the TLS certificates on the skyhole instance had not expired and the intermediate chain was not using any of the depreciated certificates.
I had also not made any changes to the skyhole instance in close to a year and <code>kdig</code> didn&rsquo;t throw any warnings when querying against the DoT server.
I could see the manual query from <code>kdig</code> in the DNS query/filter logs &hellip; so it seemed like the problem was not in either the TLS portion or the DNS portion.</p>
<p>That left Android as the culprit.</p>
<p>But I was also fairly sure that Google hadn&rsquo;t changed anything on the phone w/r/t how the DoT client worked&hellip;ü§î</p>
<p>If in doubt, turn to the wires!</p>
<p>I ran <code>tcpdump</code> on the skyhole instance and did notice traffic from Android that was <em>not</em> showing up in the DNS server logs.
I compared the traffic with a working manual query from <code>kdig</code> and noticed that the traffic from the Android client stopped shortly before where the <code>kdig</code> traffic would have turned into a regular DNS query.</p>
<p>So the problem was happening during the TLS setup. Whatever Android was choking on was happening before any DNS queries were sent.</p>
<p>I quickly configured the phone to use a known good / working DNS over TLS server and it was immediately accepted. The triumphant <code>logcat</code> output confirmed that everything on the TLS layer has happy: <code> W resolv  : Validation success</code>.</p>
<p>Android worked instantly when configured to use a different server but immediately failed when used with the skyhole instance. This points to a problem on the server.</p>
<p>Nothing about the skyhole instance had changed and the certificates that it was offering up were totally valid; other clients worked w/o issue. This points to a problem on the phone.</p>
<p>Even though the certificates appear fine, the timing with the recent Lets Encrypt certificate expiration is too suspicious ü§®.</p>
<p>Looking for another data point, I moved to a different computer with a different version of openSSL installed.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">‚ùØ openssl version
LibreSSL 2.8.3

‚ùØ openssl s_client -connect dot.my-test-domain.tld:853 -servername dot.my-test-domain.tld <span class="p">|</span>
    openssl crl2pkcs7 -nocrl -certfile /dev/stdin <span class="p">|</span>
    openssl pkcs7 -print_certs -noout -text <span class="p">|</span>
    egrep <span class="s1">&#39;not(Before|After)&#39;</span>
<span class="nv">depth</span><span class="o">=</span><span class="m">1</span> <span class="nv">O</span> <span class="o">=</span> Digital Signature Trust Co., <span class="nv">CN</span> <span class="o">=</span> DST Root CA X3
verify error:num<span class="o">=</span>10:certificate has expired
<span class="nv">notAfter</span><span class="o">=</span>Sep <span class="m">30</span> 14:01:15 <span class="m">2021</span> GMT
verify <span class="k">return</span>:0
<span class="nv">depth</span><span class="o">=</span><span class="m">1</span> <span class="nv">O</span> <span class="o">=</span> Digital Signature Trust Co., <span class="nv">CN</span> <span class="o">=</span> DST Root CA X3
verify error:num<span class="o">=</span>10:certificate has expired
<span class="nv">notAfter</span><span class="o">=</span>Sep <span class="m">30</span> 14:01:15 <span class="m">2021</span> GMT
verify <span class="k">return</span>:0
<span class="nv">depth</span><span class="o">=</span><span class="m">3</span> <span class="nv">O</span> <span class="o">=</span> Digital Signature Trust Co., <span class="nv">CN</span> <span class="o">=</span> DST Root CA X3
verify error:num<span class="o">=</span>10:certificate has expired
<span class="nv">notAfter</span><span class="o">=</span>Sep <span class="m">30</span> 14:01:15 <span class="m">2021</span> GMT
verify <span class="k">return</span>:0
</code></pre></td></tr></table>
</div>
</div><p>Huh. That sure looks like a problem!</p>
<p>After a <a href="https://www.mail-archive.com/openssl-users@openssl.org/msg90068.html" target="_blank" rel="noopener noreffer">bit</a> of google, I found that the different versions of openSSL (and their forks&hellip;) behave differently when validating certificate chains:</p>
<blockquote>
<p>The currently recommended certificate chain as presented to Let‚Äôs Encrypt ACME clients when new certificates are issued contains an intermediate certificate (ISRG Root X1) that is signed by an old DST Root CA X3 certificate that expires on 2021-09-30. In some cases the OpenSSL 1.0.2 version will regard the certificates issued by the Let‚Äôs Encrypt CA as having an expired trust chain.</p>
<p>Most up-to-date CA cert trusted bundles, as provided by operating systems, contain this soon-to-be-expired certificate. The current CA cert bundles also contain an ISRG Root X1 self-signed certificate. This means that clients verifying certificate chains can find the alternative non-expired path to the ISRG Root X1 self-signed certificate in their trust store.</p>
<p>Unfortunately this does not apply to OpenSSL 1.0.2 which always prefers the untrusted chain and if that chain contains a path that leads to an expired trusted root certificate (DST Root CA X3), it will be selected for the certificate verification and the expiration will be reported.</p>
</blockquote>
<p><a href="https://www.openssl.org/blog/blog/2021/09/13/LetsEncryptRootCertExpire/" target="_blank" rel="noopener noreffer">Source</a>.</p>
<p>That would certainly explain the behavior I observed when checking the skyhole certificates on the second computer.
I don&rsquo;t know <em>exactly</em> what version of OpenSSL the BoringSSL in my phone is based off of, but, assuming that it&rsquo;s got the same bug as OpenSSL 1.0.2, that would explain everything.</p>
<p>The openSSL blog post pointed out three possible fixes; two of which are applied client side.
My phone is not rooted so I just assumed that I would have access to the portions of the file system needed for a &lsquo;client side&rsquo; fix. That left the third solution; use a different intermediate chain.</p>
<p>I was not aware that there was an alternate intermediate chain for Lets Encrypt. I didn&rsquo;t even know that was a thing let alone <em>why</em> somebody would do that.</p>
<h1 id="alternate-intermediate">Alternate Intermediate</h1>
<p>Turns out, it&rsquo;s a very clever trick meant to <a href="https://letsencrypt.org/2020/12/21/extending-android-compatibility.html" target="_blank" rel="noopener noreffer">prevent Lets Encrypt certificates from breaking on <em>older</em> versions</a>. Ironic that a &lsquo;newer&rsquo; android device got screwed in the process üò¨.</p>
<p>The two valid chains of trust for Lets Encrypt certificates look like this:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Image credit/source:
        <a href="https://letsencrypt.org/2020/12/21/extending-android-compatibility.html"> 
            LetsEncrypt
        </a> 
        </p> 
    </figcaption>
    
</figure>


<p>With the help of <a href="https://github.com/certbot/certbot/issues/8577" target="_blank" rel="noopener noreffer">this</a> GitHub issue, the revised CertBot <code>cli.ini</code> file becomes:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">me@dot-host:~# cat /etc/letsencrypt/cli.ini <span class="p">|</span> grep chain
preferred-chain<span class="o">=</span><span class="s1">&#39;ISRG Root X1&#39;</span>
</code></pre></td></tr></table>
</div>
</div><p>After running certbot with the new config, <code>logcat</code> shows success:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">‚ùØ adb logcat <span class="p">|</span> grep resolv
10-01 09:41:01.190   <span class="m">962</span>  <span class="m">7711</span> W resolv  : Validating DnsTlsServer 12.34.56.78 with mark 0xf0084
10-01 09:41:01.734   <span class="m">962</span>  <span class="m">7711</span> W resolv  : validateDnsTlsServer returned <span class="m">1</span> <span class="k">for</span> 12.34.56.78
10-01 09:41:01.734   <span class="m">962</span>  <span class="m">7711</span> W resolv  : Validation success
</code></pre></td></tr></table>
</div>
</div><p>Android no longer shows an unhelpful &ldquo;can&rsquo;t connect&rdquo; message and I can see DNS queries being filtered!</p>
<p>üéä</p>
]]></description></item><item><title>Adding an APC UPS to Home Assistant energy dashboard</title><link>https://karlquinsland.com/apc-ups-energy-in-homeassistant/</link><pubDate>Sun, 05 Sep 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/apc-ups-energy-in-homeassistant/</guid><description><![CDATA[<p><strong>EDIT:</strong> (2021-09-19): After some <a href="https://old.reddit.com/r/homeassistant/comments/pi3pv2/how_to_use_an_apc_ups_as_an_energy_dashboard/hbqudh5/" target="_blank" rel="noopener noreffer">back and forth</a> with <a href="https://old.reddit.com/user/Laxarus" target="_blank" rel="noopener noreffer">/u/Laxarus</a>, there is now a simpler method! The <code>snmp</code> platform still does not support setting <code>device_class</code>, but wrapping the sensor in another template sensor is not required; just do so in your <a href="https://www.home-assistant.io/docs/configuration/customizing-devices/" target="_blank" rel="noopener noreffer"><code>customize.yaml</code></a>. I have called this out <a href="#edit-2021-09-19" rel="">below</a>.</p>
<hr>
<p>This is another quick &ldquo;here&rsquo;s how I did it, hope this help&rdquo; post.</p>
<p>In preparation for the inevitable grid brownouts that summer 2021 would bring, I installed a rather beefy UPS for my home network / lab. After some browsing, I discovered a local eWaste liquidator with a really good deal on some second-hand APC UPSs.</p>
<p>A few hundred dollars and about 150 lbs later, the UPS was installed in the server rack. Despite being a newer generation, the software on the UPS has a <em><strong>TON</strong></em> of similarities to the <a href="https://karlquinsland.com/monitoring-ap7900-switched-pdu-prometheus-grafana/" rel="">older style of PDU that I installed in my lab </a> a while back. This made it relatively straightforward to use the same
pattern to start getting UPS metrics into Grafana as well.</p>
<p>After getting the basic monitoring up and running, I started to draft this post to serve as an &lsquo;update&rsquo; to the APC9700 post. Life got in the way and the post sat in the drafts branch where it was completely forgotten about&hellip;. until <a href="https://www.home-assistant.io/blog/2021/08/04/release-20218/" target="_blank" rel="noopener noreffer">Home Assistant released their new Energy dashboard</a>. Now that HA could show the energy consumption of individual devices right next to the cumulative consumption and production data, the post was worth finishing and expanding on.</p>
<p>The configuration that I was <em>going</em> to publish is <a href="#current-and-voltage-independently" rel="">below</a> but after finding <a href="https://old.reddit.com/r/homeassistant/comments/pi3pv2/how_to_use_an_apc_ups_as_an_energy_dashboard/hbpqzr6/" target="_blank" rel="noopener noreffer">this</a> comment by <a href="https://old.reddit.com/user/Laxarus" target="_blank" rel="noopener noreffer">Laxarus</a> on <a href="https://old.reddit.com/user/Navydevildoc" target="_blank" rel="noopener noreffer">Navydevildoc</a>&rsquo;s <a href="https://old.reddit.com/r/homeassistant/comments/pi3pv2/how_to_use_an_apc_ups_as_an_energy_dashboard/" target="_blank" rel="noopener noreffer">reddit post</a>, I&rsquo;ve got a revised and simpler configuration to share!</p>
<h2 id="long-term-statistics-in-home-assistant">Long Term Statistics in Home Assistant</h2>
<p>Before diving into the configuration, a little bit of context. In preparation for the energy sub system, the Home Assistant developers have been working on a &lsquo;<a href="https://developers.home-assistant.io/docs/core/entity/sensor/#long-term-statistics" target="_blank" rel="noopener noreffer">long term statistics</a>&rsquo; (LTS) framework. The LTS framework is meant to give HA some improved speed and capabilities when dealing with a lot of data! The energy subsystem is the first &lsquo;consumer&rsquo; of the LTS framework.</p>
<p>Home Assistant will look for two &lsquo;properties&rsquo; on a given sensor to determine if that sensor will work with the LTS framework.
For a sensor/entity to &lsquo;work&rsquo; with the long term stats system it must:</p>
<ul>
<li>have a property called <code>device_class</code> with a value of <code>energy</code>, <code>gas</code>, or <code>monetary</code></li>
<li>have a property called <code>state_class</code> with a value of either <code>measurement</code> or <code>total_increasing</code></li>
</ul>
<p>In testing, I was <em>not</em> able to get a sensor with <code>state_class: measurement</code> and <code>device_class: energy</code> to &lsquo;work&rsquo; with the energy sub system. Fortunately, this does not apply with the concise configuration <a href="#a-single-oid-for-power-consumption" rel="">below</a>!</p>
<p>As the LTS framework is still new, many platforms - including the SNMP platform - do not support the required properties:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Invalid config for [sensor.snmp]: [state_class] is an invalid option for [sensor.snmp]. Check: sensor.snmp-&gt;state_class.
Invalid config for [sensor.snmp]: [device_class] is an invalid option for [sensor.snmp]. Check: sensor.snmp-&gt;device_class.
</code></pre></td></tr></table>
</div>
</div><p>The <code>template</code> platform <em>has</em> been updated to work with the <code>device_class</code> or <code>state_class</code> properties though.
So that&rsquo;s the technique to use here; a <code>template</code> sensor with the correct <code>{device,state}_class</code> properties set will wrap the snmp sensor.</p>
<p>Hopefully a future release of HA will include <code>{device,state}_class</code> support for the <code>snmp</code> platform; the <code>template</code> sensors in the configuration snips below won&rsquo;t be needed!</p>
<h4 id="edit-2021-09-19">EDIT (2021-09-19):</h4>
<p>You don&rsquo;t need to wrap the snmp sensor in a template sensor. As of home assistant 2021.09, the <code>snmp</code> platform does not allow you to set <code>device_class: energy</code>&hellip; however, you <em>can</em> set the <code>device_class</code> attribute on the snmp sensor through <code>customize.yaml</code>:</p>
<p>Make sure your configuration file loads the customization file:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">‚ùØ cat configuration.yaml <span class="p">|</span> grep customize
  customize: !include customize.yaml
</code></pre></td></tr></table>
</div>
</div><p>If your snmp sensor was called <code>sensor.usp_energy</code>, then you would add an object called <code>sensor.ups_energy</code> like so:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">‚ùØ cat customize.yaml <span class="p">|</span> grep -a2 ups
sensor.ups_energy:
  state_class: total_increasing
  device_class: energy
</code></pre></td></tr></table>
</div>
</div><h2 id="configure-home-assistant">Configure Home Assistant</h2>
<p>I have broken my <code>configuration.yaml</code> up to make things easier to manage. Almost all entity/device/template/sensor..etc configuration is done through files placed in the <code>devices/**/*</code> directory:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">‚ùØ cat configuration.yaml <span class="p">|</span> grep -E <span class="s1">&#39;devices/sensor|template/&#39;</span>
sensor: !include_dir_merge_list devices/sensor/
template: !include_dir_merge_list devices/template/
</code></pre></td></tr></table>
</div>
</div><h3 id="a-single-oid-for-power-consumption">A single OID for power consumption</h3>
<p>Thanks again to <a href="https://old.reddit.com/user/Laxarus" target="_blank" rel="noopener noreffer">Laxarus</a> for the <a href="https://old.reddit.com/r/homeassistant/comments/pi3pv2/how_to_use_an_apc_ups_as_an_energy_dashboard/hbpqzr6/" target="_blank" rel="noopener noreffer">tip</a> about the <code>upsHighPrecOutputEnergyUsage</code> OID!</p>
<p>First, create the &lsquo;raw&rsquo; sensor using the <code>snmp</code> platform:</p>
<p><code>devices/sensor/snmp.yaml</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml">- <span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">snmp</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;UPS Energy (raw)&#34;</span><span class="w">
</span><span class="w">  </span><span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="m">192.168.1.1</span><span class="w">
</span><span class="w">  </span><span class="c"># The current in tenths of amperes drawn by the load on the UPS.</span><span class="w">
</span><span class="w">  </span><span class="c"># Contained in Module(s): PowerNet-MIB</span><span class="w">
</span><span class="w">  </span><span class="c">##</span><span class="w">
</span><span class="w">  </span><span class="nt">baseoid</span><span class="p">:</span><span class="w"> </span><span class="l">.1.3.6.1.4.1.318.1.1.1.4.3.6.0</span><span class="w">
</span><span class="w">
</span><span class="w">  </span><span class="c"># Determines whether the sensor should start and keep working even if the SNMP host is unreachable or not responding.</span><span class="w">
</span><span class="w">  </span><span class="c"># This allows the sensor to be initialized properly even if, for example, your printer is not on when you start Home Assistant.</span><span class="w">
</span><span class="w">  </span><span class="nt">accept_errors</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="w">
</span><span class="w">  </span><span class="c"># UPS reports in tens of kWh so we&#39;ll need to divide by 10 to get kWh; HA only accepts kWh or Wh for sensors</span><span class="w">
</span><span class="w">  </span><span class="c">#   that will &#39;work&#39; on the energy dashboard</span><span class="w">
</span><span class="w">  </span><span class="nt">unit_of_measurement</span><span class="p">:</span><span class="w"> </span><span class="l">kWh</span><span class="w">
</span><span class="w">  </span><span class="nt">value_template</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;{{ ((value | int) / 10) | float}}&#34;</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>Then, wrap the <code>snmp</code> sensor with the necessary properties:</p>
<p><code>devices/template/ups_energy.yaml</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml">- <span class="nt">sensor</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;UPS Energy&#34;</span><span class="w">
</span><span class="w">      </span><span class="c"># Unique ID is required for mgmt through the web UI</span><span class="w">
</span><span class="w">      </span><span class="nt">unique_id</span><span class="p">:</span><span class="w"> </span><span class="l">tmpl-ups-energy</span><span class="w">
</span><span class="w">      </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="l">mdi:lightning-bolt</span><span class="w">
</span><span class="w">      </span><span class="c"># Required for Energy dashboard</span><span class="w">
</span><span class="w">      </span><span class="nt">state_class</span><span class="p">:</span><span class="w"> </span><span class="l">total_increasing</span><span class="w">
</span><span class="w">      </span><span class="nt">device_class</span><span class="p">:</span><span class="w"> </span><span class="l">energy</span><span class="w">
</span><span class="w">      </span><span class="nt">unit_of_measurement</span><span class="p">:</span><span class="w"> </span><span class="l">kWh</span><span class="w">
</span><span class="w">      </span><span class="nt">state</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;{{ (states(&#39;sensor.ups_energy_raw&#39;) | float) }}&#34;</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>Restart Home Assistant and you should now be able to add <code>sensor.ups_energy</code> to the list of individual devices on your Energy Dashboard :D.</p>
<h3 id="current-and-voltage-independently">Current and Voltage independently</h3>
<p>After sorting through the <em>massive</em> MIB file that APC publishes; I only found ways to measure the voltage and current via SNMP. I assumed that APC meant for you to calculate the power use on your own from the voltage and current.</p>
<p>As it turns out, APC has a <code>upsHighPrecOutputEnergyUsage</code> field which reports: <code>The output energy usage of the UPS in hundredths of kWh.</code> If your APC device publishes a value on the OID <code>.1.3.6.1.4.1.318.1.1.1.4.3.6.0</code> then you can skip the configuration below; use the more concise configuration <a href="#a-single-oid-for-power-consumption" rel="">above</a>. If your devices <em><strong>does not</strong></em> publish the cumulative energy consumption, it can still be calculated manually.</p>
<p>The manual approach below is a lot like the concise approach above; uses two <code>snmp</code> sensors to collect the voltage and current from the UPS and then wrap everything in a LTS-compatible <code>template</code> sensor to get the data to show up on the energy dashboard.</p>
<p><code>devices/sensor/snmp.yaml</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="c"># Unfortunately, there is no direct &#39;watt&#39; field. We need to calculate this on our own</span><span class="w">
</span><span class="w"></span><span class="c"># P = IV so if we can get the current and voltage, we can figure out the power</span><span class="w">
</span><span class="w"></span><span class="c">##</span><span class="w">
</span><span class="w"></span>- <span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">snmp</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;UPS Output Current&#34;</span><span class="w">
</span><span class="w">  </span><span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="m">192.168.1.1</span><span class="w">
</span><span class="w">  </span><span class="c"># The current in tenths of amperes drawn by the load on the UPS.</span><span class="w">
</span><span class="w">  </span><span class="c"># Contained in Module(s): PowerNet-MIB</span><span class="w">
</span><span class="w">  </span><span class="c">##</span><span class="w">
</span><span class="w">  </span><span class="nt">baseoid</span><span class="p">:</span><span class="w"> </span><span class="l">.1.3.6.1.4.1.318.1.1.1.4.3.4.0</span><span class="w">
</span><span class="w">
</span><span class="w">  </span><span class="c"># Determines whether the sensor should start and keep working even if the SNMP host is unreachable or not responding.</span><span class="w">
</span><span class="w">  </span><span class="c"># This allows the sensor to be initialized properly even if, for example, your printer is not on when you start Home Assistant.</span><span class="w">
</span><span class="w">  </span><span class="nt">accept_errors</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="w">  </span><span class="c"># For reasons that I don&#39;t understand... HA does not like it when i specify &#39;device_class&#39; :/</span><span class="w">
</span><span class="w">  </span><span class="c">#device_class: current</span><span class="w">
</span><span class="w">  </span><span class="nt">unit_of_measurement</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;A&#34;</span><span class="w">
</span><span class="w">  </span><span class="c"># Because the number is in 10ths of amps, we need to shift the decimal by 1 place</span><span class="w">
</span><span class="w">  </span><span class="c">#   43 becomes 4.3</span><span class="w">
</span><span class="w">  </span><span class="c">##</span><span class="w">
</span><span class="w">  </span><span class="nt">value_template</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;{{((value | int) / 10) | float}}&#34;</span><span class="w">
</span><span class="w">
</span><span class="w"></span>- <span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">snmp</span><span class="w">
</span><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;UPS Output Voltage&#34;</span><span class="w">
</span><span class="w">  </span><span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="m">192.168.1.1</span><span class="w">
</span><span class="w">  </span><span class="c">#The output voltage of the UPS system in tenths of VAC.</span><span class="w">
</span><span class="w">  </span><span class="c"># Contained in Module(s): PowerNet-MIB</span><span class="w">
</span><span class="w">  </span><span class="c">##</span><span class="w">
</span><span class="w">  </span><span class="nt">baseoid</span><span class="p">:</span><span class="w"> </span><span class="l">.1.3.6.1.4.1.318.1.1.1.4.3.1.0</span><span class="w">
</span><span class="w">
</span><span class="w">  </span><span class="c"># Determines whether the sensor should start and keep working even if the SNMP host is unreachable or not responding.</span><span class="w">
</span><span class="w">  </span><span class="c"># This allows the sensor to be initialized properly even if, for example, your printer is not on when you start Home Assistant.</span><span class="w">
</span><span class="w">  </span><span class="nt">accept_errors</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="w">  </span><span class="nt">unit_of_measurement</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;V&#34;</span><span class="w">
</span><span class="w">  </span><span class="c"># Because the number is in 10ths of volts, we need to shift the decimal by 1 place</span><span class="w">
</span><span class="w">  </span><span class="c">#   1211 becomes 121.1</span><span class="w">
</span><span class="w">  </span><span class="c">##</span><span class="w">
</span><span class="w">  </span><span class="nt">value_template</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;{{((value | int) / 10) | float}}&#34;</span><span class="w">
</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p><code>devices/template/ups_energy.yaml</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="c"># The docs around the long term stats support for a sensor are not super clear and seem to be a bit contradictory.</span><span class="w">
</span><span class="w"></span><span class="c"># Both the power and current sensors are &#39;point in time&#39; sensors and DO NOT represent an &#39;always increasing&#39; value.</span><span class="w">
</span><span class="w"></span><span class="c"># The docs seem to imply that HA will do the integration for you if the sensor has `state_class` set to `measurement` or</span><span class="w">
</span><span class="w"></span><span class="c">#   `total_increasing`. But elsewhere in the docs, you have this:</span><span class="w">
</span><span class="w"></span><span class="c">#         Home Assistant tracks the min, max and mean value during the statistics period.</span><span class="w">
</span><span class="w"></span><span class="c">#         The state_class property must be set to measurement, and the device_class must not be either of `energy`, `gas`, or `monetary`.</span><span class="w">
</span><span class="w"></span><span class="c">#</span><span class="w">
</span><span class="w"></span><span class="c"># In testing, I was only able to get sensors that had `total_increasing` and `energy` set to show up / work with the energy dashboard. It looks like a `measurement` sensor _could_ be used... but only if the `last_reset` property can be set to 0... and currently this can&#39;t be done via YAML.</span><span class="w">
</span><span class="w"></span><span class="c">#</span><span class="w">
</span><span class="w"></span><span class="c"># So we lie about the sensor and tell HA that it&#39;s a `total_increasing` sensor and we just hope that the value never drops more than 10% which appears to be the signal to HA that the meter has been reset :/</span><span class="w">
</span><span class="w"></span><span class="c">#</span><span class="w">
</span><span class="w"></span><span class="c"># https://developers.home-assistant.io/docs/core/entity/sensor/#long-term-statistics</span><span class="w">
</span><span class="w"></span><span class="c"># https://www.home-assistant.io/integrations/sensor/</span><span class="w">
</span><span class="w"></span><span class="c">##</span><span class="w">
</span><span class="w"></span>- <span class="nt">sensor</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;UPS Power&#34;</span><span class="w">
</span><span class="w">      </span><span class="c"># Unique ID is required for mgmt through the web UI</span><span class="w">
</span><span class="w">      </span><span class="nt">unique_id</span><span class="p">:</span><span class="w"> </span><span class="l">tmpl-UPS-power-use</span><span class="w">
</span><span class="w">      </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="l">mdi:lightning-bolt</span><span class="w">
</span><span class="w">
</span><span class="w">      </span><span class="c"># This sensor records the instantaneous power load on the UPS... it is a measurement at that point in time</span><span class="w">
</span><span class="w">      </span><span class="nt">state_class</span><span class="p">:</span><span class="w"> </span><span class="l">measurement</span><span class="w">
</span><span class="w">      </span><span class="nt">device_class</span><span class="p">:</span><span class="w"> </span><span class="l">power</span><span class="w">
</span><span class="w">      </span><span class="nt">unit_of_measurement</span><span class="p">:</span><span class="w"> </span><span class="l">W</span><span class="w">
</span><span class="w">      </span><span class="nt">state</span><span class="p">:</span><span class="w"> </span><span class="p">&gt;</span><span class="sd">
</span><span class="sd">        {% set current = states(&#39;sensor.UPS_output_current&#39;) | float %}
</span><span class="sd">        {% set voltage = states(&#39;sensor.UPS_output_voltage&#39;) | float %}
</span><span class="sd">        {{ (current * voltage) | round (2) }}</span><span class="w">        
</span><span class="w">
</span><span class="w"></span>- <span class="nt">sensor</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;UPS Energy&#34;</span><span class="w">
</span><span class="w">      </span><span class="c"># Unique ID is required for mgmt through the web UI</span><span class="w">
</span><span class="w">      </span><span class="nt">unique_id</span><span class="p">:</span><span class="w"> </span><span class="l">tmpl-UPS-energy</span><span class="w">
</span><span class="w">      </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="l">mdi:lightning-bolt</span><span class="w">
</span><span class="w">      </span><span class="c"># Lie to HA about the type of sensor so we get values in the dashboard.</span><span class="w">
</span><span class="w">      </span><span class="nt">state_class</span><span class="p">:</span><span class="w"> </span><span class="l">total_increasing</span><span class="w">
</span><span class="w">      </span><span class="nt">device_class</span><span class="p">:</span><span class="w"> </span><span class="l">energy</span><span class="w">
</span><span class="w">      </span><span class="c"># Since we are pretending to integrate over time, we are in Wh now.</span><span class="w">
</span><span class="w">      </span><span class="c"># Good thing, too... because the energy dashboard WILL NOT use any sensor that does not report in kWh or Wh</span><span class="w">
</span><span class="w">      </span><span class="nt">unit_of_measurement</span><span class="p">:</span><span class="w"> </span><span class="l">Wh</span><span class="w">
</span><span class="w">      </span><span class="nt">state</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;{{ (states(&#39;sensor.UPS_power&#39;) | float) }}&#34;</span><span class="w">
</span><span class="w">      </span><span class="c"># or, for kWh</span><span class="w">
</span><span class="w">      </span><span class="c">#state: &#34;{{ (states(&#39;sensor.UPS_power&#39;) | float)/1000 }}&#34;</span><span class="w">
</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>Fixing Home Assistant discovery with Tasmota on the Treatlife DS03</title><link>https://karlquinsland.com/treatlife-ds03-tasmota-autoconfig-with-homeassistant/</link><pubDate>Wed, 12 May 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/treatlife-ds03-tasmota-autoconfig-with-homeassistant/</guid><description><![CDATA[<p><strong>UPDATE:</strong> (2021-10-22): Tasmota 9.5.0 has been superseded by the new <a href="https://github.com/arendst/Tasmota/releases/tag/v10.0.0" target="_blank" rel="noopener noreffer">Tasmota 10.0.0 release</a>. This release works perfectly with the rules/automation outlined below; you no longer need to avoid the problematic 9.5 release with the DS03. I am extremely grateful to every one of the people that contributes to the Tasmota project to keep it improving!</p>
<p><del><strong>UPDATE:</strong> (2021-09-19): Multiple have gotten in touch with me seeking some support with this post. At present, there is a <a href="https://github.com/arendst/Tasmota/issues/12684#event-5035253885" target="_blank" rel="noopener noreffer">bug</a> with the Tasmota 9.5.0 release which breaks the automation outlined below. If you are having trouble getting the steps below to work <strong><em>either use Tasmota 9.4 or the latest development release of tasmota 9.5 if you&rsquo;re going to continue on with this post!</em></strong></del></p>
<hr>
<p>The Treatlife DS03 is one of only a few Tasmota compatible ceiling fan controllers available in the US. It&rsquo;s internal architecture splits the task of dimming the lights and switching the fan speed electronics from communicating over the network.</p>
<p>A very resource constrained ESP8266 module handles the network comms while a dedicated microcontroller running it&rsquo;s own software manages the user-facing buttons/indicator-lights as well as dimming the light and adjusting the fan speed. The two components communicate over a simple UART.</p>
<p>This is a totally reasonable way to build such a device, but for reasons that I don&rsquo;t fully understand, Tasmota does not publish a completely functional <a href="https://www.home-assistant.io/docs/mqtt/discovery/" target="_blank" rel="noopener noreffer">auto-configuration</a> payload for Home Assistant.</p>
<p>Home Assistant automatically discovers the full light/dimmer capabilities of the DS03, but for some reason does not see that the DS03 is capable of running a fan at 4 different speeds; Home Assistant only allows for turning the fan on/off.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The default auto-configuration leads Home Assistant to believe the fan can only be switched on/off.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>The <a href="https://templates.blakadder.com/treatlife_DS03.html" target="_blank" rel="noopener noreffer">existing</a> guides on <a href="https://www.digiblur.com/2020/07/the-tasmota-fan-controller-ive-been.html" target="_blank" rel="noopener noreffer">how to flash the device</a> with Tasmota and integrate it with Home Assistant all work around this limitation by <em><em>manually</em></em> configuring Home Assistant to see the device as a multi-speed fan ü§¶.</p>
<p>I&rsquo;m not a huge fan of doing things manually, especially when there&rsquo;s a well documented and robust protocol designed to make manual configuration unnecessary! Why ignore the almost completely working auto-configuration in favor of manual configuration? Why not just fix the auto-config payload so Home Assistant exposes the full functionality of the device?</p>
<p>Both of the above guides were written long before <a href="https://www.home-assistant.io/blog/2021/03/03/release-20213/#fan-speeds-100" target="_blank" rel="noopener noreffer">Home Assistant gained support</a> for fans with more than 3 speeds so even if I were to configure Home Assistant with a copy their example YAML, I&rsquo;d <em>still</em> be missing the ability to control the 4th speed!</p>
<h2 id="how">How</h2>
<p>In short, Tasmota supports some basic scripting, called <a href="https://tasmota.github.io/docs/Rules/" target="_blank" rel="noopener noreffer">rules</a>. They work exactly as you&rsquo;re thinking: On <code>$someEvent</code> do <a href="https://tasmota.github.io/docs/Commands/" target="_blank" rel="noopener noreffer"><code>$someAction</code></a>. One of the actions allows the Tasmota device to publish a message to a MQTT topic. I&rsquo;m going to have the DS03 broadcast a <em>proper</em> auto-configuration message to Home Assistant.</p>
<p>The technique is basically the same one outlined in <a href="https://blakadder.com/pir-in-tasmota-integration/" target="_blank" rel="noopener noreffer">this</a> article, but I&rsquo;m posting this to document a few of the subtle differences in my approach.</p>
<p>I&rsquo;ll assume that you&rsquo;ve successfully flashed your DS03 with Tasmota and have already configured the module and issued the necessary <code>ledtable</code> commands. You will also need the native <a href="https://www.home-assistant.io/integrations/tasmota/" target="_blank" rel="noopener noreffer">Tasmota</a> integration installed.</p>
<p>If you&rsquo;re following either the blakadder or digiblur guides linked above, stop at the step where you&rsquo;re meant to configure <code>rule1</code>.</p>
<p>Issue a slightly modified rule:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">Rule1 on TuyaReceived#Data=55AA03070005030400010016 do publish2 stat/%topic%/speed 25 endon
    on TuyaReceived#Data=55AA03070005030400010117 do publish2 stat/%topic%/speed 50 endon
    on TuyaReceived#Data=55AA03070005030400010218 do publish2 stat/%topic%/speed 75 endon
    on TuyaReceived#Data=55AA03070005030400010319 do publish2 stat/%topic%/speed 100 endon
</code></pre></td></tr></table>
</div>
</div><p>This tells Tasmota to publish an integer speed (25,50,75,100) when it receives a specific packet from the dedicated MCU over th UART.</p>
<p>Then, issue a second rule to actually publish the configuration data:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">rule2 on SetOption19#Data=OFF do publish2 homeassistant/fan/%macaddr%/config {&#34;uniq_id&#34;:&#34;AABBCC&#34;,&#34;~&#34;:&#34;%topic%/POWER1&#34;,&#34;cmd_t&#34;:&#34;cmnd/~&#34;,&#34;pl_off&#34;:&#34;OFF&#34;,&#34;pl_on&#34;:&#34;ON&#34;,&#34;stat_t&#34;:&#34;stat/~&#34;,&#34;avty_t&#34;:&#34;tele/%topic%/LWT&#34;,&#34;pl_avail&#34;:&#34;Online&#34;,&#34;pl_not_avail&#34;:&#34;Offline&#34;,&#34;pct_cmd_t&#34;:&#34;cmnd/%topic%/tuyasend4&#34;,&#34;pct_cmd_tpl&#34;:&#34;{%set v=value|int%}{%if v&lt;=25%}3,0{%elif v&lt;=50%}3,1{%elif v&lt;=75%}3,2{%elif v&lt;=100%}3,3{%endif%}&#34;,&#34;pct_stat_t&#34;:&#34;stat/%topic%/speed&#34;,&#34;dev&#34;:{&#34;cns&#34;:[[&#34;mac&#34;,&#34;%macaddr%&#34;]]}} endon
</code></pre></td></tr></table>
</div>
</div><p><strong>Note:</strong> You&rsquo;ll probably want to modify the above payload so the occurrences of the placeholder string <code>AABBCC</code> are replaced with the last 6 characters of your own device&rsquo;s MAC address!</p>
<p>For readability, here&rsquo;s the unminified JSON:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&#34;uniq_id&#34;</span><span class="p">:</span> <span class="s2">&#34;AABBCC&#34;</span><span class="p">,</span>
  <span class="nt">&#34;~&#34;</span><span class="p">:</span><span class="s2">&#34;%topic%/POWER1&#34;</span><span class="p">,</span>
  <span class="nt">&#34;cmd_t&#34;</span><span class="p">:</span> <span class="s2">&#34;cmnd/~&#34;</span><span class="p">,</span>
  <span class="nt">&#34;pl_off&#34;</span><span class="p">:</span> <span class="s2">&#34;OFF&#34;</span><span class="p">,</span>
  <span class="nt">&#34;pl_on&#34;</span><span class="p">:</span> <span class="s2">&#34;ON&#34;</span><span class="p">,</span>
  <span class="nt">&#34;stat_t&#34;</span><span class="p">:</span> <span class="s2">&#34;stat/~&#34;</span><span class="p">,</span>
  <span class="nt">&#34;avty_t&#34;</span><span class="p">:</span> <span class="s2">&#34;tele/%topic%/LWT&#34;</span><span class="p">,</span>
  <span class="nt">&#34;pl_avail&#34;</span><span class="p">:</span> <span class="s2">&#34;Online&#34;</span><span class="p">,</span>
  <span class="nt">&#34;pl_not_avail&#34;</span><span class="p">:</span> <span class="s2">&#34;Offline&#34;</span><span class="p">,</span>
  <span class="nt">&#34;pct_cmd_t&#34;</span><span class="p">:</span> <span class="s2">&#34;cmnd/%topic%/tuyasend4&#34;</span><span class="p">,</span>
  <span class="nt">&#34;pct_cmd_tpl&#34;</span><span class="p">:</span> <span class="s2">&#34;{%set v=value|int%}{%if v&lt;=25%}3,0{%elif v&lt;=50%}3,1{%elif v&lt;=75%}3,2{%elif v&lt;=100%}3,3{%endif%}&#34;</span><span class="p">,</span>
  <span class="nt">&#34;pct_stat_t&#34;</span><span class="p">:</span> <span class="s2">&#34;stat/%topic%/speed&#34;</span><span class="p">,</span>
  <span class="nt">&#34;dev&#34;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&#34;cns&#34;</span><span class="p">:</span> <span class="p">[</span>
      <span class="p">[</span>
        <span class="s2">&#34;mac&#34;</span><span class="p">,</span>
        <span class="s2">&#34;%macaddr%&#34;</span>
      <span class="p">]</span>
    <span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p><strong>Note:</strong> The <code>dev</code> portion of the payload is the <a href="https://www.home-assistant.io/integrations/fan.mqtt/#device" target="_blank" rel="noopener noreffer">magic that convinces Home Assistant to combine the multiple entities under once device</a>. Without that portion of the document, you will still have a properly configured DS03, but it will exist as an &lsquo;orphaned&rsquo; entity that belongs to no device!</p>
<p>All that&rsquo;s left is to enable <code>rule2</code> and then trigger it:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">rule2 1
so19 0
</code></pre></td></tr></table>
</div>
</div><p>Altogether, It&rsquo;ll look something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">18:23:54.140 CMD: Rule1 on TuyaReceived#Data=55AA03070005030400010016 do publish2 stat/%topic%/speed 25 endon on TuyaReceived#Data=55AA03070005030400010117 do publish2 stat/%topic%/speed 50 endon on TuyaReceived#Data=55AA03070005030400010218 do publish2 stat/%topic%/speed 75 endon on TuyaReceived#Data=55AA03070005030400010319 do publish2 stat/%topic%/speed 100 endon
18:23:54.149 RUL: Stored uncompressed, would compress from 344 to 98 (-72%)
18:23:54.155 MQT: stat/living_room_ceiling_fan/RESULT = {&#34;Rule1&#34;:{&#34;State&#34;:&#34;ON&#34;,&#34;Once&#34;:&#34;OFF&#34;,&#34;StopOnError&#34;:&#34;OFF&#34;,&#34;Length&#34;:344,&#34;Free&#34;:167,&#34;Rules&#34;:&#34;on TuyaReceived#Data=55AA03070005030400010016 do publish2 stat/%topic%/speed 25 endon on TuyaReceived#Data=55AA03070005030400010117 do publish2 stat/%topic%/speed 50 endon on TuyaReceived#Data=55AA03070005030400010218 do publish2 stat/%topic%/speed 75 endon on TuyaReceived#Data=55AA03070005030400010319 do publish2 stat/%topic%/speed 100 endon&#34;}}

18:24:05.061 CMD: rule2 on SetOption19#Data=OFF do publish2 homeassistant/fan/%macaddr%/config {&#34;uniq_id&#34;:&#34;AABBCC&#34;,&#34;~&#34;:&#34;%topic%/POWER1&#34;,&#34;cmd_t&#34;:&#34;cmnd/~&#34;,&#34;pl_off&#34;:&#34;OFF&#34;,&#34;pl_on&#34;:&#34;ON&#34;,&#34;stat_t&#34;:&#34;stat/~&#34;,&#34;avty_t&#34;:&#34;tele/%topic%/LWT&#34;,&#34;pl_avail&#34;:&#34;Online&#34;,&#34;pl_not_avail&#34;:&#34;Offline&#34;,&#34;pct_cmd_t&#34;:&#34;cmnd/%topic%/tuyasend4&#34;,&#34;pct_cmd_tpl&#34;:&#34;{%set v=value|int%}{%if v&lt;=25%}3,0{%elif v&lt;=50%}3,1{%elif v&lt;=75%}3,2{%elif v&lt;=100%}3,3{%endif%}&#34;,&#34;pct_stat_t&#34;:&#34;stat/%topic%/speed&#34;,&#34;dev&#34;:{&#34;cns&#34;:[[&#34;mac&#34;,&#34;%macaddr%&#34;]]}} endon
18:24:05.093 RUL: Stored uncompressed, would compress from 473 to 351 (-26%)
18:24:05.100 MQT: stat/living_room_ceiling_fan/RESULT = {&#34;Rule2&#34;:{&#34;State&#34;:&#34;OFF&#34;,&#34;Once&#34;:&#34;OFF&#34;,&#34;StopOnError&#34;:&#34;OFF&#34;,&#34;Length&#34;:473,&#34;Free&#34;:38,&#34;Rules&#34;:&#34;on SetOption19#Data=OFF do publish2 homeassistant/fan/%macaddr%/config {\&#34;uniq_id\&#34;:\&#34;AABBCC\&#34;,\&#34;~\&#34;:\&#34;%topic%/POWER1\&#34;,\&#34;cmd_t\&#34;:\&#34;cmnd/~\&#34;,\&#34;pl_off\&#34;:\&#34;OFF\&#34;,\&#34;pl_on\&#34;:\&#34;ON\&#34;,\&#34;stat_t\&#34;:\&#34;stat/~\&#34;,\&#34;avty_t\&#34;:\&#34;tele/%topic%/LWT\&#34;,\&#34;pl_avail\&#34;:\&#34;Online\&#34;,\&#34;pl_not_avail\&#34;:\&#34;Offline\&#34;,\&#34;pct_cmd_t\&#34;:\&#34;cmnd/%topic%/tuyasend4\&#34;,\&#34;pct_cmd_tpl\&#34;:\&#34;{%set v=value|int%}{%if v&lt;=25%}3,0{%elif v&lt;=50%}3,1{%elif v&lt;=75%}3,2{%elif v&lt;=100%}3,3{%endif%}\&#34;,\&#34;pct_stat_t\&#34;:\&#34;stat/%topic%/speed\&#34;,\&#34;dev\&#34;:{\&#34;cns\&#34;:[[\&#34;mac\&#34;,\&#34;%macaddr%\&#34;]]}} endon&#34;}}
18:24:07.494 CMD: rule2 1
18:24:07.503 MQT: stat/living_room_ceiling_fan/RESULT = {&#34;Rule2&#34;:{&#34;State&#34;:&#34;ON&#34;,&#34;Once&#34;:&#34;OFF&#34;,&#34;StopOnError&#34;:&#34;OFF&#34;,&#34;Length&#34;:473,&#34;Free&#34;:38,&#34;Rules&#34;:&#34;on SetOption19#Data=OFF do publish2 homeassistant/fan/%macaddr%/config {\&#34;uniq_id\&#34;:\&#34;AABBCC\&#34;,\&#34;~\&#34;:\&#34;%topic%/POWER1\&#34;,\&#34;cmd_t\&#34;:\&#34;cmnd/~\&#34;,\&#34;pl_off\&#34;:\&#34;OFF\&#34;,\&#34;pl_on\&#34;:\&#34;ON\&#34;,\&#34;stat_t\&#34;:\&#34;stat/~\&#34;,\&#34;avty_t\&#34;:\&#34;tele/%topic%/LWT\&#34;,\&#34;pl_avail\&#34;:\&#34;Online\&#34;,\&#34;pl_not_avail\&#34;:\&#34;Offline\&#34;,\&#34;pct_cmd_t\&#34;:\&#34;cmnd/%topic%/tuyasend4\&#34;,\&#34;pct_cmd_tpl\&#34;:\&#34;{%set v=value|int%}{%if v&lt;=25%}3,0{%elif v&lt;=50%}3,1{%elif v&lt;=75%}3,2{%elif v&lt;=100%}3,3{%endif%}\&#34;,\&#34;pct_stat_t\&#34;:\&#34;stat/%topic%/speed\&#34;,\&#34;dev\&#34;:{\&#34;cns\&#34;:[[\&#34;mac\&#34;,\&#34;%macaddr%\&#34;]]}} endon&#34;}}

18:24:10.362 CMD: so19 0
18:24:10.369 MQT: stat/living_room_ceiling_fan/RESULT = {&#34;SetOption19&#34;:&#34;OFF&#34;}
18:24:10.414 RUL: SETOPTION19#DATA=OFF performs &#34;publish2 homeassistant/fan/DDEEFFAABBCC/config {&#34;uniq_id&#34;:&#34;AABBCC&#34;,&#34;~&#34;:&#34;living_room_ceiling_...
18:24:10.421 MQT: home Assistant/fan/DDEEFFAABBCC/config = {&#34;uniq_id&#34;:&#34;AABBCC&#34;,&#34;~&#34;:&#34;living_room_ceiling_fan/POWER1&#34;,&#34;cmd_t&#34;:&#34;cmnd/~&#34;,&#34;pl_off&#34;:&#34;OFF&#34;,&#34;pl_on&#34;:&#34;ON&#34;,&#34;stat_t&#34;:&#34;stat/~&#34;,&#34;avty_t&#34;:&#34;tele/living_room_ceiling_fan/LWT&#34;,&#34;pl_avail&#34;:&#34;Online&#34;,&#34;pl_not_avail&#34;:&#34;Offline&#34;,&#34;pct_cmd_t&#34;:&#34;cmnd/living_room_ceiling_fan/tuyasend4&#34;,&#34;pct_cmd_tpl&#34;:&#34;{%set v=value|int%}{%if v&lt;=25%}3,0{%elif v&lt;=50%}3,1{%elif v&lt;=75%}3,2{%elif v&lt;=100%}3,3{%endif%}&#34;,&#34;pct_stat_t&#34;:&#34;stat/living_room_ceiling_fan/speed&#34;,&#34;dev&#34;:{&#34;cns&#34;:[[&#34;mac&#34;,&#34;DDEEFFAABBCC&#34;]]}} (retained)
18:24:10.509 LOG: Home Assistant MQTT Discovery disabled.
</code></pre></td></tr></table>
</div>
</div><p>If everything worked correctly, Home Assistant should now show a single device in the <a href="https://developers.home-assistant.io/docs/device_registry_index/" target="_blank" rel="noopener noreffer">device registry</a> with a dimmable light entity and a variable-speed fan entity!</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The DS03 device entity after the variable speed configuration document is received by Home Assistant.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p><strong>Note:</strong> Depending on weather or not Home Assistant has previously &lsquo;seen&rsquo; your DS03 via the native native <a href="https://www.home-assistant.io/integrations/tasmota/" target="_blank" rel="noopener noreffer">Tasmota</a> integration, you may see <em>three</em> entities on the device page; the light/dimmer, the switch/fan and the variable speed fan. Just disable the &lsquo;basic&rsquo; fan switch entity that Tasmota publishes as discussed below.</p>
<h4 id="updating-a-ds03-thats-already-integrated-with-home-assistant">Updating a DS03 that&rsquo;s already integrated with Home Assistant</h4>
<p>If you&rsquo;ve already got a DS03 that&rsquo;s integrated with Home Assistant, you can still get the device to properly auto-configure. Just remove the YAML configuration for both the light and fan entities.</p>
<p>You will likely need to restart HA to make sure all traces of the manual configurations are removed from the <a href="https://developers.home-assistant.io/docs/entity_registry_index/" target="_blank" rel="noopener noreffer">entity registry</a>.</p>
<p>Once Home Assistant has forgotten all about the manual entities and the native <a href="https://www.home-assistant.io/integrations/tasmota/" target="_blank" rel="noopener noreffer">Tasmota</a> integration in installed, all of the MQTT-connected Tasmota devices <em>should</em> get picked up and configured in Home Assistant. At this point, you should have the single device with two entities; dimmable light and binary-switch fan as shown in the first picture on this post.</p>
<p>If your DS03 was already configured with Home Assistant via the Tasmota integration, just disable the simple switch entity that Tasmota configures Home Assistant with:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Toggle &#39;Enable entity&#39; off to hide the basic binary switch that Tasmota configured Home Assistant with.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>After disabling the switch/fan entity, trigger <code>rule2</code> again and refresh the device entity page in Home Assistant to confirm that the device now has a <code>MQTT Fan</code> entity if it wasn&rsquo;t there already.</p>
<p>Enjoy :)</p>
<h4 id="why-use-setoption19off-as-the-trigger">Why use <code>SetOption19:OFF</code> as the trigger?</h4>
<p>I run my MQTT broker on Kubernetes and do not have any persistance configured for that pod. This means that regardless of what retention settings a message was published with, every message on every topic is wiped out whenever the MQTT broker pod is rescheduled. As a result almost every device that Home Assistant monitors or controls via MQTT drifts into an <code>Unavailable</code> state whenever I do any maintenance on my K8s cluster.</p>
<p>I&rsquo;m not the <a href="https://community.home-assistant.io/t/tasmota-going-offline-at-random-times/116299" target="_blank" rel="noopener noreffer">only one</a> with <a href="https://community.home-assistant.io/t/sonoff-tasmota-started-regularly-showing-unavailable-on-home-assistant/90157/83" target="_blank" rel="noopener noreffer">this issue</a>, even if the cause is different.</p>
<p>To get around this, I have a small automation that pokes the Tasmota devices every hour and when Home Assistant starts up. Since the Home Assistant pod takes longer than the MQTT pod to initialize, having HA poke the devices on startup minimizes the time a given entity is <code>Unavailable</code> in HA.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">alias</span><span class="p">:</span><span class="w"> </span><span class="l">Tasmotas Announce</span><span class="w">
</span><span class="w"></span><span class="nt">description</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;Prevents devices from going Unavailable&#39;</span><span class="w">
</span><span class="w"></span><span class="nt">trigger</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">home Assistant</span><span class="w">
</span><span class="w">    </span><span class="nt">event</span><span class="p">:</span><span class="w"> </span><span class="l">start</span><span class="w">
</span><span class="w">  </span>- <span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">time_pattern</span><span class="w">
</span><span class="w">    </span><span class="nt">hours</span><span class="p">:</span><span class="w"> </span><span class="l">/1</span><span class="w">
</span><span class="w"></span><span class="nt">condition</span><span class="p">:</span><span class="w"> </span><span class="p">[]</span><span class="w">
</span><span class="w"></span><span class="nt">action</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="c"># For reasons that I don&#39;t understand, different tasmota devices seem to </span><span class="w">
</span><span class="w">  </span><span class="c">#     subscribe to a different group topic. cmnd/tas vs tas/cmnd</span><span class="w">
</span><span class="w">  </span><span class="c">##</span><span class="w">
</span><span class="w">  </span>- <span class="nt">service</span><span class="p">:</span><span class="w"> </span><span class="l">mqtt.publish</span><span class="w">
</span><span class="w">    </span><span class="nt">data</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">topic</span><span class="p">:</span><span class="w"> </span><span class="l">cmnd/tasmotas/SetOption19</span><span class="w">
</span><span class="w">      </span><span class="nt">payload</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;0&#39;</span><span class="w">
</span><span class="w">  </span>- <span class="nt">service</span><span class="p">:</span><span class="w"> </span><span class="l">mqtt.publish</span><span class="w">
</span><span class="w">    </span><span class="nt">data</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">topic</span><span class="p">:</span><span class="w"> </span><span class="l">tasmotas/cmnd/SetOption19</span><span class="w">
</span><span class="w">      </span><span class="nt">payload</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;0&#39;</span><span class="w">
</span><span class="w"></span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">single</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>You could probably work around this whole thing by changing the trigger for <code>rule2</code> to something like <code>on Mqtt#Connected publish2</code>. Or storing the configuration payload as a <a href="https://tasmota.github.io/docs/Rules/#rule-variables" target="_blank" rel="noopener noreffer">variable</a> so you could write multiple triggers for the same <code>publish2 %mem1%</code> action ü§î.</p>
<h3 id="side-note-rules-crash">Side note: Rules Crash!</h3>
<p>While developing the configuration payload, I was able to reliably crash the ESP8266 module causing Tasmota to reboot. The crash / reboot symptoms are pretty similar to those outlined <a href="https://tasmota.github.io/docs/Troubleshooting/#running-out-of-ram" target="_blank" rel="noopener noreffer">here</a> so I assume that even though the rules &ldquo;fit&rdquo;, something about how the rule was parsed or the actions the rule drove caused the ESP to run out of RAM.</p>
<p>When I say &ldquo;fit&rdquo; I mean that I&rsquo;d see lines like this in the console after configuring a test payload for <code>rule2</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback">MQT: stat/living_room_ceiling_fan/RESULT = {&#34;Rule2&#34;:{&#34;State&#34;:&#34;ON&#34;,...&#34;Free&#34;:9,&#34;Rules&#34;:&#34;on ... endon&#34;}}
</code></pre></td></tr></table>
</div>
</div><p>I could technically make the rule <code>9</code> characters longer and it&rsquo;d still fit&hellip; right?</p>
<p>Not quite. Looking at the result from issuing the <code>Rule1</code> command, it was clear that while <code>rule2</code> would have an absolute maximum length of 511 characters (<code>&quot;Length&quot;:344,&quot;Free&quot;:167</code>; 344+167=511) there was also a less well defined soft limit on rule length.</p>
<p>For some versions of my <code>rule2</code> payload, I was able to solve the crashing just by switching to the &lsquo;lite&rsquo; version of Tasmota. While the &lsquo;lite&rsquo; version of Tasmota does work with Tuya MCU (<code>USE_TUYA_MCU</code>), it <a href="https://github.com/arendst/Tasmota/blob/v9.4.0/BUILDS.md" target="_blank" rel="noopener noreffer">does <em>not</em> support</a> Home Assistant configuration (<code>USE_HOME_ASSISTANT</code>)!</p>
<p>After flashing back to the &lsquo;regular&rsquo; Tasmota build, I set out trying to compress the <code>rule2</code> payload as much as possible so that it would still work <em>and</em> not reliably crash the ESP8266 on the DS03.</p>
<p>After testing several things, I managed to get a working <code>rule2</code> that didn&rsquo;t reliably crash when triggered.</p>
]]></description></item><item><title>PoE powered Stack Light</title><link>https://karlquinsland.com/poe-stack-light/</link><pubDate>Sun, 28 Feb 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/poe-stack-light/</guid><description><![CDATA[<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The lights are much brighter than they appear in this picture; had to intentionally darken the image to prevent camera from blowing out the colors.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p><a href="https://en.wikipedia.org/wiki/Stack_light" target="_blank" rel="noopener noreffer">Stack/signal lights</a> are <em>everywhere</em> in industrial applications for good reason: they&rsquo;re a compact and relatively information-dense indicator system. They always seemed like the kind of indicator that only people with expensive machines needed. Until I found that they can be had for just under $6/light from Ali Express, that is.</p>
<p>I don&rsquo;t have any giant industrial machines to attach one to, but I do have a non-trivial number of containers/servers/networked-devices running and they all emit various notifications, usually through email. Who wouldn&rsquo;t mind a novel way to move those notifications beyond email/push notifications into the physical world ü§î?</p>
<ul>
<li>üü¢ =&gt; Everything is nominal</li>
<li>üü† =&gt; Check your email; a <code>WARN</code> level event has occurred</li>
<li>üî¥ =&gt; A <code>WARN</code> or <code>ERROR</code> level condition has occurred; something (ISP down?) is preventing delivery of notifications so check the logs/dashboards directly</li>
<li>üîµ =&gt; A new <code>INFO</code> level message available in Home Assistant</li>
<li>‚ö™ =&gt; Not sure; either a &ldquo;A HIGH priority task is past due&rdquo; or a &lsquo;modifier&rsquo; for above status</li>
</ul>
<p>While waiting for the light to arrive from China, I started to design something to drive it.
It was immediately obvious that an ESP32 module would be <strong>ideal</strong> to run the show, and just for the fun of it, I decided to make the entire thing (optionally) controlled and powered over Ethernet.</p>
<h2 id="home-assistant">Home Assistant</h2>
<p>It wouldn&rsquo;t be an ESP32 powered project w/o the the <em>fantastic</em> <a href="https://esphome.io/" target="_blank" rel="noopener noreffer">ESPHome</a> framework! With ESPHome comes trivial Home Assistant integration; each individual light / channel on the stack light is automatically configured via MQTT a a light:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Stack light is controlled via MQTT making it easy to control from Home Assistant or any other program that can speak MQTT.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>A slightly modified version of the ESPHome config that I use to build the firmware for the light is attached at the end of this post.</p>
<p>Unfortunately, the one Home Assistant integration that I had in mind is currently not feasible!
I wanted to light the blue light when there is any new/unread Home Assistant <a href="https://www.home-assistant.io/integrations/persistent_notification/" target="_blank" rel="noopener noreffer">persistent notifications</a>;
a real life &ldquo;unread&rdquo; badge of sorts.</p>
<p>There is no way to get the list / count of active notifications unless you&rsquo;re a <a href="https://github.com/home-assistant/core/blob/41b45c7f78f9937520b38126cedf228da7507d7d/homeassistant/components/persistent_notification/__init__.py#L203" target="_blank" rel="noopener noreffer">websocket client</a>, however.</p>
<p>Using the <a href="https://github.com/home-assistant/core/blob/41b45c7f78f9937520b38126cedf228da7507d7d/homeassistant/components/persistent_notification/__init__.py#L30" target="_blank" rel="noopener noreffer"><code>persistent_notifications_updated</code></a> event as a trigger won&rsquo;t work because the event payload lacks useful data; I can&rsquo;t figure out the number of notifications or their state&hellip; just that either notification has been created or dismissed.
If I wanted the blue light on any time a notification was either created or destroyed, I could use this trigger. But the light is no longer a useful indicator; it would be on the first time a notification was created or destroyed and then it would never be off.</p>
<p>Manually trying to <a href="https://community.home-assistant.io/t/dismiss-of-a-persistent-notification-as-trigger-for-automations/135621/5" target="_blank" rel="noopener noreffer">keep track of the number of notification created/dismissed actions</a> just feels like a hacky workaround that could easily get out of sync, too.</p>
<p>Oh well üòî.</p>
<h2 id="bom">BOM</h2>
<p>I&rsquo;ll cover the individual 3D printed and electronic components below. Beyond them, you&rsquo;ll need some additional hardware:</p>
<ul>
<li>4x <a href="https://www.mcmaster.com/catalog/91290A113" target="_blank" rel="noopener noreffer">m3x8mm</a> screws</li>
<li>4x <a href="https://www.mcmaster.com/catalog/91274A115" target="_blank" rel="noopener noreffer">m4x8mm</a> screws</li>
<li>4x <a href="https://www.mcmaster.com/catalog/91274A117" target="_blank" rel="noopener noreffer">m4x10mm</a> screws</li>
<li>6x <a href="https://www.kjmagnetics.com/proddetail.asp?prod=BC41" target="_blank" rel="noopener noreffer">Neodymium magnets</a> sized 20mm x 6mm x 2mm. These are optional and are leftover magnets from this <a href="https://www.google.com/search?client=firefox-b-1-d&amp;q=prusa&#43;mk3&#43;enclosure&#43;2" target="_blank" rel="noopener noreffer">build</a></li>
<li>10mm diameter <a href="https://www.amazon.com/s?k=10mm&#43;cabinet&#43;door&#43;pad" target="_blank" rel="noopener noreffer">anti-slip pads</a>. Thees are optional but will keep the base from sliding around.</li>
</ul>
<p>I&rsquo;ve linked to the screws that I used, but any similar ones should work. Strong glue could also work, but is not recommended.</p>
<p>The m3 screws are for attaching the PCB to the printed part (in yellow, below)
The shorter m4 screws are for attaching the base (yellow) to the lid (dark blue) and the longer screws are for attaching the stack light to the lid.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        About to start melting threads into the 3D printed parts.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h4 id="stack-light">Stack light</h4>
<p>Looking quickly through Ali Express, it seems that the lights come in a few different styles, but all appear to be modular in construction.
Regardless of lamp style, they all appear to come in 2-5 lamp variants and some have configuration switches that allow for customizing the behavior per lamp.</p>
<p>The ESPHome code and PCB are designed to accommodate up to 6 colors but will work with less.</p>
<p>No matter which style and colors you select, make sure you get one with a <strong>positive <a href="https://en.wikipedia.org/wiki/Anode" target="_blank" rel="noopener noreffer">anode</a></strong> rated for <strong>12V DC</strong>.</p>
<p>The exact lamp that I used is <a href="https://www.aliexpress.com/item/1005001391165850.html" target="_blank" rel="noopener noreffer">here</a>.</p>
<h4 id="esp32-module">ESP32 Module</h4>
<p>I chose to use the <a href="https://www.aliexpress.com/item/1005001739834076.html" target="_blank" rel="noopener noreffer">WirelessTag WT32-eth01</a> module for the onboard Ethernet circuitry at a relatively cheap price: about $10/module. Bonus: it&rsquo;s got a breadboard friendly footprint <em>and</em> castellated pads!</p>
<p>You do not need to use Ethernet for control <em>or</em> power; the ESPHome configuration below can be easily modified to use the WiFi.</p>
<p>In any case, you will need a dedicated UART programmer for the module as there is no built-in USB port on the WT32-eth01.</p>
<h4 id="pcb">PCB</h4>
<p>Nothing much to see here; just a simple board to consolidate connections for what would otherwise be a mess of wires.</p>
<p>Since I was already using Ethernet for the data, may as well use it for the power, too.
Designing my own PoE circuitry was not in scope for this project, so I went with another off-the-shelf <a href="https://www.aliexpress.com/item/32620368747.html" target="_blank" rel="noopener noreffer">module</a>. I ordered the <code>12V2A-Full 24W</code> version, but the others are likely to also have an identical internal PCB layout which should fit in the 3D printed parts. Make sure to get one that supplies the 12V that the stack light will need!</p>
<p>The PCB does not care <em>where</em> the 12V DC supply comes from.
It wouldn&rsquo;t be difficult to modify the enclosure to accommodate a <a href="https://www.aliexpress.com/item/1005001668143510.html" target="_blank" rel="noopener noreffer">USB-C Power Delivery module</a> or even just a standard barrel jack / LED power supply.</p>
<p>Like the PoE module, I use an off the shelf DC to DC converter <a href="https://www.aliexpress.com/item/32833398811.html" target="_blank" rel="noopener noreffer">module</a> to step the 12V down from the PoE dongle to 5V which the ESP32 module requires. That link is to a whole-sale lot of 10 converters. You can order the same module in quantities of one from similar listings. I buy them in bulk because it&rsquo;s more expensive to design and solder my own on each board that I build&hellip;</p>
<p>My testing isn&rsquo;t super through, but I see the total power draw (measured from the PoE supplying equipment) reaching about 4.5W when all lights are on and about 2W at at idle.</p>
<p>The ESP32 just drives some <a href="https://lcsc.com/product-detail/MOSFET_Diodes-Incorporated-DMN1019USN-7_C145103.html" target="_blank" rel="noopener noreffer">N-Channel MOSFETS</a> to switch the individual lights on/off.
They&rsquo;re the only surface mount (SOT-23-4) component; everything else can be done with through hole components. The board is designed for up to 6 colors/lights, but populate only as many MOSFETS as you need.</p>
<p>All of the screw terminals are optional; I had several spares left over from a different project, but soldering wires directly to the PCB would work as well.</p>
<p>The 6 pin screw terminal is LCSC part <a href="https://lcsc.com/product-detail/Screw-terminal_JILN-JL301-50007U02_C409139.html" target="_blank" rel="noopener noreffer"><code>C409139</code></a></p>
<p>The 2 pin screw terminal is LCSC part <a href="https://lcsc.com/product-detail/Screw-terminal_Ningbo-Kangnex-Elec-WJ129V-5-0-2P_C8463.html" target="_blank" rel="noopener noreffer"><code>C8463</code></a></p>
<p>The source and gerber files from EasyEDA are below. Upload them to your favorite PCB prototyping service or try your hand at making your own.</p>
<h4 id="printed-parts">Printed parts</h4>
<p>There are two parts: a <code>lid</code> and a <code>plate</code>. The electronics are attached to the plate and the stack light is attached to the lid. In the photos associated with this post, the <code>lid</code> is dark blue and the <code>plate</code> is yellow.</p>
<p>The plate has features for several attachment methods:</p>
<ul>
<li>magnets; meant for horizontal surfaces</li>
<li>3M command strip; probably wont be enough to do wall/ceilings, but should work in lieu of magnets on horizontal surfaces</li>
<li>4 circular indents (<code>10mm</code> diameter) included for anti-slip pads</li>
<li>drywall screw/slot mounting for walls/ceilings</li>
</ul>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        I wasn&#39;t sure where I&#39;d want to install this, so there are a few options for attaching the base to surfaces.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>Pause the print job at the correct layer if you intend to embed magnets:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Insert your magnets before the layer covering thee 6 cavities is printed.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>Both the <code>lid</code> and <code>base</code> are easy to print; material and color are up to you, as is layer height and quality settings. The <code>stl</code> and <code>step</code> files for both are at the end of this post.
Should you want to make your own enclosure from scratch, I have also included the <code>step</code> files for the PoE dongle and PCB below.</p>
<h2 id="assemble">Assemble</h2>
<p>Assembly is relatively straightforward; its mostly integrating a few components into a simple 3d printed enclosure.</p>
<h3 id="pcb-1">PCB</h3>
<p>Solder the electronic components to the PCB. If omitting screw terminals for the stack light wires, do not solder them to the PCB yet!</p>
<p>I created the castellated pad footprint for the ESP32 module by hand and, in the version of the PCB pictured, didn&rsquo;t get the pads as close as they should be so there are some ugly solder blobs to compensate. The pads are correctly placed on the most recent PCB revision.</p>
<p>I have included two programming headers on the PCB to flash your firmware; one at <code>2.54mm</code> pitch and the other at <code>1.0mm</code> pitch, the latter of which is intended for use with <a href="https://www.aliexpress.com/item/4001122992446.html" target="_blank" rel="noopener noreffer">this</a> programmer.</p>
<p>There is a solder bridge labeled <code>EXT 3v3</code>; short this out if you intend to use the programmer to power the ESP32 module. Leave it alone if you plan to use external DC to power the device during programming.</p>
<p>I suggest programming the module <em>now</em> to verify that you&rsquo;ve built the PCB correctly and that your stack light works as expected.
Once you&rsquo;ve confirmed the electronics and software all work together, proceed to final assembly.</p>
<h2 id="everything-else">Everything else</h2>
<p>The various holes designed to receive screw threads are intentionally undersized. If you&rsquo;re not using self-tapping screws, you&rsquo;ll find it MUCH EASER to insert a <em>hot</em> screw for the first time.</p>
<p>With the screw on the end of the driver, hold the tip of the screw/threads under a flame for 5-10 seconds and then quickly rotate the screw into the plastic using a bit of extra &lsquo;pushing&rsquo; force.
Once the screw is fully inserted, allow it to fully cool (~5min) so the softened plastic has a chance to solidify around the screw threads.</p>
<p>The screws that hold the base plate to the body of the enclosure are meant to sit flush. Ensure that you screw them in fully before the plastic cools!</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        If the screws protrude even a fraction of a millimeter, the light can wobble and the magnetic attachment is weakened.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>While waiting for the screws to cool, cut the Ethernet and power leads from the PoE dongle down to size. Desolder the leads from the dongle, trim to be as short as possible and re-solder.</p>
<p>The less &lsquo;slack&rsquo; cable in the enclosure, the easier it will be to finish assembly!</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        I cut a few inches off the Ethernet cable and power leads so everything fits in the enclosure better.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>After the screws have cooled, ensure that the PCB sits flush against the mounts.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        PCB should be flush against the mounting posts.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>With all wires connected, lift the PoE dongle off of the base plate slightly and align the RJ45 jack with the square hole in the enclosure.</p>
<p>Make sure the side of the base plate opposite the side with the RJ45 jack is securely mounts into the body of the enclosure!</p>
<p>Gently press the remaining side of the base plate into the enclosure. As the base plate gets closer to flush with the body, the RJ45 jack should slowly come into alignment with the wall.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Use the plate as a lever to carefully push, then hold, the PoE dongle in place.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>When the base blate is completely installed into the body, the RJ45 jack should be flush with the external wall of the enclosure.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        RJ45 jack should be flush to the outer wall of the enclosure.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>Attach the base plate to the enclosure body with the 4 screws, attach silicon feet or a 3M command strip and then you&rsquo;re done!</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Translucent white lenses for much less ambiguity than the stack lights with colored lenses.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h2 id="files">Files</h2>
<p>All files below are licensed under the <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="noopener noreffer">Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)</a> license unless otherwise explicitly noted.</p>
<p><strong>None of the files below may be used for commercial purposes</strong></p>
<ul>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/poe-stack-light/images/complete/01_all_off.jpg">
                    
                </a>
                
                <figcaption>
                    <small>Translucent white lenses for much less ambiguity than the stack lights with colored lenses.</small>
                </figcaption>
                
            </figure>

        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/poe-stack-light/images/assemble/base_mounting_options.png">
                    
                </a>
                
                <figcaption>
                    <small>I wasn&#39;t sure where I&#39;d want to install this, so there are a few options for attaching the base to surfaces.</small>
                </figcaption>
                
            </figure>

        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/poe-stack-light/images/assemble/04_close.jpg">
                    
                </a>
                
                <figcaption>
                    <small>Use the plate as a lever to carefully push, then hold, the PoE dongle in place.</small>
                </figcaption>
                
            </figure>

        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/poe-stack-light/images/complete/02_all_on.jpg">
                    
                </a>
                
                <figcaption>
                    <small>The lights are much brighter than they appear in this picture; had to intentionally darken the image to prevent camera from blowing out the colors.</small>
                </figcaption>
                
            </figure>

        
    </li>
    
    <li>
        
            <a target="_blank" href="https://karlquinsland.com/poe-stack-light/files/easy_eda_gerber.zip">
                <i class="far fa-file-"></i>
                files/easy_eda_gerber.zip:
                
                
                <br>
                <small>sha1: d7686b0ad88a1686a5a11cb009632b53ca474c75</small>
                
            </a>
        
    </li>
    
    <li>
        
            <a target="_blank" href="https://karlquinsland.com/poe-stack-light/files/easy_eda_source.zip">
                <i class="far fa-file-"></i>
                files/easy_eda_source.zip:
                
                
                <br>
                <small>sha1: e05a00cdca9af94dd0e8d1d8f3aa998b75c14a08</small>
                
            </a>
        
    </li>
    
    <li>
        
            <a target="_blank" href="https://karlquinsland.com/poe-stack-light/files/enclosure-lid-m1v2.stl">
                <i class="far fa-file-code"></i>
                files/enclosure-lid-m1v2.stl:
                
                <small style="font-family:'Lucida Console', monospace">stl</small> <small>file</small>
                
                
                <br>
                <small>sha1: 3870a674d9cf08bf26e3607e42ee766e9816ac6c</small>
                
            </a>
        
    </li>
    
    <li>
        
            <a target="_blank" href="https://karlquinsland.com/poe-stack-light/files/enclosure-plate-m1v2.stl">
                <i class="far fa-file-code"></i>
                files/enclosure-plate-m1v2.stl:
                
                <small style="font-family:'Lucida Console', monospace">stl</small> <small>file</small>
                
                
                <br>
                <small>sha1: 8f90b54be2a798cf87bc6ca4fc118b82669e0668</small>
                
            </a>
        
    </li>
    
    <li>
        
            <a target="_blank" href="https://karlquinsland.com/poe-stack-light/files/esphome_confg.yaml">
                <i class="far fa-file-code"></i>
                files/esphome_confg.yaml:
                
                <small style="font-family:'Lucida Console', monospace">yaml</small> <small>file</small>
                
                
                <br>
                <small>sha1: aa0076b7bee08f09568536463c8794f15a2f59b2</small>
                
            </a>
        
    </li>
    
    <li>
        
            <a target="_blank" href="https://karlquinsland.com/poe-stack-light/files/pcb.step">
                <i class="far fa-file-code"></i>
                files/pcb.step:
                
                <small style="font-family:'Lucida Console', monospace">step</small> <small>file</small>
                
                
                <br>
                <small>sha1: e212f3cd3d90a639e6518b7d11bc5cc20df09b67</small>
                
            </a>
        
    </li>
    
    <li>
        
            <a target="_blank" href="https://karlquinsland.com/poe-stack-light/files/poe-dongle.step">
                <i class="far fa-file-code"></i>
                files/poe-dongle.step:
                
                <small style="font-family:'Lucida Console', monospace">step</small> <small>file</small>
                
                
                <br>
                <small>sha1: a698c249d89f2ab2c981427df49620cb09ce5f66</small>
                
            </a>
        
    </li>
    
    <li>
        
            <a target="_blank" href="https://karlquinsland.com/poe-stack-light/files/stack-light-base.step">
                <i class="far fa-file-code"></i>
                files/stack-light-base.step:
                
                <small style="font-family:'Lucida Console', monospace">step</small> <small>file</small>
                
                
                <br>
                <small>sha1: 3c3d0d6162a985b4f09d0f9a58fdacb3f08beb78</small>
                
            </a>
        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/poe-stack-light/images/assemble/00_flush_screws.jpg">
                    
                </a>
                
                <figcaption>
                    <small>If the screws protrude even a fraction of a millimeter, the light can wobble and the magnetic attachment is weakened.</small>
                </figcaption>
                
            </figure>

        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/poe-stack-light/images/home-assistant.png">
                    
                </a>
                
                <figcaption>
                    <small>Stack light is controlled via MQTT making it easy to control from Home Assistant or any other program that can speak MQTT.</small>
                </figcaption>
                
            </figure>

        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/poe-stack-light/images/assemble/02_pcb_attached.jpg">
                    
                </a>
                
                <figcaption>
                    <small>PCB should be flush against the mounting posts.</small>
                </figcaption>
                
            </figure>

        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/poe-stack-light/images/complete/00_plugged_in.jpg">
                    
                </a>
                
                <figcaption>
                    <small>RJ45 jack should be flush to the outer wall of the enclosure.</small>
                </figcaption>
                
            </figure>

        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/poe-stack-light/images/assemble/01_prep.jpg">
                    
                </a>
                
                <figcaption>
                    <small>About to start melting threads into the 3D printed parts.</small>
                </figcaption>
                
            </figure>

        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/poe-stack-light/images/slicer.png">
                    
                </a>
                
                <figcaption>
                    <small>Insert your magnets before the layer covering thee 6 cavities is printed.</small>
                </figcaption>
                
            </figure>

        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/poe-stack-light/images/assemble/03_wire.jpg">
                    
                </a>
                
                <figcaption>
                    <small>I cut a few inches off the Ethernet cable and power leads so everything fits in the enclosure better.</small>
                </figcaption>
                
            </figure>

        
    </li>
    
</ul>

]]></description></item><item><title>Unbrick a rievtech PLC after failed firmware upgrade</title><link>https://karlquinsland.com/unbrick-rievtech-plc-failed-firmware-update/</link><pubDate>Wed, 13 Jan 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/unbrick-rievtech-plc-failed-firmware-update/</guid><description><![CDATA[<p>This is &ldquo;reference&rdquo; post for anybody else that happens to have this same very specific problem.</p>
<p>I was looking for a way to incorporate some of the <em>many</em> cheap / industrial grade sensors from AliExpress with Home Assistant.
Long story short: almost everything electronic in the industrial space uses <a href="https://modbus.org/" target="_blank" rel="noopener noreffer">Modbus</a> to communicate, typically with a <a href="https://en.wikipedia.org/wiki/Programmable_logic_controller" target="_blank" rel="noopener noreffer">PLC</a>. While Home Assistant <a href="https://www.home-assistant.io/integrations/modbus/" target="_blank" rel="noopener noreffer">does have support</a> for the Modbus protocol, but wanted to use a PLC that could manage the sensors directly and expose the values over the network in a more standard format; MQTT.</p>
<p>Turns out, quite a few PLCs come with network interfaces and can speak MQTT now!</p>
<p>So I picked up a <a href="https://www.rievtech.com/PR-18DC-DAI-R-N-pd72286477.html" target="_blank" rel="noopener noreffer"><code>PR-18DC-DAI-R-N</code></a> PLC from the &lsquo;budget friendly&rsquo; supplier rievtech. The PLC was put into service in 2018 and never updated; the firmware version it was running was almost certainly below <code>150</code> but I didn&rsquo;t record the specific version.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Hoping to squash a small bug, I chose to upgrade the firmware to version <code>152</code> which was released at the end of 2020 and somehow managed to brick the device ü§¶.</p>
<p>I am <em>speculating</em> but it looks like something significant changed around firmware version <code>150</code>. If you try to update a device from a version prior to <code>150</code> - like I did - something in memory is not properly migrated to the format required by versions after <code>150</code> and this causes the update process to fail before completion:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        SO close!
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>That failure message came from the <a href="https://www.rievtech.com/phoenix/admin/download?fileId=jGUKpAvYWcQE&amp;dp=GvUApKfKKUAU" target="_blank" rel="noopener noreffer">Update_Net_V152_20201205.zip</a> file which is meant for the ethernet equipped PLCs in the <code>PR</code> line. The failure apparently soft bricks the PLC.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Blank white screen. Non responsive buttons, Occasional blinking Ethernet lights. Fun! üôÉ
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>The PLC seemed &lsquo;alive&rsquo; as I could still see <code>arp</code> packets coming from it&rsquo;s ethernet port on boot and the web server seemed to accept my connection but never return any data. Even after restarting the PLC, the firmware updater was able to open a new connection and flash the firmware&hellip; always failing at the same spot: 99.17%.</p>
<p>Clearly <em>something</em> is alive and well inside the PLC&hellip; If I can connect to whatever <em>is</em> running and convince that process to update the flash then I have a good shot to do &lsquo;solderless&rsquo; recovery. Absolute worst case, I buy another one and clone the flash memory from the working one onto the bricked one.</p>
<h2 id="recovery-process">Recovery process</h2>
<p>Turns out, their support team has a file ready to go for this exact problem! I guess I&rsquo;m not the first person. Really wish they&rsquo;d publish this file and/or procedure on their website. I could have recovered from my failure in minutes with a quick google search and saved myself a few hours of trouble shooting before drafting a support ticket&hellip; not to mention the days of waiting for a reply. Oh well. That&rsquo;s why <em>I&rsquo;m</em> documenting it.</p>
<p>I was given a 2.6MB file named <code>UpdateFail_PR-18DC-DAI-R-N_V150.zip</code>. After extracting, it looks a lot like their <em>regular</em> firmware update archives, just much smaller. I suspect that the archive is much smaller because it&rsquo;s only got flash images for a few affected models/devices. In any event, the archive comes with a <code>doc</code> file that I couldn&rsquo;t open and was able to eventually convert it to a <code>pdf</code> which is also attached to this post.</p>
<p>In short:</p>
<ul>
<li>Connect the PLC using their <a href="https://www.rievtech.com/USB-Cable-pd67130.html" target="_blank" rel="noopener noreffer">programming cable</a></li>
<li>Open the COM port and &lsquo;prepare&rsquo; the device. This takes only a few seconds</li>
<li>Click the update button. In my case, I got a failure telling me to `Please power off the PLC first, and then power on again!&quot;</li>
<li>Power cycle the PLC, keeping the update program and COM port open</li>
<li>Click <code>Start</code>. The process of flashing version <code>150</code> started and took several minutes to finish</li>
</ul>
<p>This left me with a <em>completely working</em> PLC ü•≥! I was able to access the web interface and use the LCD screen. I was <em>then</em> able to use the network update tool to the firmware version released recently; version <code>152</code>.</p>
<p>So there you go. If a failed network update leaves your <code>PR</code> series PLC in a mostly-not-working state, there is hope!</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Able to flash Version 152 w/o issue!
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h2 id="files">Files</h2>
<ul>
    
    <li>
        
            <a target="_blank" href="https://karlquinsland.com/unbrick-rievtech-plc-failed-firmware-update/files/How%20to%20update%20the%20hardware.doc.pdf">
                <i class="far fa-file-doc"></i>
                files/How to update the hardware.doc.pdf:
                
                <small style="font-family:'Lucida Console', monospace">pdf</small> <small>file</small>
                
                
                <br>
                <small>sha1(How to update the hardware.doc.pdf): 0b451b11938b58c384465f5bf350b2f133848649</small>
                
            </a>
        
    </li>
    
    <li>
        
            <a target="_blank" href="https://karlquinsland.com/unbrick-rievtech-plc-failed-firmware-update/files/UpdateFail_PR-18DC-DAI-R-N_V150.zip">
                <i class="far fa-file-archive"></i>
                files/UpdateFail_PR-18DC-DAI-R-N_V150.zip:
                
                <small style="font-family:'Lucida Console', monospace">zip</small> <small>file</small>
                
                
                <br>
                <small>sha1(UpdateFail_PR-18DC-DAI-R-N_V150.zip): 60c306b521cdb15589b0e36dc73df484c2117539</small>
                
            </a>
        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/unbrick-rievtech-plc-failed-firmware-update/images/plc-01.jpg">
                    
                </a>
                
                <figcaption>
                    <small>Blank white screen. Non responsive buttons, Occasional blinking Ethernet lights. Fun! üôÉ</small>
                </figcaption>
                
            </figure>

        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/unbrick-rievtech-plc-failed-firmware-update/images/plc-00.jpg">
                    
                </a>
                
                
            </figure>

        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/unbrick-rievtech-plc-failed-firmware-update/images/recovery-01.png">
                    
                </a>
                
                <figcaption>
                    <small>Able to flash Version 152 w/o issue!</small>
                </figcaption>
                
            </figure>

        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/unbrick-rievtech-plc-failed-firmware-update/images/update-01.png">
                    
                </a>
                
                <figcaption>
                    <small>SO close!</small>
                </figcaption>
                
            </figure>

        
    </li>
    
</ul>

]]></description></item></channel></rss>