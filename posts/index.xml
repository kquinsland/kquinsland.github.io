<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>All Posts - karl</title><link>https://karlquinsland.com/posts/</link><description>All Posts | karl</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 18 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://karlquinsland.com/posts/" rel="self" type="application/rss+xml"/><item><title>ESPHome on the Yeelight Monitor Light Bar Pro</title><link>https://karlquinsland.com/yeelight-monitor-lamp-teardown-esphome/</link><pubDate>Mon, 18 Sep 2023 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/yeelight-monitor-lamp-teardown-esphome/</guid><description><![CDATA[<h1 id="yeelight-light-bar-pro-yltd003-teardown">Yeelight Light Bar Pro (YLTD003) Teardown</h1>
<p>Monitor-top light bars are wonderful for reducing eye strain and fatigue and the effect is even better with a bias light behind the monitor.
Enter the <a href="https://www.aliexpress.us/item/3256801709519092.html" target="_blank" rel="noopener noreffer">Yeelight Light Bar Pro (YLTD003)</a>.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        YeeLight marketing photo from AliExpress listing. The background wash light really does help reduce eye strain and fatigue.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>It appears to be a pretty straightforward clone of the Xaomi MJGJD02YL that I&rsquo;ve torn down <a href="/xaomi-s1-monitor-lamp-teardown-and-tasmota/" rel="">previously</a> but with some welcome changes internally.</p>
<h2 id="unbox">Unbox</h2>
<p>Before teardown, quick look at the box.
The shipping damage is just part of the Ali Express experience!</p>
<p><figure >

    
        
    

    

    <figcaption>
        
        <p>
        The box isn&#39;t anything to write home about.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Neatly packed, for what it&#39;s worth.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>

</p>
<p>Not only does it look a lot like the Xaomi lamp, it&rsquo;s dimensionally similar, too.
It&rsquo;s 100% compatible with the mounting bracket that Xaomi shipped with their lamp.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Xaomi desk lamp on top, Yeelight on bottom.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h2 id="teardown">Teardown</h2>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Tip<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>I am going to run through a <em>complete</em> teardown.</p>
<p>You do not need to <strong>completely</strong> disassemble the lamp to replace the ESP8266 with an ESP32.</p>
<p>To access the ESP8266 based module controlling the lamp, you really only need to remove the larger of the two end caps.
From there, you will have a few inches of ribbon cable to work with. If you&rsquo;re careful, you can replace the ESP8266 with an ESP32 without removing the main PCB from the tube but you may find that taking the main PCB out of the tube makes it easier to work with.</p>
</div>
        </div>
    </div>
<p>Just like with the Xaomi lamp, you will start by removing the sticker covering the small metal protrusion that holds the pogo pins and mates with the power supply &ldquo;dock&rdquo;.
The pogo pins are one of the two features that keep the main PCB from sliding out of the tube.</p>
<p>Discard the sicker and put the metal piece and the pogo pin assembly somewhere safe.
This step is not pictured.</p>
<p>Next, note that Yeelight bar has a larger plastic cap on the left relative to the one on the right.
Not only does this cap have a grip feature moulded in, it&rsquo;s also secured to the tube with a lot less glue than the Xaomi lamp; just grip and twist to remove this cap.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The cap is trivial to remove.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>After the end cap is removed, you will be able to see inside the tube.
There&rsquo;s not much room, but the micro controller is on it&rsquo;s own little PCB attached to the main PCB with ~50mm of ribbon cable.
If you&rsquo;re careful, this is all the disassembly you need to do to access the ESP8266 module.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        There&#39;s not much room to work with. Left most is the cw/ww led strip and reflector. Middle is ribbon cable connecting leds to main pcb. Right most is the ESP8266 module.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>As of writing, I could not find any information about which pins on the module are used for programming.
I was under a bit of time pressure and wanted to use a more &ldquo;future proof&rdquo; ESP32 module anyways so I didn&rsquo;t bother trying to program the ESP8266 module.</p>
<p>I opted to replace it with an ESP32 module that I had on hand.</p>
<p><figure >

    
        
    

    

    <figcaption>
        
        <p>
        It&#39;s clearly an ESP8266 module but the pinout/form-factor are unusual.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>

</p>
<p>If you want to extract the main PCB from the tube, you will notice that there&rsquo;s still <em>something</em> holding it in place.
That something is the plastic lens closest to the now removed end cap.</p>
<p>Using a small flat pry tool or razor blade, you can carefully pry the lens out of the tube.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Note the plastic lense that used to cover the RGB LEDs.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>With the plastic lense out of the way, the main PCB and the cw/ww light ribbon and reflector can be slid out of the tube.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        There&#39;s not much to it, really. Tube, big PCB and small ESP8266 module on a ribbon cable.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>That&rsquo;s really all there is to opening up the lamp.</p>
<p>Below a few more photos of the internals.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        A look at the power regulation and LED drive circuitry.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        A closer look at the chips for the remote control puck.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        A closer look at the power regulation circuitry.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        This is what happens when you are impatient and set the hotplate to an aggressive temperature.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h2 id="esp32-retrofit">ESP32 Retrofit</h2>
<p>Fortunately, each wire connecting the ESP8266 module to the main PCB is clearly labeled.</p>
<table>
<thead>
<tr>
<th>Pin</th>
<th>Label</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>GND</code></td>
<td>Ground for the ESP module</td>
</tr>
<tr>
<td>2</td>
<td><code>3v3</code></td>
<td>Power for the ESP module</td>
</tr>
<tr>
<td>3</td>
<td><code>SCL</code></td>
<td>I2C. (probably, see note below)</td>
</tr>
<tr>
<td>4</td>
<td><code>SDA</code></td>
<td>I2C. (probably, see note below)</td>
</tr>
<tr>
<td>5</td>
<td><code>RGB</code></td>
<td>Standard neopixel data bus</td>
</tr>
<tr>
<td>6</td>
<td><code>C</code></td>
<td>PWM signal for cold white channel</td>
</tr>
<tr>
<td>7</td>
<td><code>EN</code></td>
<td>Master enable/disable for all light output</td>
</tr>
<tr>
<td>8</td>
<td><code>W</code></td>
<td>PWM signal for warm white channel</td>
</tr>
</tbody>
</table>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>I2C, probably<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">99% sure this is I2C for communications to the micro controller handing communication with the remote control puck.
There&rsquo;s nothing else on the PCB that would need I2C, but I haven&rsquo;t bothered to verify this&hellip; hence 99% sure.</div>
        </div>
    </div>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        I am eternally grateful for every PCB designer that bothers with clear silkscreen labels.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>To drive the LEDs, we only need 4 GPIOs. Two for PWM channels and another two for master output enable and neopixels.</p>
<p>This makes it <em>trivial</em> to replace the ESP8266 based module with an ESP32.
The only catch is that the ESP32 module has to be <em>narrow</em> (if you want to fit it inside the tube).
If you don&rsquo;t care about that, you can use any ESP32 module you have on hand but you&rsquo;ll need to design/make a new enclosure for it.</p>
<p>I had a few of the incredibly tiny <a href="https://github.com/01Space/ESP32-C3-0.42LCD" target="_blank" rel="noopener noreffer">ESP32-C3-0.42LCD</a> modules on hand, so I used one and it <em>barely</em> fit:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Tube is quite narrow and the ESP32 module takes up almost all of the available space.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>All in all, you want to make sure the module is no more than ~20mm wide and probably not much longer than that either.
To make my life easier in the future, I soldered the ESP32 module to the main PCB with AWS30 wires about ~100mm long. You can see the colored wires in the photo above.</p>
<p>I was barely able to fit everything back into the tube.
You should probably use wires a bit shorter if you can.</p>
<p>In any case, the extra bulk from the wires and the ESP32 module meant that the OEM end cap would not fit back on the tube without some modifications.</p>
<p>Rather than play a game of &ldquo;cut some more plastic away and see if it fits yet&rdquo;, I decided to just model a new end cap in Fusion 360.
This replacement cap specifically does not have any features that extend deep into the tube so there&rsquo;s no risk of it interfering with the ESP32 module.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Suggested print orientation. Choose resolution, material and color to suit your needs.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>You can download <code>endcap.step</code> file <a href="/yeelight-monitor-lamp-teardown-esphome/models/endcap.step" rel="">here</a>.
Print it in whatever material and color you want but be mindful of dimensional accuracy; the end cap is meant to be press-fit into the tube.</p>
<p>If you&rsquo;re confident that you&rsquo;ll never need to access the ESP32 module again, glue the end cap in place.</p>
<h3 id="esphome">ESPHome</h3>
<p>Here&rsquo;s a simple ESPHome config for the device.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">esphome</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Will boot loop w/o this when using the ESP-IDF and the C3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">platformio_options</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">board_build.flash_mode</span><span class="p">:</span><span class="w"> </span><span class="l">dio</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">esp32</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># There is no platform.io board for ESP32-C3-0.42LCD so use generic</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">board</span><span class="p">:</span><span class="w"> </span><span class="l">esp32-c3-devkitm-1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">framework</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">esp-idf</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Enable logging</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">logger</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">level</span><span class="p">:</span><span class="w"> </span><span class="l">INFO</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Requires ESP-IDF</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">hardware_uart</span><span class="p">:</span><span class="w"> </span><span class="l">USB_SERIAL_JTAG</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">light</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Primary&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">cwww</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">leds</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cold_white</span><span class="p">:</span><span class="w"> </span><span class="l">out_pwm_cw</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">warm_white</span><span class="p">:</span><span class="w"> </span><span class="l">out_pwm_ww</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Marketing photos on ali express listing show a range of 2700K to 6500K</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">warm_white_color_temperature</span><span class="p">:</span><span class="w"> </span><span class="l">2700K</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cold_white_color_temperature</span><span class="p">:</span><span class="w"> </span><span class="l">6500K</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># With WW/CW on full, was drawing about 2.6-2.8A.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># The RGB added another .5A or so.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># The cw/ww strip is on a metal reflector which does mate with the aluminum case but</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">#    i&#39;m not sure how much heat transfer there is.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">constant_brightness</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># See: https://esphome.io/components/light/esp32_rmt_led_strip</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Ambient&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">esp32_rmt_led_strip</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">pixels</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO10</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">chipset</span><span class="p">:</span><span class="w"> </span><span class="l">WS2812</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">rmt_channel</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">rgb_order</span><span class="p">:</span><span class="w"> </span><span class="l">GRB</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># There are two banks of 20</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">num_leds</span><span class="p">:</span><span class="w"> </span><span class="m">40</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">output</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">out_pwm_ww</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">ledc</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO08</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Any lower than this and the LEDs don&#39;t turn on until ~ 15% or so</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">min_power</span><span class="p">:</span><span class="w"> </span><span class="m">0.05</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># But when we hit off, we want it to be off</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">zero_means_zero</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">frequency</span><span class="p">:</span><span class="w"> </span><span class="l">2441Hz</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">out_pwm_cw</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">ledc</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO07</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">zero_means_zero</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">min_power</span><span class="p">:</span><span class="w"> </span><span class="m">0.05</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">frequency</span><span class="p">:</span><span class="w"> </span><span class="l">2441Hz</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># PWM and RGB drivers can be enabled/disabled by a master on/off</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">switch</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Master Output Enable&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">sw_out_en</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">gpio</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO06</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="pcbic-markings">PCB/IC markings</h2>
<p>AKA the strings that I wish google had indexed when I was first looking for this info.</p>
<p>The front of the ESP8266 module is marked with:</p>
<ul>
<li><code>YEELIGHT</code></li>
<li><code>ESP8266NV1.0</code></li>
<li><code>LibraPro</code></li>
<li><code>WF-E266-RPY2</code></li>
<li><code>PN: 21500000028</code></li>
<li><code>CMIT ID: 2020DP12740</code></li>
</ul>
<p>The rear of the ESP8266 module is marked with:</p>
<ul>
<li><code>94V-0</code></li>
<li><code>S Y22M02D25</code></li>
<li><code>JU17.820.0767</code></li>
</ul>
<p>The main PCB is populated with:</p>
<ul>
<li><a href="https://wiki.telink-semi.cn/doc/ds/DS_TLSR8368-E_Datasheet%20for%20Telink%202.4GHz%20RF%20System-On-Chip%20Solution%20TLSR8368.pdf" target="_blank" rel="noopener noreffer"><code>TLSR8368EP16</code></a>: 2.4GHz RF System-On-Chip Solution for remote control puck</li>
<li><a href="https://datasheet.lcsc.com/lcsc/1810011020_FUDAN-MICRO-FM24C02C-SO-T-G_C189501.pdf" target="_blank" rel="noopener noreffer"><code>FM24C02C</code></a>: Flash rom for the <code>TLSR83</code>. I didn&rsquo;t bother to desolder and dump this chip.</li>
<li>3x ICs marked with <code>WRFAA</code> in a <code>2x5 SON</code> package. I can&rsquo;t find any info on these chips, but given that there are three LED channels and their proximity to power regulation circuitry, I assume that they are LED drivers.</li>
</ul>
]]></description></item><item><title>Solum 2.2 inch Electronic Shelf Label Teardown</title><link>https://karlquinsland.com/solum-el022hwra-teardown/</link><pubDate>Thu, 20 Jul 2023 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/solum-el022hwra-teardown/</guid><description><![CDATA[<h1 id="quick-peek-inside-the-el029f3wra">Quick peek inside the EL029F3WRA</h1>
<p>In light of the recent news that the <a href="https://github.com/jjwbruijn/OpenEPaperLink" target="_blank" rel="noopener noreffer">OpenEPaperLink</a> firmware has been <a href="https://www.youtube.com/watch?v=Ph5BXFcugC4" target="_blank" rel="noopener noreffer">ported to the <code>nRF52811</code></a> series of chips, I decided to take a look inside the Solum EL029F3WRA to see if it was a viable candidate for a project.</p>
<p>As it turns out, it is very similar to the <a href="https://github.com/jjwbruijn/OpenEPaperLink/wiki/2.9%22-EL029H3WRA" target="_blank" rel="noopener noreffer">2.9 inch</a> tags.
I hope to soon have a simple CAD model of the ESL which I&rsquo;ll use to model a basic pogo-pin programming jig for this particular ESL.</p>
<hr>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The rear of the ESL is clipped in and can be removed with a plastic spudger.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        All programming pins are accessible from the rear once the batteries are removed.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Batteries are held in with moulded plastic clips.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Side profile of the ESL.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The outer front panel is glued in place. Careful prying was enough to remove it.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Unfortunately, there&#39;s more glue holding the eInk panel to the PCB and the whole PCB assembly in the case.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>Warning<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>DO NOT DO THIS.</p>
<p>The PCB <strong>can</strong> be pried out of the case but doing so will likely damage the eInk panel unless you apply pressure equally from multiple corners.</p>
<p>The glass on the eInk panel is very thin and far less flexible than the PCB.
Note the crack&hellip;</p>
</div>
        </div>
    </div>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The residue is not there by default. Since I had already ruined the panel, I was testing the effect of different solvents on the panel hoping to find one that would dissolve the glue without damaging the panel.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The eInk panel is attached to the PCB with a thin layer of glue. The same tool/technique used to remove the front panel can be used to remove the eInk panel.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p><figure >

    
        
    

    

    <figcaption>
        
        <p>
        PCB as seen from the rear of the ESL.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        A close up look at the micro and related pcb traces.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Close up look at the second half of the PCB.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Closeup of the side of the PCB normally covered by the eInk panel. Note the thin layer of glue around the edge of the PCB used to hold the eInk panel in place.
        
            
        
        </p> 
    </figcaption>
    
</figure>

</p>
]]></description></item><item><title>Roborock S8 Pro Ultra Teardown</title><link>https://karlquinsland.com/roborock-s8-pro-ultra-dock-teardown/</link><pubDate>Sat, 06 May 2023 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/roborock-s8-pro-ultra-dock-teardown/</guid><description><![CDATA[<h1 id="roborock-s8-teardown">Roborock S8 teardown</h1>
<p>I recently acquired the new S8 from Roborock to replace my rapidly failing roomba.</p>
<p>While I am patiently waiting for <a href="https://dontvacuum.me/" target="_blank" rel="noopener noreffer">Dennis</a> and <a href="https://github.com/Hypfer" target="_blank" rel="noopener noreffer">Hypfer</a> to add <a href="https://github.com/Hypfer/Valetudo" target="_blank" rel="noopener noreffer">Valetudo</a> support, I thought I&rsquo;d have a peek inside to see if this model will be any more serviceable or maintainable than my current vacuum.</p>
<p>From what I&rsquo;m told, the S7 and the S8 are supposed to be pretty similar so here&rsquo;s to hoping that it&rsquo;s not too much more of a wait.</p>
<p>In the mean time this post is going &ldquo;live&rdquo; with photos of the docking station internals and a few photos of the vacuum.
I ran out of time to finish the S8 teardown but I&rsquo;ll update this post when I have made progress.
Assuming the S8 is similar to the S7, I imagine that the procedure and internals will be similar.</p>
<h2 id="the-dock">The dock</h2>
<p>Fortunately, it&rsquo;s pretty easy to open the <em>huge</em> charging station/dock up.
Really, you just need a single philips screwdriver for the ~10 screws on the rear.
There is one sticker covering a screw on the rear but it&rsquo;s not the &ldquo;tamper-evident&rdquo; kind so it should be easy enough to replace if needed.</p>
<hr>
<p>Excess cable slack can be looped around the rear of the docking station to minimize errant cords.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Note the white sticker covering the screw in the middle on the bottom.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>Near the mains input is a simple USB-C port.
<code>dmesg</code> doesn&rsquo;t show any signs of life on the port both with and without the mains cable plugged in. I have not yet tried with the robot docked so there may be some simple handshake that&rsquo;s needed before this port becomes interesting.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>With screws removed, the rear panel lifts off to reveal the internals.
The overall layout seems logical and there&rsquo;s lots of room between components which is nice to see.
Each component is well labeled secured to the main body with standard screws and Zip-Ties.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>In addition to the small features molded into the body for cable management, the cables to the components that move are protected with an easy to remove cable chain.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>The strong vaccuum motor that empties the mobile dustbin into the larger bin is powered directly via mains but isn&rsquo;t easily accessible.
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>

</p>
<p>The mains PSU is nothing special to write home about.
There is a low-voltage connection right next to the mains cabling that heads down to the main &ldquo;evacuation&rdquo; suction motor but there is no obvious relay.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Here&rsquo;s a closeup of the main control board for the docking station.</p>
<p>Each of the connectors around the edge is a different size/number of pins os it&rsquo;s virtually impossible to plug the wrong cable in to the wrong port - nice!</p>
<p>The conformal coating does obscure component IDs and traces, but you can still get a high-level idea of the topology.
More than likely, all sensors and actuators are controlled by the <a href="https://www.nationstech.com/en/N32G455MCUs/" target="_blank" rel="noopener noreffer">Nation N32G455</a> and the ESP32 is (probably) just there for communicating status to the robot and/or cloud.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>From this angle it&rsquo;s a bit easier to see where the USB-C traces go but since the ESP32 module is BGA packaged and everything is conformally coated, I skipped the tedious work of trying to beep things out.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        At least the conformal coating is pretty easy to rub off the IC.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h2 id="the-vacuum">The vacuum</h2>
<p>More photos coming in a later update, but here&rsquo;s what I have so far.</p>
<p><figure >

    
        
    

    

    <figcaption>
        
        <p>
        It would be better if Roborock provided tools to verify this claim, but at least they&#39;re trying to address consumer privacy concerns.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Like with the S7, the panel surrounding the LIDAR puck can be pried off.
        
            
        
        </p> 
    </figcaption>
    
</figure>

</p>
<p>Nice to see that the labeling for which roller goes into which position is molding into the robot body for ultimate wear-resistance.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>And here&rsquo;s a shot of the LIDAR pcb.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>As for getting into the rest of the robot, it&rsquo;s not that difficult.
Standard &ldquo;keep track of all the screws and take photos at each step&rdquo; advice applies here.</p>
<p>You can follow the the <a href="https://www.youtube.com/watch?v=TKMD-VOvILc" target="_blank" rel="noopener noreffer">existing S7 teardown guides</a> for the initial steps but once you remove the front bumper just look for screws that hold the top lid onto the body of the robot.
There are two obvious ones, two next to the castor wheel and a few more hiding under the mop pad.
With those removed, the lid slides off pretty easily to reveal the PCB:</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>There&rsquo;s a few interesting things to note here:</p>
<ul>
<li>
<p>The roller brush assembly and mop head are lifted up via small steel cables. You can see the actuator motor for the main brush assembly just off of the top left corner of the PCB. The steel cable runs through the white plastic guides which route it around other internal components. The &ldquo;space claim&rdquo; portion of this design must have been pretty interesting :).</p>
</li>
<li>
<p>There are only two small locating features for the PCB. When installing the PCB back in to the chassis start with the small plastic peg between the screw and the micro USB port. If you seat this corner of the PCB first and everything else should fall into place nicely.</p>
</li>
</ul>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>The conformal coating is annoying but here&rsquo;s the big players:</p>
<ul>
<li>
<p>An Allwinner <a href="https://github.com/mangopi-sbc/aw-doc/blob/main/A133-MR813-R818/MR813_Datasheet_V1.6.pdf" target="_blank" rel="noopener noreffer"><code>MR813</code></a> runs the show.</p>
</li>
<li>
<p>Samsung <a href="https://semiconductor.samsung.com/estorage/emmc/emmc-5-1/klm4g1fete-b041/" target="_blank" rel="noopener noreffer"><code>KLM4G1</code></a> for RAM.</p>
</li>
<li>
<p>A GigaDevice <a href="https://item.szlcsc.com/3292467.html#pdf-view" target="_blank" rel="noopener noreffer"><code>GDQ2BFAA-CE</code></a> 4Gb flash chip for OS storage.</p>
</li>
<li>
<p>A <a href="https://www.sekorm.com/doc/2446002.html" target="_blank" rel="noopener noreffer"><code>GDQ2BFAA</code></a> handles everything low level.</p>
</li>
<li>
<p>WiFi provided by <a href="https://www.realtek.com/en/products/communications-network-ics/item/rtl8189ftv" target="_blank" rel="noopener noreffer"><code>RTL8189FTV</code></a>.</p>
</li>
</ul>
]]></description></item><item><title>ESPHome on dingtian-tech relay modules</title><link>https://karlquinsland.com/dingtian-2ch-relay-with-esphome/</link><pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/dingtian-2ch-relay-with-esphome/</guid><description><![CDATA[<!-- markdownlint-disable-file MD002 -->
<p>This is another one of those quick &ldquo;I wish that was easier to find when I was googling it&rdquo; posts.</p>
<p>For a project, I needed a small relay module to switch a few mains loads.
I chose this generic looking relay module from AliExpress because it was powered by an ESP32 and featured ethernet connectivity.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>AliExpress is full of generic looking relay modules but <a href="https://www.aliexpress.us/item/2255800812755068.html" target="_blank" rel="noopener noreffer">this</a> one is branded <a href="https://www.dingtian-tech.com/en_us/relay2.html" target="_blank" rel="noopener noreffer"><code>dingtian-tech</code></a></p>
<p>The device came with an obvious programming header right next to the ESP32 so I thought it would be a 5 minute job to flash Tasmota and <a href="https://tasmota.github.io/docs/Configuration-Procedure-for-New-Devices/" target="_blank" rel="noopener noreffer">probe the GPIOs</a>.</p>
<!-- markdownlint-disable-line MD036 -->
<p><strong>N.O.P.E.</strong></p>
<p>This post is a super condensed version of my notes that I&rsquo;m posting in the off chance that they&rsquo;re useful for somebody else.</p>
<h2 id="esp32-secure-boot">ESP32 Secure Boot</h2>
<p>No matter what I did to flash the ESP32 module, it would always boot loop with output like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">rst:0x1 (POWERON_RESET),boot:0x7 (DOWNLOAD_BOOT(UART0/UART1/SDIO_REI_REO_V2))␍␊
</span></span><span class="line"><span class="cl">waiting for download␍␊
</span></span><span class="line"><span class="cl">&lt;break&gt;
</span></span><span class="line"><span class="cl">&lt;0xff&gt;ets Jun  8 2016 00:22:57␍␊
</span></span></code></pre></td></tr></table>
</div>
</div><p>I knew that I didn&rsquo;t brick anything because the ESP would boot right up as soon as i re-flashed the original dump.</p>
<p>Turns out, there&rsquo;s <a href="https://github.com/espressif/esp-idf/issues/113" target="_blank" rel="noopener noreffer">a few reasons</a> why this might happen but in this case, it&rsquo;s because <a href="https://www.esp32.com/viewtopic.php?f=12&amp;t=19176&amp;start=10" target="_blank" rel="noopener noreffer">secure boot was enabled</a>.</p>
<p>Because at least a decent chunk of the flash dump I took was in plain text, I didn&rsquo;t thing that there was any flash protection in place but sure enough, at least some of the protection features have been enabled:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ espefuse.py summary
</span></span><span class="line"><span class="cl">Connecting...
</span></span><span class="line"><span class="cl">Detecting chip type... Unsupported detection protocol, switching and trying again...
</span></span><span class="line"><span class="cl">Connecting...
</span></span><span class="line"><span class="cl">Detecting chip type... ESP32
</span></span><span class="line"><span class="cl">espefuse.py v3.3.1
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">===</span> Run <span class="s2">&#34;summary&#34;</span> <span class="nb">command</span> <span class="o">===</span>
</span></span><span class="line"><span class="cl">EFUSE_NAME <span class="o">(</span>Block<span class="o">)</span> <span class="nv">Description</span>  <span class="o">=</span> <span class="o">[</span>Meaningful Value<span class="o">]</span> <span class="o">[</span>Readable/Writeable<span class="o">]</span> <span class="o">(</span>Hex Value<span class="o">)</span>
</span></span><span class="line"><span class="cl">----------------------------------------------------------------------------------------
</span></span><span class="line"><span class="cl">Calibration fuses:
</span></span><span class="line"><span class="cl">BLK3_PART_RESERVE <span class="o">(</span>BLOCK0<span class="o">)</span>:                        BLOCK3 partially served <span class="k">for</span> ADC calibration <span class="nv">data</span>   <span class="o">=</span> False R/W <span class="o">(</span>0b0<span class="o">)</span>
</span></span><span class="line"><span class="cl">ADC_VREF <span class="o">(</span>BLOCK0<span class="o">)</span>:                                 Voltage reference <span class="nv">calibration</span>                      <span class="o">=</span> <span class="m">1114</span> R/W <span class="o">(</span>0b00010<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Config fuses:
</span></span><span class="line"><span class="cl">XPD_SDIO_FORCE <span class="o">(</span>BLOCK0<span class="o">)</span>:                           Ignore MTDI pin <span class="o">(</span>GPIO12<span class="o">)</span> <span class="k">for</span> VDD_SDIO on <span class="nv">reset</span>     <span class="o">=</span> False R/W <span class="o">(</span>0b0<span class="o">)</span>
</span></span><span class="line"><span class="cl">XPD_SDIO_REG <span class="o">(</span>BLOCK0<span class="o">)</span>:                             If XPD_SDIO_FORCE, <span class="nb">enable</span> VDD_SDIO reg on <span class="nv">reset</span>    <span class="o">=</span> False R/W <span class="o">(</span>0b0<span class="o">)</span>
</span></span><span class="line"><span class="cl">XPD_SDIO_TIEH <span class="o">(</span>BLOCK0<span class="o">)</span>:                            If XPD_SDIO_FORCE <span class="p">&amp;</span> <span class="nv">XPD_SDIO_REG</span>                   <span class="o">=</span> 1.8V R/W <span class="o">(</span>0b0<span class="o">)</span>
</span></span><span class="line"><span class="cl">CLK8M_FREQ <span class="o">(</span>BLOCK0<span class="o">)</span>:                               8MHz clock freq <span class="nv">override</span>                           <span class="o">=</span> <span class="m">54</span> R/W <span class="o">(</span>0x36<span class="o">)</span>
</span></span><span class="line"><span class="cl">SPI_PAD_CONFIG_CLK <span class="o">(</span>BLOCK0<span class="o">)</span>:                       Override SD_CLK pad <span class="o">(</span>GPIO6/SPICLK<span class="o">)</span>                 <span class="o">=</span> <span class="m">0</span> R/W <span class="o">(</span>0b00000<span class="o">)</span>
</span></span><span class="line"><span class="cl">SPI_PAD_CONFIG_Q <span class="o">(</span>BLOCK0<span class="o">)</span>:                         Override SD_DATA_0 pad <span class="o">(</span>GPIO7/SPIQ<span class="o">)</span>                <span class="o">=</span> <span class="m">0</span> R/W <span class="o">(</span>0b00000<span class="o">)</span>
</span></span><span class="line"><span class="cl">SPI_PAD_CONFIG_D <span class="o">(</span>BLOCK0<span class="o">)</span>:                         Override SD_DATA_1 pad <span class="o">(</span>GPIO8/SPID<span class="o">)</span>                <span class="o">=</span> <span class="m">0</span> R/W <span class="o">(</span>0b00000<span class="o">)</span>
</span></span><span class="line"><span class="cl">SPI_PAD_CONFIG_HD <span class="o">(</span>BLOCK0<span class="o">)</span>:                        Override SD_DATA_2 pad <span class="o">(</span>GPIO9/SPIHD<span class="o">)</span>               <span class="o">=</span> <span class="m">0</span> R/W <span class="o">(</span>0b00000<span class="o">)</span>
</span></span><span class="line"><span class="cl">SPI_PAD_CONFIG_CS0 <span class="o">(</span>BLOCK0<span class="o">)</span>:                       Override SD_CMD pad <span class="o">(</span>GPIO11/SPICS0<span class="o">)</span>                <span class="o">=</span> <span class="m">0</span> R/W <span class="o">(</span>0b00000<span class="o">)</span>
</span></span><span class="line"><span class="cl">DISABLE_SDIO_HOST <span class="o">(</span>BLOCK0<span class="o">)</span>:                        Disable SDIO <span class="nv">host</span>                                  <span class="o">=</span> False R/W <span class="o">(</span>0b0<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Efuse fuses:
</span></span><span class="line"><span class="cl">WR_DIS <span class="o">(</span>BLOCK0<span class="o">)</span>:                                   Efuse write disable <span class="nv">mask</span>                           <span class="o">=</span> <span class="m">388</span> R/W <span class="o">(</span>0x0184<span class="o">)</span>
</span></span><span class="line"><span class="cl">RD_DIS <span class="o">(</span>BLOCK0<span class="o">)</span>:                                   Efuse <span class="nb">read</span> disable <span class="nv">mask</span>                            <span class="o">=</span> <span class="m">3</span> R/W <span class="o">(</span>0x3<span class="o">)</span>
</span></span><span class="line"><span class="cl">CODING_SCHEME <span class="o">(</span>BLOCK0<span class="o">)</span>:                            Efuse variable block length <span class="nv">scheme</span>
</span></span><span class="line"><span class="cl">   <span class="o">=</span> NONE <span class="o">(</span>BLK1-3 <span class="nv">len</span><span class="o">=</span><span class="m">256</span> bits<span class="o">)</span> R/W <span class="o">(</span>0b00<span class="o">)</span>
</span></span><span class="line"><span class="cl">KEY_STATUS <span class="o">(</span>BLOCK0<span class="o">)</span>:                               Usage of efuse block <span class="m">3</span> <span class="o">(</span>reserved<span class="o">)</span>                  <span class="o">=</span> False R/W <span class="o">(</span>0b0<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Identity fuses:
</span></span><span class="line"><span class="cl">MAC <span class="o">(</span>BLOCK0<span class="o">)</span>:                                      Factory MAC <span class="nv">Address</span>
</span></span><span class="line"><span class="cl">   <span class="o">=</span> 78:21:84:56:b1:50 <span class="o">(</span>CRC 0x6c OK<span class="o">)</span> R/W
</span></span><span class="line"><span class="cl">MAC_CRC <span class="o">(</span>BLOCK0<span class="o">)</span>:                                  CRC8 <span class="k">for</span> factory MAC <span class="nv">address</span>                       <span class="o">=</span> <span class="m">108</span> R/W <span class="o">(</span>0x6c<span class="o">)</span>
</span></span><span class="line"><span class="cl">CHIP_VER_REV1 <span class="o">(</span>BLOCK0<span class="o">)</span>:                            Silicon Revision <span class="nv">1</span>                                 <span class="o">=</span> True R/W <span class="o">(</span>0b1<span class="o">)</span>
</span></span><span class="line"><span class="cl">CHIP_VER_REV2 <span class="o">(</span>BLOCK0<span class="o">)</span>:                            Silicon Revision <span class="nv">2</span>                                 <span class="o">=</span> False R/W <span class="o">(</span>0b0<span class="o">)</span>
</span></span><span class="line"><span class="cl">CHIP_VERSION <span class="o">(</span>BLOCK0<span class="o">)</span>:                             Reserved <span class="k">for</span> future chip <span class="nv">versions</span>                  <span class="o">=</span> <span class="m">2</span> R/W <span class="o">(</span>0b10<span class="o">)</span>
</span></span><span class="line"><span class="cl">CHIP_PACKAGE <span class="o">(</span>BLOCK0<span class="o">)</span>:                             Chip package <span class="nv">identifier</span>                            <span class="o">=</span> <span class="m">1</span> R/W <span class="o">(</span>0b001<span class="o">)</span>
</span></span><span class="line"><span class="cl">CHIP_PACKAGE_4BIT <span class="o">(</span>BLOCK0<span class="o">)</span>:                        Chip package identifier <span class="c1">#4bit                      = False R/W (0b0)</span>
</span></span><span class="line"><span class="cl">MAC_VERSION <span class="o">(</span>BLOCK3<span class="o">)</span>:                              Version of the MAC <span class="nv">field</span>                           <span class="o">=</span> <span class="m">0</span> R/W <span class="o">(</span>0x00<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Security fuses:
</span></span><span class="line"><span class="cl">FLASH_CRYPT_CNT <span class="o">(</span>BLOCK0<span class="o">)</span>:                          Flash encryption mode <span class="nv">counter</span>                      <span class="o">=</span> <span class="m">1</span> R/- <span class="o">(</span>0b0000001<span class="o">)</span>
</span></span><span class="line"><span class="cl">UART_DOWNLOAD_DIS <span class="o">(</span>BLOCK0<span class="o">)</span>:                        Disable UART download mode <span class="o">(</span>ESP32 rev3 only<span class="o">)</span>       <span class="o">=</span> False R/- <span class="o">(</span>0b0<span class="o">)</span>
</span></span><span class="line"><span class="cl">FLASH_CRYPT_CONFIG <span class="o">(</span>BLOCK0<span class="o">)</span>:                       Flash encryption config <span class="o">(</span>key tweak bits<span class="o">)</span>           <span class="o">=</span> <span class="m">15</span> R/W <span class="o">(</span>0xf<span class="o">)</span>
</span></span><span class="line"><span class="cl">CONSOLE_DEBUG_DISABLE <span class="o">(</span>BLOCK0<span class="o">)</span>:                    Disable ROM BASIC interpreter <span class="nv">fallback</span>             <span class="o">=</span> True R/W <span class="o">(</span>0b1<span class="o">)</span>
</span></span><span class="line"><span class="cl">ABS_DONE_0 <span class="o">(</span>BLOCK0<span class="o">)</span>:                               Secure boot V1 is enabled <span class="k">for</span> bootloader <span class="nv">image</span>     <span class="o">=</span> True R/W <span class="o">(</span>0b1<span class="o">)</span>
</span></span><span class="line"><span class="cl">ABS_DONE_1 <span class="o">(</span>BLOCK0<span class="o">)</span>:                               Secure boot V2 is enabled <span class="k">for</span> bootloader <span class="nv">image</span>     <span class="o">=</span> False R/W <span class="o">(</span>0b0<span class="o">)</span>
</span></span><span class="line"><span class="cl">JTAG_DISABLE <span class="o">(</span>BLOCK0<span class="o">)</span>:                             Disable <span class="nv">JTAG</span>                                       <span class="o">=</span> True R/W <span class="o">(</span>0b1<span class="o">)</span>
</span></span><span class="line"><span class="cl">DISABLE_DL_ENCRYPT <span class="o">(</span>BLOCK0<span class="o">)</span>:                       Disable flash encryption in UART <span class="nv">bootloader</span>        <span class="o">=</span> True R/W <span class="o">(</span>0b1<span class="o">)</span>
</span></span><span class="line"><span class="cl">DISABLE_DL_DECRYPT <span class="o">(</span>BLOCK0<span class="o">)</span>:                       Disable flash decryption in UART <span class="nv">bootloader</span>        <span class="o">=</span> True R/W <span class="o">(</span>0b1<span class="o">)</span>
</span></span><span class="line"><span class="cl">DISABLE_DL_CACHE <span class="o">(</span>BLOCK0<span class="o">)</span>:                         Disable flash cache in UART <span class="nv">bootloader</span>             <span class="o">=</span> True R/W <span class="o">(</span>0b1<span class="o">)</span>
</span></span><span class="line"><span class="cl">BLOCK1 <span class="o">(</span>BLOCK1<span class="o">)</span>:                                   Flash encryption <span class="nv">key</span>
</span></span><span class="line"><span class="cl">   <span class="o">=</span> ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? -/-
</span></span><span class="line"><span class="cl">BLOCK2 <span class="o">(</span>BLOCK2<span class="o">)</span>:                                   Secure boot <span class="nv">key</span>
</span></span><span class="line"><span class="cl">   <span class="o">=</span> ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? -/-
</span></span><span class="line"><span class="cl">BLOCK3 <span class="o">(</span>BLOCK3<span class="o">)</span>:                                   Variable Block <span class="nv">3</span>
</span></span><span class="line"><span class="cl">   <span class="o">=</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> R/W
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Flash voltage <span class="o">(</span>VDD_SDIO<span class="o">)</span> determined by GPIO12 on reset <span class="o">(</span>High <span class="k">for</span> 1.8V, Low/NC <span class="k">for</span> 3.3V<span class="o">)</span>.
</span></span></code></pre></td></tr></table>
</div>
</div><p>That&rsquo;s the first time I&rsquo;ve <em>ever</em> seen the security settings enabled on cheap IoT gear from China. 🤯</p>
<p>In hindsight, it should have been pretty obvious as the flash dump does not look like a &ldquo;traditional&rdquo; ESP flash dump:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ binwalk flash_4M.bin
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">DECIMAL       HEXADECIMAL     DESCRIPTION
</span></span><span class="line"><span class="cl">--------------------------------------------------------------------------------
</span></span><span class="line"><span class="cl"><span class="m">1131864</span>       0x114558        AES S-Box
</span></span><span class="line"><span class="cl"><span class="m">1155516</span>       0x11A1BC        Base64 standard index table
</span></span><span class="line"><span class="cl"><span class="m">1161148</span>       0x11B7BC        PEM RSA private key
</span></span><span class="line"><span class="cl"><span class="m">1161212</span>       0x11B7FC        PEM EC private key
</span></span><span class="line"><span class="cl"><span class="m">1161560</span>       0x11B958        SHA256 <span class="nb">hash</span> constants, little endian
</span></span><span class="line"><span class="cl"><span class="m">1166968</span>       0x11CE78        PEM certificate
</span></span><span class="line"><span class="cl"><span class="m">2075923</span>       0x1FAD13        mcrypt 2.5 encrypted data, algorithm: <span class="s2">&#34;+&#34;</span>, keysize: <span class="m">21964</span> bytes, mode: <span class="s2">&#34;H&#34;</span>,
</span></span></code></pre></td></tr></table>
</div>
</div><p>It was late and I was tired so I didn&rsquo;t bother with trying to reverse engineer the flash dump or trying to figure out if there was a way to disable the protections.
Nothing was going to compete with 10 minute to heat-soak and remove the ESP module so I just did that.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Note the sharpie next to the pin headers. Order is GND, RX, TX, EN, GPIO0, VCC from top to bottom.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>And a better look at some of the PCB traces to the ethernet PHY:</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>With a &ldquo;fresh&rdquo; ESP module installed, figuring out th GPIO assignments wasn&rsquo;t particularly difficult.</p>
<table>
<thead>
<tr>
<th>Function</th>
<th>Pin</th>
<th>Note</th>
</tr>
</thead>
<tbody>
<tr>
<td>Relay 1</td>
<td><code>GPIO2</code></td>
<td>&ndash;</td>
</tr>
<tr>
<td>Relay 2</td>
<td><code>GPIO16</code></td>
<td>&ndash;</td>
</tr>
<tr>
<td>Input 1</td>
<td><code>GPIO36</code></td>
<td>Normally at 3.3V. Pull to ground to trigger.</td>
</tr>
<tr>
<td>Input 2</td>
<td><code>GPIO39</code></td>
<td>Same as <code>Input 1</code>.</td>
</tr>
<tr>
<td>Input 3</td>
<td><code>GPIO34</code></td>
<td>This is the <code>FACTORY</code> button. Same as <code>Input 1</code>.</td>
</tr>
<tr>
<td>LED 1</td>
<td><code>GPIO32</code></td>
<td>This is the second little red LED next to the <code>FACTORY</code> button. Inverted.</td>
</tr>
</tbody>
</table>
<h2 id="tasmota">Tasmota</h2>
<p>And here&rsquo;s the working Tasmota template:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span><span class="nt">&#34;NAME&#34;</span><span class="p">:</span><span class="s2">&#34;2chFinal&#34;</span><span class="p">,</span><span class="nt">&#34;GPIO&#34;</span><span class="p">:[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">224</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">225</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">320</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">32</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">160</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">161</span><span class="p">],</span><span class="nt">&#34;FLAG&#34;</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="nt">&#34;BASE&#34;</span><span class="p">:</span><span class="mi">1</span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>And visually:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        This configuration works even though GPIO34 should be Button_i.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h2 id="esphome">ESPHome</h2>
<p>This is a bare-bones config that covers all the core/critical functionality.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">esp32</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># See: https://docs.platformio.org/en/latest/boards/espressif32/esp32dev.html</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">board</span><span class="p">:</span><span class="w"> </span><span class="l">esp32dev</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Above the &#34;FACTORY&#34; button there are two LEDs. One is wired in series with the switch and the other is controllable via GPIO. Use the second one as a status indicator.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">status_led</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">pin</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO32</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">inverted</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">ethernet</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">JL1101</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">mdc_pin</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO23</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">mdio_pin</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO18</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">phy_addr</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">clk_mode</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO17_OUT</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># The PHY chip has a pin labeled TX_EN that goes to GPIO 21 on ESP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># and the RSTn pin on the phy goes to GPIO0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Datasheet indicates the RSTn should be LOW to disable the phy and default is high</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">power_pin</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">binary_sensor</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># The &#34;factory reset&#34; button</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">gpio</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;User Button&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO34</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">inverted</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># The two sets of contacts for manual trigger</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># input is pulled up to 3.3V by default.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;User Input 1&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">gpio</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO36</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">inverted</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;User Input 2&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">gpio</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO39</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">inverted</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">switch</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Relay 1&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">gpio</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Relay 2&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">gpio</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO16</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>Frigate From Scratch guide</title><link>https://karlquinsland.com/frigate-install/</link><pubDate>Sat, 04 Mar 2023 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/frigate-install/</guid><description><![CDATA[<!-- markdownlint-disable-file MD002 -->
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>FYI<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Portions of this post was edited for clarity with the help of <a href="https://chat.openai.com/" target="_blank" rel="noopener noreffer">ChatGPT</a>.</div>
        </div>
    </div>
<hr>
<p>The <a href="https://frigate.video/" target="_blank" rel="noopener noreffer">Frigate NVR</a> project is a relatively new entrant to the home security camera DVR space.
Like most immature yet popular software, it has a killer feature - very good object detection that just works™ and robust <a href="https://docs.frigate.video/integrations/home-assistant/" target="_blank" rel="noopener noreffer">Home Assistant integration</a>.</p>
<p>Unfortunately, the Frigate docs are a bit spartan particularly around installing; they more or less start with &ldquo;now that you&rsquo;ve installed it, let&rsquo;s go over configuring / using &hellip;&rdquo;.</p>
<p>While this does seem like a rather import omission, it&rsquo;s somewhat intentional.
This is because Frigate is only distributed as a Docker container so installing really boils down to &ldquo;get a computer that runs <code>docker</code> and then make sure <code>docker run ...</code> is executed when you want&rdquo;.</p>
<p>Most of the existing guides out there all use <code>docker-compose</code> with only some minor attention paid to <a href="https://en.wikipedia.org/wiki/Supervisory_program" target="_blank" rel="noopener noreffer">supervisory</a> configuration:</p>
<ul>
<li><a href="https://wiki.seeedstudio.com/ODYSSEY-X86J4105-Frigate/" target="_blank" rel="noopener noreffer">FRIGATE NVR Project with Seeed Odyssey</a></li>
<li><a href="https://www.digimoot.com/frigate-nvr-linux-manual-install/" target="_blank" rel="noopener noreffer">Frigate NVR: Linux Manual Install</a></li>
<li><a href="https://github.com/blakeblackshear/frigate/discussions/4041" target="_blank" rel="noopener noreffer">installing frigate from scratch guide #4041</a></li>
</ul>
<p>This document isn&rsquo;t going to introduce anything new or innovative but should offer an alternative that closely tracks the way I did it.</p>
<hr>
<h2 id="goal">Goal</h2>
<p>This post is going to cover the steps taken to get a host that:</p>
<ul>
<li>runs the Frigate docker container via <a href="https://en.wikipedia.org/wiki/Systemd" target="_blank" rel="noopener noreffer"><code>systemd</code></a></li>
<li>uses a <a href="https://coral.ai/products/m2-accelerator-bm" target="_blank" rel="noopener noreffer">coral.ai edge TPU</a> for accelerated object detection</li>
<li>records footage on a network mounted file share</li>
</ul>
<p>This post is not going to cover details that are likely specific to your deployment or are whole posts on their own:</p>
<ul>
<li>host or camera hardware selection.</li>
<li>camera placement</li>
<li>host setup tasks like installing OS</li>
<li>configuring frigate to use your specific cameras</li>
<li>integrating frigate with Home Assistant</li>
</ul>
<h2 id="prep">Prep</h2>
<p>I&rsquo;m going to assume that you&rsquo;ve already got a <a href="https://docs.frigate.video/frigate/hardware/" target="_blank" rel="noopener noreffer">suitable host</a> for running Frigate and that you have already set it up as to your liking; <code>ssh</code> keys, <code>$hostname</code> set, timezone and ntp servers set up &hellip; etc.</p>
<p>I used a modern <a href="https://www.intel.com/content/www/us/en/products/sku/212327/intel-pentium-silver-n6005-processor-4m-cache-up-to-3-30-ghz/specifications.html" target="_blank" rel="noopener noreffer">Intel N6005</a> system running Ubuntu 22.04 but the general process should be very similar for you and may even be identical if you use a debian based OS on similar hardware.</p>
<h3 id="install-docker">Install Docker</h3>
<p>Installing the bare docker runtime is pretty straight forward. As this is a debian based host, I followed the <a href="https://docs.docker.com/engine/install/ubuntu/#install-using-the-repository" target="_blank" rel="noopener noreffer"><code>apt</code> repo method</a>.</p>
<p>Make sure the system is up to date before installing anything new - if something goes wrong and breaks your system you&rsquo;ll have an easier time figuring out what needs fixing.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">karl@nvr:~$ sudo -i
</span></span><span class="line"><span class="cl"><span class="o">[</span>sudo<span class="o">]</span> password <span class="k">for</span> karl:  
</span></span><span class="line"><span class="cl">root@nvr:~# apt update<span class="p">;</span> apt dist-upgrade -y<span class="p">;</span> apt autoremove -y<span class="p">;</span> apt autoclean -y
</span></span><span class="line"><span class="cl">&lt;...&gt;
</span></span><span class="line"><span class="cl">root@nvr:~# cat /var/run/reboot-required.pkgs  
</span></span><span class="line"><span class="cl">linux-image-5.19.0-35-generic
</span></span><span class="line"><span class="cl">linux-base
</span></span><span class="line"><span class="cl">root@nvr:~# reboot
</span></span></code></pre></td></tr></table>
</div>
</div><p>Post update, install a subset of the docker packages:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">karl@nvr:~$ sudo mkdir -m <span class="m">0755</span> -p /etc/apt/keyrings
</span></span><span class="line"><span class="cl">karl@nvr:~$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg <span class="p">|</span> sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
</span></span><span class="line"><span class="cl">karl@nvr:~$ <span class="nb">echo</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> <span class="s2">&#34;deb [arch=</span><span class="k">$(</span>dpkg --print-architecture<span class="k">)</span><span class="s2"> signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
</span></span></span><span class="line"><span class="cl"><span class="s2"> </span><span class="k">$(</span>lsb_release -cs<span class="k">)</span><span class="s2"> stable&#34;</span> <span class="p">|</span> sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null
</span></span><span class="line"><span class="cl">karl@nvr:~$ sudo apt update<span class="p">;</span> sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin
</span></span><span class="line"><span class="cl">&lt;...&gt;
</span></span><span class="line"><span class="cl">After this operation, <span class="m">401</span> MB of additional disk space will be used.
</span></span><span class="line"><span class="cl">Do you want to <span class="k">continue</span>? <span class="o">[</span>Y/n<span class="o">]</span> Y
</span></span><span class="line"><span class="cl">&lt;...&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>And then check signs of life:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">karl@nvr:~$ sudo docker run hello-world
</span></span><span class="line"><span class="cl">&lt;...&gt;
</span></span><span class="line"><span class="cl">Status: Downloaded newer image <span class="k">for</span> hello-world:latest
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Hello from Docker!
</span></span><span class="line"><span class="cl">This message shows that your installation appears to be working correctly.
</span></span><span class="line"><span class="cl">&lt;...&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>With that, docker is good to go and we can move on to the other prerequisites.</p>
<h3 id="create-frigate-user">Create Frigate User</h3>
<p>It&rsquo;s good practice to create dedicated users with limited permissions to run the service(s) under.
Create the user and verify that the user does not need elevated credentials to talk to docker:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">karl@nvr:~$ sudo useradd --comment <span class="s2">&#34;service user for Frigate NVR&#34;</span> --groups docker --system --shell /usr/bin/bash frigate
</span></span><span class="line"><span class="cl">karl@nvr:~$ sudo -i
</span></span><span class="line"><span class="cl">root@nvr:~# su - frigate
</span></span><span class="line"><span class="cl">su: warning: cannot change directory to /home/frigate: No such file or directory
</span></span><span class="line"><span class="cl">frigate@nvr:/root$ groups
</span></span><span class="line"><span class="cl">frigate docker
</span></span><span class="line"><span class="cl">frigate@nvr:/root$ docker container list -a
</span></span><span class="line"><span class="cl">CONTAINER ID   IMAGE         COMMAND    CREATED         STATUS                     PORTS     NAMES
</span></span><span class="line"><span class="cl">dd7a5d1694c7   hello-world   <span class="s2">&#34;/hello&#34;</span>   <span class="m">4</span> minutes ago   Exited <span class="o">(</span>0<span class="o">)</span> <span class="m">4</span> minutes ago             mystifying_yalow
</span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>Quite note about docker security<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>Yes, I am aware that - because the <code>frigate</code> user can invoke <code>docker</code> commands directly - it isn&rsquo;t difficult for the <code>frigate</code> user to <a href="https://docs.docker.com/engine/security/#docker-daemon-attack-surface" target="_blank" rel="noopener noreffer">escalate credentials to those of <code>root</code></a>.</p>
<p>Running the docker daemon in <a href="https://docs.docker.com/engine/security/rootless/" target="_blank" rel="noopener noreffer">rootless mode</a> or an alternative &rsquo;non-root&rsquo; container management tool is one way to eliminate this risk but is beyond the scope of this post.</p>
<p>As always, <a href="https://en.wikipedia.org/wiki/Defense_in_depth_%28computing%29" target="_blank" rel="noopener noreffer">defense in depth</a>; this frigate host is appropriately firewalled off from the rest of the network.</p>
</div>
        </div>
    </div>
<p>After <code>docker</code> is installed and the <code>frigate</code> user is added to the <code>docker</code> group, the next pre-requisite is storage for Frigate recordings.</p>
<h3 id="create-mounts">Create Mounts</h3>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Tip<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">You can skip this step if you do not wish to use remote storage for the Frigate configuration and recordings.</div>
        </div>
    </div>
<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>Storage quotas<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>Frigate does not have <a href="https://docs.frigate.video/configuration/record" target="_blank" rel="noopener noreffer">sophisticated controls</a> for configuring how long recordings are kept so you are encouraged to set up a storage quota for whatever disk/mount/share you use for network recordings.</p>
<p>If you are going the network share route, the software on the NAS likely has this functionality.
If you are going with local storage, the simplest way to enforce a quota is to use a dedicated partition.</p>
</div>
        </div>
    </div>
<p>Using <a href="https://www.freedesktop.org/software/systemd/man/systemd.mount.html" target="_blank" rel="noopener noreffer"><code>.mount</code> files</a>, it is trivial to have systemd mount the network share before starting Frigate.
I chose to use a <a href="https://en.wikipedia.org/wiki/Network_File_System" target="_blank" rel="noopener noreffer">NFS</a> share as both the NAS and the Frigate host are *NIX based and file system permissions tend to work a lot cleaner over NFS compared to Samba.</p>
<p>If you run into errors related to the database that frigate uses, you may consider <a href="https://docs.frigate.video/configuration/advanced#database" target="_blank" rel="noopener noreffer">re-locating the database to a local mount</a>.</p>
<p>The technique outlined below will work for Samba shares as well but the <code>.mount</code> files will be configured slightly differently and you&rsquo;ll need to install slightly different software:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">karl@nvr:~$ sudo apt install nfs-common
</span></span><span class="line"><span class="cl"><span class="c1"># Only needed if you use SMB shares. Without this package, you will likely get obscure errors related to hostname resolution</span>
</span></span><span class="line"><span class="cl"><span class="c1"># See: https://askubuntu.com/questions/373340/ubuntu-server-13-10-cant-mount-hard-drive-that-is-on-my-router/374699#374699</span>
</span></span><span class="line"><span class="cl">karl@nvr:~$ sudo apt-get install cifs-utils
</span></span></code></pre></td></tr></table>
</div>
</div><p>With the correct smb/nfs packages installed, tell systemd how to mount the network share locally automatically:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># Create path on host</span>
</span></span><span class="line"><span class="cl">karl@nvr:~$ sudo mkdir -p /mnt/frigate
</span></span><span class="line"><span class="cl">karl@nvr:~$ sudo chown -R frigate /mnt/frigate
</span></span><span class="line"><span class="cl">karl@nvr:~$ ls -lah /mnt/frigate/
</span></span><span class="line"><span class="cl">total 8.0K
</span></span><span class="line"><span class="cl">drwxr-xr-x <span class="m">2</span> frigate root 4.0K Mar  <span class="m">2</span> 08:37 .
</span></span><span class="line"><span class="cl">drwxr-xr-x <span class="m">3</span> root    root 4.0K Mar  <span class="m">2</span> 08:37 ..
</span></span><span class="line"><span class="cl"><span class="c1"># Create the mount files</span>
</span></span><span class="line"><span class="cl">karl@nvr:~$ sudo <span class="nv">$EDITOR</span> /etc/systemd/system/mnt-frigate.mount
</span></span><span class="line"><span class="cl">karl@nvr:~$ sudo <span class="nv">$EDITOR</span> /etc/systemd/system/mnt-frigate.automount
</span></span><span class="line"><span class="cl"><span class="c1"># And apply them</span>
</span></span><span class="line"><span class="cl">karl@nvr:~$ sudo systemctl daemon-reload
</span></span><span class="line"><span class="cl">karl@nvr:~$ sudo systemctl <span class="nb">enable</span> mnt-frigate.moun
</span></span><span class="line"><span class="cl">karl@nvr:~$ sudo systemctl <span class="nb">enable</span> mnt-frigate.automount
</span></span><span class="line"><span class="cl">karl@nvr:~$ sudo systemctl start mnt-frigate.mount
</span></span><span class="line"><span class="cl">karl@nvr:~$ sudo systemctl start mnt-frigate.automount
</span></span></code></pre></td></tr></table>
</div>
</div><p>The <code>/etc/systemd/system/mnt-frigate.mount</code> file looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-systemd" data-lang="systemd"><span class="line"><span class="cl"><span class="k">[Unit]</span>
</span></span><span class="line"><span class="cl"><span class="na">Description</span><span class="o">=</span><span class="s">Mount Frigate NFS share share locally for frigate docker container</span>
</span></span><span class="line"><span class="cl"><span class="na">Requires</span><span class="o">=</span><span class="s">systemd-networkd.service</span>
</span></span><span class="line"><span class="cl"><span class="na">After</span><span class="o">=</span><span class="s">network-online.target</span>
</span></span><span class="line"><span class="cl"><span class="na">Wants</span><span class="o">=</span><span class="s">network-online.target</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">[Mount]</span>
</span></span><span class="line"><span class="cl"><span class="na">What</span><span class="o">=</span><span class="s">yourServerIPHere:/path/to/your/nfs/share/here</span>
</span></span><span class="line"><span class="cl"><span class="na">Where</span><span class="o">=</span><span class="s">/mnt/frigate</span>
</span></span><span class="line"><span class="cl"><span class="na">Type</span><span class="o">=</span><span class="s">nfs</span>
</span></span><span class="line"><span class="cl"><span class="na">Options</span><span class="o">=</span><span class="s">default</span>
</span></span><span class="line"><span class="cl"><span class="na">TimeoutSec</span><span class="o">=</span><span class="s">5</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">[Install]</span>
</span></span><span class="line"><span class="cl"><span class="na">WantedBy</span><span class="o">=</span><span class="s">multi-user.target</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>And the <code>/etc/systemd/system/mnt-frigate.automount</code> looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-systemd" data-lang="systemd"><span class="line"><span class="cl"><span class="k">[Unit]</span>
</span></span><span class="line"><span class="cl"><span class="na">Description</span><span class="o">=</span><span class="s">automount for frigate</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">[Automount]</span>
</span></span><span class="line"><span class="cl"><span class="na">Where</span><span class="o">=</span><span class="s">/mnt/frigate</span>
</span></span><span class="line"><span class="cl"><span class="na">TimeoutIdleSec</span><span class="o">=</span><span class="s">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">[Install]</span>
</span></span><span class="line"><span class="cl"><span class="na">WantedBy</span><span class="o">=</span><span class="s">multi-user.target</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>After <code>systemctl start/enable ...</code> the mounts should be up and running.
Use <code>systemctl status</code> to check that things worked properly and use <code>journalctl</code> to check logs if things went wrong.
Ideally you&rsquo;ll have something that looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">root@nvr:~# systemctl status mnt-frigate.mount
</span></span><span class="line"><span class="cl">● mnt-frigate.mount - Mount Frigate NFS share share locally <span class="k">for</span> frigate docker container
</span></span><span class="line"><span class="cl">     Loaded: loaded <span class="o">(</span>/proc/self/mountinfo<span class="p">;</span> enabled<span class="p">;</span> preset: enabled<span class="o">)</span>
</span></span><span class="line"><span class="cl">     Active: active <span class="o">(</span>mounted<span class="o">)</span> since &lt;...&gt;
</span></span><span class="line"><span class="cl">TriggeredBy: ● mnt-frigate.automount
</span></span><span class="line"><span class="cl">      Where: /mnt/frigate
</span></span><span class="line"><span class="cl">       &lt;...&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>At this point, all the <em>basic</em> pre-requisites are satisfied: a <code>frigate</code> specific user can run <code>docker run ...</code> commands and <code>systemd</code> will automatically mount the network share locally.</p>
<h3 id="coralai-edge-tpu">Coral.ai edge TPU</h3>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Tip<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Skip this step if you are not using PCI-E based edge TPU nodes.</div>
        </div>
    </div>
<p>As mentioned at the top, one of the features that makes Frigate so attractive is how easy it is to use dedicated hardware for image/object classification.</p>
<p>I am using a <a href="https://en.wikipedia.org/wiki/PCI_Express" target="_blank" rel="noopener noreffer">PCI-Express</a> based TPU so there&rsquo;s a little bit more wor required to successfully pass a PCIe device into a docker container.
Fortunately this process is a lot simpler than it used to be and the google provided <a href="https://coral.ai/docs/m2/get-started/#2a-on-linux" target="_blank" rel="noopener noreffer">instructions</a> are pretty clear:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># Confirm there is no apex driver present already.</span>
</span></span><span class="line"><span class="cl">karl@nvr:~$ sudo lsmod <span class="p">|</span> grep apex
</span></span><span class="line"><span class="cl"><span class="c1"># Add apt repos</span>
</span></span><span class="line"><span class="cl">karl@nvr:~$ <span class="nb">echo</span> <span class="s2">&#34;deb https://packages.cloud.google.com/apt coral-edgetpu-stable main&#34;</span> <span class="p">|</span> sudo tee /etc/apt/sources.list.d/coral-edgetpu.list
</span></span><span class="line"><span class="cl">deb https://packages.cloud.google.com/apt coral-edgetpu-stable main
</span></span><span class="line"><span class="cl"><span class="c1"># Install the driver</span>
</span></span><span class="line"><span class="cl">karl@nvr:~$ curl https://packages.cloud.google.com/apt/doc/apt-key.gpg <span class="p">|</span> sudo apt-key add -
</span></span><span class="line"><span class="cl">&lt;...&gt;
</span></span><span class="line"><span class="cl">karl@nvr:~$ sudo apt-get update<span class="p">;</span> sudo apt-get install gasket-dkms libedgetpu1-std
</span></span><span class="line"><span class="cl">Get:1 https://packages.cloud.google.com/apt coral-edgetpu-stable InRelease <span class="o">[</span>6,332 B<span class="o">]</span>
</span></span><span class="line"><span class="cl">&lt;...&gt;
</span></span><span class="line"><span class="cl">The following additional packages will be installed:
</span></span><span class="line"><span class="cl"> build-essential bzip2 cpp cpp-12 dctrl-tools dh-dkms dkms dpkg-dev fakeroot fontconfig-config fonts-dejavu-core g++ g++-12 gcc
</span></span><span class="line"><span class="cl">&lt;...&gt;
</span></span><span class="line"><span class="cl">Do you want to <span class="k">continue</span>? <span class="o">[</span>Y/n<span class="o">]</span> Y
</span></span><span class="line"><span class="cl">&lt;...&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>After install, <a href="https://en.wikipedia.org/wiki/Udev" target="_blank" rel="noopener noreffer"><code>udev</code></a> rules are needed to make sure the proper driver is loaded:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># Confirm file does not exist</span>
</span></span><span class="line"><span class="cl">karl@nvr:~$ sudo cat /etc/udev/rules.d/65-apex.rules
</span></span><span class="line"><span class="cl">cat: /etc/udev/rules.d/65-apex.rules: No such file or directory
</span></span><span class="line"><span class="cl">karl@nvr:~$ sudo sh -c <span class="s2">&#34;echo &#39;SUBSYSTEM==\&#34;apex\&#34;, MODE=\&#34;0660\&#34;, GROUP=\&#34;apex\&#34;&#39; &gt;&gt; /etc/udev/rules.d/65-apex.rules&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Add the `frigate` user to the `apex` group so it can access the &#34;virtual&#34; PCIe devices</span>
</span></span><span class="line"><span class="cl">karl@nvr:~$ sudo groupadd -U frigate apex
</span></span><span class="line"><span class="cl">karl@nvr:~$ sudo groups frigate
</span></span><span class="line"><span class="cl">frigate : frigate docker apex
</span></span><span class="line"><span class="cl"><span class="c1"># Cleanest way to make sure driver and udev rules work is to reboot</span>
</span></span><span class="line"><span class="cl">karl@nvr:~$ sudo reboot
</span></span></code></pre></td></tr></table>
</div>
</div><p>Checking that the <code>apex</code> driver is properly loaded is quick and painless:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># I have a &#34;dual&#34; TPU so two devices show up. If you only have a &#34;single&#34; TPU, only one will show up.</span>
</span></span><span class="line"><span class="cl">karl@nvr:~$ sudo lspci -nn <span class="p">|</span> grep 089a
</span></span><span class="line"><span class="cl"><span class="o">[</span>sudo<span class="o">]</span> password <span class="k">for</span> karl:  
</span></span><span class="line"><span class="cl">03:00.0 System peripheral <span class="o">[</span>0880<span class="o">]</span>: Global Unichip Corp. Coral Edge TPU <span class="o">[</span>1ac1:089a<span class="o">]</span>
</span></span><span class="line"><span class="cl">04:00.0 System peripheral <span class="o">[</span>0880<span class="o">]</span>: Global Unichip Corp. Coral Edge TPU <span class="o">[</span>1ac1:089a<span class="o">]</span>
</span></span><span class="line"><span class="cl">karl@nvr:~$ sudo ls /dev/apex_*
</span></span><span class="line"><span class="cl">/dev/apex_0 /dev/apex_1
</span></span></code></pre></td></tr></table>
</div>
</div><p>And with that, all the core/extended pre-requisites are done and the remaining work is actually pretty minimal.</p>
<h2 id="install">Install</h2>
<p>After the pre-requisites are satisfied so all that&rsquo;s left is the <a href="https://www.freedesktop.org/software/systemd/man/systemd.unit.html" target="_blank" rel="noopener noreffer"><code>.unit</code> file</a> which will wrap the <code>docker run</code> commands.</p>
<h3 id="environmentfile"><code>EnvironmentFile</code></h3>
<p>Frigate supports env-var substitution in it&rsquo;s configuration file like so:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">mqtt</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">mqtt.server.com</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">user</span><span class="p">:</span><span class="w"> </span>{<span class="l">FRIGATE_SOME_KEY_HERE}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>The configuration file - sans sensitive information - can now be safely checked in to source control.
Create a file just for holding our env-vars:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">karl@nvr:~$ sudo mkdir -p /etc/frigate
</span></span><span class="line"><span class="cl"><span class="o">[</span>sudo<span class="o">]</span> password <span class="k">for</span> karl:
</span></span><span class="line"><span class="cl">karl@nvr:~$ sudo touch /etc/frigate/secrets
</span></span><span class="line"><span class="cl">karl@nvr:~$ sudo chown -R frigate:frigate /etc/frigate
</span></span><span class="line"><span class="cl">karl@nvr:~$ sudo chmod -R <span class="m">0750</span> /etc/frigate
</span></span><span class="line"><span class="cl">karl@nvr:~$ sudo ls -lah /etc/frigate/
</span></span><span class="line"><span class="cl">total 12K
</span></span><span class="line"><span class="cl">drwxr-x---   <span class="m">2</span> frigate frigate 4.0K Mar  <span class="m">4</span> 16:13 .
</span></span><span class="line"><span class="cl">drwxr-xr-x <span class="m">110</span> root    root    4.0K Mar  <span class="m">4</span> 15:16 ..
</span></span><span class="line"><span class="cl">-rwxr-x---   <span class="m">1</span> frigate frigate  <span class="m">356</span> Mar  <span class="m">4</span> 16:13 secrets
</span></span></code></pre></td></tr></table>
</div>
</div><p>The secrets file is <a href="https://docs.docker.com/engine/reference/commandline/run/#env" target="_blank" rel="noopener noreffer">simple key=value format</a>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">karl@nvr:~$ sudo cat /etc/frigate/secrets
</span></span><span class="line"><span class="cl"><span class="c1"># Note: frigate &lt; 0.12 does not support env-var for mqtt.user; set it here/now for use in the future.</span>
</span></span><span class="line"><span class="cl"><span class="nv">FRIGATE_MQTT_USER</span><span class="o">=</span>frigate
</span></span><span class="line"><span class="cl"><span class="nv">FRIGATE_MQTT_PASSWORD</span><span class="o">=</span>ChangeMe
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">FRIGATE_CAM01_RTSP_USER</span><span class="o">=</span>frigate
</span></span><span class="line"><span class="cl"><span class="nv">FRIGATE_CAM01_RTSP_PASS</span><span class="o">=</span>changeme
</span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>Warning<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>The use of env-var substitution for the <code>username</code> field in the MQTT section of the config requires frigate 0.12 or higher.
At the time of writing (2023.03), the latest <code>stable</code> release is <code>0.11</code>.</p>
<p>Some additional details in <a href="https://github.com/blakeblackshear/frigate/issues/5640" target="_blank" rel="noopener noreffer">this</a> GH issue.</p>
</div>
        </div>
    </div>
<h3 id="systemd-unit-for-frigate">Systemd Unit for Frigate</h3>
<p>The <code>/etc/systemd/system/frigate.service</code> file:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-systemd" data-lang="systemd"><span class="line"><span class="cl"><span class="k">[Unit]</span>
</span></span><span class="line"><span class="cl"><span class="na">Description</span><span class="o">=</span><span class="s">Frigate NVR</span>
</span></span><span class="line"><span class="cl"><span class="c"># Don&#39;t start until after docker is healthy and the nfs share is mounted</span>
</span></span><span class="line"><span class="cl"><span class="na">After</span><span class="o">=</span><span class="s">docker.service</span>
</span></span><span class="line"><span class="cl"><span class="na">Requires</span><span class="o">=</span><span class="s">docker.service</span>
</span></span><span class="line"><span class="cl"><span class="na">Requires</span><span class="o">=</span><span class="s">mnt-frigate.mount</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">[Service]</span>
</span></span><span class="line"><span class="cl"><span class="na">User</span><span class="o">=</span><span class="s">frigate</span>
</span></span><span class="line"><span class="cl"><span class="na">Group</span><span class="o">=</span><span class="s">frigate</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="na">TimeoutStartSec</span><span class="o">=</span><span class="s">0</span>
</span></span><span class="line"><span class="cl"><span class="na">Restart</span><span class="o">=</span><span class="s">always</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># We want to start with a fresh container every time</span>
</span></span><span class="line"><span class="cl"><span class="na">ExecStartPre</span><span class="o">=</span><span class="s">-/usr/bin/docker exec %n stop</span>
</span></span><span class="line"><span class="cl"><span class="na">ExecStartPre</span><span class="o">=</span><span class="s">-/usr/bin/docker rm %n</span>
</span></span><span class="line"><span class="cl"><span class="na">ExecStartPre</span><span class="o">=</span><span class="s">/usr/bin/docker pull blakeblackshear/frigate:stable</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Expose the web UI on port 80 to keep things a bit cleaner</span>
</span></span><span class="line"><span class="cl"><span class="na">ExecStart</span><span class="o">=</span><span class="s">/usr/bin/docker run --rm --name %n </span>\
</span></span><span class="line"><span class="cl"><span class="s">  --env-file /etc/frigate/secrets </span>\
</span></span><span class="line"><span class="cl"><span class="s">  --mount type=tmpfs,target=/tmp/cache,tmpfs-size=1000000000 </span>\
</span></span><span class="line"><span class="cl"><span class="s">  --device /dev/dri/renderD128 </span>\
</span></span><span class="line"><span class="cl"><span class="s">  --device /dev/apex_0:/dev/apex_0 </span>\
</span></span><span class="line"><span class="cl"><span class="s">  --device /dev/apex_1:/dev/apex_1 </span>\
</span></span><span class="line"><span class="cl"><span class="s">  --shm-size=64m </span>\
</span></span><span class="line"><span class="cl"><span class="s">  -v /mnt/frigate/storage:/media/frigate </span>\
</span></span><span class="line"><span class="cl"><span class="s">  -v /mnt/frigate/config:/config:ro </span>\
</span></span><span class="line"><span class="cl"><span class="s">  -v /etc/localtime:/etc/localtime:ro </span>\
</span></span><span class="line"><span class="cl"><span class="s">  -p 80:5000 </span>\
</span></span><span class="line"><span class="cl"><span class="s">  -p 1935:1935 </span>\
</span></span><span class="line"><span class="cl"><span class="s">  blakeblackshear/frigate:stable</span>
</span></span><span class="line"><span class="cl"><span class="k">[Install]</span>
</span></span><span class="line"><span class="cl"><span class="na">WantedBy</span><span class="o">=</span><span class="s">default.target</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Then enable/start the service</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">karl@nvr:~$ sudo systemctl <span class="nb">enable</span> frigate.service
</span></span><span class="line"><span class="cl">Created symlink /etc/systemd/system/default.target.wants/frigate.service → /etc/systemd/system/frigate.service.
</span></span><span class="line"><span class="cl">karl@nvr:~$ sudo systemctl start frigate.service
</span></span><span class="line"><span class="cl">&lt;...&gt;
</span></span><span class="line"><span class="cl">karl@nvr:~$ sudo systemctl status frigate
</span></span><span class="line"><span class="cl">● frigate.service - Frigate NVR
</span></span><span class="line"><span class="cl">     Loaded: loaded <span class="o">(</span>/etc/systemd/system/frigate.service<span class="p">;</span> enabled<span class="p">;</span> preset: enabled<span class="o">)</span>
</span></span><span class="line"><span class="cl">     Active: active <span class="o">(</span>running<span class="o">)</span> since &lt;...&gt;
</span></span><span class="line"><span class="cl">     CGroup: /system.slice/frigate.service
</span></span><span class="line"><span class="cl">             └─27104 /usr/bin/docker run --rm --name frigate.service --mount <span class="nv">type</span><span class="o">=</span>tmpfs,target<span class="o">=</span>/tmp/cache,tmpfs-size<span class="o">=</span><span class="m">1000000000</span> --device /dev/dri/renderD128 --device /dev/apex_0:/dev/apex_0 --device /dev/apex_1:/dev/apex_1 --shm-size<span class="o">=</span>&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>And that&rsquo;s all there is to it :).</p>
<p>Hopefully that helps!</p>
]]></description></item><item><title>Integrating a dumb coffee maker with Home Assistant via ESPHome</title><link>https://karlquinsland.com/improved-esphome-coffee-automation/</link><pubDate>Sat, 21 Jan 2023 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/improved-esphome-coffee-automation/</guid><description><![CDATA[<!-- markdownlint-disable-file MD002 -->
<p>My beloved coffee maker of 10 years has finally died 😢.
Parts are no longer available from either the manufacturer or the second-hand market.</p>
<p>Taking advantage of a (slight) holiday sale discount, I pulled the trigger on a coffee maker that&rsquo;s <a href="https://us.moccamaster.com/pages/sustainability-at-our-core" target="_blank" rel="noopener noreffer">designed to be repairable forever</a>.
The perpetual serviceability is a side effect of an ultra-simple design; this coffee maker has <em>zero</em> intelligent features which means there&rsquo;s next to no remote control or customizability.</p>
<h2 id="adding-home-assistant-integration">Adding Home Assistant integration</h2>
<p>Fortunately, we can add a decent amount of control with a basic smart outlet.
Naturally, I went with the amazing Sonoff S31 but you can get similar results with <em>any</em> ESPHome compatible device so long as you have a way to control power to the coffee maker and to monitor the power used by the coffee maker.</p>
<p>This borrows a technique that I first wrote about in <a href="/esphome-dynamic-timer/" rel=""><code>Dynamic timers in ESPHome</code></a> and tweaks it a bit to add of coffee-specific automations:</p>
<ul>
<li>Run the boiler for a moment, then pause. This is to let the <a href="https://www.homegrounds.co/coffee-bloom/" target="_blank" rel="noopener noreffer">coffee bloom</a>.</li>
<li>Turn relay off automatically after a period of no power use. This is done locally for safety and to save me the hassle of putting a template &ldquo;is coffee brewing&rdquo; sensor in home assistant. I still report energy data to home assistant for statistical purposes but don&rsquo;t use the data for automations.</li>
</ul>
<p>Here&rsquo;s what that looks like:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        S31 powered coffee maker in Home Assistant. Note that the bloom settings can be adjusted on the fly.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h3 id="esphome">ESPHome</h3>
<p>Below is a simplified ESPHome configuration file that resembles what I use &ldquo;in production&rdquo;.
As is, you&rsquo;ll need to fill it out / add in your own versions of some of the unique-to-me details intentionally omitted; these will be the device/component <code>id:</code> values, mostly.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span><span class="lnt">160
</span><span class="lnt">161
</span><span class="lnt">162
</span><span class="lnt">163
</span><span class="lnt">164
</span><span class="lnt">165
</span><span class="lnt">166
</span><span class="lnt">167
</span><span class="lnt">168
</span><span class="lnt">169
</span><span class="lnt">170
</span><span class="lnt">171
</span><span class="lnt">172
</span><span class="lnt">173
</span><span class="lnt">174
</span><span class="lnt">175
</span><span class="lnt">176
</span><span class="lnt">177
</span><span class="lnt">178
</span><span class="lnt">179
</span><span class="lnt">180
</span><span class="lnt">181
</span><span class="lnt">182
</span><span class="lnt">183
</span><span class="lnt">184
</span><span class="lnt">185
</span><span class="lnt">186
</span><span class="lnt">187
</span><span class="lnt">188
</span><span class="lnt">189
</span><span class="lnt">190
</span><span class="lnt">191
</span><span class="lnt">192
</span><span class="lnt">193
</span><span class="lnt">194
</span><span class="lnt">195
</span><span class="lnt">196
</span><span class="lnt">197
</span><span class="lnt">198
</span><span class="lnt">199
</span><span class="lnt">200
</span><span class="lnt">201
</span><span class="lnt">202
</span><span class="lnt">203
</span><span class="lnt">204
</span><span class="lnt">205
</span><span class="lnt">206
</span><span class="lnt">207
</span><span class="lnt">208
</span><span class="lnt">209
</span><span class="lnt">210
</span><span class="lnt">211
</span><span class="lnt">212
</span><span class="lnt">213
</span><span class="lnt">214
</span><span class="lnt">215
</span><span class="lnt">216
</span><span class="lnt">217
</span><span class="lnt">218
</span><span class="lnt">219
</span><span class="lnt">220
</span><span class="lnt">221
</span><span class="lnt">222
</span><span class="lnt">223
</span><span class="lnt">224
</span><span class="lnt">225
</span><span class="lnt">226
</span><span class="lnt">227
</span><span class="lnt">228
</span><span class="lnt">229
</span><span class="lnt">230
</span><span class="lnt">231
</span><span class="lnt">232
</span><span class="lnt">233
</span><span class="lnt">234
</span><span class="lnt">235
</span><span class="lnt">236
</span><span class="lnt">237
</span><span class="lnt">238
</span><span class="lnt">239
</span><span class="lnt">240
</span><span class="lnt">241
</span><span class="lnt">242
</span><span class="lnt">243
</span><span class="lnt">244
</span><span class="lnt">245
</span><span class="lnt">246
</span><span class="lnt">247
</span><span class="lnt">248
</span><span class="lnt">249
</span><span class="lnt">250
</span><span class="lnt">251
</span><span class="lnt">252
</span><span class="lnt">253
</span><span class="lnt">254
</span><span class="lnt">255
</span><span class="lnt">256
</span><span class="lnt">257
</span><span class="lnt">258
</span><span class="lnt">259
</span><span class="lnt">260
</span><span class="lnt">261
</span><span class="lnt">262
</span><span class="lnt">263
</span><span class="lnt">264
</span><span class="lnt">265
</span><span class="lnt">266
</span><span class="lnt">267
</span><span class="lnt">268
</span><span class="lnt">269
</span><span class="lnt">270
</span><span class="lnt">271
</span><span class="lnt">272
</span><span class="lnt">273
</span><span class="lnt">274
</span><span class="lnt">275
</span><span class="lnt">276
</span><span class="lnt">277
</span><span class="lnt">278
</span><span class="lnt">279
</span><span class="lnt">280
</span><span class="lnt">281
</span><span class="lnt">282
</span><span class="lnt">283
</span><span class="lnt">284
</span><span class="lnt">285
</span><span class="lnt">286
</span><span class="lnt">287
</span><span class="lnt">288
</span><span class="lnt">289
</span><span class="lnt">290
</span><span class="lnt">291
</span><span class="lnt">292
</span><span class="lnt">293
</span><span class="lnt">294
</span><span class="lnt">295
</span><span class="lnt">296
</span><span class="lnt">297
</span><span class="lnt">298
</span><span class="lnt">299
</span><span class="lnt">300
</span><span class="lnt">301
</span><span class="lnt">302
</span><span class="lnt">303
</span><span class="lnt">304
</span><span class="lnt">305
</span><span class="lnt">306
</span><span class="lnt">307
</span><span class="lnt">308
</span><span class="lnt">309
</span><span class="lnt">310
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">substitutions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">friendly_name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Mr. Coffee&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">friendly_name_short</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Coffee&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">esphome</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">${hostname}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">esp8266</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">board</span><span class="p">:</span><span class="w"> </span><span class="l">esp01_1m</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">restore_from_flash</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">packages</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># &lt;...&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Has ID: out_relay_1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">output</span><span class="p">:</span><span class="w"> </span>!<span class="l">include ../../packages/sonoff_s31_outlet/output_relay.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">globals</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Does the button toggle the relay</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_relay_latched</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">bool</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_value</span><span class="p">:</span><span class="w"> </span><span class="kc">no</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">initial_value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;true&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Bloom settings</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># How long do we run the heater for?</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># The time from power on to first water in basket depends on water temperature.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># The cooler the water, the longer it&#39;ll be.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># For now, the intent is to use other sensors to estimate the water temp and have HA</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#   update the configuration before starting a brew.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Maybe in a future version, outfit with water level/temp probe directly.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_pre_bloom_time_sec</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_value</span><span class="p">:</span><span class="w"> </span><span class="kc">yes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Note: value for demonstration purposes; do your own testing to determine appropriate value for your</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">#   environment / coffee maker</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">initial_value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;30&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># How long do we pause to do a bloom for?</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_bloom_time_sec</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_value</span><span class="p">:</span><span class="w"> </span><span class="kc">yes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Note: value for demonstration purposes; do your own testing to determine appropriate value for your</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">#   environment / coffee maker</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">initial_value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;30&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># And of course we need something to hold the timer value</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">_glbl_brew_timer_ticks</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_value</span><span class="p">:</span><span class="w"> </span><span class="kc">no</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">initial_value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># We need a place to store the number of ticks that we have observed low power while brewing.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">_glbl_brew_low_power_ticks</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_value</span><span class="p">:</span><span class="w"> </span><span class="kc">no</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">initial_value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># See: https://esphome.io/components/sensor/index.html</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">sensor</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">cse7766</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">update_interval</span><span class="p">:</span><span class="w"> </span><span class="l">1s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># &lt;...&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">power</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;${friendly_name_short} Power&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">accuracy_decimals</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Needed for total daily calculations</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">s31_power</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">filters</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">or</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">throttle</span><span class="p">:</span><span class="w"> </span><span class="l">300s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c"># Publish every time there&#39;s been more than 3.5W change</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">delta</span><span class="p">:</span><span class="w"> </span><span class="m">3.5</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Do the integration locally so HA does not have to</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># See: https://esphome.io/components/sensor/total_daily_energy.html</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;${friendly_name_short} Daily Energy&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">total_daily_energy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">power_id</span><span class="p">:</span><span class="w"> </span><span class="l">s31_power</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:meter-electric-outline&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># On the device page, HA will display a widget so we can adjust bloom time</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">number</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Pre Bloom Time&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">num_pre_bloom_sec</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:timer-sand&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;config&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">unit_of_measurement</span><span class="p">:</span><span class="w"> </span><span class="l">seconds</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">slide</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Note: value for demonstration purposes; do your own testing to determine appropriate value for your</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">#   environment / coffee maker</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">min_value</span><span class="p">:</span><span class="w"> </span><span class="m">10</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">max_value</span><span class="p">:</span><span class="w"> </span><span class="m">60</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">step</span><span class="p">:</span><span class="w"> </span><span class="m">2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      return (int) id(glbl_pre_bloom_time_sec);</span><span class="w">      
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">set_action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">globals.set</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_pre_bloom_time_sec</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span>!<span class="l">lambda |-</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">// TODO</span><span class="p">:</span><span class="w"> </span><span class="l">we&#39;re relying on HA to pass an integer; perhaps we should do atoi() and catch any exceptions</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="l">return (int) x;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Bloom Time&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">num_bloom_sec</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:timer-sand-paused&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;config&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">unit_of_measurement</span><span class="p">:</span><span class="w"> </span><span class="l">seconds</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">slider</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Note: value for demonstration purposes; do your own testing to determine appropriate value for your</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">#   environment / coffee maker</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">min_value</span><span class="p">:</span><span class="w"> </span><span class="m">10</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">max_value</span><span class="p">:</span><span class="w"> </span><span class="m">60</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">step</span><span class="p">:</span><span class="w"> </span><span class="m">2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      return (int) id(glbl_bloom_time_sec);</span><span class="w">      
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">set_action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">globals.set</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_bloom_time_sec</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span>!<span class="l">lambda |-</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">// TODO</span><span class="p">:</span><span class="w"> </span><span class="l">we&#39;re relying on HA to pass an integer; perhaps we should do atoi() and catch any exceptions</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="l">return (int) x;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Show current phase (IDLE/BREW/BLOOM/NEEDS-CLEANING...etc)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">text_sensor</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Mode&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">txt_operation_mode</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:information-off-outline&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;diagnostic&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Will be called to update as necessary from other components</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">update_interval</span><span class="p">:</span><span class="w"> </span><span class="l">never</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      // This lambda function should never be called / we should never update the text sensor this way
</span></span></span><span class="line"><span class="cl"><span class="sd">      return {&#34;Unknown&#34;};</span><span class="w">      
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Not sure if useful but including it anyways.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">switch</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;${friendly_name_short} Relay Latch&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">sw_relay_mode</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">device_class</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;switch&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:link-variant&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;config&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      if (id(glbl_relay_latched)) {
</span></span></span><span class="line"><span class="cl"><span class="sd">        return true;
</span></span></span><span class="line"><span class="cl"><span class="sd">      } else {
</span></span></span><span class="line"><span class="cl"><span class="sd">        return false;
</span></span></span><span class="line"><span class="cl"><span class="sd">      }</span><span class="w">      
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">turn_on_action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">globals.set</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_relay_latched</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;true&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">turn_off_action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">globals.set</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_relay_latched</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;false&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;${friendly_name_short} Power&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">sw_relay_toggle</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">output</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">output</span><span class="p">:</span><span class="w"> </span><span class="l">out_relay_1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:coffee-maker-outline&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_mode</span><span class="p">:</span><span class="w"> </span><span class="l">ALWAYS_OFF</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">device_class</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;switch&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># As soon as the power is turned on, start the timer</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_turn_on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">script.execute</span><span class="p">:</span><span class="w"> </span><span class="l">_brew_timer_tick</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># And if turned off, reset</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_turn_off</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">script.execute</span><span class="p">:</span><span class="w"> </span><span class="l">_on_brew_turned_off</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">binary_sensor</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Make the manual activation button behave the same as &#34;stock&#34;.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># May use for some future functionality:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#   - Triple click to indicate that I want to descale / ignore bloom settings</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#   - Double click to indicate that the water / grounds have been refreshed</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;${friendly_name_short} Button&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">gpio</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">internal</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">INPUT_PULLUP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">inverted</span><span class="p">:</span><span class="w"> </span><span class="kc">True</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Press is momentary quick</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_press</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">if</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">condition</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="c"># If we are in latched mode</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;return id(glbl_relay_latched);&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">switch.toggle</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">sw_relay_toggle</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">else</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">logger.log</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">level</span><span class="p">:</span><span class="w"> </span><span class="l">DEBUG</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">format</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Button1 pressed but relays unlinked&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Every second we need to increment the timer</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">script</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">_brew_timer_tick</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Start a new run after previous runs completes. This will happen until timer.stop() is called on us</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">queued</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">max_runs</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># A single &#39;tick&#39; is 1 second long</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">delay</span><span class="p">:</span><span class="w"> </span><span class="l">1s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          /*
</span></span></span><span class="line"><span class="cl"><span class="sd">            Called every second while relay is on.
</span></span></span><span class="line"><span class="cl"><span class="sd">            Compare number of invocations to user settings to figure out which phase we should be in.
</span></span></span><span class="line"><span class="cl"><span class="sd">            Update the text sensor and turn switch on/off as needed.
</span></span></span><span class="line"><span class="cl"><span class="sd">          */
</span></span></span><span class="line"><span class="cl"><span class="sd">          auto const static TAG = &#34;lambda._brew_timer_tick&#34;;
</span></span></span><span class="line"><span class="cl"><span class="sd">          // Number of seconds post bloom with low power before we transition from brewing to idle.
</span></span></span><span class="line"><span class="cl"><span class="sd">          static int idle_ticks_threshold = 30;
</span></span></span><span class="line"><span class="cl"><span class="sd">          static int num_ticks = 0;
</span></span></span><span class="line"><span class="cl"><span class="sd">          static int total_bloom_time_sec = 0;
</span></span></span><span class="line"><span class="cl"><span class="sd">          static bool post_bloom = false;
</span></span></span><span class="line"><span class="cl"><span class="sd">          total_bloom_time_sec = (id(glbl_bloom_time_sec) + id(glbl_pre_bloom_time_sec));
</span></span></span><span class="line"><span class="cl"><span class="sd">          ESP_LOGD(TAG, &#34;Idle. num_ticks: %i, total_bloom_time_sec: %i&#34;, num_ticks, total_bloom_time_sec);
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          // Count execution
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_glbl_brew_timer_ticks) += 1;
</span></span></span><span class="line"><span class="cl"><span class="sd">          num_ticks = id(_glbl_brew_timer_ticks);
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          // If the switch has been turned off - for any reason - we cancel any scheduled executions and don&#39;t continue
</span></span></span><span class="line"><span class="cl"><span class="sd">          if( !id(sw_relay_toggle) ) {
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(_brew_timer_tick).stop();
</span></span></span><span class="line"><span class="cl"><span class="sd">            return;
</span></span></span><span class="line"><span class="cl"><span class="sd">          }
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          // If the brew timer ticks counter is 0, assume IDLE
</span></span></span><span class="line"><span class="cl"><span class="sd">          if (num_ticks == 0) {
</span></span></span><span class="line"><span class="cl"><span class="sd">            ESP_LOGE(TAG, &#34;Idle. _glbl_brew_timer_ticks: %i&#34;, _glbl_brew_timer_ticks);
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(txt_operation_mode).publish_state(&#34;Idle&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">          }
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          // If we are between 1 and glbl_pre_bloom_time_sec then brewing -&gt; Blooming
</span></span></span><span class="line"><span class="cl"><span class="sd">          if( (num_ticks &gt;= 1 ) &amp;&amp; (num_ticks &lt;= id(glbl_pre_bloom_time_sec)) ) {
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(txt_operation_mode).publish_state(&#34;Pre Bloom&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">          }
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          // If we are between glbl_pre_bloom_time_sec and glbl_bloom_time_sec then blooming.
</span></span></span><span class="line"><span class="cl"><span class="sd">          if( (num_ticks &gt; id(glbl_pre_bloom_time_sec) ) &amp;&amp; (num_ticks &lt;= total_bloom_time_sec ) ) {
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(txt_operation_mode).publish_state(&#34;Blooming&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">            // Note, we turn the relay off directly and not the switch. We want the switch / web UI to still show &#34;on/brewing&#34;.
</span></span></span><span class="line"><span class="cl"><span class="sd">            // The text sensor will show that we are blooming
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(out_relay_1).turn_off();
</span></span></span><span class="line"><span class="cl"><span class="sd">          }
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          // Otherwise we are brewing.
</span></span></span><span class="line"><span class="cl"><span class="sd">          if(num_ticks &gt; total_bloom_time_sec ) {
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(txt_operation_mode).publish_state(&#34;Brewing&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(out_relay_1).turn_on();
</span></span></span><span class="line"><span class="cl"><span class="sd">            post_bloom = true;
</span></span></span><span class="line"><span class="cl"><span class="sd">          }
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          // After bloom, start counting the number of times we observe low power.
</span></span></span><span class="line"><span class="cl"><span class="sd">          // After T seconds of no power use, we assume that we&#39;re out of water and reset everything.
</span></span></span><span class="line"><span class="cl"><span class="sd">          ESP_LOGD(TAG, &#34;post bloom: %i, Current power consumption: %f Watts&#34;, post_bloom, id(s31_power).state);
</span></span></span><span class="line"><span class="cl"><span class="sd">          if ( post_bloom &amp;&amp; (id(s31_power).state &lt; 2)) {
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(_glbl_brew_low_power_ticks) +=1;
</span></span></span><span class="line"><span class="cl"><span class="sd">            ESP_LOGD(TAG, &#34;_glbl_brew_low_power_ticks: %i&#34;, id(_glbl_brew_low_power_ticks));
</span></span></span><span class="line"><span class="cl"><span class="sd">          }
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          if (id(_glbl_brew_low_power_ticks) &gt;= idle_ticks_threshold){
</span></span></span><span class="line"><span class="cl"><span class="sd">            ESP_LOGD(TAG, &#34;Assuming done with brew as _glbl_brew_low_power_ticks: %i &gt;= %i&#34;, id(_glbl_brew_low_power_ticks), idle_ticks_threshold);
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(sw_relay_toggle).turn_off();
</span></span></span><span class="line"><span class="cl"><span class="sd">            return;
</span></span></span><span class="line"><span class="cl"><span class="sd">          }
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          //re-schedule so we&#39;re called again in a second!
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_brew_timer_tick).execute();</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">_on_brew_turned_off</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">single</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Disable timer, have the text sensor update</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">        id(_glbl_brew_timer_ticks) = 0;
</span></span></span><span class="line"><span class="cl"><span class="sd">        id(_glbl_brew_low_power_ticks) = 0;
</span></span></span><span class="line"><span class="cl"><span class="sd">        id(txt_operation_mode).publish_state(&#34;Idle&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">        id(_brew_timer_tick).stop();</span><span class="w">        
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="home-assistant-automations">Home Assistant automations</h3>
<p>When some automation determines that it&rsquo;s now time to start making coffee, this is a portion of the script that is executed:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">sequence</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># ...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">service</span><span class="p">:</span><span class="w"> </span><span class="l">number.set_value</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">data</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># This is a bit simplified; my template does some more maths to map the temperature to a more precise value.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># I simplified the value template here to illustrate how the adjustable timers are meant to be used.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">        {% if states(&#39;sensor.kitchen_temperature&#39;)|float(-1) &lt; 25 %}35{% else
</span></span></span><span class="line"><span class="cl"><span class="sd">        %}20{% endif %}</span><span class="w">        
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">target</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">entity_id</span><span class="p">:</span><span class="w"> </span><span class="l">number.pre_bloom_time</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">service</span><span class="p">:</span><span class="w"> </span><span class="l">number.set_value</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">data</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;35.0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">target</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">entity_id</span><span class="p">:</span><span class="w"> </span><span class="l">number.bloom_time</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">turn_on</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">device_id</span><span class="p">:</span><span class="w"> </span><span class="c">#&lt; Your Device ID Here &gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_id</span><span class="p">:</span><span class="w"> </span><span class="l">switch.coffee_power</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">domain</span><span class="p">:</span><span class="w"> </span><span class="l">switch</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>Teardown and Home Assistant integration with two generic Chinese 'smart' power strips.</title><link>https://karlquinsland.com/esphome-power-strips/</link><pubDate>Sun, 15 Jan 2023 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/esphome-power-strips/</guid><description><![CDATA[<!-- markdownlint-disable-file MD002 -->
<p>I love the Sonoff-S31 smart plugs.
They&rsquo;re cheap, well made and - most importantly - trivial to flash with ESPHome and integrate into Home Assistant.
They do have one obvious draw back, though; optimized for a &ldquo;traditional&rdquo; US style outlet.
When you try to deploy them to a power strip, you end up loosing about 50% of the outlets on the strip!</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        This is how you loose about 50% of the outlets on your power strip.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>I figured that there must be a power strip out there that had the WiFi radio, power supply and relays built in.</p>
<p>Looking through the <a href="https://templates.blakadder.com/us.html#Power%20Strip" target="_blank" rel="noopener noreffer"><code>Power Strip</code></a> listing of the excellent Tasmota device/template repository, there are more than a few options out there.
Upon closer inspection, almost <em>all</em> of them are from super generic/no-name Chinese brands and lack any ETL or UL certifications 😬.</p>
<p>Searching for smart power strips on Amazon returns several results&hellip; and only a few from name brands.
The few name brand power strips out there that I could find are using their own microcontrollers internally and are immediately disqualified as they&rsquo;ll be - at best - difficult ot integrate with Home Assistant.</p>
<p>I&rsquo;m not quite so concerned about any power conditioning/surge suppression as I am not plugging in any valuable or delectate electronics.
I am concerned with a more integrated / space efficient solution that allows me to retain my ESPHome/Home Assistant integration.</p>
<p>After cross referencing the Tasmota templates listing with the Amazon search listings, it became clear that there&rsquo;s really only a few designs that get sold under several different brands and that virtually all of the devices that were known to be powered by an ESP micro are no longer for sale on Amazon.</p>
<p>I eventually took a gamble on two:</p>
<ul>
<li><a href="https://www.amazon.com/gp/product/B097NHBPN9" target="_blank" rel="noopener noreffer"><code>BN-LINK U158WT</code></a></li>
<li><a href="https://www.amazon.com/gp/product/B0B5G6MDQ6" target="_blank" rel="noopener noreffer"><code>POWSAV AHR-083</code></a></li>
</ul>
<h2 id="bn-link">BN-Link</h2>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Marketing photo for the BN-Link power strip
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>This opens up with a standard philips screw driver and you only need one bit size for all screws - nice touch!</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>The screws are hiding under the anti-slip pads but instead of those being glued down, the pads use a friction fit on the <code>+</code> shaped locating pegs.
I really like this design feature as the glued pads never stick quite as well when replaced.
In addition to the 4 screws, there are several plastic clip/tabs around the permitter that take some work to carefully undo.
If you have a thin metal pry tool / spudger, it will come in handy!</p>
<p>Overall, the physical construction is solid enough and - pleasantly - serviceable.</p>
<p><figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        I&#39;m not loving the sloppy wiring connecting the USB power supply to the mains rails.
        
            
        
        </p> 
    </figcaption>
    
</figure>

</p>
<p>Like the USB power supply, the WiFi module is also separate from the main PCB.</p>
<p><figure >

    
        
    

    

    <figcaption>
        
        <p>
        You know what&#39;s cheaper than pin headers? PCB fingers in slots.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>

</p>
<p>Bad news: this module is NOT an ESP powered device.</p>
<p>Good news: there a Tasmota-like firmware for it: <a href="https://github.com/openshwprojects/OpenBK7231T_App" target="_blank" rel="noopener noreffer">OpenBK7231T</a>!</p>
<p>I&rsquo;ll go ahead and flash the OpenBK firmware and have a go to at least give it a try.</p>
<p>The relay switching electronics look reasonable enough:</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>The relays themselves are nothing special to write home about:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Note the links. I&#39;d bet that it&#39;s simpler to scale a design by copy/pasting a self-contained footprint and adjust the number of links on the BOM as needed.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>There&rsquo;s nothing remarkable about the USB Power supply; standard switch mode power supply topology.
The power conversion is done by the chip under the metal heat sink; I didn&rsquo;t bother to get an ID on it as the ports don&rsquo;t support any quick charge or power delivery protocols.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Before putting the strip back together, I secured the USB power supply wires with a bit of electrical tape to lessen the probability of a short due to insulation wearing off.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<h3 id="flashing-openbk">Flashing OpenBK</h3>
<p>I don&rsquo;t have a ton of notes about the flashing process as it was pretty straight forward.
Two small things to note:</p>
<ul>
<li>The <a href="https://github.com/OpenBekenIOT/hid_download_py" target="_blank" rel="noopener noreffer"><code>hid_download_py/uartprogram</code></a> tool needs a <a href="https://github.com/OpenBekenIOT/hid_download_py/pull/13/files" target="_blank" rel="noopener noreffer">requirements.txt</a>.</li>
<li>You can get away with only 4 wires (power, gnd, rx, tx) to program the chip but you must move very fast! It took me more than a few attempts to get the tool to connect to the bootloader on the chip; you have a very limited window for the tool to connect to the chip. I had to run connect power to the chip within about 200ms of starting the <code>uartprogram</code>. If i waited much longer, I would get <code>Cannot get bus.</code></li>
</ul>
<p>Eventually I was able to program the chip:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ python3 uartprogram ../OpenBK7231T_UA_1.15.308.bin -d /dev/ttyUSB0 -w
</span></span><span class="line"><span class="cl">UartDownloader....
</span></span><span class="line"><span class="cl">programm....
</span></span><span class="line"><span class="cl">Cannot get bus. : <span class="p">|</span>                                                  <span class="p">|</span><span class="o">[</span>    ?k/s<span class="o">]</span>
</span></span><span class="line"><span class="cl">❯ python3 uartprogram ../OpenBK7231T_UA_1.15.308.bin -d /dev/ttyUSB0 -w
</span></span><span class="line"><span class="cl">UartDownloader....
</span></span><span class="line"><span class="cl">programm....
</span></span><span class="line"><span class="cl">Gotten Bus...   : <span class="p">|</span>                                                  <span class="p">|</span><span class="o">[</span>    ?k/s<span class="o">]</span>caution: ignoring unexpected reply in SetBaudRate
</span></span><span class="line"><span class="cl">Write Successful: <span class="p">|</span><span class="c1">##################################################|[ 13.2k/s]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>The <code>caution: ignoring unexpected reply</code> came as soon as I connected the power to the programmer.</p>
<p>After figuring out the <a href="#bn-gpio-notes" rel="">GPIO assignments</a>, I did manage to get the Home Assistant / MQTT auto discovery working but - like with Tasmota - wasn&rsquo;t impressed with the lack of customization in the mqtt payloads.
I <strong>highly value</strong> having the correct device/entity class, icon, name &hellip; etc all populating in home assistant automatically; ESPHome lets me do this.</p>
<p>I&rsquo;ll keep an eye on the project and may find another use for this power strip in the future.
If ESPHome ever adds support for the <code>BK7231T</code> chips then this is <em>perfect</em>.</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Tip<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>While drafting this post, I <a href="https://old.reddit.com/r/esp8266/comments/qfg3yc/replaced_tuya_plug_controller_with_esp8266/" target="_blank" rel="noopener noreffer">came across</a> an ESP based drop in replacement for the <code>WB2S</code> module: the <a href="https://www.lcsc.com/product-detail/WiFi-Modules_Wireless-tag-WT-01N_C477823.html" target="_blank" rel="noopener noreffer"><code>WT-01N</code></a>.
Had I known, I would have just done the module swap, flashed ESPHome and stopped there.</p>
<p>While looking for the <code>WT-01N</code>, on Ali Express, I found that there&rsquo;s already a small supply of <a href="https://www.aliexpress.com/w/wholesale--ESP%2525252d02S.html?catId=0&amp;initiative_id=SB_20230114112241&amp;SearchText=%2BESP-02S&amp;spm=a2g0o.home.1000002.0&amp;dida=y" target="_blank" rel="noopener noreffer"><code>ESP-02S</code> modules that should be drop in replacements</a>!</p>
<p>Next time!</p>
</div>
        </div>
    </div>
<h4 id="wt-01n-swap">WT-01N swap</h4>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>Note<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">On a rainy afternoon in late 2023.03, I got around to doing the module swap.
Below you&rsquo;ll find the appropriate Tasmota configuration for GPIO pins.</div>
        </div>
    </div>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        And here&#39;s the Tasmota configuration for the BN-Link.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h3 id="bn-gpio-notes">BN GPIO notes</h3>
<p>The project needs some basic &ldquo;here&rsquo;s how to figure out which GPIOs do what&rdquo; docs similar to <a href="https://Tasmota.github.io/docs/Configuration-Procedure-for-New-Devices/#step-1" target="_blank" rel="noopener noreffer">these</a> but I eventually figured out the following GPIO assignments.</p>
<table>
<thead>
<tr>
<th>PIN</th>
<th>Label</th>
<th>Purpose</th>
<th>Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td>6</td>
<td>PWM0</td>
<td><code>Rel</code> 1</td>
<td>Outlet closest to the power cord.</td>
</tr>
<tr>
<td>7</td>
<td>PWM1</td>
<td>NC</td>
<td>This is not connected to the main PCB.</td>
</tr>
<tr>
<td>8</td>
<td>PWM2</td>
<td><code>Rel</code> 4</td>
<td>Outlet closest to the USB.</td>
</tr>
<tr>
<td>10</td>
<td>RXD1</td>
<td><code>Btn</code></td>
<td>This is the user button.</td>
</tr>
<tr>
<td>11</td>
<td>TXD1</td>
<td><code>WiFiLED_n</code></td>
<td>WiFi status LED.</td>
</tr>
<tr>
<td>23</td>
<td>ADC3</td>
<td>NC</td>
<td>This is not connected to the main PCB.</td>
</tr>
<tr>
<td>24</td>
<td>PWM4</td>
<td><code>Rel</code> 2</td>
<td>Second outlet from power cord.</td>
</tr>
<tr>
<td>26</td>
<td>PWM5</td>
<td><code>Rel</code> 3</td>
<td>Third outlet from power cord.</td>
</tr>
</tbody>
</table>
<h2 id="powsav">POWSAV</h2>
<p>Happy that I was able to get open firmware on the first but disappointed with the lack of customization, I moved onto the second candidate.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Marketing photo for the POWSAV power strip
        
            
        
        </p> 
    </figcaption>
    
</figure>


<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>Note<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>At one point in time, this <em>exact same device</em> was sold under the <code>ahrise</code> branding and was <a href="https://templates.blakadder.com/ahrise_AHR-083.html" target="_blank" rel="noopener noreffer">Tasmota compatible</a>.</p>
<p>The model number is the same, the templates repo picture is identical, the GPIO pinout is identical&hellip; but the linked Amazon listing is no longer available.
The PCB silk screen also include the old <code>AHR</code> markings so I&rsquo;m guessing that this was just a re-brand with the new <code>POWSAV</code> branding after switching to TuYa?</p>
</div>
        </div>
    </div>
<p>To open this one, you&rsquo;ll need a 2.2mm triangle bit.
There are 6 screws. four hidden under the anti-slip pads.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Why are the screw mounting slots not centered :/.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>The USB, WiFI and mains switching are all on a single PCB but the main power cut off and protection features are all on a separate PCB.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Nothing of concern to see on the bottom, everything looks pretty boring... which is good when it comes to mains handling!
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        About what you&#39;d expect for a PCB layout. Plenty of distance between the HV and LV sides!
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>It&rsquo;s nice to see that the surge suppression circuitry is on it&rsquo;s own PCB. Repairs there should be easier to pull off - in theory.</p>
<p>Here&rsquo;s a few more shots of the primary components/assemblies:</p>
<p><figure >

    
        
    

    

    <figcaption>
        
        <p>
        Note the silk screen: this protection PCB is common to the AHR-053 model as well.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        WB3S is a TuYa branded module that is pin compatible with the ubiquitous ESP-8266 modules.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Note the black insulating material separating the USB ports from the mains side of things.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Relatively painless extraction, only partially lifted the pad in the bottom left.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Not even 5 min later, the TuYa modules has been replaced with one running a firmware powered by ESPHome.
        
            
        
        </p> 
    </figcaption>
    
</figure>

</p>
<h3 id="powsav-gpio-notes">POWSAV GPIO notes</h3>
<p>Thanks to <a href="https://Tasmota.github.io/docs/Configuration-Procedure-for-New-Devices/#step-1" target="_blank" rel="noopener noreffer">excellent</a> Tasmota docs, it was pretty easy to figure out the mappings.</p>
<p>For reference:</p>
<table>
<thead>
<tr>
<th>PIN</th>
<th>Type</th>
<th>Number</th>
</tr>
</thead>
<tbody>
<tr>
<td>GPIO2</td>
<td><code>Led_i</code></td>
<td>1</td>
</tr>
<tr>
<td>GPIO5</td>
<td><code>Button_n</code></td>
<td>1</td>
</tr>
<tr>
<td>GPIO 12</td>
<td><code>Relay</code></td>
<td>3</td>
</tr>
<tr>
<td>GPIO 13</td>
<td><code>Relay</code></td>
<td>4</td>
</tr>
<tr>
<td>GPIO 14</td>
<td><code>Relay</code></td>
<td>2</td>
</tr>
<tr>
<td>GPIO 15</td>
<td><code>Relay</code></td>
<td>1</td>
</tr>
</tbody>
</table>
<p>And the corresponding template:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span><span class="nt">&#34;NAME&#34;</span><span class="p">:</span><span class="s2">&#34;POWSAV_AHR-083&#34;</span><span class="p">,</span><span class="nt">&#34;GPIO&#34;</span><span class="p">:[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">320</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">64</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">226</span><span class="p">,</span><span class="mi">227</span><span class="p">,</span><span class="mi">225</span><span class="p">,</span><span class="mi">224</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span><span class="nt">&#34;FLAG&#34;</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="nt">&#34;BASE&#34;</span><span class="p">:</span><span class="mi">18</span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="esphome">Esphome</h3>
<p>And here&rsquo;s a super basic ESPHome configuration using the mappings from above.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">substitutions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">friendly_name_short</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Power Strip&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">esphome</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;power-strip&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">esp8266</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">board</span><span class="p">:</span><span class="w"> </span><span class="l">esp01_1m</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Disable writing the switch mode / restore_from_flash</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">restore_from_flash</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">status_led</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">pin</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO02</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">inverted</span><span class="p">:</span><span class="w"> </span><span class="kc">True</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">binary_sensor</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># I don&#39;t know what the stock behavior was. For now, only basic control</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;${friendly_name_short} Button&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">gpio</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">internal</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO05</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">INPUT_PULLUP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">inverted</span><span class="p">:</span><span class="w"> </span><span class="kc">False</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Press is momentary quick</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_press</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">switch.toggle</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">sw_relay1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Not doing anything fancy so we can go with basic GPIO switches</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># See: https://esphome.io/components/switch/gpio.html</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">switch</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Outlet 1&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">sw_relay1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">gpio</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO15</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:numeric-1&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Don&#39;t want to wear down flash storing state, easiest to just not bother remembering</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_mode</span><span class="p">:</span><span class="w"> </span><span class="l">ALWAYS_OFF</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># See: https://developers.home-assistant.io/docs/core/entity/switch/#available-device-classes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">device_class</span><span class="p">:</span><span class="w"> </span><span class="l">OUTLET</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Outlet 2&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">sw_relay2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">gpio</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO14</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:numeric-2&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_mode</span><span class="p">:</span><span class="w"> </span><span class="l">ALWAYS_OFF</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">device_class</span><span class="p">:</span><span class="w"> </span><span class="l">OUTLET</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Outlet 3&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">sw_relay3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">gpio</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO12</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:numeric-3&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_mode</span><span class="p">:</span><span class="w"> </span><span class="l">ALWAYS_OFF</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">device_class</span><span class="p">:</span><span class="w"> </span><span class="l">OUTLET</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Outlet 4&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">sw_relay4</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">gpio</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO13</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:numeric-4&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_mode</span><span class="p">:</span><span class="w"> </span><span class="l">ALWAYS_OFF</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">device_class</span><span class="p">:</span><span class="w"> </span><span class="l">OUTLET</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>Integrating ESPHome with a cheap Geiger Counter</title><link>https://karlquinsland.com/esphome-geiger-counter/</link><pubDate>Wed, 09 Nov 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/esphome-geiger-counter/</guid><description><![CDATA[<p>Yes, there have <a href="https://community.home-assistant.io/t/geiger-counter-with-ha-integration/107660/12" target="_blank" rel="noopener noreffer">been</a> <em>loads</em> of <a href="https://www.rhelectronics.store/radiation-detector-geiger-counter-diy-kit-second-edition" target="_blank" rel="noopener noreffer">people</a> doing <a href="https://www.connectix.nl/connecting-a-geiger-counter-to-home-assistant/" target="_blank" rel="noopener noreffer">similar</a> <a href="https://old.reddit.com/r/homeassistant/comments/l92fbf/doomsday_sensor_v10/" target="_blank" rel="noopener noreffer">things</a>! ESPHome already has a tutorial <a href="https://esphome.io/cookbook/geiger-counter.html" target="_blank" rel="noopener noreffer">covering <em>exactly</em> this</a>!</p>
<p>I&rsquo;m writing this up because the approach that I ended up taking was <em>not</em> the intended/planned approach.</p>
<!-- markdownlint-disable-file MD002 -->
<h2 id="the-geiger-counter">The Geiger Counter</h2>
<p>I originally pulled the trigger on this particular version because it had a built in screen attached to a micro controller.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>I naïvely thought that I&rsquo;d be able to get a simple UART from the 4 pins next to the microcontroller or maybe even get data directly off of the micro USB port.</p>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>Info<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">As of 2022.11, the geiger counter pictured above can be found <a href="https://www.aliexpress.us/item/3256804497523971.html" target="_blank" rel="noopener noreffer">here</a>.
The listing title is <code>DIY Geiger Counter Kit Assembled Module Nuclear Radiation Detector X γ β rays Iodine 131 Detecting OLED Display Radiation Tester</code></div>
        </div>
    </div>
<h3 id="the-usb--uart-port">The USB / UART port</h3>
<p>After receiving and unpacking it, I probed around and determined that the micro USB port did have the data lines going to the <code>U5</code> micro and that the 4 pins <em>also</em> went to the micro.</p>
<p>Unfortunately both seemed dead; the pins didn&rsquo;t have any signal on them and the software on the micro implementing the USB stack didn&rsquo;t seem to be fully implemented.
Using <code>dmesg</code> I could see <em>a device</em> being plugged in but the device failed to respond to any probes.</p>
<p>So much for the easy way out.</p>
<h2 id="plan-b">Plan B</h2>
<p>With the identifying markings sanded off of the chip, attempting to dump / reverse / re-program the firmware wasn&rsquo;t the most appealing option.</p>
<p>After some quick testing, I determined that the micro controller toggles the beeper and the LED via <em>distinct</em> GPIO pins and that the LED is pulsed to 3.3v for 5ms.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>For reference, here are the points that I chose to inject power and observe the LED.
I am injecting 5V into the geiger counter from the ESP module so I can program and power the entire assembly with a single cable.
If you choose to use separate power supplies for both, make sure that the ESP and geiger counter share a ground!</p>
<p>Removing <code>R1</code> is optional; keep it if you want the beeper to click as well.
I have some thoughts on being able to toggle this behavior <a href="#beeper" rel="">below</a></p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        I left R1 in place so it&#39;s easier to reverse the mod.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>And with a bit of hot glue, we&rsquo;re done with the hardware assembly.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        There&#39;s no good place for the ESP module so I chose to strategically obfuscate the portion of the screen that does not display the actual measurements.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>Warning<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">There&rsquo;s no <em>good</em> place to put the ESP module such that the screen is unobstructed and such that the ESP is not near the geiger tube.
As the tube is charged up to ~400v, it putting the ESP module directly over it seems like a potential problem.</div>
        </div>
    </div>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        I wouldn&#39;t put the ESP right here because a) the tube is partially obstructed and b) the tube is charged to a few hundred volts and putting any delicate electronics that close seems like a bad idea.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h2 id="esphome">ESPHome</h2>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Ignore that 12 hour gap in the data... I forgot to plug the assembly back in after doing some tests.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>The firmware is pretty simple.
The configuration below is an abridged version of what I am currently using.
I&rsquo;ve stripped out unnecessary things but left some comments in to serve as basic documentation.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># To convert from particles per unit time, there&#39;s supposed to be some conversion factor.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># This conversion factor depends on the tube and the cheap Ali Express tubes all seem to be J321 style.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Not a ton of documentation out there, but I did find one source that says J321 is basically J305.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># See: https://www.radmon.org/index.php/forum/geiger-muller-tubes/1245-information-on-j321-gm-tube</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># But even then, the conversion factor is derived from some known isotope. They expose the tube to some</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#   known isotope and then measure the counts. Because they also know the proper dosing info for the</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#   isotope, the tube then gets a conversion factor.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Additionally, the micro controller sits between the raw data from the tube and the LED that I am tapping into.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Each time there is _any_ radiation detected, the micro controller pluses the LED for 5ms. In theory, multiple</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#   radioactive particles could strike the tube in the 5ms window and the microcontroller would know ... but I wouldn&#39;t.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># At 5ms per pulse, the maximum number of particles per second that I can detect is 200. Even if the TRUE count</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#   is 3x that... 200 is still way more than enough to know that _something_ isn&#39;t right and that&#39;s really what I&#39;m after here.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># So for now, just stick with basic counts per min w/ the understanding that the signal that I&#39;m observing might not</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#   be with the full resolution that the tube is capable of.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">esphome</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Note: this will be the hostname that device request during the DHCP dance...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;geiger-counter&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">esp32</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">board</span><span class="p">:</span><span class="w"> </span><span class="l">mhetesp32minikit</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Enable logging</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">logger</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">level</span><span class="p">:</span><span class="w"> </span><span class="l">INFO</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">sensor</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># See: https://esphome.io/components/sensor/pulse_counter.html</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Particle Count</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">pulse_counter</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">sense_p_cnt</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Does not really matter which pin for ESP32</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO32</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">use_pcnt</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Measured with oScope: pulse is 5ms _exactly_.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Docs say to use falling edge detection with the hardware pulse counter</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">count_mode</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">rising_edge</span><span class="p">:</span><span class="w"> </span><span class="l">DISABLE</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">falling_edge</span><span class="p">:</span><span class="w"> </span><span class="l">INCREMENT</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Docs ALSO say that you can&#39;t configure a filter of more than 13us when using the</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">#   internal pulse counter. 5ms is ... 5000 us and that&#39;s more than 13us so I guess we&#39;ll</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">#   stick with the defaults?</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">internal_filter</span><span class="p">:</span><span class="w"> </span><span class="l">13us</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># As best I can tell, pulses trigger an ISR which just increases some counter somewhere.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Every update_interval, esphome checks the value in the storage and computes the count</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">#   per min.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">update_interval</span><span class="p">:</span><span class="w"> </span><span class="l">60s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">unit_of_measurement</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;cpm&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">state_class</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;measurement&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:radioactive-circle-outline&#34;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="beeper">Beeper</h3>
<p>I can&rsquo;t confirm it, but I suspect that the beeper is driven independently of the LED because the original designer wanted to implement a software toggle for the sound.</p>
<p>I don&rsquo;t need the sound functionality but I also don&rsquo;t want to <em>permanently</em> disable it. It would be nice to be able to toggle it on/off as needed.
There are a few ways to get similar functionality:</p>
<ul>
<li>
<p>Hack the hardware&hellip; more. The TO92 driving the beeper (via <code>R1</code>) is a <code>SS9014 NPN</code>. I could add <em>another</em> transistor in series with <code>R1</code> and then control the current flow via another GPIO on the ESP.</p>
</li>
<li>
<p>Inspired by this <a href="https://old.reddit.com/r/Esphome/comments/uhu3uy/trying_to_detect_falling_edge_on_input_where_also/" target="_blank" rel="noopener noreffer">reddit thread</a>, I could try to get the ESP to toggle a beeper directly when a pulse is detected.
There are some issues with this approach, though.</p>
</li>
</ul>
<p>It is not possible to get <em>direct</em> access to the ISR via ESPHome.
I&rsquo;d have to create my own custom component to pull this off.
Not the end of the world but also more time than I wanted to spend so I went with a different approach that <em>appears to work</em>.</p>
<p>Basically, create <em>two</em> instances of the <a href="https://esphome.io/components/sensor/pulse_counter.html" target="_blank" rel="noopener noreffer"><code>pulse_counter</code></a> sensor using the same GPIO pin.
One of them will remain external and will publish data to Home Assistant at 60s intervals.
The other will be internal and will be updated every <code>loop()</code>.
By attaching a <a href="https://esphome.io/guides/automations.html#lambda-action" target="_blank" rel="noopener noreffer"><code>lambda</code> function</a> to the sensor evaluation loop, we can compare the number of recorded pulses many times per second.
The number of cycles that the internal pulse counter will sum pulses over is 1 so any time the current value does not match the previous value &hellip; should indicate that a pulse was fired off.</p>
<p>Here&rsquo;s what I came up with:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">sensor</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># See: https://esphome.io/components/sensor/pulse_counter.html</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Particle Count</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># &lt;...&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">INTERNAL Particle Count</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">internal</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">pulse_counter</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># &lt;... literally the exact same config as the external pulse counter ...&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 0ms means every loop()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">update_interval</span><span class="p">:</span><span class="w"> </span><span class="l">0ms</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">filters</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># LogE because we want it to stand out on the console while testing</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          static int num_zeros = 0;
</span></span></span><span class="line"><span class="cl"><span class="sd">          if (x &gt; 0) {
</span></span></span><span class="line"><span class="cl"><span class="sd">            // reset
</span></span></span><span class="line"><span class="cl"><span class="sd">            num_zeros = 0;
</span></span></span><span class="line"><span class="cl"><span class="sd">            // Indicate that a non 0 measurement was taken and dump to console
</span></span></span><span class="line"><span class="cl"><span class="sd">            // This is where a beeper would be fired off if desired...
</span></span></span><span class="line"><span class="cl"><span class="sd">            ESP_LOGE(&#34;filterLambda&#34;, &#34;raw is %f&#34;, x );
</span></span></span><span class="line"><span class="cl"><span class="sd">          } else {
</span></span></span><span class="line"><span class="cl"><span class="sd">            num_zeros++;
</span></span></span><span class="line"><span class="cl"><span class="sd">          }
</span></span></span><span class="line"><span class="cl"><span class="sd">          // Dont spam console
</span></span></span><span class="line"><span class="cl"><span class="sd">          if (num_zeros % 1000 == 0) {
</span></span></span><span class="line"><span class="cl"><span class="sd">            ESP_LOGI(&#34;filterLambda&#34;, &#34;num_zeros is %d&#34;, num_zeros );
</span></span></span><span class="line"><span class="cl"><span class="sd">          }
</span></span></span><span class="line"><span class="cl"><span class="sd">          return x;</span><span class="w">          
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>In testing, I would get logs like:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">[17:34:18][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:34:18][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:34:19][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:34:19][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:34:19][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:34:19][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:34:20][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:34:20][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:34:22][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:34:22][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:34:24][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:34:24][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:34:24][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:34:24][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:34:25][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:34:25][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:34:26][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:34:26][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:34:32][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:34:32][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:34:33][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:34:33][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:34:35][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:34:35][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:34:40][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:34:40][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:34:42][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:34:42][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:34:43][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:34:43][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:34:44][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:34:44][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:34:45][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:34:45][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:34:46][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:34:46][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:34:47][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:34:47][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:34:50][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:34:50][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:34:52][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:34:52][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:34:54][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:34:54][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:34:58][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:34:58][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:35:00][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:35:00][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:35:02][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:35:02][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:35:05][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:35:05][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:35:11][I][filterLambda:170]: num_zeros is 1000
</span></span><span class="line"><span class="cl">[17:35:17][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:35:17][I][filterLambda:170]: num_zeros is 0
</span></span></code></pre></td></tr></table>
</div>
</div><p>The period between <code>17:34:18</code> and <code>17:35:17</code> is basically 60 seconds long and the number of times that <code>num_zeros is 0</code> is printed is 27.
Coincidentally, the external facing sensor published a value of 27 to Home Assistant.</p>
<p>This is not a <em>conclusive</em> test but - at least at <strong>background</strong> radiation levels - using two instances of the same sensor type on the same GPIO might work.</p>
<p>I don&rsquo;t have any easy way to induce higher counts on the geiger tube so I can&rsquo;t test how well this holds up &ldquo;under load&rdquo; nor can I confirm that this works reliably across all ESP chips/modules and versions of ESPHome/PlatformIO&hellip;etc.</p>
<p>Doing this with a custom component probably is the better way to do it but I wasn&rsquo;t going to pull that off in the time I had allotted.</p>
]]></description></item><item><title>Quick look inside two Ali Express mmWave presence detection sensors</title><link>https://karlquinsland.com/two-mmwave-sensors/</link><pubDate>Tue, 01 Nov 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/two-mmwave-sensors/</guid><description><![CDATA[<p>Millimeter Wave technology has recently hit &ldquo;mass consumer product adoption&rdquo; price points.
A casual search for &ldquo;human presence sensor&rdquo; on Ali Express will turn up a seemingly endless number of sub $40 devices that can detect movement far more accurately than any old PIR sensor.</p>
<p>Each listing is fairly generic; there&rsquo;s no explicit manufacturer details but they all use the same marketing images:</p>
<p><figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>

</p>
<p>As the photos below will show, neither device is super well marked with a model number so I&rsquo;ll just refer to each by either the color of the enclosure or by the radar sensor inside.</p>
<p>Before getting into the specific modules, a brief look at the packaging for both.</p>
<h2 id="packaging">Packaging</h2>
<p>The packaging isn&rsquo;t anything special but I am including pictures here in the off chance that some of the Mandarin markings is useful for somebody.</p>
<p><figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>

</p>
<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>Micro USB in 2022?!<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Both devices featured here have <em>micro</em> USB leads.
It&rsquo;s 2022 and we&rsquo;re still using MICRO USB for power?
I know that USB-C connectors are slightly more expensive but it just seems lazy and dated to put a micro USB port on any new design in 2022!</div>
        </div>
    </div>
<div class="details admonition question open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-question-circle fa-fw"></i>uart?<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">I did probe both of the 4 pin connectors on the PCB but didn&rsquo;t see any signs of life.
If those headers are for a UART, the MCU isn&rsquo;t responding to any inputs nor is it putting anything out over it :(.</div>
        </div>
    </div>
<!-- markdownlint-disable-file MD002 -->
<h2 id="zy-m100-s"><code>ZY-M100-S</code></h2>
<p>AKA &ldquo;the white one&rdquo;. Box content is bare-bones; the USB lead is comically short for almost any &ldquo;mid height on the wall&rdquo; or ceiling installs so i&rsquo;m not really sure what the point was.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>I&rsquo;m not sure why they went with 3 screws here instead of 4. If you&rsquo;re going to omit <em>a</em> screw for cost-cutting reasons, why not just use clips or a single screw in the middle?</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        No, it&#39;s not the camera or the lighting, the text really is that blurry in real life.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>The interior is more or less as expected; two highly integrated modules with a small MCU gluing them together.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>There is some evidence that the Zigbee version of the white sensor supports ambient brightness.
Based on the two small holes in the enclosure and the PCB markings, I suspect that <code>d2</code> is being used as a light sensor:
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>

</p>
<p>Nothing of interest on the bottom of the PCB:
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>

</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Close up of the sensor MCU
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h3 id="unique-markings">Unique Markings</h3>
<ul>
<li>PCB: <code>ZY-M100</code> and <code>V4.20</code></li>
<li>TuYa radio: <a href="https://developer.tuya.com/en/docs/iot/wbr3-module-datasheet?id=K9dujs2k5nriy" target="_blank" rel="noopener noreffer"><code>WBR3</code></a></li>
<li>TuYa mcu: <a href="https://www.gigadevice.com/products/microcontrollers/gd32/arm-cortex-m23/value-line/gd32e230-series/" target="_blank" rel="noopener noreffer"><code>GD32E230</code></a></li>
<li>Radar sensor: <code>JYSJ_5807_A01</code> with an IC marked <code>SJ 501</code>. <del>No results on this one. Please do <a href="/contact/" rel="">get in touch</a> if you do know anything about it. I&rsquo;d love to re-use the sensor in something else!</del></li>
</ul>
<div class="details admonition update open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>We have an ID!<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>Thanks to the prolific <a href="https://blakadder.com/zy-m100/" target="_blank" rel="noopener noreffer">blakadder.com for bringing it to my attention</a> and <a href="https://community.home-assistant.io/u/crlogic" target="_blank" rel="noopener noreffer">@crlogic</a> from the Home Assistant community forums <a href="https://community.home-assistant.io/t/mmwave-wars-one-sensor-module-to-rule-them-all/453260/73" target="_blank" rel="noopener noreffer">for identifying the module <em>and</em> linking to a datasheet</a>!</p>
<p>The module is <a href="http://docs.leapmmw.com/%E4%BC%A0%E6%84%9F%E5%99%A8%E4%BA%A7%E5%93%81/%E6%A8%A1%E5%9D%97/module.html" target="_blank" rel="noopener noreffer"><code>Leapmmw 5.8GHz Motion Detection: MD5G20</code></a></p>
</div>
        </div>
    </div>
<h2 id="the-micradar-rd24d">The <code>MicRadar RD24D</code></h2>
<p>AKA &ldquo;the black one&rdquo;.</p>
<p>Like the M100, there&rsquo;s not a ton in the box.</p>
<p>The rear enclosure has a simple key-hole slot for mounting to a wall or ceiling and the USB power lead is considerably longer than the M100. Somebody did consider that a celling-mounted device might need a long power lead&hellip;</p>
<p><figure >

    
        
    

    

    <figcaption>
        
        <p>
        Yes, that is a neo-pixel LEDin the center of the opaque plastic panel.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>

</p>
<p>Same story here: WiFi module and radar sensor both talk to a MCU over UART.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Nothing remarkable on the bottom of the PCB:
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        They only soldered in one half of the pins connecting the radar sensor to the main PCB. I wonder how much time/money that saved...
        
            
        
        </p> 
    </figcaption>
    
</figure>

</p>
<p>Here&rsquo;s a close up of the business end of the sensor. This one is considerably more sophisticated and complex relative to the white one.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>And a close up of the coordinating MCU</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<!-- markdownlint-disable-file MD024 -->
<h3 id="unique-markings-1">Unique Markings</h3>
<ul>
<li>PCB: <code>V1.01</code></li>
<li>TuYa radio: <a href="https://developer.tuya.com/en/docs/iot/cb3s?id=Kai94mec0s076" target="_blank" rel="noopener noreffer"><code>CB3S</code></a></li>
<li>TuYa mcu: <a href="https://www.stcmicro.com/stc/stc8g1k08.html" target="_blank" rel="noopener noreffer">STC 8G1K17</a></li>
<li>Radar sensor: <code>MicRadar R24D</code>. I can&rsquo;t find a datasheet for the specific module, but it does seem to be part of <a href="https://www.iflabel.com/product/28.html" target="_blank" rel="noopener noreffer">this product family</a>.
<ul>
<li>IC1: <code>MicRadar / T15BT / DAT2230</code></li>
<li>IC2: This above picture isn&rsquo;t the best but the chip is marked with <code>S3KM11L / N46Y80D1 / 2123H</code>. The <a href="https://www.ic37.com/news/2022-3_293564/" target="_blank" rel="noopener noreffer"><em>only</em> google result</a> does not really indicate <em>who</em> makes the chip.</li>
</ul>
</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>Neither are going to be quick/easy to convert or otherwise get working with the likes of ESPHome or Tasmota:</p>
<ul>
<li>Neither wifi module is an espressif module. At least some re-flow work would be required to replace the modules with an Espressif module.</li>
<li>There&rsquo;s a MCU sitting between the WiFi module and the actual sensor. Reverse engineering how the TuYa radio talks to the MCU and how the MCU talks to the radar module just isn&rsquo;t worth the time!</li>
</ul>
<p>The sensors cost about as much as the bare radar modules themselves so - if you&rsquo;re willing to spend the time to desolder the radar modules - you get an enclosure for &ldquo;free&rdquo;.</p>
]]></description></item><item><title>ESPHome for Sinilink PC remotes</title><link>https://karlquinsland.com/esphome-sinilink-pc-remotes/</link><pubDate>Sat, 22 Oct 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/esphome-sinilink-pc-remotes/</guid><description><![CDATA[<h1 id="pc-power-remote-control">PC (power) remote control</h1>
<p>While doing research for a potential project, I stumbled onto a device that fit&rsquo;s so squarely into that &ldquo;it&rsquo;s so simple and obvious, why didn&rsquo;t I think tof that?!&rdquo; category that I immediately placed an order for a few.</p>
<p>That device?</p>
<p>A simple WiFi equipped micro controller that gets wired between the power button on a PC and the motherboard.
This makes it possible to remotely control and monitor the power state of any PC!</p>
<p>I am using these devices in conjunction with my <a href="/hdmi-kvm-teardown-and-esphome/" rel="">previously integrated KVM switch</a> to automate turning hosts on/off as they are activated/deactivated on the KVM switch.</p>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>Note<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>There are <em>several</em> different types of device on Ali Express.
Most appear to use TuYa MCUs so it&rsquo;s not immediately clear if/how those devices can be converted to use ESPHome or not; buy those at your own risk.</p>
<p>The two Sinilink devices liked below are trivial to get working with ESPHome/Tasmota though!</p>
</div>
        </div>
    </div>
<ul>
<li><a href="https://templates.blakadder.com/sinilink_XY-WPCE.html" target="_blank" rel="noopener noreffer">Sinilink PCIe Computer Remote (XY-WPCE)</a></li>
<li><a href="https://templates.blakadder.com/sinilink_XY-WPCL.html" target="_blank" rel="noopener noreffer">Sinilink USB Computer Remote (XY-WPCL)</a></li>
</ul>
<p><figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>

</p>
<p>The PCI Express version is simpler to integrate with a PC as it uses the 3.3v power rails to determine when the PC is on.
The USB version does not have this luxury so power must be supplied via the DC barrel jack.
Additionally, the USB version is also wired series with the power LED(s) on the computer so the module can discern the PCs power state.</p>
<div class="details admonition question open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-question-circle fa-fw"></i>Why not just use Wake On Lan?<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>Yes, Home Assistant does have support for <a href="https://www.home-assistant.io/integrations/wake_on_lan/" target="_blank" rel="noopener noreffer">Wake On Lan</a> but I chose not to use it for a few reasons:</p>
<ul>
<li>
<p>Does not work across subnets. WoL uses a broadcast packet and routers tend to frown on forwarding those between subnets. As my HA instance runs inside of Kubernetes, it&rsquo;s going to be more than a little difficult to get the WoL packets out of the cluster!</p>
</li>
<li>
<p>Does not do status checking. The Sinilink modules have direct feedback about the state of the PC power.</p>
</li>
<li>
<p>Does not do shutdown. There is no WoL packet that can send a PC back to sleep!</p>
</li>
</ul>
</div>
        </div>
    </div>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Tip<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>If you use the PCI Express version and find that the module does not stay powered up while the PC is asleep/off, check your PC BIOS for <a href="https://superuser.com/questions/1074074/disadvantages-of-enabling-erp-in-bios" target="_blank" rel="noopener noreffer"><code>ErP</code> settings</a>.</p>
<p>I had to explicitly turn off ErP <em>and</em> permit the PC to wake from PCI-E devices before the 3.3v standby rail was activated.</p>
</div>
        </div>
    </div>
<h2 id="a-quick-detour-about-write_flash-errors">A quick detour about <code>write_flash</code> errors</h2>
<p>I don&rsquo;t see this error <em>often</em> but I do see it enough to warrant talking about.</p>
<p>I ordered 3 of the PCI Express <em>and</em> the USB version of the devices above.
Of the 6 devices I received, 3 didn&rsquo;t &ldquo;take&rdquo; the custom firmware.</p>
<p>Devices that have defects with the onboard flash will appear to be function when probed with <code>esptool.py</code> but will exhibit some sort of error when doing any <code>write_flash</code> operations.</p>
<p>The symptoms present like this</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># Note the baud rate; it&#39;s considerably slower than the default baud rate.</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Trying lower baud rates is a suggested &#39;fix&#39;.</span>
</span></span><span class="line"><span class="cl">❯ esptool.py -b <span class="m">19200</span> --port /dev/ttyUSB0 write_flash -fs 1MB -fm dout 0x0 ~/Downloads/tasmota-lite.bin
</span></span><span class="line"><span class="cl">esptool.py v3.3.1
</span></span><span class="line"><span class="cl">Serial port /dev/ttyUSB0
</span></span><span class="line"><span class="cl">Connecting...................
</span></span><span class="line"><span class="cl">Detecting chip type... Unsupported detection protocol, switching and trying again...
</span></span><span class="line"><span class="cl">Connecting...
</span></span><span class="line"><span class="cl">Detecting chip type... ESP8266
</span></span><span class="line"><span class="cl">Chip is ESP8285H16
</span></span><span class="line"><span class="cl">Features: WiFi, Embedded Flash
</span></span><span class="line"><span class="cl">Crystal is 26MHz
</span></span><span class="line"><span class="cl">MAC: e8:aa:bb:cc:dd:ee
</span></span><span class="line"><span class="cl">Uploading stub...
</span></span><span class="line"><span class="cl">Running stub...
</span></span><span class="line"><span class="cl">Stub running...
</span></span><span class="line"><span class="cl">Configuring flash size...
</span></span><span class="line"><span class="cl">Flash will be erased from 0x00000000 to 0x0007afff...
</span></span><span class="line"><span class="cl">Compressed <span class="m">501328</span> bytes to 358200...
</span></span><span class="line"><span class="cl">Wrote <span class="m">501328</span> bytes <span class="o">(</span><span class="m">358200</span> compressed<span class="o">)</span> at 0x00000000 in 188.8 seconds <span class="o">(</span>effective 21.2 kbit/s<span class="o">)</span>...
</span></span><span class="line"><span class="cl">File  md5: 693ff98fbada203ab23ced0650e45ab7
</span></span><span class="line"><span class="cl">Flash md5: 2a3e7abaf93800f4193d03a9da8c52fa
</span></span><span class="line"><span class="cl">MD5 of 0xFF is 36d49993e146cee00d35f8793084f71c
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">A fatal error occurred: MD5 of file does not match data in flash!
</span></span></code></pre></td></tr></table>
</div>
</div><p>and</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ esptool.py --port /dev/ttyUSB0 write_flash -fs 1MB -fm dout 0x0 ~/Downloads/tasmota-lite.bin
</span></span><span class="line"><span class="cl">esptool.py v3.3.1
</span></span><span class="line"><span class="cl">Serial port /dev/ttyUSB0
</span></span><span class="line"><span class="cl">Connecting...
</span></span><span class="line"><span class="cl">Detecting chip type... Unsupported detection protocol, switching and trying again...
</span></span><span class="line"><span class="cl">Connecting...
</span></span><span class="line"><span class="cl">Detecting chip type... ESP8266
</span></span><span class="line"><span class="cl">Chip is ESP8285H16
</span></span><span class="line"><span class="cl">Features: WiFi, Embedded Flash
</span></span><span class="line"><span class="cl">Crystal is 26MHz
</span></span><span class="line"><span class="cl">MAC: e8:aa:bb:cc:dd:ee
</span></span><span class="line"><span class="cl">Stub is already running. No upload is necessary.
</span></span><span class="line"><span class="cl">Configuring flash size...
</span></span><span class="line"><span class="cl">Flash will be erased from 0x00000000 to 0x0007afff...
</span></span><span class="line"><span class="cl">Compressed <span class="m">501328</span> bytes to 358200...
</span></span><span class="line"><span class="cl">Writing at 0x00075960... <span class="o">(</span><span class="m">100</span> %<span class="o">)</span>
</span></span><span class="line"><span class="cl">A fatal error occurred: Serial data stream stopped: Possible serial noise or corruption.
</span></span></code></pre></td></tr></table>
</div>
</div><p>There are a few &ldquo;fixes&rdquo; for this issue but none worked for me:</p>
<ul>
<li>Check for loose or fault connections.</li>
<li>Use a robust power supply</li>
<li>Try <code>write_flash_status</code> with <code>--non-volatile 0</code></li>
<li>Try a different USB &lt;-&gt; 232/TTL adapter</li>
</ul>
<p>I tried <em>all</em> of the above and nothing worked.</p>
<ul>
<li>I soldered wires directly to the modules instead of just inserting pins into the programming header.</li>
<li>I tried a <a href="/electronics-lab-enhanced-bench-psu/" rel="">power supply that can supply <em>considerably more</em> than</a> the ~200 ma needed to power/flash the chip.</li>
<li>I tried a few different USB ports and a few different USB &lt;-&gt; TTL adapters with both counterfeit and authentic FTDI chips.</li>
<li>I used <code>read_flash_status</code> and saw that the <code>--non-volatile</code> settings were already <code>0x0000</code>.</li>
</ul>
<p>None of the above worked for me.</p>
<p>While disappointing and frustrating, there&rsquo;s only one probable conclusion: there&rsquo;s a subtle defect in the flash memory that either wasn&rsquo;t noticed or checked for at the factory when the OEM firmware was flashed onto the devices.</p>
<p>I cut my losses and moved on.</p>
<h2 id="esphome-configurations">ESPHome configurations</h2>
<p>For SEO/Archival purposes, I have also uploaded a copy of the config to the <a href="https://github.com/esphome-devices/esphome-devices/pull/294" target="_blank" rel="noopener noreffer">esphome-devices.com</a> site.
<del>As of publishing <em>this</em> article, the PR is pending review.
If/When the page goes live, I&rsquo;ll update the link here.</del></p>
<div class="details admonition success open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-check-circle fa-fw"></i>Success<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">The pr is <a href="https://www.esphome-devices.com/devices/Sinilink-XY-WPCE" target="_blank" rel="noopener noreffer">LIVE</a>. Thanks to the super quick work of <a href="https://github.com/tekmaven" target="_blank" rel="noopener noreffer"><code>@tekmaven</code></a>!</div>
        </div>
    </div>
<p>The configurations there are bare-bones and cover <em>just</em> the basics required to get the GPIO working with ESPhome.</p>
<p>The configuration below is a bit more featured and is a lot closer to the versions that I use in production.
It features a &ldquo;pc power button lockout&rdquo; feature and more.</p>
<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>Warning<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">The code below will not compile &ldquo;as is&rdquo;.
All of the entities under the <code>packages:</code> heading are &ldquo;standard&rdquo; across all of my ESPHome configurations and are not included here.
Either remove them or substitute as needed to get something that works for <em>you</em>.</div>
        </div>
    </div>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span><span class="lnt">160
</span><span class="lnt">161
</span><span class="lnt">162
</span><span class="lnt">163
</span><span class="lnt">164
</span><span class="lnt">165
</span><span class="lnt">166
</span><span class="lnt">167
</span><span class="lnt">168
</span><span class="lnt">169
</span><span class="lnt">170
</span><span class="lnt">171
</span><span class="lnt">172
</span><span class="lnt">173
</span><span class="lnt">174
</span><span class="lnt">175
</span><span class="lnt">176
</span><span class="lnt">177
</span><span class="lnt">178
</span><span class="lnt">179
</span><span class="lnt">180
</span><span class="lnt">181
</span><span class="lnt">182
</span><span class="lnt">183
</span><span class="lnt">184
</span><span class="lnt">185
</span><span class="lnt">186
</span><span class="lnt">187
</span><span class="lnt">188
</span><span class="lnt">189
</span><span class="lnt">190
</span><span class="lnt">191
</span><span class="lnt">192
</span><span class="lnt">193
</span><span class="lnt">194
</span><span class="lnt">195
</span><span class="lnt">196
</span><span class="lnt">197
</span><span class="lnt">198
</span><span class="lnt">199
</span><span class="lnt">200
</span><span class="lnt">201
</span><span class="lnt">202
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">substitutions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Displayed in HA frontend</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">friendly_name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Desktop Power Control&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">friendly_name_short</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Desktop&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">hostname</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;desktop-power-control&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">esphome</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">${hostname}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Shows up in UI</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">comment</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Remote power button for ${friendly_name_short}.&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">esp8266</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Specifically a &#39;ESP8285H16&#39; with 2MB built in flash</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># See: https://docs.platformio.org/en/stable/boards/espressif8266/esp8285.html</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">board</span><span class="p">:</span><span class="w"> </span><span class="l">esp8285</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">logger</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">level</span><span class="p">:</span><span class="w"> </span><span class="l">INFO</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># See: https://esphome.io/guides/configuration-types.html#packages</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">packages</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># General</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">wifi</span><span class="p">:</span><span class="w"> </span>!<span class="l">include ../../packages/wifi.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">mqtt</span><span class="p">:</span><span class="w"> </span>!<span class="l">include ../../packages/mqtt.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">time</span><span class="p">:</span><span class="w"> </span>!<span class="l">include ../../packages/ntp.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ota</span><span class="p">:</span><span class="w"> </span>!<span class="l">include ../../packages/ota.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">web_server</span><span class="p">:</span><span class="w"> </span>!<span class="l">include ../../packages/web_server.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">status_led</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">pin</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO02</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">inverted</span><span class="p">:</span><span class="w"> </span><span class="kc">True</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Keep track of weather or not case button press should be forwarded to the motherboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">globals</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_relay_latched</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">bool</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_value</span><span class="p">:</span><span class="w"> </span><span class="kc">no</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">initial_value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;true&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">script</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">regular_press</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">single</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">output.turn_on</span><span class="p">:</span><span class="w"> </span><span class="l">out_relay</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">delay</span><span class="p">:</span><span class="w"> </span><span class="l">.5s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">output.turn_off</span><span class="p">:</span><span class="w"> </span><span class="l">out_relay</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">long_press</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">single</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">output.turn_on</span><span class="p">:</span><span class="w"> </span><span class="l">out_relay</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># MB seems to respond to 5s, add 2 just to be safe</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">delay</span><span class="p">:</span><span class="w"> </span><span class="l">7s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">output.turn_off</span><span class="p">:</span><span class="w"> </span><span class="l">out_relay</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">button</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># We expose a button to the HA web UI that mimics the &#34;forceful&#34; power down sequence</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;${friendly_name_short} Long Press&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">btn_forceful_down</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_press</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          // If the power state is off, we&#39;ll emit a WARN level message before running the script
</span></span></span><span class="line"><span class="cl"><span class="sd">          if( !id(inp_power_status).state ){
</span></span></span><span class="line"><span class="cl"><span class="sd">            ESP_LOGW(&#34;forcefulShutdown&#34;, &#34;Power state is OFF but forceful shutdown requested...&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">          } else {
</span></span></span><span class="line"><span class="cl"><span class="sd">            ESP_LOGW(&#34;forcefulShutdown&#34;, &#34;Power state is ON. Forceful shutdown requested...&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">          }
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(long_press).execute();</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">binary_sensor</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># React to connection status, if needed</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">&lt;&lt;</span><span class="p">:</span><span class="w"> </span>!<span class="l">include ../../packages/binary_sensor/connection_status.config.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;${friendly_name_short} WiFi Config Button&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">gpio</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">inp_wifi_cfg_btn</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;diagnostic&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:radiobox-marked&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO04</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">INPUT_PULLUP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">inverted</span><span class="p">:</span><span class="w"> </span><span class="kc">True</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;${friendly_name_short} Case Button&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">gpio</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">inp_pc_case_btn_status</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;diagnostic&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:power-standby&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO10</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">INPUT_PULLUP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">inverted</span><span class="p">:</span><span class="w"> </span><span class="kc">True</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_press</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">if</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">condition</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;return id(glbl_relay_latched);&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">output.turn_on</span><span class="p">:</span><span class="w"> </span><span class="l">out_relay</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">else</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">logger.log</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;PC Case button press but disarmed!&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_release</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">if</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">condition</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;return id(glbl_relay_latched);&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">output.turn_off</span><span class="p">:</span><span class="w"> </span><span class="l">out_relay</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">else</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">logger.log</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;PC Case button release but disarmed!&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Press is momentary quick</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_click</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">            // If relay isn&#39;t latched, do nothing
</span></span></span><span class="line"><span class="cl"><span class="sd">            if( !id(glbl_relay_latched) ){
</span></span></span><span class="line"><span class="cl"><span class="sd">              ESP_LOGD(&#34;caseBtnPress&#34;, &#34;button pressed, not latched so doing nothing.&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">              return;
</span></span></span><span class="line"><span class="cl"><span class="sd">            }
</span></span></span><span class="line"><span class="cl"><span class="sd">            ESP_LOGD(&#34;caseBtnPress&#34;, &#34;button pressed, latched. Toggling power now...&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(sw_pc_power).toggle();</span><span class="w">            
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_multi_click</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">timing</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="kc">ON</span><span class="w"> </span><span class="l">for at most 1s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="kc">OFF</span><span class="w"> </span><span class="l">for at most 2s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="kc">ON</span><span class="w"> </span><span class="l">for at most 1s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="kc">OFF</span><span class="w"> </span><span class="l">for at most 2s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="kc">ON</span><span class="w"> </span><span class="l">for at most 1s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="kc">OFF</span><span class="w"> </span><span class="l">for at most 2s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># We&#39;d want to press a virtual / template button for hard power down</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># That template button would run a script that just raised the output hight for 10s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">logger.log</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Triple clicked!&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">button.press</span><span class="p">:</span><span class="w"> </span><span class="l">btn_forceful_down</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;${friendly_name_short} Power Status&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">gpio</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">inp_power_status</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">device_class</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;power&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;diagnostic&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:power-settings&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO12</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">INPUT_PULLUP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">inverted</span><span class="p">:</span><span class="w"> </span><span class="kc">True</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">switch</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;${friendly_name_short} Relay Latch&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">sw_relay_mode</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">device_class</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;switch&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:link-variant&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;config&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      if (id(glbl_relay_latched)) {
</span></span></span><span class="line"><span class="cl"><span class="sd">        return true;
</span></span></span><span class="line"><span class="cl"><span class="sd">      } else {
</span></span></span><span class="line"><span class="cl"><span class="sd">        return false;
</span></span></span><span class="line"><span class="cl"><span class="sd">      }</span><span class="w">      
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">turn_on_action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">globals.set</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_relay_latched</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;true&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">turn_off_action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">globals.set</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_relay_latched</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;false&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;${friendly_name_short} Power&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">sw_pc_power</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:power-plug&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">device_class</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;switch&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      if (id(inp_power_status).state) {
</span></span></span><span class="line"><span class="cl"><span class="sd">        return true;
</span></span></span><span class="line"><span class="cl"><span class="sd">      } else {
</span></span></span><span class="line"><span class="cl"><span class="sd">        return false;
</span></span></span><span class="line"><span class="cl"><span class="sd">      }</span><span class="w">      
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Mimic the user pressing the button</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">turn_on_action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">script.execute</span><span class="p">:</span><span class="w"> </span><span class="l">regular_press</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">turn_off_action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">script.execute</span><span class="p">:</span><span class="w"> </span><span class="l">regular_press</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">output</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">gpio</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">out_relay</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO5</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item></channel></rss>