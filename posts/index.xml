<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>All Posts - karl</title><link>https://karlquinsland.com/posts/</link><description>All Posts | karl</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 31 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://karlquinsland.com/posts/" rel="self" type="application/rss+xml"/><item><title>I made a thing: Yet another 3d printed speaker</title><link>https://karlquinsland.com/3d-printed-subwoofer-and-arylic-amp-enclosure/</link><pubDate>Wed, 31 Aug 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/3d-printed-subwoofer-and-arylic-amp-enclosure/</guid><description><![CDATA[<!-- markdownlint-disable-file MD002 -->
<h1 id="background">Background</h1>
<p>Long story made <strong><em>very</em></strong> short: the amplifier inside my ancient 2.1 desktop speakers died and I couldn&rsquo;t find anything &ldquo;off the shelf&rdquo; that would serve as a suitable replacement <em>and</em> integrate well with Home Assistant.</p>
<p>So if you can&rsquo;t buy it, you have to build it!
And as it turns out, there&rsquo;s a whole community of audiophiles that have published designs on all the usual places you&rsquo;d find free designs for makers.
Similarly, there&rsquo;s a few companies that seems to specialize in audio electronics aimed <em>specifically at</em> people that are building their own speaker systems and just want someone else to handle the electronics and software.</p>
<p>This post will cover the design tweaks I made to an existing subwoofer assembly and an original amplifier electronics/enclosure design.</p>
<h2 id="the-components">The components</h2>
<p>There are two assemblies in this build: the subwoofer and the receiver/power-electronics enclosure.</p>
<p>The subwoofer is a remix of the amazing <a href="https://www.printables.com/model/84521-skeleton-waveguide-subwoofer-speaker-fusion-360-ar" target="_blank" rel="noopener noreffer"><code>Skeleton Waveguide Subwoofer Speaker</code></a> by <a href="https://www.printables.com/social/107245-zx82net/about" target="_blank" rel="noopener noreffer"><code>zx82net</code></a> which is a remix of <a href="https://www.printables.com/model/190762-hexibox-series-tang-band-w3-1876s-microsub" target="_blank" rel="noopener noreffer"><code>&quot;HexiBox&quot; Tang Band W3-1876S Subwoofer Enclosure</code></a>
by <a href="https://www.printables.com/social/264072-hexibase/about" target="_blank" rel="noopener noreffer"><code>hexibase</code></a>.</p>
<p>As for the drive electronics, I elected to use an <a href="https://www.arylic.com/products/up2stream-amp-2-1-amp-board" target="_blank" rel="noopener noreffer">Up2Stream Amp 2.1 - Multiroom Wireless 2.1 Amplifier Board</a>.
This appears to be based on a MediaTek based module module from <a href="https://www.linkplay.com/" target="_blank" rel="noopener noreffer"><code>LinkPlay</code></a>.</p>
<p>I could do a whole <em>series</em> of posts based on the firmware alone but for now I&rsquo;ll just say that it is 1) trivial to root and 2) <strong>should not be exposed directly to the internet for any reason whatsoever.</strong></p>
<p>I&rsquo;m not equipped to verify any of the claims made by the original subwoofer designer so I can only offer my subjective take; this subwoofer offers more wubz at greater distances and that&rsquo;s <em>before</em> I add +10db to the bass via the equalizer on the amp!</p>
<h2 id="tweaks">Tweaks</h2>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The green elements are meant to be printed in TPU or another gasket like material. The cable channel runs from the RCA jack enclosure in the rear (pink color), under the gasket material to the main speaker cavity.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h3 id="wiring">Wiring</h3>
<ul>
<li>There is now an integrated channel for standard 16 AWG speaker wire that runs from the main cavity, through each baffle, to the exterior.
<ul>
<li>This cable channel also increases rigidity which aids in printing and assembly.</li>
</ul>
</li>
<li>The rear of the subwoofer body features some attachment points for a simple enclosure for speaker hookups.
<ul>
<li>I am using RCA jacks but the enclosure could be easily modified to work with any similar connector.</li>
<li>The enclosure mounts directly over the cable channel so all wires are protected/hidden.</li>
</ul>
</li>
</ul>
<h3 id="assembly">Assembly</h3>
<p>You no longer need to use goopy adhesives to seal the panels to the body! The sub body and panels have been modified to accommodate a thin 3d printed sheet of TPU or similar material to act as a gasket.</p>
<p>There is also a subtle channel cut into the sub body which is meant for gasket cord as a fall back.</p>
<p><figure >

    
        
    

    

    <figcaption>
        
        <p>
        The dark blue represents the path that gasket cord material should be laid down.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        When properly joined, there will be a slight interference between the panel and the gasket material; this ensures a fantastic seal.
        
            
        
        </p> 
    </figcaption>
    
</figure>

</p>
<h3 id="mounting">Mounting</h3>
<ul>
<li>The sides of the subwoofer feature a 100x100mm <a href="https://en.wikipedia.org/wiki/Flat_Display_Mounting_Interface" target="_blank" rel="noopener noreffer">VESA/FDMI</a> mounting pattern.
<ul>
<li>When printing with the holes facing the print bed, support material all but entirely obscures their existence.</li>
</ul>
</li>
</ul>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The support material hides the hole almost perfectly. If the image brightness wasn&#39;t turned up, you&#39;d never notice :D
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h1 id="build">Build</h1>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>Info<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">This is an abridged assembly guide and Bill of Materials. I have included only what&rsquo;s different/new/specific to this build. Consult the various build guides and BOMs for the original subwoofer so you understand what <em>else</em> is required.</div>
        </div>
    </div>
<h2 id="bom">BOM</h2>
<h3 id="subwoofer">Subwoofer</h3>
<p>Very little about the subwoofer BOM has changed from the original design.</p>
<ul>
<li>
<p><strong>Optional</strong>: <a href="https://www.amazon.com/gp/product/B00QVB6QPU/" target="_blank" rel="noopener noreffer">(1 mm) Buna-N O-Ring Cord Stock, 70A Durometer</a></p>
<ul>
<li>You will not need this if you&rsquo;re printing TPU gaskets or using some glue / caulk.</li>
<li>You will want some superglue or similar to help secure the gasket cord as you insert it into the channels.</li>
</ul>
</li>
<li>
<p>16-Gauge Speaker Wire Cable, ~18 inches/40 cm.</p>
<ul>
<li>The cable channel was specifically designed for 16 AWG speaker wire with the dimensions 6mm x 3mm. Any wire can work but if there&rsquo;s a gap between the wire jacket and the channel walls, you&rsquo;ll need to fill the gap / seal the channel.</li>
<li>18 inches will allow for some relative comfort during assembly. You can get away with less but it will make some things a bit harder than needed.</li>
</ul>
</li>
<li>
<p>28+ <code>M4x 12mm</code> screws.</p>
<ul>
<li>The original design didn&rsquo;t include any specific screws so I explicitly chose <a href="https://www.mcmaster.com/90666A115/" target="_blank" rel="noopener noreffer">McMaster # 90666A115</a>.</li>
<li>You will need at least 6 screws to secure the speaker to the sub and 11 to properly secure each panel to the subwoofer body.</li>
<li>If you choose to install the electronics enclosure at the rear of the sub, an additional 4 screws will be needed.</li>
</ul>
</li>
<li>
<p>RCA jack: there many different types out there but the parts are meant to be used with <a href="https://www.aliexpress.com/item/2255799906959194.html" target="_blank" rel="noopener noreffer">these jacks</a>.</p>
</li>
</ul>
<h3 id="amplifier-enclosure">Amplifier enclosure</h3>
<ul>
<li>The heart of the build is the <a href="https://www.aliexpress.com/item/2255801111428335.html" target="_blank" rel="noopener noreffer">Up2stream Amp 2.1</a> module.
<ul>
<li>The AliExpress listing has a few versions. I was not planning on using the IR remote and I didn&rsquo;t want an external PSU so I chose to order <em>just</em> the board.</li>
</ul>
</li>
</ul>
<p>Power Supply:</p>
<ul>
<li>The amplifier enclosure has room for a 24V 4.5A MeanWell <a href="https://www.aliexpress.com/item/3256803302407060.html" target="_blank" rel="noopener noreffer">LRS-100</a></li>
<li>To connect the DC output of the LRS-100, you&rsquo;ll need a <a href="https://www.amazon.com/gp/product/B0B37H6R56/" target="_blank" rel="noopener noreffer">female 3.96MM 2 pin</a> connector to mate with the DC in on the amplifier.</li>
</ul>
<p>Panel mount connectors:</p>
<ul>
<li>
<p>RCA jacks: I used the same part number from above, just ordered a few different colors for the R/L/S channels.</p>
</li>
<li>
<p>Powercon True. Rather than a traditional IEC style or simple DC barrel jack + external PSU, I opted for a <a href="https://en.wikipedia.org/wiki/Skookum" target="_blank" rel="noopener noreffer">Skookum</a> power connector. Like with the RCA jacks, there are many different parts from several manufacturers that will probably work but I specifically used <a href="https://www.aliexpress.com/item/2251832762646533.html" target="_blank" rel="noopener noreffer">this set from Ali Express</a>.</p>
</li>
<li>
<p>RJ45: There are likely several that will work, but I explicitly used <a href="https://www.aliexpress.com/item/2255799916665398.html" target="_blank" rel="noopener noreffer">this part from Ali Express</a>.</p>
</li>
<li>
<p>USB2.0: There are likely several that will work, but I explicitly used <a href="https://www.aliexpress.com/item/2255799916028028.html" target="_blank" rel="noopener noreffer">this part from Ali Express</a>.</p>
</li>
<li>
<p>USB extension cable: You can find all sorts of adapters in every conceivable orientation on Ali Express from stores like <a href="https://www.aliexpress.com/item/2255801102773472.html" target="_blank" rel="noopener noreffer">this</a>. For this particular project, you will need a 15 cm flat flex cable (<code>FFC</code>) and 2x of the &ldquo;straight&rdquo; USB male connectors.</p>
</li>
</ul>
<p>Screws:</p>
<ul>
<li>
<p>The amp enclosure uses 4x of the same McMaster #90666A115 for external mounting but any M4 screw could work here.</p>
</li>
<li>
<p>6x <code>M3x8mm</code> screws to hold the amplifier PCB to the internal midplate and PSU to the case. Specifically <a href="https://www.mcmaster.com/91290A113/" target="_blank" rel="noopener noreffer">McMaster #91290A113</a>.</p>
</li>
<li>
<p>4x <code>M4x50</code> screws to secure the lid. Specifically <a href="https://www.mcmaster.com/91292A140/" target="_blank" rel="noopener noreffer">McMaster #91292A140</a>.</p>
</li>
</ul>
<p>And it all fits together inside an enclosure like so:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The amp enclosure as seen from the front corner.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The amp enclosure as seen from the rear corner.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h2 id="procedure">Procedure</h2>
<p>To give you an idea of how things go together:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Viewed from the rear corner, the PCB (purple) sits on top of a midplate (green, highlighted) which sits on top of the power supply (also purple, bottom).
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        To make printing easier, the midplate is actually two components joined together by the two screws furthest from the knobs.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h3 id="print">Print</h3>
<p>Just a few things to note:</p>
<ul>
<li>The suggested/ideal print orientation should be fairly obvious.</li>
<li>Tolerances are reasonably tight, you&rsquo;ll need ~ .15mm tolerance.
<ul>
<li>Layer height, material, speed settings are up to you. All that matters is that you can achieve the ~.15mm tolerance.</li>
</ul>
</li>
</ul>
<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>This will take a while!<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>With respect to the subwoofer skeleton and panels, at least.</p>
<p>Essentially, the more mass in the parts, the more energy will be required to make them rattle/flex/vibrate.
The less this happens, the less &ldquo;extra&rdquo; noise will be emitted by your subwoofer.
Following along with the original instructions for printing, I chose about 35% infill and 3 perimeters for the subwoofer skeleton. Using a .6mm nozzle and some other well tuned slicing settings, I was able to print the entire skeleton in about 40 hours using just over 1 kg of filament. I would plan on at least 80 if using a smaller nozzle with a finer layer height!</p>
</div>
        </div>
    </div>
<h4 id="prep-screw-holes--flashing">Prep screw holes &amp; flashing</h4>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>Intentionally undersized holes<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Almost all screw holes on this build are intentionally undersized.
As a general preparation step, <strong><em>carefully</em></strong> drive the appropriate screw into each hole and then let it sit!</div>
        </div>
    </div>
<p>In the CAD model, almost all holes meant to receive a screw are intentionally undersized by about .3mm.
besides the general &lsquo;it&rsquo;s easier to expand the hole to the correct size than it is to shrink it&rsquo; reason, this is done for one key reason; it <strong>eliminates the need for dedicated screw thread hardware</strong>.</p>
<p>By intentionally undersigning the hole, you can guarantee there will be a ton of friction generated when inserting the screws for the first time.
The excess friction <em>will</em> soften the plastic in the vicinity of the screw threads which allows the plastic to form threads around the screw.</p>
<p>This is not without drawbacks, though <strong>so proper procedure is <em>critical</em> for making this work properly!</strong></p>
<p>You must take every precaution to ensure that:</p>
<ul>
<li>The screw is driven into the hole in a directly perpendicular direction.
<ul>
<li>As the plastic heats up, it becomes easier to knock the screw out of alignment and begin driving it at an angle.</li>
</ul>
</li>
<li>A constant (slow!) velocity should be used to drive the screw.
<ul>
<li>This can be done with hand tools but will result in a pretty tough arm workout! Consider using a power drill with a low speed / constant torque option!</li>
</ul>
</li>
<li>The threads of the screw will displace some plastic. The excess molten plastic is called <a href="https://en.wikipedia.org/wiki/Flash_%28manufacturing%29" target="_blank" rel="noopener noreffer">flashing</a> and it it almost guarantees that you&rsquo;ll need to do some post processing / cleanup of the screw holes.</li>
<li>The molten plastic forms screw threads more or less instantly&hellip; but they won&rsquo;t <em>stay formed</em> until the excess heat has dissipated and the material has solidified.
<ul>
<li>Do not remove any screws from the body until they are cool to the touch! This can take <em>several minutes</em>!</li>
</ul>
</li>
</ul>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        All 11(!) of the m4 screws driven into the sub body waiting for the plastic to set
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>After all 11 screws had cooled and the threads had formed, the screws were removed.
Nearly every one of the holes had some (small) build up of material:</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Use a straight edge blade or scrape tool to remove the flashing bits.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>In some cases, there may be some additional material that builds up on the screw threads themselves.
Simply use a different screw for final assembly or use scrape tool or flame to remove the excess material from the threads:</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>After the flashing is removed from around screw holes you should still be able to see threads within the hole but shouldn&rsquo;t be able to see/feel any protrusions <em>from</em> the hole:</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Where possible, I have made the screw holes much deeper than strictly necessary.
As the screw drives deeper, the tip will push molten plastic into this &ldquo;well&rdquo;.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The extra depth on the screw hole gives the molten plastic somewhere to go.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h3 id="subwoofer-skeleton">Subwoofer Skeleton</h3>
<h4 id="gaskets">Gaskets</h4>
<p>Begin by driving the screws into the side panels and speaker driver then attach the gaskets.</p>
<p><figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>

</p>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>Info<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">You do not need to press the gasket all the way up against the component; it will be compressed between the two components during final assembly.</div>
        </div>
    </div>
<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>Secure the gasketed components to the body carefully<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Rotate each screw a few turns before moving to the next one. Do this <a href="https://www.tyreplex.com/news/how-to-tighten-lug-nuts-on-a-car-the-criss-cross-pattern/" target="_blank" rel="noopener noreffer">in an alternating pattern similar to how you would tighten Lug Nuts on a car</a>. Failure to do so will likely result in the gasket being rotated out of place internally!</div>
        </div>
    </div>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Be mindful of the gasket as you secure the panel to the subwoofer body. Too much torque/clamping force can cause the gasket to distort.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h4 id="speaker-wire">Speaker wire</h4>
<p>Solder ~14 inches speaker wire to the RCA jack then install in the housing.
Don&rsquo;t forget to use heat shrink tubing or similar to insulate/protect the electrical connections!</p>
<p>Pass the housing assembly through the speaker hole and the attach the driver and then housing to the back of the subwoofer.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Firmly press the speaker wire into the the cable channel and push any slack wire into the RCA jack housing.</p>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>Info<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">There should be - at most - a few inches / 15cm of slack wire. Any more than this and you&rsquo;ll run out of room inside the small housing!</div>
        </div>
    </div>
<p>Once the speaker and jack housing are attached to the subwoofer body, simply line up and then attach the panels with the gaskets.</p>
<p>Now is a good time to test that your soldering / connections are working!</p>
<p>If you elected to use the gasket cord material, you would need to spend a non-trivial amount of time carefully cutting and routing segments of the material to fit inside the channel.
You will almost certainly want to use superglue or similar to help you hold the material into the channel!</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The speaker wire should press-fit into the cable channel more or less sealing it completely.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h3 id="amp">Amp</h3>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Tip<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Just like with the subwoofer components, you&rsquo;ll want to <a href="#prep-screw-holes--flashing" rel="">&ldquo;pre-thread&rdquo;</a> the various holes.</div>
        </div>
    </div>
<h4 id="prep">Prep</h4>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Notice the holes on the left that have been &#34;rightsized&#34; during threading and the holes on the top right that are relatively deformed still.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>For the various panel mounted jacks, there are small interior cavities designed to capture the nut.
This cavity is actually <em>oversized</em> in the CAD model but due to various printer/slicing factors it is almost certainly going to be a <strong>tight fit</strong>!</p>
<p>Align the nut with the cavity and then use the screw to pull the nut into the hole then tighten the screw all the way to pull the nuts into place:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        After the screw has pulled the nut into place, it should stay put.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>After the various holes have been prepared and the nuts have been fitted, you are ready for final assembly</p>
<h4 id="assemble">Assemble</h4>
<p>First, combine both parts of the midplate with the amp board. Set aside.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Pro tip: print the MAC addresses of a network device somewhere on the device... Also, don&#39;t put unique device IDs onto the internet!
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h5 id="power">Power</h5>
<p>Solder mains wires to the Powercon receptacle and terminate with crimp connectors.
Secure the Powercon receptacle to the rear of the enclosure and then attach to the screw terminals on the PSU.</p>
<p>Lower the PSU into the enclosure and secure it with the two screws in opposite corners.
Start with the screw closest to the Powercon connector:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Room inside the enclosure is intentionally tight so do as much wiring/connecting as possible before you start securing things to the enclosure.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>Then add the seconds screw in the opposite corner:</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Take this opportunity to power up and confirm that the polarity and voltage is correct!</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<h5 id="amp-pcb">Amp PCB</h5>
<p>Push the three rotary encoders through the holes in the enclosure and then lower the midplate/PCB on top of the PSU.
Route the DC wires up and around to the DC plug on the PCB.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Install the RCA jacks and route wires as needed to the PCB.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Then connect both the USB and RJ54 jacks on the amp module to their respective panel mount jacks.
I forgot to get a picture of the USB cable but it works more or less the exact same way the ethernet cable does:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        A 6 inch patch cable was quicker but a custom length cable would almost certainly look better. Good thing this will soon be hidden away!
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>Either remove the BT/WiFi antenna or secure it to the inside of the enclosure just above the LEDs (not pictured here).</p>
<p>And before attaching the lid, attach the knobs:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Don&#39;t forget the washer/nut!
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>And just like that, the complete sub and amp.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Subwoofer and amp enclosure mounted to the leg of my desk. Please ignore the mess of wires in the background!
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h1 id="files-and-licenses">Files and licenses</h1>
<p>All the 3d printable files associated with this post are available from my <a href="https://www.printables.com/social/8405-rainb0w_wheez3/about" target="_blank" rel="noopener noreffer">printables.com</a> page:</p>
<ul>
<li>
<p><a href="https://www.printables.com/model/273285-modified-skeleton-waveguide-subwoofer-speaker" target="_blank" rel="noopener noreffer">Modified Skeleton Waveguide Subwoofer Speaker</a></p>
</li>
<li>
<p><a href="https://www.printables.com/model/273302-arylic-up2stream-amp-21-enclosure" target="_blank" rel="noopener noreffer">Arylic Up2Stream Amp 2.1 enclosure</a></p>
</li>
</ul>
<p>On that page, you will find a list of files like:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ tree
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── amp-enclosure
</span></span><span class="line"><span class="cl">│   ├── amp-box-lid.step
</span></span><span class="line"><span class="cl">│   ├── amp-midplate-1.step
</span></span><span class="line"><span class="cl">│   ├── amp-midplate-2.step
</span></span><span class="line"><span class="cl">│   ├── amp-pcb.step
</span></span><span class="line"><span class="cl">│   └── amp-shell.step
</span></span><span class="line"><span class="cl">└── sub
</span></span><span class="line"><span class="cl">    ├── gasket-bottom.step
</span></span><span class="line"><span class="cl">    ├── gasket-speaker.step
</span></span><span class="line"><span class="cl">    ├── gasket-top.step
</span></span><span class="line"><span class="cl">    ├── main-body.step
</span></span><span class="line"><span class="cl">    ├── panel-bottom.step
</span></span><span class="line"><span class="cl">    ├── panel-top.step
</span></span><span class="line"><span class="cl">    ├── rca-enclosure.step
</span></span><span class="line"><span class="cl">    └── sub-components v28.f3z
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>All photos used in this post are mine and are licensed under <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="noopener noreffer">CC BY-NC-SA 4.0</a>.</p>
</li>
<li>
<p>Everything within the <code>amp-enclosure</code> is my original work. These files are licensed under <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="noopener noreffer">CC BY-NC-SA 4.0</a>.</p>
</li>
<li>
<p>Everything in the <code>sub</code> directory is based off of the fusion360 file from <a href="https://www.printables.com/social/107245-zx82net/about" target="_blank" rel="noopener noreffer">zx82net</a> which  is licensed under <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="noopener noreffer">CC BY-NC-SA 4.0</a>. Likewise, my modifications fall under the same license.</p>
<ul>
<li>My modifications in &lsquo;source&rsquo; formate are contained in the <code>sub-components v28.f3z</code> archive but to make printing easier, individual components are exported as STEP files.</li>
</ul>
</li>
</ul>
<h2 id="supporting-files">Supporting files</h2>
<p>In building the various parts in the <code>amp-enclosure</code> directory, I relied on the following additional models:</p>
<ul>
<li>
<p><a href="https://grabcad.com/library/tang-band-w3-1876s-3-subwoofer-1" target="_blank" rel="noopener noreffer">Tang Band W3-1876S 3&quot; Subwoofer</a> by <a href="https://grabcad.com/george.todd-1" target="_blank" rel="noopener noreffer">George Todd</a></p>
</li>
<li>
<p><a href="https://grabcad.com/library/fonte-chaveada-bivolt-24vcc-4a-100w-1" target="_blank" rel="noopener noreffer">Fonte Chaveada Bivolt 24Vcc 4A 100W</a> by <a href="https://grabcad.com/eliandro.baseggio--1" target="_blank" rel="noopener noreffer">Eliandro Baseggio </a></p>
</li>
</ul>
]]></description></item><item><title>Dynamic timers in ESPHome</title><link>https://karlquinsland.com/esphome-dynamic-timer/</link><pubDate>Sun, 14 Aug 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/esphome-dynamic-timer/</guid><description><![CDATA[<!-- markdownlint-disable-file MD002 -->
<p>As much as I love the <a href="https://esphome.io/" target="_blank" rel="noopener noreffer">ESPHome</a> project, there are some features that seem like they&rsquo;d be essential in an embedded/IoT firmware sdk yet their implementation remain left as an exercise to the user.
This post is about one of those &ldquo;Wait, that&rsquo;s not built in?! <em>How</em> old is this project?&rdquo; features: timers.</p>
<h2 id="esphome-timers-and-you">ESPHome, Timers and You</h2>
<p>To be clear, ESPHome <em>does</em> <a href="https://github.com/esphome/feature-requests/issues/84#issuecomment-469678382" target="_blank" rel="noopener noreffer">have all of the primitives needed</a> to build <em>basic</em> timers.
You can get basic non-blocking pauses in automations with the <a href="https://esphome.io/guides/automations.html#delay-action" target="_blank" rel="noopener noreffer"><code>delay:</code></a> action.</p>
<p>For simple cases where the interval is well known and fixed, this is sufficient.</p>
<h3 id="delay-and-lambda"><code>delay:</code> and <code>!lambda</code></h3>
<p>The <code>delay:</code> component does have one downside: the length of the delay can&rsquo;t be adjusted after the fact.
You can use a <a href="https://esphome.io/guides/automations.html#lambda-action" target="_blank" rel="noopener noreffer">lambda function</a> to dynamically calculate the length of the delay, but there is no way to adjust the length of the delay once it&rsquo;s been initiated.</p>
<p>This is already <em>much</em> better than a static delay that&rsquo;s compiled into the binary, but this functionality is <em>relatively</em> new:</p>
<ul>
<li><a href="https://community.home-assistant.io/t/lambda-function-for-delay/298459" target="_blank" rel="noopener noreffer">Lambda Function for Delay?</a></li>
<li><a href="https://old.reddit.com/r/Esphome/comments/m4ic8q/need_help_to_increase_time_delay_by_an_automation/" target="_blank" rel="noopener noreffer">Need help to increase time delay by an automation - esphome</a></li>
<li><a href="https://community.home-assistant.io/t/lambda-value-on-delay/235794" target="_blank" rel="noopener noreffer">Lambda value on delay:</a></li>
</ul>
<h2 id="completely-configurable-timers">Completely configurable timers</h2>
<p>I have a few use cases that can&rsquo;t be solved with basic lambda functions; I need to be able to adjust the delay timer dynamically - ideally through the Home Assistant web interface.</p>
<p>This <em>also</em> isn&rsquo;t a new ask from the community:</p>
<ul>
<li><a href="https://community.home-assistant.io/t/use-home-assistant-number-as-delay-in-esphome/409525" target="_blank" rel="noopener noreffer">Use Home Assistant number as delay in ESPHome</a></li>
</ul>
<h3 id="a-solution">A solution</h3>
<p>As an example showcase for this particular solution/implementation, I&rsquo;ll use portions of a configuration file that I use with a <a href="https://templates.blakadder.com/sonoff_SwitchMan_M5-2C.html" target="_blank" rel="noopener noreffer">Sonoff SwitchMan M5</a> switch.</p>
<p>I want to implement basic &ldquo;turn light off after <code>$time</code>&rdquo; functionality with some additional requirements:</p>
<ul>
<li>The user should be able to arm/dis-arm this timer remotely</li>
<li>The user should be able to adjust this timer up/down remotely</li>
<li>The updated time should become active immediately</li>
<li>Should live 100% on device not require working network to function</li>
</ul>
<p>Other than the last point, this is trivial to do entirely within a basic Home Assistant automation.
The dynamic nature of the timer essentially means we need a place to store a) the number of seconds that an output has been ON for and b) the number of seconds that a user wants the output on for.
Additionally, we&rsquo;ll need to increment / evaluate the two numbers at a regular interval.</p>
<p>Simple enough; we can implement this all with a few global vars and some basic scripts.</p>
<p>Below is an edited/partial <code>yaml</code> file showing the core components and how they&rsquo;re wired together.
I have put clarifying comments throughout the file as there is some similar but unrelated arm/disarm functionality in this file.</p>
<p>The device shows up in HA like so:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        This is how my entity shows up in HA. I can toggle the timeout period and disable the functionality altogether.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>The count-down timer can be engaged at any time; if the light is already on, the timer begins counting.
The length of the timer can be adjusted at any time; the new value is used for the &ldquo;turn off now?&rdquo; calculation withing a second or so if it being updated.</p>
<p>In short, it does everything I need without having to write any HA automation :D.</p>
<p>Hopefully this helps somebody!</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span><span class="lnt">160
</span><span class="lnt">161
</span><span class="lnt">162
</span><span class="lnt">163
</span><span class="lnt">164
</span><span class="lnt">165
</span><span class="lnt">166
</span><span class="lnt">167
</span><span class="lnt">168
</span><span class="lnt">169
</span><span class="lnt">170
</span><span class="lnt">171
</span><span class="lnt">172
</span><span class="lnt">173
</span><span class="lnt">174
</span><span class="lnt">175
</span><span class="lnt">176
</span><span class="lnt">177
</span><span class="lnt">178
</span><span class="lnt">179
</span><span class="lnt">180
</span><span class="lnt">181
</span><span class="lnt">182
</span><span class="lnt">183
</span><span class="lnt">184
</span><span class="lnt">185
</span><span class="lnt">186
</span><span class="lnt">187
</span><span class="lnt">188
</span><span class="lnt">189
</span><span class="lnt">190
</span><span class="lnt">191
</span><span class="lnt">192
</span><span class="lnt">193
</span><span class="lnt">194
</span><span class="lnt">195
</span><span class="lnt">196
</span><span class="lnt">197
</span><span class="lnt">198
</span><span class="lnt">199
</span><span class="lnt">200
</span><span class="lnt">201
</span><span class="lnt">202
</span><span class="lnt">203
</span><span class="lnt">204
</span><span class="lnt">205
</span><span class="lnt">206
</span><span class="lnt">207
</span><span class="lnt">208
</span><span class="lnt">209
</span><span class="lnt">210
</span><span class="lnt">211
</span><span class="lnt">212
</span><span class="lnt">213
</span><span class="lnt">214
</span><span class="lnt">215
</span><span class="lnt">216
</span><span class="lnt">217
</span><span class="lnt">218
</span><span class="lnt">219
</span><span class="lnt">220
</span><span class="lnt">221
</span><span class="lnt">222
</span><span class="lnt">223
</span><span class="lnt">224
</span><span class="lnt">225
</span><span class="lnt">226
</span><span class="lnt">227
</span><span class="lnt">228
</span><span class="lnt">229
</span><span class="lnt">230
</span><span class="lnt">231
</span><span class="lnt">232
</span><span class="lnt">233
</span><span class="lnt">234
</span><span class="lnt">235
</span><span class="lnt">236
</span><span class="lnt">237
</span><span class="lnt">238
</span><span class="lnt">239
</span><span class="lnt">240
</span><span class="lnt">241
</span><span class="lnt">242
</span><span class="lnt">243
</span><span class="lnt">244
</span><span class="lnt">245
</span><span class="lnt">246
</span><span class="lnt">247
</span><span class="lnt">248
</span><span class="lnt">249
</span><span class="lnt">250
</span><span class="lnt">251
</span><span class="lnt">252
</span><span class="lnt">253
</span><span class="lnt">254
</span><span class="lnt">255
</span><span class="lnt">256
</span><span class="lnt">257
</span><span class="lnt">258
</span><span class="lnt">259
</span><span class="lnt">260
</span><span class="lnt">261
</span><span class="lnt">262
</span><span class="lnt">263
</span><span class="lnt">264
</span><span class="lnt">265
</span><span class="lnt">266
</span><span class="lnt">267
</span><span class="lnt">268
</span><span class="lnt">269
</span><span class="lnt">270
</span><span class="lnt">271
</span><span class="lnt">272
</span><span class="lnt">273
</span><span class="lnt">274
</span><span class="lnt">275
</span><span class="lnt">276
</span><span class="lnt">277
</span><span class="lnt">278
</span><span class="lnt">279
</span><span class="lnt">280
</span><span class="lnt">281
</span><span class="lnt">282
</span><span class="lnt">283
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c">###</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># The user-facing switch is not *directly* wired to the relay</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#   which allows us to insert arbitrary logic between button press</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#   and turning the relay on/off.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># When &#39;armed&#39; pressing the button will toggle the relay.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Regardless of arm/dis-arm state, the input event will be reported to HA.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Shelly uses the terminology &#34;linked/un-linked&#34; but the concept is the same.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># You can insert a shelly module between a cheap wall switch with PIR sensor</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#   and the load to squash nuisance triggers or simply expose the PIR sensor</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#   to HA as a presence detection device.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># See: https://esphome.io/guides/automations.html#global-variables</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">globals</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_relay_latched</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">bool</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_value</span><span class="p">:</span><span class="w"> </span><span class="kc">yes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">initial_value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;true&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># For the auto-off automation</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_timeout_armed</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">bool</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_value</span><span class="p">:</span><span class="w"> </span><span class="kc">yes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">initial_value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;true&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_timeout_length_ticks</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_value</span><span class="p">:</span><span class="w"> </span><span class="kc">yes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 5 min * 60 seconds = 300</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">initial_value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;300&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># We ALSO need to keep track of the number of &#39;ticks&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># add _prefix to indicate &#39;internal&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">_glbl_timeout_ticks</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_value</span><span class="p">:</span><span class="w"> </span><span class="kc">no</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">initial_value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">script</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># End meaning the natural conclusion of the timer. Do whatever we&#39;re supposed to do when the timer fires off</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">on_timer_end</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">single</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">light.turn_off</span><span class="p">:</span><span class="w"> </span><span class="l">light_1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">logger.log</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;on_timer_end: output should be off!&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Stop meaning the pre-mature ending of the timer</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">on_timer_stop</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Do not start a new run. Issue a warning.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">single</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># For now, just clean up the globals and stop the ticking.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># This hook could be used to do so much more, though.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          auto TAG = &#34;script.on_timer_stop&#34;;
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_timer_tick).stop();
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_glbl_timeout_ticks) = 0;
</span></span></span><span class="line"><span class="cl"><span class="sd">          ESP_LOGD(TAG, &#34;_timer_tick now stopped and _glbl_timeout_ticks is %d&#34;, id(_glbl_timeout_ticks));</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">_timer_tick</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Start a new run after previous runs completes. This will happen until timer.stop() is called on us</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">queued</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># A single &#39;tick&#39; is 1 second long</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">delay</span><span class="p">:</span><span class="w"> </span><span class="l">1s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          auto TAG = &#34;lambda._timer_tick&#34;;
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          // First, update the number of ticks
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_glbl_timeout_ticks) += 1;
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          // Then check if we have timed out
</span></span></span><span class="line"><span class="cl"><span class="sd">          if (id(_glbl_timeout_ticks) &gt;= id(glbl_timeout_length_ticks) ) {
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">            // If we have timed out, run the script to handle the timer expiration
</span></span></span><span class="line"><span class="cl"><span class="sd">            // It&#39;s cleaner to call out to a script rather than put all the &#34;what no?&#34; code in here!
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(on_timer_end).execute();
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">            ESP_LOGD(TAG, &#34;_glbl_timeout_ticks is &gt;= glbl_timeout_length_ticks  %d &gt;= %d &#34;, id(_glbl_timeout_ticks), id(glbl_timeout_length_ticks) );
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">            // And then re-set the internal counter
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(_glbl_timeout_ticks) = 0;
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">            // And finally, stop the ticking timer
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(_timer_tick).stop();
</span></span></span><span class="line"><span class="cl"><span class="sd">            ESP_LOGD(TAG, &#34;_timer_tick now stopped!&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          } else {
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">            ESP_LOGD(TAG, &#34;_glbl_timeout_ticks is &lt; glbl_timeout_length_ticks  %d &lt; %d &#34;, id(_glbl_timeout_ticks), id(glbl_timeout_length_ticks) );
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">            // make sure we run again.. unless we&#39;re not supposed to
</span></span></span><span class="line"><span class="cl"><span class="sd">            if( id(glbl_timeout_armed) ) {
</span></span></span><span class="line"><span class="cl"><span class="sd">              id(_timer_tick).execute();
</span></span></span><span class="line"><span class="cl"><span class="sd">            }
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          }</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Create a toggle in HA that allows us to arm/disarm the button &lt;-&gt; relay glue</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># See: https://esphome.io/components/switch/template.html</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">switch</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;${friendly_name_short} Relay Latch&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">sw_relay_mode</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">device_class</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;switch&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;config&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      if (id(glbl_relay_latched)) {
</span></span></span><span class="line"><span class="cl"><span class="sd">        return true;
</span></span></span><span class="line"><span class="cl"><span class="sd">      } else {
</span></span></span><span class="line"><span class="cl"><span class="sd">        return false;
</span></span></span><span class="line"><span class="cl"><span class="sd">      }</span><span class="w">      
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">turn_on_action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">globals.set</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_relay_latched</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;true&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">turn_off_action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">globals.set</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_relay_latched</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;false&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># UI toggle for the arm/disarm of the auto-off/timeout functionality</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;${friendly_name_short} Timeout Automation&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">sw_timeout_arm</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">device_class</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;switch&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;config&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      if (id(glbl_timeout_armed)) {
</span></span></span><span class="line"><span class="cl"><span class="sd">        return true;
</span></span></span><span class="line"><span class="cl"><span class="sd">      } else {
</span></span></span><span class="line"><span class="cl"><span class="sd">        return false;
</span></span></span><span class="line"><span class="cl"><span class="sd">      }</span><span class="w">      
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">turn_on_action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Update the global to store the new state</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># If the light is already on, also start the timer</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(glbl_timeout_armed) = true;
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">            auto TAG = &#34;template.Timeout Automation.turn_on_action&#34;;
</span></span></span><span class="line"><span class="cl"><span class="sd">            if ( id(light_1).current_values.is_on() ) {
</span></span></span><span class="line"><span class="cl"><span class="sd">              id(_timer_tick).execute();
</span></span></span><span class="line"><span class="cl"><span class="sd">            } else {
</span></span></span><span class="line"><span class="cl"><span class="sd">              ESP_LOGD(TAG, &#34;Timeout Automation ARMED, light NOT on. Nothing to do!&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">            }</span><span class="w">            
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">turn_off_action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Update the global and stop the ticking timer if needed</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">            // Set the global to OFF, it will be checked next time the _tick fires if the on_timer_stop doesn&#39;t
</span></span></span><span class="line"><span class="cl"><span class="sd">            // kill the ticking
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(glbl_timeout_armed) = false;
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(on_timer_stop).execute();</span><span class="w">            
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Give the user a graphical control over the timeout</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># See: https://esphome.io/components/number/template.html</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">number</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;${friendly_name_short} Timeout&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">timeout_length</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;config&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># TODO: maybe it&#39;s a better UX to do this in minutes and do the conversion in esphome</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">unit_of_measurement</span><span class="p">:</span><span class="w"> </span><span class="l">seconds</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">box</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">min_value</span><span class="p">:</span><span class="w"> </span><span class="m">30</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">max_value</span><span class="p">:</span><span class="w"> </span><span class="m">21600</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">step</span><span class="p">:</span><span class="w"> </span><span class="m">30</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      </span><span class="w">      </span><span class="l">return (int) id(glbl_timeout_length_ticks);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">set_action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">globals.set</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_timeout_length_ticks</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span>!<span class="l">lambda |-</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">// TODO</span><span class="p">:</span><span class="w"> </span><span class="l">we&#39;re relying on HA to pass an integer; perhaps we should do atoi() and catch any exceptions</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="l">return (int) x;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">binary_sensor</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">${friendly_name_short} Button</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">gpio</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;diagnostic&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">inverted</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_click</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">min_length</span><span class="p">:</span><span class="w"> </span><span class="l">50ms</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">max_length</span><span class="p">:</span><span class="w"> </span><span class="l">150ms</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">if</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c"># If the input -&gt; output functionality is armed</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">condition</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;return id(glbl_relay_latched);&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">light.toggle</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">light_1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">else</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">logger.log</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">level</span><span class="p">:</span><span class="w"> </span><span class="l">DEBUG</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">format</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Button1 pressed but relays unlinked&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">output</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># See&#34; https://esphome.io/components/output/ledc.html</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">ledc</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO18</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">gpio_18</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">gpio</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">relay_1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="m">23</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># See: https://esphome.io/components/light/index.html#config-light</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># See: https://esphome.io/components/light/monochromatic.html</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">light</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">${friendly_name_short} Indicator Lights</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">relay_status_leds</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">monochromatic</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">output</span><span class="p">:</span><span class="w"> </span><span class="l">gpio_18</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Classify this as a &#34;config&#34; entity rather than a primary entity</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="l">config</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># The LEDs technically do support some effects! Although there&#39;s really only one &#39;built-in&#39; effect that looks</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">#   any good on the tiny LEDs / switch.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">effects</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">pulse</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">transition_length</span><span class="p">:</span><span class="w"> </span><span class="l">1s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">update_interval</span><span class="p">:</span><span class="w"> </span><span class="l">1s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># See: https://esphome.io/components/light/binary.html</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">${friendly_name_short} Light</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">light_1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">binary</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">output</span><span class="p">:</span><span class="w"> </span><span class="l">relay_1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Resume last state on boot if possible. Else, off</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_mode</span><span class="p">:</span><span class="w"> </span><span class="l">RESTORE_DEFAULT_OFF</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Wire in the count down timer automation if enabled</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_turn_on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">if</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">condition</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="c"># If the countdown timer is enabled</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;return id(glbl_timeout_armed);&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="c"># The light is already on, start counting the seconds.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="c"># When timer ends, light will be turned off</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">script.execute</span><span class="p">:</span><span class="w"> </span><span class="l">_timer_tick</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">else</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">logger.log</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">level</span><span class="p">:</span><span class="w"> </span><span class="l">DEBUG</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">format</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Light1 turned on, countdown timer not armed&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># This can be called by the natural end of the timer OR manually through any other source.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Regardless of the source, we just need to stop the ticking if it&#39;s running.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_turn_off</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">if</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">condition</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;return id(_timer_tick).is_running();&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">script.execute</span><span class="p">:</span><span class="w"> </span><span class="l">on_timer_stop</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">else</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">logger.log</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">level</span><span class="p">:</span><span class="w"> </span><span class="l">DEBUG</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">format</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Light1 turned off, countdown timer not armed&#34;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>Using Qi charging to fix the biggest design flaw with the HidrateSpark Steel Pro bottle</title><link>https://karlquinsland.com/hidrate-spark-qi-retrofit/</link><pubDate>Fri, 10 Jun 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/hidrate-spark-qi-retrofit/</guid><description><![CDATA[<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>Parts and Instructions<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">The majority of this post covers the &ldquo;why&rdquo; this mod came to be. If you&rsquo;re just looking for the mod, you can find
the 3d printable parts, BOM and instructions in <a href="https://github.com/kquinsland/hidrate-spark-qi-charging" target="_blank" rel="noopener noreffer">accompanying github repo</a>.</div>
        </div>
    </div>
<h1 id="what">What</h1>
<p><a href="https://hidratespark.com/" target="_blank" rel="noopener noreffer">Hidrate Spark</a> bottles are one of a small but growing number of &lsquo;smart&rsquo; water bottles.
In this instance, &lsquo;smart&rsquo; refers to some mechanism for reporting on and tracking the bottles content over time.</p>
<p>There are a few ways to measure liquid levels but the current generation of Hidrate Spark bottles uses a small sensor puck which contains a <a href="https://en.wikipedia.org/wiki/Load_cell" target="_blank" rel="noopener noreffer">load cell</a>.
As the bottle is emptied or filled, the puck measures a difference in weight which can then be compared with the known weight of a full/empty bottle to determine exactly how full the bottle is.</p>
<p>There are a <em>ton</em> of reasons why you might want to track your water intake but they all generally fall into one of a few broad categories:</p>
<ul>
<li>Dietary restrictions: Athletes and competitors of all sorts need to precisely track their diets and water intake is no exception.</li>
<li>Medication side effects:  Any medication with &lsquo;diminishes thirst&rsquo; as a side effect almost guarantees dehydration. A bottle that knows how long it&rsquo;s been since your last drink is a very effective way to mitigate these side effects.</li>
<li>Personal curiosity / <a href="https://en.wikipedia.org/wiki/Quantified_self" target="_blank" rel="noopener noreffer">quantified self</a>: If you&rsquo;re already tracking other aspects of your physical/mental health throughout the day, knowing when/how much water you had makes for some more interesting graphs.
<ul>
<li>In the same vein, your levels of hydration can effect: cognition, blood pressure, mood, blood glucose levels, energy, complexion and more.</li>
</ul>
</li>
</ul>
<p>Now as for why you&rsquo;d need to bolt a kitchen scale and a BTLE radio onto the bottom of a water bottle in order to record this, there&rsquo;s really only one reason: Automation.</p>
<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>Warning<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">I&rsquo;m not going to entertain the &ldquo;now you&rsquo;re just being silly; there&rsquo;s no need for a water bottle to have a radio or battery in it&rdquo; crowd. If you don&rsquo;t value any of the reasons outlined above then we agree&hellip; this is a silly water bottle and <strong>you</strong> don&rsquo;t have a good reason to own one.</div>
        </div>
    </div>
<h2 id="design-evaluation">Design evaluation</h2>
<p>Overall, the Hidrate Spark bottle works. It is not without some drawbacks, though.
The primary and obvious downside is charging the battery 🪫.</p>
<p>Depending on how aggressive you have the LEDs configured, the battery will need charging somewhere between 1-5 times a week.
The app will inform you when the battery is low, but sometimes the notifications come far to late to be useful. I have lost data because the warning came less than an hour before the battery was dead and about 9 hours before I&rsquo;d be able to charge it again.</p>
<p>To charge the battery, you need to remove the sensor puck from the bottle and then attach a fiddly and proprietary USB connector. Worse, this connector uses prone-to-failure <a href="https://en.wikipedia.org/wiki/Pogo_pin" target="_blank" rel="noopener noreffer">Pogo pins</a>.</p>
<p>Ignoring the shameful and unnecessary use of a non-standard USB micro/C port for charing, you now have to wait a few hours for the battery to charge; during this time, the puck can&rsquo;t be inserted into the bottle so it can&rsquo;t record data while it&rsquo;s being charged.
Remind you of anything?</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Apple won all sorts of &#39;asshole design&#39; awards for this. Hidrate spark was inspired to also win such an award! src: YouTube/Tony H
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>So to re-cap:</p>
<ul>
<li>Anywhere from 1-5 times a week you&rsquo;ll need to remove the sensor from the bottle. During this time you&rsquo;ll have to manually track any consumed water&hellip;. defeating the entire point of the bottle!</li>
<li>If you don&rsquo;t charge the puck in time, you&rsquo;ll also loose automatic tracking of consumption&hellip; with little or no notice from either the puck or the app. The puck does not store measurements in flash so any data recorded before the battery died but not yet synced to the phone is <em>gone</em>.</li>
<li>You will need to pack a dedicated cable for charging the bottle if you travel. Don&rsquo;t loose or damage it because you can&rsquo;t go to the closest electronics shop to get another compatible cable!</li>
</ul>
<p>When I did my initial tear down, I didn&rsquo;t spot any electrical reason why the bottle could not charge and measure at the same time.
After some additional testing, I was able to confirm that the firmware also does not object.</p>
<p>At the <strong><em>very least</em></strong> the Hidrate team could have put the pogo pins on the bottom and shipped the bottle with a charging dock/base similar to how Ember does their mugs.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Pogo pins and slip-rings are not perfect but at least you can charge and use the mug at the same time!
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>The proprietary nature of the charge connection is still not ideal but at least the bottle could be &ldquo;used&rdquo; while it was charging.
If the charging dock was centrally or conveniently located, the sensor puck could be consistently &rsquo;topped off&rsquo;; trickle charing while idle in the same way wireless charging of phots works; take a sip and put the bottle back down to charge and measure the consumption.</p>
<p>Alternatively, the Hidrate designers could have at least used a standard USBC or micro USB jack in the same location as the current charging pogo pins.
Since the charge location is at the &rsquo;top&rsquo; of the sensor puck which is deeply embedded in the base of the water bottle, they might not have even needed to bother with a &lsquo;fancy&rsquo; waterproof USB port and the additional electronics necessary to detect water/debris and cut off charging.</p>
<p>Going with a standard USB C port in place of pogo pins would have the &ldquo;can&rsquo;t use it and charge it at the same time&rdquo; draw back but it would have at least eliminated a proprietary cable!</p>
<h2 id="the-other-draw-backs">The other draw backs</h2>
<p>While the biggest design flaw is related to battery charging, the Hidrate spark does have a few other noteworthy issues.</p>
<h3 id="recalibration">Recalibration</h3>
<p>The sensor puck measures changes in weight.
To know how full the bottle is, the sensor puck must also be aware of the weight of a full and empty bottle.
This weight range will change based on the density of the liquid inside.
A bottle that is full of water will have a different weight compared to a bottle that is full of orange juice, for example.
Any time the liquid in the bottle changes, the sensor puck will need to be recalibrated.</p>
<p>To measure changes in weight/weight, the sensor puck relies on a load cell which (slightly) deforms as the load on it changes.
All mechanical parts will wear with time so the bottle will periodically need to be recalibrated from time to time just to stay accurate.
Likewise, if the bottle is dropped or otherwise experiences a sharp impact, the sensor will most certainly need to be recalibrated.</p>
<h3 id="misc">Misc</h3>
<ul>
<li>No temperature. The sensor is completely independent from the primary bottle so there is no easy way to record the temperature of the liquid. It would be nice to know how cold the liquid inside is from time to time. The hidrate team could have engineered a temperature sensor into the bottle body that would come into contact with the sensor puck when inserted but this almost certainly would have increased manufacturing costs for a relatively small benefit.</li>
<li>Imprecise and limited user feedback. The only way the sensor puck can communicate with the user is through the ring of addressable LEDs around the permitter and through BTLE; the latter of which is unreliable as the user might not have their phone nearby or the app might be closed. There is no way for the lights to communicate <em>exactly</em> how long it&rsquo;s been since the last drink or how much battery life is left. There are 10 LEDs and they can each be individually controlled so this drawback probably can be addressed through software; let the user pick when/how to display battery life remaining or to design a sequence of lights to indicate when the last drink took place.</li>
<li>Most of the mass needs to be suspended above and not directly connected to the sensor puck. This means that the bottle has a high center of gravity which - when coupled with the small base - makes for a slightly unstable bottle. There isn&rsquo;t any real way to avoid this though; if you&rsquo;re going to use a load cell, the liquid must <del>necessarily</del> reasonably be above the load cell.</li>
</ul>
<h2 id="a-quick-look-at-the-tuya-bottle">A quick look at the TuYa bottle</h2>
<p>If you search the usual eastern import sites, you&rsquo;ll see that the <em>massive</em> TuYa ecosystem has it&rsquo;s own smart water bottle that can keep track of liquid intake.
As best as I can tell, this is branded for TuYa but the OEM is <a href="https://expo.tuya.com/product/839372" target="_blank" rel="noopener noreffer"><code>Maxevis Smart Bottle(BLE)</code></a> but the best FCC ID listing that I could find has <a href="https://fccid.io/2ALQ5-M1/Internal-Photos/Internal-photos-5000615" target="_blank" rel="noopener noreffer"><code>2ALQ5-M1</code></a> listed.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Example aliexpress listing.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>Rather than use a load cell to measure the weight of the bottle and then calculate the liquid volume, the TuYa bottle uses an AMS IR range detector (probably <code>TMF8805</code>) to measure the distance to the top of the liquid.</p>
<p>This approach is superior in virtually every way:</p>
<ul>
<li>All the electronics are in the lid: The entire top of the lid &lsquo;free&rsquo; to communicate information to the user via a numeric screen. As a bonus, the TuYa lid supports charging while measuring the liquid level!</li>
<li>Cheaper to manufacture: There is no complicated silicon overmolding as there is nothing in the lid that needs to fled or bend or otherwise deform.</li>
<li>Sensor measures distance to the top of the liquid. Assuming a fixed volume, the density of the liquid does not matter; as long as the surface of the liquid is level and reflects IR, the sensor can tell you how full the bottle is.</li>
</ul>
<p>Downsides:</p>
<ul>
<li>Similar recalibration will be required if changing the bottle size&hellip; but at least no re-calibration needed when changing the liquid! As far as I can tell, there is only one size of bottle so this is a bit of a moot point.</li>
<li>The data is not easily accessible. You can only get the data using their proprietary app and the TuYa app does not seem to have any easy way to exfiltrate this data to the sources where I&rsquo;d prefer to record and manage it: FitBit.</li>
</ul>
<h3 id="brief-bit-of-tuya--maxevis--sguai-m1-btle-logs">Brief bit of TuYa / Maxevis / Sguai M1 BTLE logs</h3>
<p>Below is a (lightly) obfuscated log file from the <em>amazing</em> <a href="https://play.google.com/store/apps/details?id=no.nordicsemi.android.mcp&amp;hl=en_US&amp;gl=US" target="_blank" rel="noopener noreffer">nRF connect app</a>.
I am dumping the BTLE characteristics and data here for SEO purposes. If you do find this post and these logs and <em>do</em> manage to reverse engineer the packet format&hellip; <a href="/contact/" rel="">do let me know!</a>.</p>
<!-- markdownlint-disable-file MD010 -->
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">nRF Connect, 2022-06-12
</span></span><span class="line"><span class="cl">M1 (DC:23:4D:DE:AD:BE)
</span></span><span class="line"><span class="cl">D	11:35:37.604	[Broadcast] Action received: android.bluetooth.device.action.ACL_CONNECTED
</span></span><span class="line"><span class="cl">V	11:35:37.796	Connecting to DC:23:4D:DE:AD:BE...
</span></span><span class="line"><span class="cl">D	11:35:37.796	gatt = device.connectGatt(autoConnect = false, TRANSPORT_LE, preferred PHY = LE 1M)
</span></span><span class="line"><span class="cl">D	11:35:37.799	[Callback] Connection state changed with status: 0 and new state: CONNECTED (2)
</span></span><span class="line"><span class="cl">I	11:35:37.799	Connected to DC:23:4D:DE:AD:BE
</span></span><span class="line"><span class="cl">V	11:35:37.809	Discovering services...
</span></span><span class="line"><span class="cl">D	11:35:37.809	gatt.discoverServices()
</span></span><span class="line"><span class="cl">D	11:35:37.811	[Callback] Services discovered with status: 0
</span></span><span class="line"><span class="cl">I	11:35:37.811	Services discovered
</span></span><span class="line"><span class="cl">V	11:35:37.816	Generic Access (0x1800)
</span></span><span class="line"><span class="cl">- Device Name [R] (0x2A00)
</span></span><span class="line"><span class="cl">- Appearance [R] (0x2A01)
</span></span><span class="line"><span class="cl">Generic Attribute (0x1801)
</span></span><span class="line"><span class="cl">Unknown Service (00001910-0000-1000-8000-00805f9b34fb)
</span></span><span class="line"><span class="cl">- Unknown Characteristic [W WNR] (00002b11-0000-1000-8000-00805f9b34fb)
</span></span><span class="line"><span class="cl">- Unknown Characteristic [N] (00002b10-0000-1000-8000-00805f9b34fb)
</span></span><span class="line"><span class="cl">   Client Characteristic Configuration (0x2902)
</span></span><span class="line"><span class="cl">D	11:35:37.816	gatt.setCharacteristicNotification(00002b10-0000-1000-8000-00805f9b34fb, true)
</span></span><span class="line"><span class="cl">V	11:36:09.013	Refreshing device cache...
</span></span><span class="line"><span class="cl">D	11:36:09.013	gatt.refresh() (hidden)
</span></span><span class="line"><span class="cl">I	11:36:09.015	Cache refreshed
</span></span><span class="line"><span class="cl">V	11:36:09.019	Discovering services...
</span></span><span class="line"><span class="cl">D	11:36:09.019	gatt.discoverServices()
</span></span><span class="line"><span class="cl">D	11:36:09.928	[Callback] Services discovered with status: 0
</span></span><span class="line"><span class="cl">I	11:36:09.928	Services discovered
</span></span><span class="line"><span class="cl">V	11:36:09.931	Generic Access (0x1800)
</span></span><span class="line"><span class="cl">- Device Name [R] (0x2A00)
</span></span><span class="line"><span class="cl">- Appearance [R] (0x2A01)
</span></span><span class="line"><span class="cl">Generic Attribute (0x1801)
</span></span><span class="line"><span class="cl">Unknown Service (00001910-0000-1000-8000-00805f9b34fb)
</span></span><span class="line"><span class="cl">- Unknown Characteristic [W WNR] (00002b11-0000-1000-8000-00805f9b34fb)
</span></span><span class="line"><span class="cl">- Unknown Characteristic [N] (00002b10-0000-1000-8000-00805f9b34fb)
</span></span><span class="line"><span class="cl">   Client Characteristic Configuration (0x2902)
</span></span><span class="line"><span class="cl">D	11:36:09.931	gatt.setCharacteristicNotification(00002b10-0000-1000-8000-00805f9b34fb, true)
</span></span><span class="line"><span class="cl">V	11:36:12.944	Reading all characteristics...
</span></span><span class="line"><span class="cl">V	11:36:12.944	Reading characteristic 00002a00-0000-1000-8000-00805f9b34fb
</span></span><span class="line"><span class="cl">D	11:36:12.944	gatt.readCharacteristic(00002a00-0000-1000-8000-00805f9b34fb)
</span></span><span class="line"><span class="cl">I	11:36:13.027	Read Response received from 00002a00-0000-1000-8000-00805f9b34fb, value: 0 bytes
</span></span><span class="line"><span class="cl">V	11:36:13.030	Reading characteristic 00002a01-0000-1000-8000-00805f9b34fb
</span></span><span class="line"><span class="cl">D	11:36:13.030	gatt.readCharacteristic(00002a01-0000-1000-8000-00805f9b34fb)
</span></span><span class="line"><span class="cl">I	11:36:13.126	Read Response received from 00002a01-0000-1000-8000-00805f9b34fb, value: (0x) 00-00
</span></span><span class="line"><span class="cl">A	11:36:13.126	&#34;[0] Unknown&#34; received
</span></span><span class="line"><span class="cl">V	11:36:13.128	2 characteristics read
</span></span><span class="line"><span class="cl">I	11:36:14.079	Connection parameters updated (interval: 7.5ms, latency: 0, timeout: 5000ms)
</span></span><span class="line"><span class="cl">I	11:36:14.176	Connection parameters updated (interval: 50.0ms, latency: 0, timeout: 5000ms)
</span></span><span class="line"><span class="cl">V	11:36:22.198	Reading characteristic 00002a01-0000-1000-8000-00805f9b34fb
</span></span><span class="line"><span class="cl">D	11:36:22.198	gatt.readCharacteristic(00002a01-0000-1000-8000-00805f9b34fb)
</span></span><span class="line"><span class="cl">I	11:36:22.276	Read Response received from 00002a01-0000-1000-8000-00805f9b34fb, value: (0x) 00-00
</span></span><span class="line"><span class="cl">A	11:36:22.276	&#34;[0] Unknown&#34; received
</span></span><span class="line"><span class="cl">V	11:36:22.734	Reading characteristic 00002a01-0000-1000-8000-00805f9b34fb
</span></span><span class="line"><span class="cl">D	11:36:22.734	gatt.readCharacteristic(00002a01-0000-1000-8000-00805f9b34fb)
</span></span><span class="line"><span class="cl">I	11:36:22.826	Read Response received from 00002a01-0000-1000-8000-00805f9b34fb, value: (0x) 00-00
</span></span><span class="line"><span class="cl">A	11:36:22.826	&#34;[0] Unknown&#34; received
</span></span><span class="line"><span class="cl">V	11:36:27.086	Reading all characteristics...
</span></span><span class="line"><span class="cl">V	11:36:27.086	Reading characteristic 00002a00-0000-1000-8000-00805f9b34fb
</span></span><span class="line"><span class="cl">D	11:36:27.086	gatt.readCharacteristic(00002a00-0000-1000-8000-00805f9b34fb)
</span></span><span class="line"><span class="cl">I	11:36:27.176	Read Response received from 00002a00-0000-1000-8000-00805f9b34fb, value: 0 bytes
</span></span><span class="line"><span class="cl">V	11:36:27.179	Reading characteristic 00002a01-0000-1000-8000-00805f9b34fb
</span></span><span class="line"><span class="cl">D	11:36:27.179	gatt.readCharacteristic(00002a01-0000-1000-8000-00805f9b34fb)
</span></span><span class="line"><span class="cl">I	11:36:27.277	Read Response received from 00002a01-0000-1000-8000-00805f9b34fb, value: (0x) 00-00
</span></span><span class="line"><span class="cl">A	11:36:27.277	&#34;[0] Unknown&#34; received
</span></span><span class="line"><span class="cl">V	11:36:27.281	2 characteristics read
</span></span><span class="line"><span class="cl">V	11:36:41.136	Reading PHY...
</span></span><span class="line"><span class="cl">D	11:36:41.136	gatt.readPhy()
</span></span><span class="line"><span class="cl">I	11:36:41.160	PHY read (TX: LE 1M, RX: LE 1M)
</span></span><span class="line"><span class="cl">V	11:36:45.223	Reading all characteristics...
</span></span><span class="line"><span class="cl">V	11:36:45.223	Reading characteristic 00002a00-0000-1000-8000-00805f9b34fb
</span></span><span class="line"><span class="cl">D	11:36:45.223	gatt.readCharacteristic(00002a00-0000-1000-8000-00805f9b34fb)
</span></span><span class="line"><span class="cl">I	11:36:45.326	Read Response received from 00002a00-0000-1000-8000-00805f9b34fb, value: 0 bytes
</span></span><span class="line"><span class="cl">V	11:36:45.329	Reading characteristic 00002a01-0000-1000-8000-00805f9b34fb
</span></span><span class="line"><span class="cl">D	11:36:45.329	gatt.readCharacteristic(00002a01-0000-1000-8000-00805f9b34fb)
</span></span><span class="line"><span class="cl">I	11:36:45.426	Read Response received from 00002a01-0000-1000-8000-00805f9b34fb, value: (0x) 00-00
</span></span><span class="line"><span class="cl">A	11:36:45.426	&#34;[0] Unknown&#34; received
</span></span><span class="line"><span class="cl">V	11:36:45.429	2 characteristics read
</span></span><span class="line"><span class="cl">V	11:36:48.225	Enabling services...
</span></span><span class="line"><span class="cl">V	11:36:48.225	Enabling notifications for 00002b10-0000-1000-8000-00805f9b34fb
</span></span><span class="line"><span class="cl">D	11:36:48.225	gatt.setCharacteristicNotification(00002b10-0000-1000-8000-00805f9b34fb, true)
</span></span><span class="line"><span class="cl">D	11:36:48.226	gatt.writeDescriptor(00002902-0000-1000-8000-00805f9b34fb, value=0x0100)
</span></span><span class="line"><span class="cl">I	11:36:48.327	Data written to descr. 00002902-0000-1000-8000-00805f9b34fb, value: (0x) 01-00
</span></span><span class="line"><span class="cl">A	11:36:48.327	&#34;Notifications enabled&#34; sent
</span></span><span class="line"><span class="cl">V	11:36:48.331	Notifications enabled for 00002b10-0000-1000-8000-00805f9b34fb
</span></span><span class="line"><span class="cl">V	11:36:48.335	All services enabled
</span></span><span class="line"><span class="cl">I	11:36:48.427	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 00-31-3A-05-27-3C-3B-DF-88-0F-BF-B6-2C-9A-28-E5-47-9D-93-2C
</span></span><span class="line"><span class="cl">A	11:36:48.427	&#34;(0x) 00-31-3A-05-27-3C-3B-DF-88-0F-BF-B6-2C-9A-28-E5-47-9D-93-2C&#34; received
</span></span><span class="line"><span class="cl">I	11:36:48.427	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 01-C3-81-F8-D3-88-1F-C5-F0-68-9E-3E-21-71-97-E0-CF-69-B8-D2
</span></span><span class="line"><span class="cl">A	11:36:48.427	&#34;(0x) 01-C3-81-F8-D3-88-1F-C5-F0-68-9E-3E-21-71-97-E0-CF-69-B8-D2&#34; received
</span></span><span class="line"><span class="cl">I	11:36:48.427	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 02-76-24-15-EA-88-4C-E9-F6-2D-98-D3-F5-30
</span></span><span class="line"><span class="cl">A	11:36:48.427	&#34;(0x) 02-76-24-15-EA-88-4C-E9-F6-2D-98-D3-F5-30&#34; received
</span></span><span class="line"><span class="cl">V	11:36:51.059	Reading all characteristics...
</span></span><span class="line"><span class="cl">V	11:36:51.059	Reading characteristic 00002a00-0000-1000-8000-00805f9b34fb
</span></span><span class="line"><span class="cl">D	11:36:51.059	gatt.readCharacteristic(00002a00-0000-1000-8000-00805f9b34fb)
</span></span><span class="line"><span class="cl">I	11:36:51.126	Read Response received from 00002a00-0000-1000-8000-00805f9b34fb, value: 0 bytes
</span></span><span class="line"><span class="cl">V	11:36:51.128	Reading characteristic 00002a01-0000-1000-8000-00805f9b34fb
</span></span><span class="line"><span class="cl">D	11:36:51.128	gatt.readCharacteristic(00002a01-0000-1000-8000-00805f9b34fb)
</span></span><span class="line"><span class="cl">I	11:36:51.226	Read Response received from 00002a01-0000-1000-8000-00805f9b34fb, value: (0x) 00-00
</span></span><span class="line"><span class="cl">A	11:36:51.226	&#34;[0] Unknown&#34; received
</span></span><span class="line"><span class="cl">V	11:36:51.227	2 characteristics read
</span></span><span class="line"><span class="cl">I	11:37:29.428	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 00-31-3B-05-29-D8-E0-4B-72-0B-28-02-BC-F6-A8-11-D5-59-34-38
</span></span><span class="line"><span class="cl">A	11:37:29.428	&#34;(0x) 00-31-3B-05-29-D8-E0-4B-72-0B-28-02-BC-F6-A8-11-D5-59-34-38&#34; received
</span></span><span class="line"><span class="cl">I	11:37:29.478	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 01-77-3B-AE-22-0C-A7-5A-F8-31-41-0C-FF-53-B7-97-D0-17-BE-43
</span></span><span class="line"><span class="cl">A	11:37:29.478	&#34;(0x) 01-77-3B-AE-22-0C-A7-5A-F8-31-41-0C-FF-53-B7-97-D0-17-BE-43&#34; received
</span></span><span class="line"><span class="cl">I	11:37:29.478	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 02-8F-38-BE-8E-5C-9F-1F-40-FC-15-66-1F-01
</span></span><span class="line"><span class="cl">A	11:37:29.478	&#34;(0x) 02-8F-38-BE-8E-5C-9F-1F-40-FC-15-66-1F-01&#34; received
</span></span><span class="line"><span class="cl">I	11:37:29.478	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 00-31-3C-05-63-F4-26-37-1F-87-CD-CE-7C-D2-60-BD-DE-95-6A-C4
</span></span><span class="line"><span class="cl">A	11:37:29.478	&#34;(0x) 00-31-3C-05-63-F4-26-37-1F-87-CD-CE-7C-D2-60-BD-DE-95-6A-C4&#34; received
</span></span><span class="line"><span class="cl">I	11:37:29.479	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 01-75-AA-47-4F-6F-4D-5C-3F-8E-DC-32-3F-A3-F5-36-51-8C-8F-AA
</span></span><span class="line"><span class="cl">A	11:37:29.479	&#34;(0x) 01-75-AA-47-4F-6F-4D-5C-3F-8E-DC-32-3F-A3-F5-36-51-8C-8F-AA&#34; received
</span></span><span class="line"><span class="cl">I	11:37:29.479	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 02-4C-6F-7E-67-92-77-D4-E7-E4-18-2C-59-E5
</span></span><span class="line"><span class="cl">A	11:37:29.479	&#34;(0x) 02-4C-6F-7E-67-92-77-D4-E7-E4-18-2C-59-E5&#34; received
</span></span><span class="line"><span class="cl">I	11:37:38.427	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 00-31-3D-05-45-90-BD-A3-80-83-E1-1A-DC-2E-02-E9-53-51-66-D0
</span></span><span class="line"><span class="cl">A	11:37:38.427	&#34;(0x) 00-31-3D-05-45-90-BD-A3-80-83-E1-1A-DC-2E-02-E9-53-51-66-D0&#34; received
</span></span><span class="line"><span class="cl">I	11:37:38.428	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 01-6D-C3-48-81-2B-E4-D1-CD-BB-55-20-54-31-97-4F-22-FB-A7-C7
</span></span><span class="line"><span class="cl">A	11:37:38.428	&#34;(0x) 01-6D-C3-48-81-2B-E4-D1-CD-BB-55-20-54-31-97-4F-22-FB-A7-C7&#34; received
</span></span><span class="line"><span class="cl">I	11:37:38.428	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 02-E1-EF-8D-FC-A7-AC-17-C7-10-80-EC-09-2E
</span></span><span class="line"><span class="cl">A	11:37:38.428	&#34;(0x) 02-E1-EF-8D-FC-A7-AC-17-C7-10-80-EC-09-2E&#34; received
</span></span><span class="line"><span class="cl">I	11:37:41.428	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 00-31-3E-05-3E-AC-56-8F-84-FF-91-E6-4B-0A-3E-95-23-8D-58-5C
</span></span><span class="line"><span class="cl">A	11:37:41.428	&#34;(0x) 00-31-3E-05-3E-AC-56-8F-84-FF-91-E6-4B-0A-3E-95-23-8D-58-5C&#34; received
</span></span><span class="line"><span class="cl">I	11:37:41.428	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 01-DA-FC-E3-F6-BC-AA-A0-C8-15-84-7B-80-AA-29-C4-61-7A-91-DA
</span></span><span class="line"><span class="cl">A	11:37:41.428	&#34;(0x) 01-DA-FC-E3-F6-BC-AA-A0-C8-15-84-7B-80-AA-29-C4-61-7A-91-DA&#34; received
</span></span><span class="line"><span class="cl">I	11:37:41.428	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 02-E9-78-C0-8A-F4-89-EC-8B-9E-B3-99-74-DC
</span></span><span class="line"><span class="cl">A	11:37:41.428	&#34;(0x) 02-E9-78-C0-8A-F4-89-EC-8B-9E-B3-99-74-DC&#34; received
</span></span><span class="line"><span class="cl">I	11:38:32.829	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 00-31-3F-05-BF-48-A0-FB-1C-FB-10-32-39-66-C3-C1-3F-49-6F-68
</span></span><span class="line"><span class="cl">A	11:38:32.829	&#34;(0x) 00-31-3F-05-BF-48-A0-FB-1C-FB-10-32-39-66-C3-C1-3F-49-6F-68&#34; received
</span></span><span class="line"><span class="cl">I	11:38:32.829	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 01-FF-00-EB-5E-50-22-71-6C-5F-C1-82-8D-95-13-C9-F4-5F-9F-E0
</span></span><span class="line"><span class="cl">A	11:38:32.829	&#34;(0x) 01-FF-00-EB-5E-50-22-71-6C-5F-C1-82-8D-95-13-C9-F4-5F-9F-E0&#34; received
</span></span><span class="line"><span class="cl">I	11:38:32.830	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 02-C1-47-3D-34-8A-5D-85-69-C8-7F-21-DB-4E
</span></span><span class="line"><span class="cl">A	11:38:32.830	&#34;(0x) 02-C1-47-3D-34-8A-5D-85-69-C8-7F-21-DB-4E&#34; received
</span></span><span class="line"><span class="cl">I	11:38:33.430	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 00-31-30-05-37-64-4C-E7-38-77-8B-FE-17-42-42-6D-96-85-DB-F4
</span></span><span class="line"><span class="cl">A	11:38:33.430	&#34;(0x) 00-31-30-05-37-64-4C-E7-38-77-8B-FE-17-42-42-6D-96-85-DB-F4&#34; received
</span></span><span class="line"><span class="cl">I	11:38:33.430	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 01-7D-C6-26-19-9C-C4-64-C3-CE-9B-BD-1F-8F-41-30-4E-D5-81-31
</span></span><span class="line"><span class="cl">A	11:38:33.430	&#34;(0x) 01-7D-C6-26-19-9C-C4-64-C3-CE-9B-BD-1F-8F-41-30-4E-D5-81-31&#34; received
</span></span><span class="line"><span class="cl">I	11:38:33.430	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 02-FE-01-83-24-0F-A7-4C-2A-07-0E-00-22-F2
</span></span><span class="line"><span class="cl">A	11:38:33.430	&#34;(0x) 02-FE-01-83-24-0F-A7-4C-2A-07-0E-00-22-F2&#34; received
</span></span><span class="line"><span class="cl">I	11:38:35.830	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 00-31-30-05-17-00-0A-53-C7-73-35-4A-54-9E-6A-99-19-41-CE-00
</span></span><span class="line"><span class="cl">A	11:38:35.830	&#34;(0x) 00-31-30-05-17-00-0A-53-C7-73-35-4A-54-9E-6A-99-19-41-CE-00&#34; received
</span></span><span class="line"><span class="cl">I	11:38:35.830	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 01-DB-8B-0F-A0-8E-61-43-4F-EC-F2-70-91-17-CE-A7-5F-2D-CA-64
</span></span><span class="line"><span class="cl">A	11:38:35.830	&#34;(0x) 01-DB-8B-0F-A0-8E-61-43-4F-EC-F2-70-91-17-CE-A7-5F-2D-CA-64&#34; received
</span></span><span class="line"><span class="cl">I	11:38:35.830	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 02-00-0E-6B-D8-FF-9E-47-CA-AB-45-1F-A3-EB
</span></span><span class="line"><span class="cl">A	11:38:35.830	&#34;(0x) 02-00-0E-6B-D8-FF-9E-47-CA-AB-45-1F-A3-EB&#34; received
</span></span><span class="line"><span class="cl">I	11:38:41.880	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 00-31-30-05-CE-1C-89-3F-B9-EF-3C-16-61-7A-EC-45-B7-7D-75-8C
</span></span><span class="line"><span class="cl">A	11:38:41.880	&#34;(0x) 00-31-30-05-CE-1C-89-3F-B9-EF-3C-16-61-7A-EC-45-B7-7D-75-8C&#34; received
</span></span><span class="line"><span class="cl">I	11:38:41.880	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 01-03-CF-67-7F-14-6C-54-5A-B7-DB-4D-D7-6E-E9-D7-28-17-3D-64
</span></span><span class="line"><span class="cl">A	11:38:41.880	&#34;(0x) 01-03-CF-67-7F-14-6C-54-5A-B7-DB-4D-D7-6E-E9-D7-28-17-3D-64&#34; received
</span></span><span class="line"><span class="cl">I	11:38:41.880	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 02-D0-68-E2-25-13-D9-18-A3-1E-A9-39-C5-5C
</span></span><span class="line"><span class="cl">A	11:38:41.880	&#34;(0x) 02-D0-68-E2-25-13-D9-18-A3-1E-A9-39-C5-5C&#34; received
</span></span><span class="line"><span class="cl">I	11:38:46.881	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 00-31-30-05-CC-B8-79-AB-FF-EB-D0-62-AD-D6-77-71-61-39-02-98
</span></span><span class="line"><span class="cl">A	11:38:46.881	&#34;(0x) 00-31-30-05-CC-B8-79-AB-FF-EB-D0-62-AD-D6-77-71-61-39-02-98&#34; received
</span></span><span class="line"><span class="cl">I	11:38:46.881	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 01-4C-68-73-AB-5E-37-67-25-64-7F-EF-7D-2C-EA-CF-8D-4E-CB-90
</span></span><span class="line"><span class="cl">A	11:38:46.881	&#34;(0x) 01-4C-68-73-AB-5E-37-67-25-64-7F-EF-7D-2C-EA-CF-8D-4E-CB-90&#34; received
</span></span><span class="line"><span class="cl">I	11:38:46.881	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 02-A2-01-AF-59-35-60-7F-4F-29-AC-7A-0A-0A
</span></span><span class="line"><span class="cl">A	11:38:46.881	&#34;(0x) 02-A2-01-AF-59-35-60-7F-4F-29-AC-7A-0A-0A&#34; received
</span></span><span class="line"><span class="cl">I	11:38:52.881	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 00-31-30-05-82-D4-8B-97-89-67-22-2E-A9-B2-BC-1D-06-75-A5-24
</span></span><span class="line"><span class="cl">A	11:38:52.881	&#34;(0x) 00-31-30-05-82-D4-8B-97-89-67-22-2E-A9-B2-BC-1D-06-75-A5-24&#34; received
</span></span><span class="line"><span class="cl">I	11:38:52.881	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 01-93-D9-CB-C6-6B-37-89-31-5E-A3-9F-8A-ED-B4-D1-13-7D-0A-FD
</span></span><span class="line"><span class="cl">A	11:38:52.881	&#34;(0x) 01-93-D9-CB-C6-6B-37-89-31-5E-A3-9F-8A-ED-B4-D1-13-7D-0A-FD&#34; received
</span></span><span class="line"><span class="cl">I	11:38:52.881	Notification received from 00002b10-0000-1000-8000-00805f9b34fb, value: (0x) 02-6E-4D-34-CD-EF-B0-C5-81-F1-E8-7A-1E-E3
</span></span><span class="line"><span class="cl">A	11:38:52.881	&#34;(0x) 02-6E-4D-34-CD-EF-B0-C5-81-F1-E8-7A-1E-E3&#34; received
</span></span></code></pre></td></tr></table>
</div>
</div><p>Perhaps <code>00002b10-0000-1000-8000-00805f9b34fb</code> is <a href="https://developer.tizen.org/community/code-snippet/embed/20776" target="_blank" rel="noopener noreffer">temperature</a> or <a href="https://pub.dev/documentation/flutter_web_bluetooth/latest/flutter_web_bluetooth/BluetoothDefaultCharacteristicUUIDS/temperatureRange-constant.html" target="_blank" rel="noopener noreffer"><code>tempRange</code></a>?</p>
<p>And <code>00002b11-0000-1000-8000-00805f9b34fb</code> is <a href="https://pub.dev/documentation/flutter_web_bluetooth/latest/flutter_web_bluetooth/BluetoothDefaultCharacteristicUUIDS/temperatureStatistics-constant.html" target="_blank" rel="noopener noreffer"><code>temperatureStatistics</code></a>?</p>
<p>Not sure about packets for volume or battery level (if they&rsquo;re even in the above log dump).</p>
<h1 id="the-mod">The mod</h1>
<p>I still don&rsquo;t know why the Hidrate team didn&rsquo;t make the puck charge wirelessly to begin with but that&rsquo;s the simplest modification to address most of the biggest shortcomings:</p>
<ul>
<li>Qi is a standard. If the charging base is lost/damaged, replacements are not difficult to get and any wireless charging that a user might travel with&hellip; will just work with the bottle.</li>
<li>Wireless charging means no liquid to accidentally get in a USB port or onto pogo pins / slip rings. Electric current through a liquid results in corrosion&hellip; which is how my original cable got damaged!</li>
<li>The bottle can be &ldquo;in use&rdquo; while it&rsquo;s charging. Take a sip, place bottle back on charger!</li>
</ul>
<p>Here is a quick &ldquo;proof of concept&rdquo; video taken just before final testing and assembly.</p>
<video controls preload="auto" width="100%"  playsinline class="html-video">
    <source src="/hidrate-spark-qi-retrofit/images/it%20works.mp4" type="video/mp4">
  <span>Your browser doesn't support embedded videos, but don't worry, you can <a href="/hidrate-spark-qi-retrofit/images/it%20works.mp4">download it</a> and watch it with your favorite video player!</span>
</video>
<p>The version shown above is &ldquo;mark 2&rdquo;. It is simpler to assemble, uses less material and is about 30% thinner relative to the &ldquo;mark 1&rdquo; designs.
I put a <em>ton</em> of effort into making the design as approachable and affordable as possible. The idea was to make it easy for average people to make their bottle <em>better the stock</em> in just a few hours.</p>
<ul>
<li>Parts can be printed easily and quickly on all but the sloppiest printers.</li>
<li>Basic hand / power tools are all that are required. At no point do you need an extremely expensive and precise machine to perform some critical step.</li>
<li>Cheap! Requires a few $ in easy to source parts and pennies in plastic and electricity.</li>
</ul>
<p>My hope is that the engineers at Hidrate will see that it&rsquo;s not <em><strong>that difficult</strong></em> to design an objectively better experience into their products, that it&rsquo;s an anti-consumer dark pattern to needlessly require a proprietary charging cable.</p>
<p>Fingers crossed that their next generation of hardware won&rsquo;t look like this 🤞:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Source is still &#39;YouTube/Tony H&#39; but I&#39;ve had a bit of fun trying to figure out how to blend images with GIMP :P.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>You can find a through set of instructions, printable part files and BOM at the <a href="https://github.com/kquinsland/hidrate-spark-qi-charging" target="_blank" rel="noopener noreffer"><code>kquinsland/hidrate-spark-qi-charging</code></a> repo.
If you do follow the instructions and manage to make your bottle charge wirelessly, let me know!</p>
]]></description></item><item><title>Using ESPHome with the Treatlife DS03</title><link>https://karlquinsland.com/treatlife-ds03-esphome/</link><pubDate>Thu, 09 Jun 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/treatlife-ds03-esphome/</guid><description><![CDATA[<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Post depreciation notice<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">This is an update to the <a href="/treatlife-ds03-tasmota-autoconfig-with-homeassistant/" rel=""><code>Fixing Home Assistant discovery with Tasmota on the Treatlife DS03</code> post</a>.</div>
        </div>
    </div>
<h1 id="tasmota-reliability">Tasmota reliability</h1>
<p>A few months ago, I started to notice some bizarre behavior with the DS03 ceiling fan controllers that I had previously flashed with Tasmota.
Very regularly, the devices would crash and reboot! I almost never noticed unless I was explicitly looking at the uptime / boot count graphs for the devices but every once in a while, the device would reboot <em>right as I was trying to control it remotely</em>.</p>
<p>I was able to confirm that the rules I was using to &lsquo;augment&rsquo; the Home Assistant auto-discovery payload were the culprit. Odd since nothing had changed; only the version of tasmota has been changing.</p>
<p>While it&rsquo;s not clear <em>what</em> the issue is, it <strong>probably</strong> has something to do with RAM exhaustion.
The details are <a href="https://github.com/arendst/Tasmota/issues/15636#issuecomment-1130511474" target="_blank" rel="noopener noreffer">in Tasmota issue #15636</a> if your curious.</p>
<p>The Tasmota rules were a workaround to a broader problem: tasmota offers very little to customize <em>how</em> the entity is advertised to Home Assistant. Since the workaround was no longer working, the next logical step is to re-evaluate if Tasmota is the appropriate firmware for the device.</p>
<h1 id="using-esphome-with-the-ds03">Using ESPHome with the DS03</h1>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>Beta software release<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>I <strong>strongly</strong> prefer MQTT for my Home Automation interoperability.</p>
<p>The MQTT &lt;-&gt; Home Assistant mechanism in ESPHome has been playing second fiddle to the native ESPHome &lt;-&gt; Home Assistant API as of late so there are more bugs and usability issues. As such, the YAML below depends on a fix for <code>mqtt.fan</code> component that exists in the  <a href="https://github.com/esphome/esphome/releases/tag/2022.6.0b2" target="_blank" rel="noopener noreffer">2022.06.b2</a> or later release.</p>
<p>Specifically, <a href="https://github.com/esphome/esphome/pull/3537" target="_blank" rel="noopener noreffer">this</a> commit.</p>
<p>If you do not use MQTT for your ESPHome &lt;-&gt; Home Assistant linking, you should be fine using the latest &lsquo;stable&rsquo; release of ESPHome.</p>
</div>
        </div>
    </div>
<p>After <a href="https://esphome.io/guides/migrate_sonoff_tasmota.html" target="_blank" rel="noopener noreffer">migrating the tasmota install to ESPHome</a>, I am happy to report that ESPHome is running on the DS03 and that the full/proper MQTT auto-discovery payload is published. 🥳</p>
<p>Here is a &lsquo;reference&rsquo; YAML file that is similar to the ones I use in &lsquo;production&rsquo;. You will need to add your own MQTT/WiFi&hellip; etc configuration.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">substitutions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">hostname</span><span class="p">:</span><span class="w"> </span><span class="l">YourHostNameHere</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">friendly_name</span><span class="p">:</span><span class="w"> </span><span class="l">YourDeviceNameHere</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">esphome</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">${hostname}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">ESP8266</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">board</span><span class="p">:</span><span class="w"> </span><span class="l">esp01_1m</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Enable logging</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">logger</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">level</span><span class="p">:</span><span class="w"> </span><span class="l">INFO</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Uses a TuYa MCU to drive the power components</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># See: https://esphome.io/components/tuya.html</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">tuya</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># See: https://esphome.io/components/uart.html</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">uart</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">rx_pin</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">tx_pin</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Not sure why/where/how this error shows up but seems functional as is /shrug</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># [E][uart:015]:   Invalid baud_rate: Integration requested baud_rate 9600 but you have 115200!</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">baud_rate</span><span class="p">:</span><span class="w"> </span><span class="m">115200</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># See: https://esphome.io/components/light/tuya.html</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">light</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">${friendly_name} Light</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">device_light</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;tuya&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">dimmer_datapoint</span><span class="p">:</span><span class="w"> </span><span class="m">10</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">switch_datapoint</span><span class="p">:</span><span class="w"> </span><span class="m">9</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">min_value</span><span class="p">:</span><span class="w"> </span><span class="m">100</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">max_value</span><span class="p">:</span><span class="w"> </span><span class="m">1000</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:ceiling-fan-light&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_mode</span><span class="p">:</span><span class="w"> </span><span class="l">ALWAYS_OFF</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># See: https://esphome.io/components/fan/tuya.html</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">fan</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">${friendly_name} Speed</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">device_fan</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;tuya&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">switch_datapoint</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">speed_datapoint</span><span class="p">:</span><span class="w"> </span><span class="m">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">speed_count</span><span class="p">:</span><span class="w"> </span><span class="m">4</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:ceiling-fan&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_mode</span><span class="p">:</span><span class="w"> </span><span class="l">ALWAYS_OFF</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>Quick look inside the OMRON Evolv BP7000 Blood Pressure cuff</title><link>https://karlquinsland.com/omron-bp7000-evolv-teardown/</link><pubDate>Sat, 14 May 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/omron-bp7000-evolv-teardown/</guid><description><![CDATA[<p>A friend recently asked for my help with some reverse engineering.
They wanted to know how difficult it would be to re-use some components from a lot of refurbished blood pressure cuffs they had recently acquired.</p>
<p>Sounds easy, right?
At a high level, there&rsquo;s going to be:</p>
<ul>
<li>a pump and a pressure sensor and a valve</li>
<li>a micro controller to run the show</li>
<li>a way to communicate the readings back to the user</li>
</ul>
<p>In the interest of expediting things, I asked for the FCC IDs from the devices so I could have a look inside&hellip; and was surprized to find out that there was no FCC listing for this particular model from the lot.</p>
<p>😕</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Here&#39;s what it looks like on the outside
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>So with that out of the way, here&rsquo;s what the <code>Omron BP7000</code> looks like on the inside.</p>
<h1 id="teardown">Teardown</h1>
<p>There are a total of 7 philips screws holding the unit together. Two of the six are much smaller so two different sized bits might be a good idea.</p>
<p>After removing all the screws and carefully prying back the plastic clips, the front panel comes off of the body giving us the first look at the PCB stackup and mechanical internals.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>The OLED screen is not held in place with anything so be exceedingly careful when opening!</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Here&rsquo;s a closeup of the &lsquo;front&rsquo; of the main PCB.
There&rsquo;s a ton more passives than I thought there would be but a single large controller next to a pressure sensor is about what I figured.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Details on the ICs are <a href="#pcb-markings" rel="">below</a>.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>I am not quite sure what this little IC is for. Calibration or firmware?</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>The BTLE module is connected through a 8 wire FFC.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Several of the square pads are accessible from the exterior before the pressure cuff is attached. Almost certainly for programming at the factory.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>With the main PCB removed, you can see the actual mechanical components that build up and release the air pressure.
The two blue wires are for the solenoid that vents air pressure out of the system.
The port to the right and just above the BTLE module is where air pressure is measured.
The white box attached tot the motor is the air pump.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<h2 id="btle-module">BTLE module</h2>
<p>For some additional photos of the module w/o a shield, check the amazing <a href="https://fccid.io/Q6ZHHXMD05T/Internal-Photos/Short-Term-Confidential-Internal-Photo-3042585" target="_blank" rel="noopener noreffer">fccid.io page</a>.</p>
<p>This module appears to be used in <em>several</em> similar blood pressure monitors.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<h2 id="pcb-markings">PCB Markings</h2>
<p>AKA SEO optimization 😉</p>
<p>Main PCB is marked:</p>
<blockquote>
<p>HEM-7600T
MEIKO
5662769-8A
20M
MDK332V-0W</p>
</blockquote>
<p>And on the rear:</p>
<blockquote>
<p>F02Z1B
F15Z1B</p>
</blockquote>
<p>The main CPU is - apparently - from Toshiba and marked with:</p>
<blockquote>
<p>2127 HAL
T5DE1FG
369440</p>
</blockquote>
<p>I can&rsquo;t find anything specific. The only result in google is <a href="https://www.fomalhaut.co.jp/0000-List_Schedule_Master.xls" target="_blank" rel="noopener noreffer">this spreadsheet</a>. If you look closely, you&rsquo;ll find the string <code>T5DE1FG (TOSHIBA)</code> in column <code>L</code> on rows <code>1254</code> and <code>1255</code>.</p>
<p>The pressure sensor is labeled:</p>
<ul>
<li><a href="https://www.mouser.com/c/i/sensors/pressure-sensors/?q=PP-02" target="_blank" rel="noopener noreffer"><code>PP02 L8HW</code></a> which appears to be an Omron made sensor.</li>
</ul>
<p>The small 8 pin IC adjacent to the main processor is labeled:</p>
<blockquote>
<p>4G64
12953</p>
</blockquote>
<p>BTLE PCB is marked:</p>
<ul>
<li><code>MODEL: HHX-MD05T</code></li>
<li><a href="https://fccid.io/Q6ZHHXMD05T" target="_blank" rel="noopener noreffer"><code>FCC ID: Q6ZHHXMD05T</code></a></li>
<li><code>IC: 10623A-HHXMD05T</code></li>
<li><code>Anatel 13257-20-10304</code></li>
<li><code>007-AE0102</code></li>
<li><code>9545448-2A</code></li>
</ul>
]]></description></item><item><title>Configuring additional ZwaveJS entities in Home Assistant over MQTT</title><link>https://karlquinsland.com/zwavejs-autodiscovery-additional-entities/</link><pubDate>Thu, 12 May 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/zwavejs-autodiscovery-additional-entities/</guid><description><![CDATA[<p>This is a super quick &ldquo;because the official docs didn&rsquo;t make it super clear so here&rsquo;s what ended up working for me&rdquo; post.</p>
<hr>
<!-- markdownlint-disable-file MD033 -->
<p>After some <a href="https://karlquinsland.com/venstar-t7850-teardown-review/#an-update-on-wifi-connectivity" rel="">very disappointing WiFi connectivity issues</a>, I settled on a Zwave based thermostat to replace the Venstar thermostat.</p>
<p>After installing the Honeywell TH6320 and connecting it to the ZwaveJS gateway, a new `climate`` entity appeared in Home Assistant. From there, I was able to see/control:</p>
<ul>
<li>The current thermostat setpoint/mode</li>
<li>The current air temp and humidity</li>
<li>The current battery level / if the thermostat thought the battery was low</li>
</ul>
<p>I knew that it was possible to adjust the the screen backlight from the thermostat itself so I was a bit confused when there was no such configuration entity exposed in Home Assistant.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Note the `Idle_brightness` sensor. That&#39;s not part of the &#39;default&#39; zwavejs2mqtt install.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>After playing around with the ZwaveJS2MQTT web interface for bit, I discovered that it was possible to adjust the backlight brightness&hellip;and over 40 other settings under the <code>Configuration v4</code> section.</p>
<p>I can totally understand why only the &ldquo;core&rdquo; functionality would be automatically exposed to Home Assistant; most of the 40+ knobs are things that do not need to be set beyond the initial installation.</p>
<p>So, How do I go about getting ZwaveJS2MQTT to automatically tell Home Assistant about the current backlight level?</p>
<h2 id="exposing-idle-brightness-to-home-assistant-as-a-sensor">Exposing &lsquo;idle brightness&rsquo; to Home Assistant as a Sensor</h2>
<p>From the <code>Configuration v4</code> tab for the thermostat node, I found the input field <code>[4-112-0-39] Idle Brightness</code> which let me control the thermostat screen backlight level.
I don&rsquo;t know what the numbers mean, but they are important / uniquely identify <em>a specific setting</em>.</p>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>Note<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">If you are using this as a guide but for a <em>different</em> setting (perhaps you want to keep an eye on <code>[4-112-0-28] Minimum Cool Temperature</code>, for example) then you will want to substitute your parameter setting &lsquo;address&rsquo; as appropriate.</div>
        </div>
    </div>
<p>After some more experimentation and trying to grok <a href="https://zwave-js.github.io/zwavejs2mqtt/#/homeassistant/homeassistant-mqtt?id=add-new-component" target="_blank" rel="noopener noreffer">documentation</a>, I figured out how to get ZwaveJS to advertise the current value for the backlight brightness as a sensor in Home Assistant.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The &#39;HOME ASSISTANT&#39; tab of my thermostats&#39; page.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>Here&rsquo;s how to do it:</p>
<ul>
<li>Select the <code>node</code> in question from the <code>Control Panel</code> page on the ZwaveJS2MQTT web UI. In this case, you can see that my thermostat is node <code>4</code>. Yours will likely be different.</li>
<li>Select the <code>Home Assistant</code> tab from the left. You can see it selected in the above screenshot.</li>
<li>In the blank <code>Hass Device JSON</code> box, paste the JSON document that describes the sensor / entity you wish to expose to Home Assistant. I struggled for some time trying to figure out what the document should look like but was able to &lsquo;reverse engineer&rsquo; a working payload by studying the <code>sensor_humidity_air</code> entity that was automatically created.</li>
<li>Then click the <code>ADD</code> button that should have activated just above the <code>Hass Device JSON</code>. A new row should appear in the <code>Home Assistant - Devices table</code></li>
<li>Click the newly added row so the <code>Hass Device JSON</code> field is populated with the JSON document you have added.</li>
<li>Click the <code>UPDATE</code> button that should appear just above the <code>Hass Device JSON</code> label</li>
<li>Assuming no issues, this will send the MQTT message which tells Home Assistant about your new sensor. You may wish to use a MQTT broker inspection app to monitor the exact payload that is sent to the <code>homeassistant/...</code> topic as well as <code>tail -f home-assistant.log</code>. If Home Assistant gets the message, any validation errors will show up in the HA log.</li>
<li>Once you are satisfied with how the entity is presented in Home Assistant, click the <code>STORE</code> button just below the <code>Home Assistant - Devices</code> heading on the ZwaveJS2MQTT web UI.</li>
</ul>
<p>When all is said and done, this is what you should see:</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<h3 id="example-payload">Example payload</h3>
<p>Here is a (slightly edited) version of the JSON document I added via the <code>Hass Device JSON</code> entry.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;sensor&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;object_id&#34;</span><span class="p">:</span> <span class="s2">&#34;idle_brightness&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;discovery_payload&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;value_template&#34;</span><span class="p">:</span> <span class="s2">&#34;{{ value_json.value }}&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;state_topic&#34;</span><span class="p">:</span> <span class="s2">&#34;zwave/YourThermostat_NameHere/112/0/39&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;json_attributes_topic&#34;</span><span class="p">:</span> <span class="s2">&#34;zwave/YourThermostat_NameHere/112/0/39&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;device&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;identifiers&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;zwavejs2mqtt_0xdeadbeef_node4&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">],</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;manufacturer&#34;</span><span class="p">:</span> <span class="s2">&#34;Honeywell&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;model&#34;</span><span class="p">:</span> <span class="s2">&#34;T6 Pro Z-Wave Programmable Thermostat (TH6320ZW)&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;YourThermostat NameHere&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;sw_version&#34;</span><span class="p">:</span> <span class="s2">&#34;1.3&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;YourThermostat NameHere idle_brightness&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;unique_id&#34;</span><span class="p">:</span> <span class="s2">&#34;zwavejs2mqtt_0xdeadbeef_4-112-0-Idle_Brightness&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;entity_category&#34;</span><span class="p">:</span> <span class="s2">&#34;config&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;icon&#34;</span><span class="p">:</span> <span class="s2">&#34;mdi:brightness-percent&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;discoveryTopic&#34;</span><span class="p">:</span> <span class="s2">&#34;sensor/YourThermostat_NameHere/idle_brightness/config&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;values&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;112-0-39&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">],</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;persistent&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;ignoreDiscovery&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;sensor_idle_brightness&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>I have replaced a few things in the example payload. You will want to retrieve the correct values for your payload from one of the automatically generated payloads. I used the <code>sensor_humidity_air</code> device as a starting point for my payload.</p>
<h2 id="ok-but-what-about-writing-to-the-thermostat">Ok, but what about writing to the thermostat?</h2>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        A basic &#39;helper&#39; widget for use in Home Assistant Automations.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>Once the sensor exists in Home Assistant, you will probably want to use it in an automation.
Here is a simple automation that watches a basic number input widget and sets the backlight brightness for the thermostat based on what the widget is set to:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">alias</span><span class="p">:</span><span class="w"> </span><span class="l">Sync thermostat brightness to input select</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">description</span><span class="p">:</span><span class="w"> </span><span class="l">An Example automation.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">trigger</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">state</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_id</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">sensor.yourthermostat_namehere_idle_brightness</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">physical</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">state</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_id</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">input_number.thermostat_backlight</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">virtual</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">condition</span><span class="p">:</span><span class="w"> </span><span class="p">[]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">choose</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">conditions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">condition</span><span class="p">:</span><span class="w"> </span><span class="l">trigger</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">virtual</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">sequence</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">service</span><span class="p">:</span><span class="w"> </span><span class="l">mqtt.publish</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">data</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">topic</span><span class="p">:</span><span class="w"> </span><span class="l">zwave/YourThermostat_NameHere/112/0/39/set</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">payload_template</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;{{trigger.to_state.state}}&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">conditions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">condition</span><span class="p">:</span><span class="w"> </span><span class="l">trigger</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">physical</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">sequence</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">service</span><span class="p">:</span><span class="w"> </span><span class="l">input_number.set_value</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">target</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">entity_id</span><span class="p">:</span><span class="w"> </span><span class="l">input_number.thermostat_backlight</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">data_template</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;{{trigger.to_state.state | float}}&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">default</span><span class="p">:</span><span class="w"> </span><span class="p">[]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">single</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">max_exceeded</span><span class="p">:</span><span class="w"> </span><span class="l">silent</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>This <em>works</em> but it&rsquo;s not <em>automagic</em>. We can do better!</p>
<h2 id="more-automagic-more-better">More Automagic, More Better</h2>
<p>The primary downside with the above automation is that the user (read: you) needs to create the <code>input_number</code> widget and then spend the time telling Home Assistant what to do when the value changes.</p>
<p>This isn&rsquo;t a particularly difficult task - only ~30 lines of yaml&hellip; but what if we didn&rsquo;t have to do that?</p>
<p>What if Home Assistant had a robust auto discovery mechanism that we could take advantage of to <em>automagically</em> set up a basic input widget that would transmit the necessary MQTT payload to adjust the backlight &hellip; automatically?</p>
<p>I have good news and bad news.</p>
<p>The good news is that we totally can do this. 🎉</p>
<p>The bad news is that ZwaveJS2MQTT does not appear to support the <a href="https://www.home-assistant.io/integrations/input_select/" target="_blank" rel="noopener noreffer"><code>input_select</code></a> type of entity that we&rsquo;ll need to pull this off. 👎</p>
<p>I am not super familiar with the ZwaveJS2MQTT code base, but it looks like there is no validation on the JSON you enter under the <code>Hass Device JSON</code> field but there <em>is</em> some validation / filtering on the MQTT message that is sent for auto discovery. <a href="https://github.com/zwave-js/zwavejs2mqtt/blob/master/hass/configurations.ts#L6" target="_blank" rel="noopener noreffer">ZwaveJS2MQTT does not seem to support <code>select</code> components via MQTT</a> so the payload that is sent to Home Assistant is incomplete and results in errors:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">│ ERROR <span class="o">(</span>MainThread<span class="o">)</span> <span class="o">[</span>homeassistant.util.logging<span class="o">]</span> Exception in discovery_callback when dispatching <span class="s1">&#39;mqtt_discovery_updated_(&#39;</span><span class="k">select</span><span class="s1">&#39;, &#39;</span>YourThermostat NameHere idle_brightness │
</span></span><span class="line"><span class="cl">│ Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
</span></span><span class="line"><span class="cl">│   File <span class="s2">&#34;/usr/src/homeassistant/homeassistant/components/mqtt/mixins.py&#34;</span>, line 724, in discovery_callback      
</span></span><span class="line"><span class="cl">│     await self._discovery_update<span class="o">(</span>payload<span class="o">)</span>    
</span></span><span class="line"><span class="cl">│   File <span class="s2">&#34;/usr/src/homeassistant/homeassistant/components/mqtt/mixins.py&#34;</span>, line 886, in discovery_update        
</span></span><span class="line"><span class="cl">│     <span class="nv">config</span> <span class="o">=</span> self.config_schema<span class="o">()(</span>discovery_payload<span class="o">)</span>                                                          
</span></span><span class="line"><span class="cl">│   File <span class="s2">&#34;/usr/local/lib/python3.9/site-packages/voluptuous/validators.py&#34;</span>, line 232, in __call__               
</span></span><span class="line"><span class="cl">│     <span class="k">return</span> self._exec<span class="o">((</span>Schema<span class="o">(</span>val<span class="o">)</span> <span class="k">for</span> val in self.validators<span class="o">)</span>, v<span class="o">)</span>                                            
</span></span><span class="line"><span class="cl">│   File <span class="s2">&#34;/usr/local/lib/python3.9/site-packages/voluptuous/validators.py&#34;</span>, line 355, in _exec                  
</span></span><span class="line"><span class="cl">│     raise e <span class="k">if</span> self.msg is None <span class="k">else</span> AllInvalid<span class="o">(</span>self.msg, <span class="nv">path</span><span class="o">=</span>path<span class="o">)</span>                                          
</span></span><span class="line"><span class="cl">│   File <span class="s2">&#34;/usr/local/lib/python3.9/site-packages/voluptuous/validators.py&#34;</span>, line 351, in _exec                  
</span></span><span class="line"><span class="cl">│     <span class="nv">v</span> <span class="o">=</span> func<span class="o">(</span>v<span class="o">)</span>                              
</span></span><span class="line"><span class="cl">│   File <span class="s2">&#34;/usr/local/lib/python3.9/site-packages/voluptuous/schema_builder.py&#34;</span>, line 272, in __call__           
</span></span><span class="line"><span class="cl">│     <span class="k">return</span> self._compiled<span class="o">([]</span>, data<span class="o">)</span>          
</span></span><span class="line"><span class="cl">│   File <span class="s2">&#34;/usr/local/lib/python3.9/site-packages/voluptuous/schema_builder.py&#34;</span>, line 818, in validate_callable  
</span></span><span class="line"><span class="cl">│     <span class="k">return</span> schema<span class="o">(</span>data<span class="o">)</span>                      
</span></span><span class="line"><span class="cl">│   File <span class="s2">&#34;/usr/local/lib/python3.9/site-packages/voluptuous/schema_builder.py&#34;</span>, line 272, in __call__           
</span></span><span class="line"><span class="cl">│     <span class="k">return</span> self._compiled<span class="o">([]</span>, data<span class="o">)</span>          
</span></span><span class="line"><span class="cl">│   File <span class="s2">&#34;/usr/local/lib/python3.9/site-packages/voluptuous/schema_builder.py&#34;</span>, line 595, in validate_dict      
</span></span><span class="line"><span class="cl">│     <span class="k">return</span> base_validate<span class="o">(</span>path, iteritems<span class="o">(</span>data<span class="o">)</span>, out<span class="o">)</span>                                                          
</span></span><span class="line"><span class="cl">│   File <span class="s2">&#34;/usr/local/lib/python3.9/site-packages/voluptuous/schema_builder.py&#34;</span>, line 433, in validate_mapping   
</span></span><span class="line"><span class="cl">│     raise er.MultipleInvalid<span class="o">(</span>errors<span class="o">)</span>         
</span></span><span class="line"><span class="cl">│ voluptuous.error.MultipleInvalid: required key not provided @ data<span class="o">[</span><span class="s1">&#39;options&#39;</span><span class="o">]</span>   
</span></span></code></pre></td></tr></table>
</div>
</div><p>While it would be nice if ZwaveJS2MQTT would support more device types, we have a pretty simple fix: use another device to publish a valid configuration payload.</p>
<p>And as it turns out, it&rsquo;s <em>trivial</em> to get Home Assistant to publish an arbitrary payload to an arbitrary topic when it starts up.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">alias</span><span class="p">:</span><span class="w"> </span><span class="l">Autoconfigure Thermostat Backlight select</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">description</span><span class="p">:</span><span class="w"> </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">  On HA start up, publish MQTT payload so HA auto-discovers the input_select to
</span></span></span><span class="line"><span class="cl"><span class="sd">  automate thermostat backlight brightness</span><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">trigger</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">homeassistant</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">event</span><span class="p">:</span><span class="w"> </span><span class="l">start</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">condition</span><span class="p">:</span><span class="w"> </span><span class="p">[]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">service</span><span class="p">:</span><span class="w"> </span><span class="l">mqtt.publish</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">data</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">topic</span><span class="p">:</span><span class="w"> </span><span class="l">homeassistant/select/YourThermostat_NameHere/idle_brightness/config</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">payload</span><span class="p">:</span><span class="w"> </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">        </span><span class="w">        </span>{<span class="s2">&#34;options&#34;</span><span class="p">:[</span><span class="s2">&#34;0&#34;</span><span class="p">,</span><span class="s2">&#34;1&#34;</span><span class="p">,</span><span class="s2">&#34;2&#34;</span><span class="p">,</span><span class="s2">&#34;3&#34;</span><span class="p">,</span><span class="s2">&#34;4&#34;</span><span class="p">,</span><span class="s2">&#34;5&#34;</span><span class="p">],</span><span class="s2">&#34;name&#34;</span><span class="p">:</span><span class="s2">&#34;MainThermostat idle_brightness&#34;</span><span class="p">,</span><span class="s2">&#34;state_topic&#34;</span><span class="p">:</span><span class="s2">&#34;zwave/YourThermostat_NameHere/112/0/39&#34;</span><span class="p">,</span><span class="s2">&#34;value_template&#34;</span><span class="p">:</span><span class="s2">&#34;{{&#39;{{value_json.value}}&#39;}}&#34;</span><span class="p">,</span><span class="s2">&#34;command_topic&#34;</span><span class="p">:</span><span class="s2">&#34;zwave/YourThermostat_NameHere/112/0/39/set&#34;</span><span class="p">,</span><span class="s2">&#34;command_template&#34;</span><span class="p">:</span><span class="s2">&#34;{{&#39;{{value}}&#39;}}&#34;</span><span class="p">,</span><span class="s2">&#34;unique_id&#34;</span><span class="p">:</span><span class="s2">&#34;zwavejs2mqtt_0xdeadbeef_4-112-0-Idle_Brightness_Select&#34;</span><span class="p">,</span><span class="s2">&#34;device&#34;</span><span class="p">:</span>{<span class="s2">&#34;identifiers&#34;</span><span class="p">:[</span><span class="s2">&#34;zwavejs2mqtt_0xdeadbeef_node4&#34;</span><span class="p">],</span><span class="s2">&#34;manufacturer&#34;</span><span class="p">:</span><span class="s2">&#34;Honeywell&#34;</span><span class="p">,</span><span class="s2">&#34;model&#34;</span><span class="p">:</span><span class="s2">&#34;T6ProZ-WaveProgrammableThermostat(TH6320ZW)&#34;</span><span class="p">,</span><span class="s2">&#34;name&#34;</span><span class="p">:</span><span class="s2">&#34;MainThermostat&#34;</span><span class="p">,</span><span class="s2">&#34;sw_version&#34;</span><span class="p">:</span><span class="s2">&#34;1.3&#34;</span>}<span class="p">,</span><span class="s2">&#34;entity_category&#34;</span><span class="p">:</span><span class="s2">&#34;config&#34;</span><span class="p">,</span><span class="s2">&#34;icon&#34;</span><span class="p">:</span><span class="s2">&#34;mdi:brightness-percent&#34;</span>}<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">single</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition important open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>Notice<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>If you look carefully, you will notice two things:</p>
<ul>
<li>The json payload has been escaped and turned into a string</li>
<li>The templates inside the string are <a href="https://community.home-assistant.io/t/how-can-i-use-escape-characters-while-templating/135324" target="_blank" rel="noopener noreffer"><em>further</em> escaped</a> by wrapping them in <code>{{ '</code> and <code>'}}</code>.</li>
</ul>
</div>
        </div>
    </div>
<p>Here is a pretty formatted JSON document:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&#34;options&#34;</span><span class="p">:[</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;0&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;2&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;3&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;4&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;5&#34;</span>
</span></span><span class="line"><span class="cl">   <span class="p">],</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&#34;name&#34;</span><span class="p">:</span><span class="s2">&#34;YourThermostat NameHere idle_brightness&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&#34;state_topic&#34;</span><span class="p">:</span><span class="s2">&#34;zwave/YourThermostat_NameHere/112/0/39&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&#34;value_template&#34;</span><span class="p">:</span><span class="s2">&#34;{{ &#39;{{value_json.value}}&#39; }}&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&#34;command_topic&#34;</span><span class="p">:</span><span class="s2">&#34;zwave/YourThermostat_NameHere/112/0/39/set&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&#34;command_template&#34;</span><span class="p">:</span><span class="s2">&#34;{{ &#39;{{value}}&#39; }}&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&#34;unique_id&#34;</span><span class="p">:</span><span class="s2">&#34;zwavejs2mqtt_0xdeadbeef_4-112-0-Idle_Brightness_Select&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&#34;device&#34;</span><span class="p">:{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;identifiers&#34;</span><span class="p">:[</span>
</span></span><span class="line"><span class="cl">         <span class="s2">&#34;zwavejs2mqtt_0xdeadbeef_node4&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">],</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;manufacturer&#34;</span><span class="p">:</span><span class="s2">&#34;Honeywell&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;model&#34;</span><span class="p">:</span><span class="s2">&#34;T6 Pro Z-Wave Programmable Thermostat (TH6320ZW)&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;name&#34;</span><span class="p">:</span><span class="s2">&#34;YourThermostat NameHere&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;sw_version&#34;</span><span class="p">:</span><span class="s2">&#34;1.3&#34;</span>
</span></span><span class="line"><span class="cl">   <span class="p">},</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&#34;entity_category&#34;</span><span class="p">:</span><span class="s2">&#34;config&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&#34;icon&#34;</span><span class="p">:</span><span class="s2">&#34;mdi:brightness-percent&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Once the automation is created, save it. You can test your work by clicking &ldquo;run actions&rdquo; and monitoring the home assistant log file.</p>
<p>When the payload is properly escaped, you should see a new entity added to the Device page:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Automatically created!
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>When you select a brightness value from the drop down, the backlight brightness should change.
That&rsquo;s how you get a &rsquo;non standard&rsquo; thermostat configuration value to automatically show up on the correct device page.</p>
<p>You now no longer need the example automation from <a href="#ok-but-what-about-writing-to-the-thermostat" rel="">above</a>. 😎.</p>
]]></description></item><item><title>Quick look inside Venstar T7850 - One of the only 'no-cloud' WiFi Thermostats that plays nice with Home Assistant</title><link>https://karlquinsland.com/venstar-t7850-teardown-review/</link><pubDate>Sat, 23 Apr 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/venstar-t7850-teardown-review/</guid><description><![CDATA[<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>Info<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">As of 2022-05-11, there is an update on my experience with the thermostat <a href="#an-update-on-wifi-connectivity" rel="">below</a>!</div>
        </div>
    </div>
<p>This is another one of those posts from my never ending quest to integrate Home Assistant with All The Things!</p>
<p>The thermostat that was installed when I moved in was an early Nest thermostat. These thermostats are - for the most part - well reviewed and liked. I had no complaints&hellip; except one.</p>
<p>Google only permits programmatic interaction with Nest devices through their <a href="https://developers.google.com/nest/device-access/api" target="_blank" rel="noopener noreffer">Smart Device Management API</a>.
This API is essentially cloud hosted MQTT and requires a small fee to access.
There is no way to control a supported Nest device without an Internet connection&hellip; even if the Home Assistant server and the Nest device are on the same subnet! 👎</p>
<p>This policy makes it needlessly complicated to integrate the thermostat with Home Assistant and that cripples my climate control automations beyond a tolerable level.</p>
<p>With summer approaching, I started looking for a thermostat that would play nice with Home Assistant.
My criteria:</p>
<ul>
<li>Work with existing HVAC system and wiring.</li>
<li>Play nice with Home Assistant, preferably with a <em><strong>local</strong></em> API.</li>
<li>Cost no more than the Nest thermostat.</li>
<li>Use TCP/IP over WiFi instead of Zigbee or Zwave.</li>
</ul>
<p>As it turns out, I am not the only one on a similar hunt:</p>
<ul>
<li>
<p><a href="https://community.home-assistant.io/t/which-of-these-thermostats-have-the-best-experience-with-ha/207520" target="_blank" rel="noopener noreffer">Which of these thermostats have the best experience with HA?</a></p>
</li>
<li>
<p><a href="https://community.home-assistant.io/t/smart-thermostat-recommendations-for-2021/359434" target="_blank" rel="noopener noreffer">Smart Thermostat Recommendations for 2021</a></p>
</li>
<li>
<p><a href="https://community.home-assistant.io/t/best-easiest-and-of-course-lowest-cost-smart-thermostat-for-home-assistant/384927" target="_blank" rel="noopener noreffer">Best, easiest and of course lowest cost smart thermostat for Home Assistant</a></p>
</li>
<li>
<p><a href="https://www.reddit.com/r/homeassistant/comments/kzavi9/what_is_the_best_thermostats_to_use_with_home/" target="_blank" rel="noopener noreffer">What is the best thermostats to use with Home Automation</a></p>
</li>
</ul>
<p>The &ldquo;TL;DR:&rdquo; of most of those threads is: <em>&ldquo;Any thermostat with zwave of zigbee will work&rdquo;</em>.</p>
<p>As most people don&rsquo;t particularly care about the network protocol(s) used to link Home Assistant to the thermostat, that&rsquo;s fine advice.</p>
<p>For whatever reason, you have to dig much deeper to find people discussing <strong>WiFi</strong> based thermostats that play nice with Home Assistant w/o an internet connection but there are a few out there. I settled on the Venstar T7850.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<h1 id="initial-impressions">Initial Impressions:</h1>
<p>Below is a super concise review that is based mostly on my initial impressions / install experience.
I have only recently acquired and installed the T7850 so I can&rsquo;t comment on any of the finer points or drawbacks that could only be known after several months experience with the thermostat.</p>
<p>TL;DR: I wish I had more insight into Google&rsquo;s disappointing decision to not implement a local API for the Nest; I&rsquo;ll uninstall the Venstar and put it up on eBay the nanosecond the Nest gets a local API!</p>
<h2 id="an-update-on-wifi-connectivity">An Update on WiFi connectivity</h2>
<p>Less than 48 hours after installing the thermostat, I noticed that Home Assistant was no longer able to control it.
Every entity on the device showed <code>Unavailable</code>. Apparently, the thermostat had fallen off the network and was struggling to get back on.</p>
<p>I went through all the usual troubleshooting steps and was able to confirm a few interesting things:</p>
<ul>
<li>Changing the network name and password didn&rsquo;t help.</li>
<li>I disabled the SSID on my access point and created an identical SSID/network key on an old raspberry pi. The thermostat was <em>usually</em> able to connect to the AP. If I powered down the raspberry pi AP and re-enabled the same network name/key on my AP, the thermostat would not connect. If left on the raspberry pi AP, the thermostat would eventually eventually &ldquo;fall off&rdquo;.</li>
</ul>
<p>I initially suspected that the initial firmware update I didn&rsquo;t consent to may have broken something and started to look for a way to downgrade the firmware to the previous version that <em>did</em> manage to connect to my AP quickly.</p>
<p>No such luck.</p>
<p>While the thermostat does have an A/B partition scheme, I couldn&rsquo;t find any way to force a downgrade or even get older firmware files from the manufacturer.</p>
<p>After a few factory resets and additional troubleshooting, I started to look around&hellip; and apparently this is not a new problem.</p>
<p>Here are two &lsquo;relatively new&rsquo; reddit threads that mention similar connection issues with similar models in the same product family:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Source: /r/homeassistant post:
        <a href="https://www.reddit.com/r/homeassistant/comments/nge04w/all_local_control_thermostat_with_mqtt_and_home/hvxxpwy/?context=3"> 
            ALL Local Control Thermostat with MQTT and Home Assistant - Venstar T7900
        </a> 
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Source: /r/thermostats post:
        <a href="https://www.reddit.com/r/thermostats/comments/og9bae/comment/hgzqdmj/?context=3"> 
            Venstar T7900 - problem with WIFI
        </a> 
        </p> 
    </figcaption>
    
</figure>


<p>And an Amazon question from years ago indicating that this might not be a &rsquo;new&rsquo; issue:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Source: Amazon question: 
        <a href="https://www.amazon.com/ask/questions/Tx2N92LOB3XBR7U"> 
            My venstar phone app says thermostat is offline. How do I reconnect it ?
        </a> 
        </p> 
    </figcaption>
    
</figure>


<p>A Home Assistant community/support form poster seems to have a similar issue and even offers a fix&hellip; which did not work.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Source: Home Assistant community forums: 
        <a href="https://community.home-assistant.io/t/venstar-t7900-trane-air-conditioning-amana-forced-air-furnace/314969"> 
            Venstar T7900 &amp; Trane Air Conditioning / Amana Forced Air Furnace
        </a> 
        </p> 
    </figcaption>
    
</figure>


<p>My access point is also a Unifi AP so of course there are a few threads on the unifi support forums:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Source: Ubiquity community forums: 
        <a href="https://community.ui.com/questions/Trouble-associating-Venstar-Wifi-thermostats-with-one-particular-UAP-AC-PRO/ad597f22-b8ff-4b7c-8e01-1676e92cc318"> 
            Trouble associating Venstar Wifi thermostats with one particular UAP-AC-PRO
        </a> 
        </p> 
    </figcaption>
    
</figure>


<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>Note<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Note: <a href="https://fccid.io/MUH-SKYPORT2/Attestation-Statements/Models-Covered-2531030" target="_blank" rel="noopener noreffer">The FCC documents indicate</a> that Venstar did re-brand the thermostat for <code>First Alert</code> and <code>Bionaire</code>. It is likely that they also did this for <code>Carrier</code> as well judging by <a href="https://images.google.com/search?q=carrier&#43;infinity&#43;touch&#43;control&amp;tbm=isch" target="_blank" rel="noopener noreffer">pictures</a> of a <code>Carrier Infinity Touch Control</code> thermostat.</div>
        </div>
    </div>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Source: Ubiquity community forums: 
        <a href="https://community.ui.com/questions/Cant-connect-to-Carrier-Infinity-Thermostat/e95531ef-ac18-452a-be4d-7ac0157258fe"> 
            Cant connect to Carrier Infinity Thermostat
        </a> 
        </p> 
    </figcaption>
    
</figure>


<p>The user name seems familiar; probably the same user from one of the above reddit threads:
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Source: Ubiquity community forums: 
        <a href="https://community.ui.com/questions/Venstar-T7900-Thermostat-Wont-Connect-to-WiFi/48eff0a3-5b27-4cdd-9c2f-80bcdb5e0bc3"> 
            Venstar T7900 Thermostat Won&#39;t Connect to WiFi
        </a> 
        </p> 
    </figcaption>
    
</figure>

</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Source: Ubiquity community forums: 
        <a href="https://community.ui.com/questions/Venstar-ColorTouch-Thermostat-Unable-to-Connect-to-AC-LR/77e08c30-246d-4a39-923c-c912c259fca9"> 
            Venstar ColorTouch Thermostat Unable to Connect to AC-LR
        </a> 
        </p> 
    </figcaption>
    
</figure>


<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>TL;DR:<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>Ubiquity&rsquo;s Unifi line of wireless access points has a pretty solid reputation for a reason; by and large they just work. I have installed dozens of them over the years and have supported installs with <em>thousands</em> of them and had far fewer issues with those customers/sites than with your typical &lsquo;soho&rsquo; routers and other consumer-grade access points.</p>
<p>As of <strong>right now</strong>, I have a little more than a hundred wireless devices hanging off of the same AP that the thermostat failed to reliably connect to. Over the past several years, I have acquired many more devices and - with the exception of <strong>one other device</strong> - I have never had issues connecting anything to my wireless network.</p>
<p>Even if only some users experience issues with Venstar thermostats connecting to WiFi, I have to wonder why the issue exists at all. It&rsquo;s 2022 and there&rsquo;s no excuse for basic WiFi network compatibility issues like the kind that were more common in the bad old days of early WiFi circa <em>2005</em>. Somehow, the hundred+ other devices got their WiFi right&hellip; what is Venstar missing?</p>
<p>While I didn&rsquo;t want to introduce <em>yet another</em> wireless&rsquo;s networking standard to my home, I am <em>considerably</em> happier with the Honeywell TH6320ZW2003 that has replaced the T7850.</p>
</div>
        </div>
    </div>
<h2 id="the-good">The Good</h2>
<ul>
<li>It has <em>optional</em> cloud connectivity! It&rsquo;s trivial to turn this off and - as far as I can tell - it is <strong>mostly</strong> disabled. More on that <a href="#network" rel="">below</a>.</li>
<li>API is <a href="https://developer.venstar.com/documentation/" target="_blank" rel="noopener noreffer">documented</a>!</li>
<li>API accessible over HTTP or HTTPS and can be put behind <a href="https://en.wikipedia.org/wiki/Basic_access_authentication" target="_blank" rel="noopener noreffer">BasicAuth</a>! 👏</li>
<li>Thermostat has <em>lots</em> of tweaks and options meant for &lsquo;power users&rsquo;. These settings ship with reasonably sane default values. I suspect that most of these options are included in the &ldquo;residential&rdquo; devices only because they&rsquo;re already baked into the firmware for &ldquo;commercial&rdquo; customers that legitimately do need lots of knobs to adjust.</li>
<li>It&rsquo;s a reasonably good looking LCD screen; viewing angles are decent and the screen is plenty readable in direct sunlight when the brightness is turned all the way up.</li>
<li>The piezoelectric beeper can be disabled in software! 🔇</li>
</ul>
<h2 id="the-bad">The Bad</h2>
<ul>
<li>The API is <a href="#api-limitations" rel="">pretty limited</a>.</li>
<li>The screen has an integrated <em>resistive</em> touch panel. This was a poor choice for for a product design in 2014/2015 and is inexcusable for in 2022! 👎</li>
<li>There is no way to use your own TLS certificate. You have to use the certificate generated by the device. 🙁</li>
<li>There is no way to disable automatic firmware updates or view release notes on device. If there&rsquo;s an update found, the thermostat will download it and restart&hellip; even if the user is <em>actively using the device</em>. 😡 Even <a href="https://support.microsoft.com/en-us/windows/defer-feature-updates-in-windows-10-770c0ea8-eee5-ae25-f695-8e33f541e04d" target="_blank" rel="noopener noreffer">windows (finally) let you push the update to <em>after</em> you&rsquo;re done using the device</a>!</li>
<li>There is no ambient brightness sensor or presence detection sensor so the screen is always on at one brightness level.</li>
<li>The device has WiFI and communicates with the mothership using TLS1.2&hellip; but somehow it does not have <a href="https://en.wikipedia.org/wiki/Network_Time_Protocol" target="_blank" rel="noopener noreffer">NTP</a> support! Yep! This is literally the <strong>only</strong> internet enabled <em>thing</em> that I own that <strong>still requires me to manually set the date/time</strong> 😡. What a glaring oversight!</li>
</ul>
<h3 id="api-limitations">API limitations</h3>
<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>Warning<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>The only <em>documented</em> portions of the API <a href="https://developer.venstar.com/documentation/#query" target="_blank" rel="noopener noreffer">cover interrogating the device for state about sensors and mode</a>.
Keep these limitations in mind when considering exactly what you want to be able to control via the API.</p>
<p>E.G.: It was <em>very</em> disappointing to find out that I can&rsquo;t adjust the screen on/off/brightness state via the API! So much for automatically turning the screen at night and waking it only when nearby motion was detected!</p>
</div>
        </div>
    </div>
<p>There is no <em>documented</em> way to control most of the other device settings that can be manipulated through the screen.
Things you can do via the screen but not via the (documented) API:</p>
<ul>
<li>Adjust the date / time</li>
<li>Adjust the screen brightness</li>
<li>Adjust any program/schedule settings or adjust vacation mode settings</li>
<li>Adjust setpoint limits (e.g.: don&rsquo;t let the user try to cool below 25°C or heat above 35°C)</li>
<li>Set/Disable Screen lock (requires a PIN code to access controls)</li>
<li>Set &lsquo;screensaver&rsquo; functionality. You can&rsquo;t toggle this via the API nor can you set the &ldquo;idle timeout&rdquo; setting or upload custom photos. You have to resort to a desktop / electron app to do so!</li>
</ul>
<p>I have not bothered with the &ldquo;skyport&rdquo; remote control functionality that Venstar offers but their marketing literature implies that some of the above points <em>can</em> be manipulated via their remote service. This leads me to believe that there is more to the API that what is documented publicly.</p>
<p>Given that the thermostat seems to have it&rsquo;s own CA created by Venstar engineering, I would bet that simple TLS proxy will not be enough to discover any undocumented API endpoints in the unit that could allow for more control.</p>
<p>If anybody does know of a local API endpoint that allows for controlling the screen brightness&hellip;<a href="https://karlquinsland.com/contact/" rel="">please do get in touch</a>!</p>
<h1 id="teardown">Teardown</h1>
<p>It&rsquo;s not a particularly complicated device: everything is on one side of a multi-layer PCB.
A ton of electronics for directly interfacing with thermostat wires and a few ICs for all the fun stuff!</p>
<p>The photos are mine, taken right before installing the unit.
There are more / similar photos at the <a href="https://fccid.io/MUH-SKYPORT2/Internal-Photos/Internal-Photos-Revised-2531033" target="_blank" rel="noopener noreffer">FCC filing</a> if you&rsquo;re curious.</p>
<p>I am including mine for some additional detail and as a &lsquo;mirror&rsquo; of the FCC photos. Shoutout to the <em>amazing</em> <code>fccid.io</code> ❤️!</p>
<p>The main PCB is readily accessed - just remove the rear panel / wall mount bracket.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        I don&#39;t see any (mechanical) relays
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>Lots of passives and misc ICs and a few unpopulated footprints. This is consistent with <a href="https://fccid.io/MUH-SKYPORT2/Attestation-Statements/Models-Covered-2531030" target="_blank" rel="noopener noreffer">some of the documentation on file with the FCC</a>: there is 1 PCB for all 6 products in the family and the only significant difference is the software and the humidity sensor.
If i had to guess, I&rsquo;d be that <code>U13</code> is the humidity sensor.</p>
<p>Only one obvious pin header but the silkscreen <code>JP2</code> implies that there&rsquo;s another one somewhere (<code>JP1</code>).
The pins are suspiciously close to the full sized SD card and don&rsquo;t match the pinout for an obvious UART but 6 pins could be JTAG.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>There&rsquo;s nothing remarkable on the other side; just a connection for the LCD and a beeper. At least the beeper module is trivial to &ldquo;factory delete&rdquo; if the software option to disable it ever stops working!</p>
<p>The full sized SD card is for users to store photos and firmware upgrades.
Photo parsing is notoriously tricky so there&rsquo;s a decent chance that a malicious photo could be crafted to attack the thermostat. 🤔</p>
<p>All the business logic lives under the big metal shield. I didn&rsquo;t probe the two test points but they certainly look like they could be UART or similar interface to the app processor.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Highly integrated ARM with external flash and ram. Almost a given these days!
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>Here&rsquo;s a partial shot of the LCD panel barcode.
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>

</p>
<p>And a quick bonus picture! I took this just a few moments after the thermostat had been installed and powered up.
I had connected it to the WiFi network just 45 seconds before and was exploring the system settings when the unit locked up for a second and then kicked me to this screen:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        No way to cancel or defer. No explanation of &#39;why&#39;!
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>There was no explanation for the abrupt reboot but after the device came back, the system settings indicated the device was running the latest firmware.</p>
<p><strong>Note:</strong> Look at the date/time! The device <em>obviously</em> has been able to phone home and download the latest firmware file&hellip; but does nothing with the NTP server it asked for (and received!)</p>
<h1 id="other-technical-details">Other technical details</h1>
<h2 id="firmware">Firmware</h2>
<p>The firmware updates can be obtained through the desktop app. They are written out to a SD card with this directory structure:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ tree
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── FOUND.000
</span></span><span class="line"><span class="cl">│   └── FILE0000.CHK
</span></span><span class="line"><span class="cl">├── System Volume Information
</span></span><span class="line"><span class="cl">│   ├── IndexerVolumeGuid
</span></span><span class="line"><span class="cl">│   └── WPSettings.dat
</span></span><span class="line"><span class="cl">├── VC
</span></span><span class="line"><span class="cl">│   └── firmware
</span></span><span class="line"><span class="cl">│       └── Update.bin
</span></span><span class="line"><span class="cl">├── VH
</span></span><span class="line"><span class="cl">│   ├── dealer.bin
</span></span><span class="line"><span class="cl">│   ├── dealerlogo.bin
</span></span><span class="line"><span class="cl">│   ├── dealerlogo - Copy.jpg
</span></span><span class="line"><span class="cl">│   ├── firmware1a
</span></span><span class="line"><span class="cl">│   │   └── update.bin
</span></span><span class="line"><span class="cl">│   ├── gallery
</span></span><span class="line"><span class="cl">│   │   ├── 0.bin
</span></span><span class="line"><span class="cl">│   │   ├── gallery.bin
</span></span><span class="line"><span class="cl">│   │   └── thumbs
</span></span><span class="line"><span class="cl">│   │       └── 0.bin
</span></span><span class="line"><span class="cl">│   ├── name.bin
</span></span><span class="line"><span class="cl">│   ├── schedule.bin
</span></span><span class="line"><span class="cl">│   └── settings.bin
</span></span><span class="line"><span class="cl">├── VR
</span></span><span class="line"><span class="cl">│   └── firmware
</span></span><span class="line"><span class="cl">│       └── Update.bin
</span></span><span class="line"><span class="cl">└── VW
</span></span><span class="line"><span class="cl">    └── firmware1a
</span></span><span class="line"><span class="cl">        └── update.bin
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">12</span> directories, <span class="m">16</span> files
</span></span></code></pre></td></tr></table>
</div>
</div><p>The <code>dealerlogo - Copy.jpg</code> was me testing something related to the &ldquo;user photos&rdquo; function of the desktop app. The <code>gallery/*.bin</code> files are just re-sized jpeg files.
There is a mechanism for backing up / importing settings using <code>bin</code> files which are just <code>json</code> files store in the root directory for the device model; <code>VH</code> in this case. Those files are not pictured above as I discovered the export function after I drafted this section of the post.</p>
<p>I could do a whole <em>series</em> of posts on reverse engineering the firmware but that&rsquo;s going to have to wait for another day / more time. In the interim, here&rsquo;s some of my findings:</p>
<ul>
<li>The user interface is javascript. Yep! The entire interface is a single page web app that seems to be hosted by a binary called <code>maestero2</code>. Not much comes up on google, but <a href="https://github.com/grassroot72/Maestro2" target="_blank" rel="noopener noreffer">this repo</a> does seem like it could be related.
<ul>
<li>I can <em>see</em> in the source code where the javascript controls the LCD backlight&hellip; so there is <strong>absolutely no good reason</strong> why I can&rsquo;t do the same via the &ldquo;local API&rdquo;.</li>
</ul>
</li>
<li>The device appears to use mutual TLS when talking to the remote endpoints. Try to make a request to <code>https://ctupdate.skyport.io/feed</code> and you&rsquo;ll see the server ask you for a certificate :D.
<ul>
<li>I don&rsquo;t know if the certificates are <em>per device</em> or not. The certificates are stored in a separate <code>jffs2</code> partition which is <em>not</em> distributed in the firmware updates (as best I can tell).</li>
<li>There are a few strings that mention code signing certificates but I have not probed the firmware update routines in depth to know how it all works.</li>
</ul>
</li>
<li>It appears that the TTY is disabled and there are no telnet/ssh services started on boot so it&rsquo;s unclear how the <code>root</code> user can be used remotely&hellip; but I did find this in <code>/etc/shadow</code>: <code>root:$1$JEstzl9y$Ed7nAJIsY/0irewnqZoqn1:10933:0:99999:7:::</code>.</li>
</ul>
<h2 id="network">network</h2>
<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>Warning<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Even though the <code>skyport</code> functionality has been switched off, <a href="#dns" rel="">I still see the thermostat phoning home to <code>ctupdate.skyport.io</code> on startup</a>. In addition to the usual &ldquo;write firewall rules preventing WAN access&rdquo;, I would suggest sinkholing the <code>skyport.io</code> domain.</div>
        </div>
    </div>
<p>Like with all new devices, I ran <code>tcpdump</code> while setting it up. Almost all of the traffic was TLS1.2 protected but I did notice a few interesting things from the packet capture.</p>
<p>Immediately after booting / joining the network, the device sends out a DHCP request:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Dynamic Host Configuration Protocol (Discover)
</span></span><span class="line"><span class="cl">    Message type: Boot Request (1)
</span></span><span class="line"><span class="cl">    Hardware type: Ethernet (0x01)
</span></span><span class="line"><span class="cl">    Hardware address length: 6
</span></span><span class="line"><span class="cl">    Hops: 0
</span></span><span class="line"><span class="cl">    Transaction ID: 0x1308ee40
</span></span><span class="line"><span class="cl">    Seconds elapsed: 0
</span></span><span class="line"><span class="cl">    Bootp flags: 0x0000 (Unicast)
</span></span><span class="line"><span class="cl">    Client IP address: 0.0.0.0
</span></span><span class="line"><span class="cl">    Your (client) IP address: 0.0.0.0
</span></span><span class="line"><span class="cl">    Next server IP address: 0.0.0.0
</span></span><span class="line"><span class="cl">    Relay agent IP address: 0.0.0.0
</span></span><span class="line"><span class="cl">    Client MAC address: MurataMa_de:ad:bf (10:98:c3🇩🇪ad:bf)
</span></span><span class="line"><span class="cl">    Client hardware address padding: 00000000000000000000
</span></span><span class="line"><span class="cl">    Server host name not given
</span></span><span class="line"><span class="cl">    Boot file name not given
</span></span><span class="line"><span class="cl">    Magic cookie: DHCP
</span></span><span class="line"><span class="cl">    Option: (53) DHCP Message Type (Discover)
</span></span><span class="line"><span class="cl">        Length: 1
</span></span><span class="line"><span class="cl">        DHCP: Discover (1)
</span></span><span class="line"><span class="cl">    Option: (61) Client identifier
</span></span><span class="line"><span class="cl">        Length: 7
</span></span><span class="line"><span class="cl">        Hardware type: Ethernet (0x01)
</span></span><span class="line"><span class="cl">        Client MAC address: MurataMa_de:ad:bf (10:98:c3🇩🇪ad:bf)
</span></span><span class="line"><span class="cl">    Option: (57) Maximum DHCP Message Size
</span></span><span class="line"><span class="cl">        Length: 2
</span></span><span class="line"><span class="cl">        Maximum DHCP Message Size: 576
</span></span><span class="line"><span class="cl">    Option: (55) Parameter Request List
</span></span><span class="line"><span class="cl">        Length: 7
</span></span><span class="line"><span class="cl">        Parameter Request List Item: (1) Subnet Mask
</span></span><span class="line"><span class="cl">        Parameter Request List Item: (3) Router
</span></span><span class="line"><span class="cl">        Parameter Request List Item: (6) Domain Name Server
</span></span><span class="line"><span class="cl">        Parameter Request List Item: (12) Host Name
</span></span><span class="line"><span class="cl">        Parameter Request List Item: (15) Domain Name
</span></span><span class="line"><span class="cl">        Parameter Request List Item: (28) Broadcast Address
</span></span><span class="line"><span class="cl">        Parameter Request List Item: (42) Network Time Protocol Servers
</span></span><span class="line"><span class="cl">    Option: (60) Vendor class identifier
</span></span><span class="line"><span class="cl">        Length: 12
</span></span><span class="line"><span class="cl">        Vendor class identifier: udhcp 1.29.2
</span></span><span class="line"><span class="cl">    Option: (255) End
</span></span><span class="line"><span class="cl">        Option End: 255
</span></span><span class="line"><span class="cl">    Padding: 0000000000000000000000000000000000000000
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Note:</strong> <code>de:ad:bf </code> is replacing the <em>actual</em> octets of my thermostat MAC :).</p>
<p>Interesting! The DHCP server <em>explicitly asks for a NTP server</em> and then the thermostat &hellip; does not use it!</p>
<p>The <code>udhcp 1.29.2</code> string implies a relatively recent build of - possibly - busybox running the show&hellip;</p>
<p>The next packets after that are basic SSDP and IGMP:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">NOTIFY ALIVE SDDP/1.0
</span></span><span class="line"><span class="cl">From: &#34;123.456.789.012:1902&#34;
</span></span><span class="line"><span class="cl">Host: &#34;10:98:c3🇩🇪ad:bf&#34;
</span></span><span class="line"><span class="cl">Max-Age: 300
</span></span><span class="line"><span class="cl">Type: &#34;venstar:control4_thermostat_proxy:colortouch&#34;
</span></span><span class="line"><span class="cl">Primary-Proxy: &#34;thermostatV2&#34;
</span></span><span class="line"><span class="cl">Proxies: &#34;thermostatV2&#34;
</span></span><span class="line"><span class="cl">Manufacturer: &#34;Venstar&#34;
</span></span><span class="line"><span class="cl">Model: &#34;ColorTouch&#34;
</span></span><span class="line"><span class="cl">Driver: &#34;venstar_ip_colortouch_hvac.c4z&#34;
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Internet Group Management Protocol
</span></span><span class="line"><span class="cl">    [IGMP Version: 3]
</span></span><span class="line"><span class="cl">    Type: Membership Report (0x22)
</span></span><span class="line"><span class="cl">    Reserved: 00
</span></span><span class="line"><span class="cl">    Checksum: 0xea03 [correct]
</span></span><span class="line"><span class="cl">    [Checksum Status: Good]
</span></span><span class="line"><span class="cl">    Reserved: 0000
</span></span><span class="line"><span class="cl">    Num Group Records: 1
</span></span><span class="line"><span class="cl">    Group Record : 239.255.255.250  Change To Exclude Mode
</span></span><span class="line"><span class="cl">        Record Type: Change To Exclude Mode (4)
</span></span><span class="line"><span class="cl">        Aux Data Len: 0
</span></span><span class="line"><span class="cl">        Num Src: 0
</span></span><span class="line"><span class="cl">        Multicast Address: 239.255.255.250
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="dns">DNS</h3>
<p>And <em>just before</em> the TLS traffic, there is a single DNS query:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Queries
</span></span><span class="line"><span class="cl">    ctupdate.skyport.io: type A, class IN
</span></span><span class="line"><span class="cl">        Name: ctupdate.skyport.io
</span></span><span class="line"><span class="cl">        [Name Length: 19]
</span></span><span class="line"><span class="cl">        [Label Count: 3]
</span></span><span class="line"><span class="cl">        Type: A (Host Address) (1)
</span></span><span class="line"><span class="cl">        Class: IN (0x0001)
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="web-server">Web server</h3>
<p>After setting a user/password and selecting the <code>https</code> option for the local API, here&rsquo;s what I see:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ openssl s_client -connect 123.456.789.012:443
</span></span><span class="line"><span class="cl">CONNECTED<span class="o">(</span>00000003<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">depth</span><span class="o">=</span><span class="m">0</span> <span class="nv">C</span> <span class="o">=</span> US, <span class="nv">ST</span> <span class="o">=</span> California, <span class="nv">L</span> <span class="o">=</span> Chatsworth, <span class="nv">O</span> <span class="o">=</span> Venstar Inc., <span class="nv">OU</span> <span class="o">=</span> Engineering, <span class="nv">CN</span> <span class="o">=</span> CT1A_100163664
</span></span><span class="line"><span class="cl">verify error:num<span class="o">=</span>20:unable to get <span class="nb">local</span> issuer certificate
</span></span><span class="line"><span class="cl">verify <span class="k">return</span>:1
</span></span><span class="line"><span class="cl"><span class="nv">depth</span><span class="o">=</span><span class="m">0</span> <span class="nv">C</span> <span class="o">=</span> US, <span class="nv">ST</span> <span class="o">=</span> California, <span class="nv">L</span> <span class="o">=</span> Chatsworth, <span class="nv">O</span> <span class="o">=</span> Venstar Inc., <span class="nv">OU</span> <span class="o">=</span> Engineering, <span class="nv">CN</span> <span class="o">=</span> CT1A_100163664
</span></span><span class="line"><span class="cl">verify error:num<span class="o">=</span>21:unable to verify the first certificate
</span></span><span class="line"><span class="cl">verify <span class="k">return</span>:1
</span></span><span class="line"><span class="cl"><span class="nv">depth</span><span class="o">=</span><span class="m">0</span> <span class="nv">C</span> <span class="o">=</span> US, <span class="nv">ST</span> <span class="o">=</span> California, <span class="nv">L</span> <span class="o">=</span> Chatsworth, <span class="nv">O</span> <span class="o">=</span> Venstar Inc., <span class="nv">OU</span> <span class="o">=</span> Engineering, <span class="nv">CN</span> <span class="o">=</span> CT1A_100163664
</span></span><span class="line"><span class="cl">verify <span class="k">return</span>:1
</span></span><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">Certificate chain
</span></span><span class="line"><span class="cl"> <span class="m">0</span> s:C <span class="o">=</span> US, <span class="nv">ST</span> <span class="o">=</span> California, <span class="nv">L</span> <span class="o">=</span> Chatsworth, <span class="nv">O</span> <span class="o">=</span> Venstar Inc., <span class="nv">OU</span> <span class="o">=</span> Engineering, <span class="nv">CN</span> <span class="o">=</span> CT1A_100163664
</span></span><span class="line"><span class="cl">   i:C <span class="o">=</span> US, <span class="nv">ST</span> <span class="o">=</span> California, <span class="nv">O</span> <span class="o">=</span> Venstar Inc., <span class="nv">OU</span> <span class="o">=</span> Engineering, <span class="nv">CN</span> <span class="o">=</span> Skyport Root CA
</span></span><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">Server certificate
</span></span><span class="line"><span class="cl">-----BEGIN CERTIFICATE-----
</span></span><span class="line"><span class="cl">MIIGAzCCA+ugAwIBAgIJAIMdu2UK2QoqMA0GCSqGSIb3DQEBDQUAMGkxCzAJBgNV
</span></span><span class="line"><span class="cl">BAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRUwEwYDVQQKDAxWZW5zdGFyIElu
</span></span><span class="line"><span class="cl">Yy4xFDASBgNVBAsMC0VuZ2luZWVyaW5nMRgwFgYDVQQDDA9Ta3lwb3J0IFJvb3Qg
</span></span><span class="line"><span class="cl">Q0EwHhcNMTkxMTA4MDUxOTM2WhcNMzcwNTE3MjM1OTU5WjB9MQswCQYDVQQGEwJV
</span></span><span class="line"><span class="cl">UzETMBEGA1UECAwKQ2FsaWZvcm5pYTETMBEGA1UEBwwKQ2hhdHN3b3J0aDEVMBMG
</span></span><span class="line"><span class="cl">A1UECgwMVmVuc3RhciBJbmMuMRQwEgYDVQQLDAtFbmdpbmVlcmluZzEXMBUGA1UE
</span></span><span class="line"><span class="cl">AwwOQ1QxQV8xMDAxNjM2NjQwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoIC
</span></span><span class="line"><span class="cl">AQDIYpgYtd/+KVEwVKTAHjFzp3FZXJx+RFQjUwdCGMOOWqrztokmNF5I/qXbWqA7
</span></span><span class="line"><span class="cl">okUmO7FKUdW3hAKq358tjcPZytEr1RtRQVtc4/fg35IwtNWf1g/UACazkFOgmOLd
</span></span><span class="line"><span class="cl">yQ4AwMWvfgDFLxREGH3WfPCHJS7v1ddO02WZMEpligK8g7iSEsqw1ZD4gD2xIbwf
</span></span><span class="line"><span class="cl">OxgbIdWJyakNbOebVMul5HUoqtVOLawaOefgh65gf4x0gBgMJ95E32cXZxjUB016
</span></span><span class="line"><span class="cl">r2sAanTkeK7gJhYjVuwFkepEgiLEfj+VY23Qv6CnhR2Kg4g1hv0ZxacHvNw1HCYU
</span></span><span class="line"><span class="cl">5o38tyQQWNHFw4+CadUPLzSnjhK/8TaaIdVcXDgxpQTdwr3l4Q8Dyz4SX+VihdGT
</span></span><span class="line"><span class="cl">Zb2s4K7emuJFlQv9ZlSYpltC7o44sLnQbETBdDwoS8EjOb/T1QyfEvNoqLvWSPOD
</span></span><span class="line"><span class="cl">V1VPPAHp68q9DOgnXa8PJj9nlz0btITmYWhGPobtGeD25Qxl/FulAZLaHWVDfkXb
</span></span><span class="line"><span class="cl">VbWquGMxm5xkYqcsI7UM4r0O8W94x9QZcobQ1sgZ6rs1vDsMGCZBmdexvqZgGN/t
</span></span><span class="line"><span class="cl">oPEIA8MaI4R1UfkqJx3haxYS4AOYt2IEE12kiPeAZlER4PIKbcGny7BgJPi72JSb
</span></span><span class="line"><span class="cl">eacDm7djJBqTP/G/O6Pdny9aWh2WVh0Kom5pLCHm3qydawIDAQABo4GZMIGWMAkG
</span></span><span class="line"><span class="cl">A1UdEwQCMAAwSQYJYIZIAYb4QgENBDwWOklmIHlvdSBrZXB0IHRoZSBzbWFsbCBy
</span></span><span class="line"><span class="cl">dWxlcywgeW91IGNvdWxkIGJyZWFrIHRoZSBiaWcgb25lcy4wHQYDVR0OBBYEFNwF
</span></span><span class="line"><span class="cl">Q5GfrnSlRDSGT/QZ6f283vPMMB8GA1UdIwQYMBaAFLEAWEXFwN/oc5doNhyOE47D
</span></span><span class="line"><span class="cl">w/qxMA0GCSqGSIb3DQEBDQUAA4ICAQA6sUR9fZ0CiwWFnYOKQ5CTzy2rDsXGtP9t
</span></span><span class="line"><span class="cl">DJcN/Ga396Pd2CwxDxp1fXXsbrcLELsuupYnLtsm6VzAaix+fgTtxeFTaQR4vqPf
</span></span><span class="line"><span class="cl">wMXfRzLe0Bk6m+BpWSslD7FTCyDVCnGtuHGCfesOFVvqR897vgU4mGG0qsI8OoD9
</span></span><span class="line"><span class="cl">0EEeX2HVG8QYvKSbJF3FhmKiCDemG9TVfITHKSody/iHpUNo0uHHGjsPfVXq4iWe
</span></span><span class="line"><span class="cl">bkQ3dqRXZmjcGPwzQK4CjlKcmXBDWyEhR25/U+dDItaTQet0GGaYK+KrpjDLH56d
</span></span><span class="line"><span class="cl">XWm7YDP5/EMbfRR7en7L6Ca3TFhpyNF5PxDfmz1fywqr85wdAb/ACJztew9f9hqG
</span></span><span class="line"><span class="cl">35rOH+OqucGeHqfYk6UW46fjXSnybBMJG8+HcVUMpYn7myfFK0tnwQZb477dV7Fs
</span></span><span class="line"><span class="cl">G+rYViPjPmfgxi5/kvXpn0FvTzNg73vkgSBCRxuFIPtMkHrpQdSTr1umAXhKCd7d
</span></span><span class="line"><span class="cl">3mragcL61lhKhh17vOBG73C4bhlAGBFsuACYrmnJFghlfv2X5PbLksc3h8P0DEn3
</span></span><span class="line"><span class="cl">36x/fGTVRvq14/9hxeKmOhL5KFQXrja5YJpoLRs/pgBl2zXQGF3+dLdbcAdaDVjy
</span></span><span class="line"><span class="cl">LyDkRMOfhugXmRh7TuWaqGrpcyXVeL4Kn6nWpq51PEval1HKoUMIkahRJu2WK0BT
</span></span><span class="line"><span class="cl"><span class="nv">kVBzZrkbvA</span><span class="o">==</span>
</span></span><span class="line"><span class="cl">-----END CERTIFICATE-----
</span></span><span class="line"><span class="cl"><span class="nv">subject</span><span class="o">=</span><span class="nv">C</span> <span class="o">=</span> US, <span class="nv">ST</span> <span class="o">=</span> California, <span class="nv">L</span> <span class="o">=</span> Chatsworth, <span class="nv">O</span> <span class="o">=</span> Venstar Inc., <span class="nv">OU</span> <span class="o">=</span> Engineering, <span class="nv">CN</span> <span class="o">=</span> CT1A_100163664
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">issuer</span><span class="o">=</span><span class="nv">C</span> <span class="o">=</span> US, <span class="nv">ST</span> <span class="o">=</span> California, <span class="nv">O</span> <span class="o">=</span> Venstar Inc., <span class="nv">OU</span> <span class="o">=</span> Engineering, <span class="nv">CN</span> <span class="o">=</span> Skyport Root CA
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">No client certificate CA names sent
</span></span><span class="line"><span class="cl">Peer signing digest: SHA256
</span></span><span class="line"><span class="cl">Peer signature type: RSA-PSS
</span></span><span class="line"><span class="cl">Server Temp Key: X25519, <span class="m">253</span> bits
</span></span><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">SSL handshake has <span class="nb">read</span> <span class="m">2277</span> bytes and written <span class="m">430</span> bytes
</span></span><span class="line"><span class="cl">Verification error: unable to verify the first certificate
</span></span><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">New, TLSv1.2, Cipher is ECDHE-RSA-AES128-GCM-SHA256
</span></span><span class="line"><span class="cl">Server public key is <span class="m">4096</span> bit
</span></span><span class="line"><span class="cl">Secure Renegotiation IS supported
</span></span><span class="line"><span class="cl">Compression: NONE
</span></span><span class="line"><span class="cl">Expansion: NONE
</span></span><span class="line"><span class="cl">No ALPN negotiated
</span></span><span class="line"><span class="cl">SSL-Session:
</span></span><span class="line"><span class="cl">    Protocol  : TLSv1.2
</span></span><span class="line"><span class="cl">    Cipher    : ECDHE-RSA-AES128-GCM-SHA256
</span></span><span class="line"><span class="cl">    Session-ID: 1391DF607DB2888CA81220E321CB06CA6B5CBDE2031483A3E4AC075AD95A6A5D
</span></span><span class="line"><span class="cl">    Session-ID-ctx:
</span></span><span class="line"><span class="cl">    Master-Key: 7A37EEBC584574EBA6B114E85CCD685B30F640D17D38A9B2E90AC8739BC76EB4A15E38A8F3B74F3D428328F874C9807C
</span></span><span class="line"><span class="cl">    PSK identity: None
</span></span><span class="line"><span class="cl">    PSK identity hint: None
</span></span><span class="line"><span class="cl">    SRP username: None
</span></span><span class="line"><span class="cl">    Start Time: <span class="m">1650744968</span>
</span></span><span class="line"><span class="cl">    Timeout   : <span class="m">7200</span> <span class="o">(</span>sec<span class="o">)</span>
</span></span><span class="line"><span class="cl">    Verify <span class="k">return</span> code: <span class="m">21</span> <span class="o">(</span>unable to verify the first certificate<span class="o">)</span>
</span></span><span class="line"><span class="cl">    Extended master secret: yes
</span></span></code></pre></td></tr></table>
</div>
</div><p>The thermostat was pretty well closed off. <code>nmap</code> came back with port 53 and 443 open. Taking a closer lok at 443:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">PORT    STATE SERVICE  VERSION
</span></span><span class="line"><span class="cl">443/tcp open  ssl/http Neato Botvac Connected
</span></span><span class="line"><span class="cl"><span class="p">|</span> ssl-cert: Subject: <span class="nv">commonName</span><span class="o">=</span>CT1A_100163664/organizationName<span class="o">=</span>Venstar Inc./stateOrProvinceName<span class="o">=</span>California/countryName<span class="o">=</span>US
</span></span><span class="line"><span class="cl"><span class="p">|</span> Issuer: <span class="nv">commonName</span><span class="o">=</span>Skyport Root CA/organizationName<span class="o">=</span>Venstar Inc./stateOrProvinceName<span class="o">=</span>California/countryName<span class="o">=</span>US
</span></span><span class="line"><span class="cl"><span class="p">|</span> Public Key type: rsa
</span></span><span class="line"><span class="cl"><span class="p">|</span> Public Key bits: <span class="m">4096</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> Signature Algorithm: sha512WithRSAEncryption
</span></span><span class="line"><span class="cl"><span class="p">|</span> Not valid before: 2019-11-08T05:19:36
</span></span><span class="line"><span class="cl"><span class="p">|</span> Not valid after:  2037-05-17T23:59:59
</span></span><span class="line"><span class="cl"><span class="p">|</span> MD5:   3efc 609c bbf3 cfb6 ddfb 4cbe bb54 1c63
</span></span><span class="line"><span class="cl"><span class="p">|</span>_SHA-1: 1e65 43f9 <span class="m">8404</span> 9bf6 acf4 0be8 <span class="m">5116</span> 78ff bc02 f024
</span></span><span class="line"><span class="cl">Service Info: Device: specialized
</span></span></code></pre></td></tr></table>
</div>
</div><p>And taking a closer look @ the web server:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">❯ curl -vvv --insecure -L &#39;https://123.456.789.012/&#39; -H &#39;Authorization: Digest username=&#34;SomeUserNameHere&#34;, realm=&#34;thermostat&#34;, nonce=&#34;1234567890&#34;, uri=&#34;/&#34;, response=&#34;some_64_char_string_here&#34;, qop=auth, nc=00000003, cnonce=&#34;some16CharStrHere&#34;&#39;
</span></span><span class="line"><span class="cl">*   Trying 123.456.789.012:443...
</span></span><span class="line"><span class="cl">* Connected to 123.456.789.012 (123.456.789.012) port 443 (#0)
</span></span><span class="line"><span class="cl">* ALPN, offering h2
</span></span><span class="line"><span class="cl">* ALPN, offering http/1.1
</span></span><span class="line"><span class="cl">* TLSv1.3 (OUT), TLS handshake, Client hello (1):
</span></span><span class="line"><span class="cl">* TLSv1.3 (IN), TLS handshake, Server hello (2):
</span></span><span class="line"><span class="cl">* TLSv1.2 (IN), TLS handshake, Certificate (11):
</span></span><span class="line"><span class="cl">* TLSv1.2 (IN), TLS handshake, Server key exchange (12):
</span></span><span class="line"><span class="cl">* TLSv1.2 (IN), TLS handshake, Server finished (14):
</span></span><span class="line"><span class="cl">* TLSv1.2 (OUT), TLS handshake, Client key exchange (16):
</span></span><span class="line"><span class="cl">* TLSv1.2 (OUT), TLS change cipher, Change cipher spec (1):
</span></span><span class="line"><span class="cl">* TLSv1.2 (OUT), TLS handshake, Finished (20):
</span></span><span class="line"><span class="cl">* TLSv1.2 (IN), TLS handshake, Finished (20):
</span></span><span class="line"><span class="cl">* SSL connection using TLSv1.2 / ECDHE-RSA-AES128-GCM-SHA256
</span></span><span class="line"><span class="cl">* ALPN, server did not agree to a protocol
</span></span><span class="line"><span class="cl">* Server certificate:
</span></span><span class="line"><span class="cl">*  subject: C=US; ST=California; L=Chatsworth; O=Venstar Inc.; OU=Engineering; CN=CT1A_100163664
</span></span><span class="line"><span class="cl">*  start date: Nov  8 05:19:36 2019 GMT
</span></span><span class="line"><span class="cl">*  expire date: May 17 23:59:59 2037 GMT
</span></span><span class="line"><span class="cl">*  issuer: C=US; ST=California; O=Venstar Inc.; OU=Engineering; CN=Skyport Root CA
</span></span><span class="line"><span class="cl">*  SSL certificate verify result: unable to get local issuer certificate (20), continuing anyway.
</span></span><span class="line"><span class="cl">&gt; GET / HTTP/1.1
</span></span><span class="line"><span class="cl">&gt; Host: 123.456.789.012
</span></span><span class="line"><span class="cl">&gt; User-Agent: curl/7.82.0
</span></span><span class="line"><span class="cl">&gt; Accept: */*
</span></span><span class="line"><span class="cl">&gt; Authorization: Digest username=&#34;SomeUserNameHere&#34;, realm=&#34;thermostat&#34;, nonce=&#34;1234567890&#34;, uri=&#34;/&#34;, response=&#34;some_64_char_string_here&#34;, qop=auth, nc=00000003, cnonce=&#34;some16CharStrHere&#34;
</span></span><span class="line"><span class="cl">&gt;
</span></span><span class="line"><span class="cl">* Mark bundle as not supporting multiuse
</span></span><span class="line"><span class="cl">&lt; HTTP/1.1 200 OK
</span></span><span class="line"><span class="cl">&lt; Transfer-Encoding: chunked
</span></span><span class="line"><span class="cl">&lt;
</span></span><span class="line"><span class="cl">* Connection #0 to host 123.456.789.012 left intact
</span></span><span class="line"><span class="cl">{&#34;api_ver&#34;:9,&#34;type&#34;:&#34;residential&#34;,&#34;model&#34;:&#34;COLORTOUCH&#34;,&#34;firmware&#34;:&#34;6.91&#34;}%
</span></span></code></pre></td></tr></table>
</div>
</div><p>Unfortunately no headers that leak details about the web server implementation. 😒</p>
<h2 id="ics-and-distinguishing-markings">ICs and distinguishing markings</h2>
<p>As noted above, the WiFi module was covered with a soldered on shield. Fortunately, the FCC filings give a good look!
The chip is a <code>muRata Type ZX WiFi Module</code> which is the <a href="https://learn.sparkfun.com/tutorials/nest-protect-teardown/sensor-scavenger-hunt" target="_blank" rel="noopener noreffer"><em>same</em> WiFi radio thats inside the Nest Protect</a>!</p>
<p>The larger of the two metal shields on the PCB can be removed giving a look at the main application processor:</p>
<ul>
<li>
<p><code>W971GG</code> (probably <a href="https://www.alldatasheet.com/datasheet-pdf/pdf/555599/WINBOND/W971GG6JB-25.html" target="_blank" rel="noopener noreffer"><code>W971GG6JB</code></a>) - DRAM.</p>
</li>
<li>
<p><a href="https://www.digikey.com/en/products/detail/winbond-electronics/W29N01HVBINA/5804021" target="_blank" rel="noopener noreffer"><code>W29N01HVBINA</code></a>: 1gigabit flash.</p>
</li>
<li>
<p><a href="https://www.microchip.com/en-us/product/AT91SAM9G15" target="_blank" rel="noopener noreffer"><code>AT91SAM9G15</code></a> - ARM926 with the peripherals needed for driving a LCD and reading from the resistive (🤮) touchscreen</p>
</li>
</ul>
<p>The LCD is marked with (partially visible):</p>
<pre><code>AT043HS40D07R2
30671T051KD
190805527 (0000000) L101661
</code></pre>
]]></description></item><item><title>Inside a generic/white-label HDMI KVM Switch</title><link>https://karlquinsland.com/hdmi-kvm-teardown-and-esphome/</link><pubDate>Sat, 16 Apr 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/hdmi-kvm-teardown-and-esphome/</guid><description><![CDATA[<p>If you&rsquo;re here just for &ldquo;how do I get it working with ESPHome&rdquo; bit, skip to the <a href="#esphome-component" rel="">ESPHome Component</a> section below.</p>
<hr>
<div class="details admonition important open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>Update 2022.05.14<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">I have just uploaded a basic PCB and enclosure to the  <a href="#esphome-component" rel="">ESPHome Component Repository</a>.</div>
        </div>
    </div>
<p>For the last few months, I have been looking for a KVM switch to simplify switching between work and personal computers.
Initially, I didn&rsquo;t think my criteria were that unreasonable, but for whatever reason there is no KVM switch that:</p>
<ul>
<li>Supports at least 4 hosts. Preferably dual monitors per host to ensure relevancy for years. Converting between HDMI and Display Port isn&rsquo;t that difficult so no strong preference as long as the KVM uses HDMI2.0+ or Display Port 1.4+ as my primary monitor is 4k.</li>
<li>USB 3 support. At least 5 gbps and Ideally using a USBC jack.</li>
<li>Some sort of programmatic control over which host is &lsquo;active&rsquo;. Ideally this interface would be bi-directional (RS232/RS485 or IP) but I&rsquo;d settle for having to record the IR remote codes and re-broadcast those with my own microcontroller if needed.</li>
<li>Works with the <a href="https://drop.com/buy/drop-shift-mechanical-keyboard" target="_blank" rel="noopener noreffer">DROP: SHIFT keyboard</a>; internally this keyboard presents as it&rsquo;s own USB Hub and requires more than the standard 500ma to operate. Some KVM switches don&rsquo;t supply enough current and others results in the number of USB hubs between the root and the keyboard being &gt; 5 which the USB spec does not support.</li>
<li>Costs less than $75 per host/port.</li>
</ul>
<p>Try as I might, I was not able to find anything that could satisfy all the requirements. If you know of any, <a href="https://karlquinsland.com/contact/" rel="">please do get in touch</a>!</p>
<p>I spent a decent chunk of time searching through the usual consumer/IT electronics sites and they all had similar offerings&hellip; none of which were sufficient.
I had some close contenders, but they are victims of the current chip shortage or otherwise very expensive unobtanium.</p>
<p>I recently read <a href="https://overengineer.dev/blog/2021/04/25/usb-c-hub-madness.html" target="_blank" rel="noopener noreffer">USB-C hubs and my slow descent into madness - Dennis Schubert</a> which prompted me to broaden my search horizons to include the marketplaces closer to where all the KVM switches I was seeing in my searches were actually designed.
After a bit of searching, I found the <a href="https://www.aliexpress.com/item/1005003927404402.html" target="_blank" rel="noopener noreffer"><code>PX-UHDKVM801-2.0</code></a>:</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>A single video channel isn&rsquo;t a deal breaker; ultra wide screens can render more pixels off of one HDMI port than 2 screens from a few years ago could. Assuming this continues, by the time my current monitor dies dual video might not matter at all.
Likewise, speedy USB is a &ldquo;nice to have&rdquo;. My keyboard, mouse and web cam <strong>must</strong> work with the KVM. If the webcam streams in SD over USB2 but full HD over a USB3 link that&rsquo;s a <em>nice</em> benefit but not a deal breaker. For the occasional times where I need to transfer a file and can&rsquo;t do it over the network, I can either plug directly into the host computers&rsquo; USB3.2 port or settle for slow USB2 file transfer speeds. Not the end of the world!</p>
<p>Of all the KVMs that I considered, this one came with the least compromises and came with explicit documentation about how to integrate/control the switch via TCP or RS232. Buoyed by the thought of not having to reverse engineer any IR remote codes or otherwise resort to some hackery, I pulled the trigger.</p>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>A quick note about the &#39;generic&#39; switch<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>I say &ldquo;generic&rdquo; because there are a few different brands / names on this thing and it&rsquo;s not clear who the actual manufacturer is.</p>
<p>I got it from a seller by the name of <a href="https://www.pourxuan.com/Product/9867345045.html" target="_blank" rel="noopener noreffer"><code>PourXuan</code></a> which does seem to be the OEM behind it.
However, there are a few other <a href="#ics-and-distinguishing-markings" rel="">interesting markings</a> that could indicate other companies contributing to / designing some internal components.</p>
</div>
        </div>
    </div>
<p>Anyways, lets look inside.</p>
<h1 id="teardown">Teardown</h1>
<p>TL;DR: It&rsquo;s been built down to a cost&hellip; but not <em>the lowest possible cost</em>.
The construction isn&rsquo;t flimsy and I didn&rsquo;t find any glaringly obvious safety issues / construction shortcuts.
None of the ICs have their markings scraped off and the internal architecture is simple and scalable.
I did not check, but I suspect that each of the primary functions / PCBs communicates over a simple serial bus so this switch is likely pretty hackable/serviceable, too.</p>
<h2 id="packaging--shipping">Packaging / shipping</h2>
<p>The switch came well packed in some nondescript packaging.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>The small white box containing the power supply and some accessory hardware crumpled up the single page user manual.</p>
<p>I have uploaded a copy of this paper and the other software/documentation provided by the seller to the same git repository hosting the <a href="#esphome-component" rel="">ESPHome Component</a>.</p>
<p><figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        An overview of everything that came in the box
        
            
        
        </p> 
    </figcaption>
    
</figure>

</p>
<p><figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Rack Mount ears, two extra screws and the proper connector block needed to interface with the UART.
        
            
        
        </p> 
    </figcaption>
    
</figure>

</p>
<p>I have not opened up the power supply to check its construction but it doesn&rsquo;t feel incredibly cheap.
It&rsquo;s rated for 2 Amps @ 12v but the switch only drew about 3.75 Watt when measured from the wall.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Nothing special. It doesn&#39;t feel cheap.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h2 id="the-switch">The switch</h2>
<p>The metal shell is generic; there are holes on the side for ventilation fans that are not populated.
Other than not-so-well hidden screw, the case is easy to open.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Don&#39;t forget the screw behind the sticker
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>With all screws out, the two halves slide apart easily to give us the first look at the internals!</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>It looks like this is a pretty modular design:</p>
<ul>
<li>A standalone front panel input and network control.</li>
<li>A dedicated PCB for each type of data; a HDMI/video plane and a HID/USB plane.</li>
<li>Each plane uses dedicated ASICs to route the signals.</li>
<li>A minimal number of microprocessors / wires coordinating between the PCBs.</li>
</ul>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The small cable from the IR jack on the back is all that holds the two halves of the case together.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>The LAN module plugs into the HDMI PCB very close to where the RS232 port is and the protocol specific documentation from the seller indicates that the payloads to control the switch are the same irrespective of the transport.</p>
<p>Each group of 4 HDMI &lsquo;inputs&rsquo; is routed to an identical looking IC and the differential signal pairs from <em>those</em> ICs are routed to the big one next to the output and RS232 and LAN circuitry.</p>
<p>The little micro next to the buzzer and grey ribbon cable is likely the main controller for the entire switch.
The small IC <em>on</em> the front panel is probably watching for IR signals, scanning the physical buttons, driving the LED display and communicating with the rest of the system over some serial bus.</p>
<p>This architecture would be pretty scalable; for a 16 port model, just add another HDMI and USB PCB and tweak the firmware on the main controller.</p>
<h3 id="front-pcb">Front PCB</h3>
<p>Nothing particularly interesting here. The single IC (<code>STM8S003F3</code>) is a cheap 8 bit microcontroller that - based on the PCB traces - is driving the LED display and handling the button matrix scanning and IR codes.</p>
<p>Most of the lines from the grey ribbon cable are not actually connected to the pcb so I&rsquo;d bet that this micro communicates with the &lsquo;main&rsquo; PCBs over some serial bus.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Sorry for the glare. There&#39;s a lot of flux residue on this PCB.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Notice how at least 4 of the pins from the ribbon cable connector are note soldered to the PCB...
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        This PCB is means to be used in other SKUs that come with two extra buttons that are unpopulated here.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h3 id="the-lan-module">The LAN module</h3>
<p>Very simple / standalone module. There&rsquo;s a dedicated PHY (<code>CH395Q</code>) and the same <code>STM8S003F3</code> micro controller again. The documentation that I received from the seller indicated that the LAN module did NOT use DHCP and there didn&rsquo;t seem to be a way to change the IP address configuration so I didn&rsquo;t bother with trying to automate via LAN.</p>
<p>Only after I made it most of the way through the ESPHome integration development did the seller provide <em>additional</em> documentation that indicates the IP address <em>can</em> be changed&hellip; but only if you use a Windows program.
I opted to keep going with the ESPHome &lt;-&gt; RS232 integration as that would be the most flexible and accessible approach.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The small LAN pcb is attached directly to the front panel with screws mating with some 90 degree flanges soldered to the PCB
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h2 id="hdmi">HDMI</h2>
<p>In addition to the HDMI switching duties, the HDMI PCB hosts the UART electronics:</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>TTL to RS232 handled by the <code>SIPEX SP3223EEX</code>:</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>The main application processor appears to be a STM32 clone known as the <code>CHIPSEA F031C8T6</code>.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Switching / routing the HDMI is done with two <code>IT66341TE</code> chips reducing the 4 HDMI inputs down to a single output and a <code>IT66321E</code> to switch between those two streams.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        2 to 1 HDMI mux to switch between the two outputs from the 4 -&gt; 1 muxes on board.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        4 to 1 HDMI mux; one of two on the board
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>I would bet that the unpopulated connector in the bottom right is the bus connection to a second HDMI PCB in the 16 port model but I don&rsquo;t see where the differential pairs for the HDMI signal would come from so who knows 🤷.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        4 to 1 HDMI mux; one of two on the board
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<h2 id="usb">USB</h2>
<p>Like the HDMI PCB, the USB PCB uses a series of ASICs and a microprocessor to coordinate them all.
Near the 4 &lsquo;output&rsquo; USB ports, you can see the <code>CH559L</code> which runs the show. This IC is monitoring the USB bus for key codes from the keyboard for display switching purposes; press some key combination to switch inputs.</p>
<p>This is usually <code>PrtScrn</code> a few times quickly followed by the number of the input bank you wish to switch to.
I have not tested / verified this functionality but the seller does advertise that there is similar functionality</p>
<p><figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>

</p>
<p>Each &lsquo;input&rsquo; USB port is the same: unpopulated headphone jack footprint for audio input and a <code>FE1.1s USB 2.0 HUB</code> ASIC and an unknown IC that looks like it&rsquo;s related to the unpopulated headphone jack.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Each &#39;input&#39; USB port is managed with the same IC. Note the unpopulated Headphone jack footprint on the PCB
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        I can&#39;t make out the markings, but the 16 pin square IC is almost certainly an audio ID for the unpopulated headphone jack.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>There&rsquo;s some generic 8:1 GPIO mux chips in the form of <code>3251QE</code>.
They are simple IO expanders that would allow a microcontroller to read/write 8 GPIO pins using just 3 GPIO.
I don&rsquo;t know why they&rsquo;re here or why an 8 port switch needs 2 of them&hellip; both on the USB PCB.</p>
<p><figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>

</p>
<p>That&rsquo;s it for teardown!</p>
<h3 id="dmesg"><code>dmesg</code></h3>
<p>Just for completeness, here is how the KVM presents to the computer via USB.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">[</span>183000.909155<span class="o">]</span> usb 1-6: new high-speed USB device number <span class="m">63</span> using xhci_hcd
</span></span><span class="line"><span class="cl"><span class="o">[</span>183001.050545<span class="o">]</span> usb 1-6: New USB device found, <span class="nv">idVendor</span><span class="o">=</span>1a40, <span class="nv">idProduct</span><span class="o">=</span>0101, <span class="nv">bcdDevice</span><span class="o">=</span> 1.11
</span></span><span class="line"><span class="cl"><span class="o">[</span>183001.050550<span class="o">]</span> usb 1-6: New USB device strings: <span class="nv">Mfr</span><span class="o">=</span>0, <span class="nv">Product</span><span class="o">=</span>1, <span class="nv">SerialNumber</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>183001.050551<span class="o">]</span> usb 1-6: Product: USB 2.0 Hub
</span></span><span class="line"><span class="cl"><span class="o">[</span>183001.112333<span class="o">]</span> hub 1-6:1.0: USB hub found
</span></span><span class="line"><span class="cl"><span class="o">[</span>183001.112549<span class="o">]</span> hub 1-6:1.0: <span class="m">4</span> ports detected
</span></span><span class="line"><span class="cl"><span class="o">[</span>183001.495837<span class="o">]</span> usb 1-6.1: new high-speed USB device number <span class="m">64</span> using xhci_hcd
</span></span><span class="line"><span class="cl"><span class="o">[</span>183001.687327<span class="o">]</span> usb 1-6.1: New USB device found, <span class="nv">idVendor</span><span class="o">=</span>1a40, <span class="nv">idProduct</span><span class="o">=</span>0101, <span class="nv">bcdDevice</span><span class="o">=</span> 1.11
</span></span><span class="line"><span class="cl"><span class="o">[</span>183001.687332<span class="o">]</span> usb 1-6.1: New USB device strings: <span class="nv">Mfr</span><span class="o">=</span>0, <span class="nv">Product</span><span class="o">=</span>1, <span class="nv">SerialNumber</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>183001.687333<span class="o">]</span> usb 1-6.1: Product: USB 2.0 Hub
</span></span><span class="line"><span class="cl"><span class="o">[</span>183001.720379<span class="o">]</span> hub 1-6.1:1.0: USB hub found
</span></span><span class="line"><span class="cl"><span class="o">[</span>183001.720579<span class="o">]</span> hub 1-6.1:1.0: <span class="m">4</span> ports detected
</span></span><span class="line"><span class="cl"><span class="o">[</span>183001.912509<span class="o">]</span> usb 1-6.2: new low-speed USB device number <span class="m">65</span> using xhci_hcd
</span></span><span class="line"><span class="cl"><span class="o">[</span>183002.137295<span class="o">]</span> usb 1-6.2: New USB device found, <span class="nv">idVendor</span><span class="o">=</span>0c45, <span class="nv">idProduct</span><span class="o">=</span>7403, <span class="nv">bcdDevice</span><span class="o">=</span> 0.01
</span></span><span class="line"><span class="cl"><span class="o">[</span>183002.137300<span class="o">]</span> usb 1-6.2: New USB device strings: <span class="nv">Mfr</span><span class="o">=</span>1, <span class="nv">Product</span><span class="o">=</span>2, <span class="nv">SerialNumber</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>183002.137301<span class="o">]</span> usb 1-6.2: Product: USB Device
</span></span><span class="line"><span class="cl"><span class="o">[</span>183002.137303<span class="o">]</span> usb 1-6.2: Manufacturer: SONiX
</span></span><span class="line"><span class="cl"><span class="o">[</span>183002.239461<span class="o">]</span> input: SONiX USB Device as /devices/pci0000:00/0000:00:01.2/0000:02:00.0/0000:03:08.0/0000:05:00.1/usb1/1-6/1-6.2/1-6.2:1.0/0003:0C45:7403.00E4/input/input288
</span></span><span class="line"><span class="cl"><span class="o">[</span>183002.296065<span class="o">]</span> hid-generic 0003:0C45:7403.00E4: input,hidraw9: USB HID v1.00 Keyboard <span class="o">[</span>SONiX USB Device<span class="o">]</span> on usb-0000:05:00.1-6.2/input0
</span></span><span class="line"><span class="cl"><span class="o">[</span>183002.302457<span class="o">]</span> input: SONiX USB Device Mouse as /devices/pci0000:00/0000:00:01.2/0000:02:00.0/0000:03:08.0/0000:05:00.1/usb1/1-6/1-6.2/1-6.2:1.1/0003:0C45:7403.00E5/input/input289
</span></span><span class="line"><span class="cl"><span class="o">[</span>183002.302535<span class="o">]</span> input: SONiX USB Device System Control as /devices/pci0000:00/0000:00:01.2/0000:02:00.0/0000:03:08.0/0000:05:00.1/usb1/1-6/1-6.2/1-6.2:1.1/0003:0C45:7403.00E5/input/input290
</span></span><span class="line"><span class="cl"><span class="o">[</span>183002.359252<span class="o">]</span> hid-generic 0003:0C45:7403.00E5: input,hidraw10: USB HID v1.00 Mouse <span class="o">[</span>SONiX USB Device<span class="o">]</span> on usb-0000:05:00.1-6.2/input1
</span></span></code></pre></td></tr></table>
</div>
</div><p>And <code>lsusb</code> shows:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="p">|</span>__ Port 6: Dev 63, If 0, <span class="nv">Class</span><span class="o">=</span>Hub, <span class="nv">Driver</span><span class="o">=</span>hub/4p, 480M
</span></span><span class="line"><span class="cl">    ID 1a40:0101 Terminus Technology Inc. Hub
</span></span><span class="line"><span class="cl">    /sys/bus/usb/devices/1-6  /dev/bus/usb/001/063
</span></span><span class="line"><span class="cl">    <span class="p">|</span>__ Port 2: Dev 65, If 0, <span class="nv">Class</span><span class="o">=</span>Human Interface Device, <span class="nv">Driver</span><span class="o">=</span>usbhid, 1.5M
</span></span><span class="line"><span class="cl">        ID 0c45:7403 Microdia Foot Switch
</span></span><span class="line"><span class="cl">        /sys/bus/usb/devices/1-6.2  /dev/bus/usb/001/065
</span></span><span class="line"><span class="cl">    <span class="p">|</span>__ Port 2: Dev 65, If 1, <span class="nv">Class</span><span class="o">=</span>Human Interface Device, <span class="nv">Driver</span><span class="o">=</span>usbhid, 1.5M
</span></span><span class="line"><span class="cl">        ID 0c45:7403 Microdia Foot Switch
</span></span><span class="line"><span class="cl">        /sys/bus/usb/devices/1-6.2  /dev/bus/usb/001/065
</span></span><span class="line"><span class="cl">    <span class="p">|</span>__ Port 1: Dev 64, If 0, <span class="nv">Class</span><span class="o">=</span>Hub, <span class="nv">Driver</span><span class="o">=</span>hub/4p, 480M
</span></span><span class="line"><span class="cl">        ID 1a40:0101 Terminus Technology Inc. Hub
</span></span><span class="line"><span class="cl">        /sys/bus/usb/devices/1-6.1  /dev/bus/usb/001/064
</span></span></code></pre></td></tr></table>
</div>
</div><p>The <a href="http://blog.ssokolow.com/archives/2017/04/10/getting-your-cheap-chinese-usb-foot-pedal-doing-useful-things-on-linux/" target="_blank" rel="noopener noreffer"><code>Microdia Foot Switch</code> bit</a> is odd.
Could that have something to do with the <code>3251QE</code> muxes?
Perhaps this device indicates to the computer weather or not it is the activated one? 🤔 But why would you need two?</p>
<p>I did not dump <a href="https://en.wikipedia.org/wiki/Extended_Display_Identification_Data" target="_blank" rel="noopener noreffer"><code>EDID</code></a> information for the HDMI but I suspect that the switch is smart enough to just copy exactly what the display provides so the computers don&rsquo;t &lsquo;see&rsquo; the loss/change of a display which might re-arrange windows or adjust scaling.</p>
<h2 id="esphome-component">ESPHome component</h2>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>Info<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">The ESPHome component and some additional documentation/software/details are over at <a href="https://github.com/kquinsland/hdmi-kvm-esphome" target="_blank" rel="noopener noreffer"><code>kquinsland/hdmi-kvm-esphome</code></a>.</div>
        </div>
    </div>
<p>Yes, I wanted to be able to control this KVM from my Home Assistant install.
Some sort of API was a strong desire/requirement for KVM switches for a reason!</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>I am still working on a complementary ESPHome component to automate my standing desk (to be published soon!) but to give you an idea of the automations this KVM will be used in:</p>
<ul>
<li>
<p>Push a single button to:</p>
<ul>
<li>Turn on the VR computer</li>
<li>Switch KVM to the VR computer</li>
<li>Adjust the lighting as needed; turn most lights off as they&rsquo;re not needed with a VR headset on but turn on ambient lighting so the room isn&rsquo;t pitch dark when the headset is removed.</li>
</ul>
</li>
<li>
<p>When personal/work computer are not in use, switch to a host running Grafana dashboards on rotation</p>
</li>
<li>
<p>Allow me to track how much time per week is spent with each host</p>
</li>
</ul>
<h2 id="ics-and-distinguishing-markings">ICs and distinguishing markings</h2>
<p>The front panel PCB is labeled: <code>20170622</code> and features:</p>
<ul>
<li><a href="https://github.com/kquinsland/hdmi-kvm-esphome/blob/main/docs/datasheets/stm8s003f3.pdf" target="_blank" rel="noopener noreffer"><code>8S003F3P6</code></a> - A cheapish 8 bit micro controller.</li>
</ul>
<p>The LAN module PCB is marked with <code>20151030</code> and features:\</p>
<ul>
<li><a href="https://github.com/kquinsland/hdmi-kvm-esphome/blob/main/docs/datasheets/stm8s003f3.pdf" target="_blank" rel="noopener noreffer"><code>8S003F3P6</code></a> - The same micro used on the front panel</li>
<li><a href="https://github.com/kquinsland/hdmi-kvm-esphome/blob/main/docs/datasheets/2009031206_WCH-Jiangsu-Qin-Heng-CH395Q_C87390.pdf" target="_blank" rel="noopener noreffer"><code>CH395Q</code></a> - A dedicated ethernet interface.</li>
</ul>
<p>The HDMI PCB is populated with:</p>
<ul>
<li>
<p><a href="https://www.google.com/search?q=CHIPSEA&#43;F031C8T6" target="_blank" rel="noopener noreffer"><code>CHIPSEA F031C8T6</code></a> - STM32 clone; likely the main applications processor. I can&rsquo;t find a datasheet on this specific on the english speaking web but the naming is oddly similar to how some STM32 processors are named.</p>
</li>
<li>
<p><a href="https://github.com/kquinsland/hdmi-kvm-esphome/blob/main/docs/datasheets/sp3222_3232e.pdf" target="_blank" rel="noopener noreffer"><code>SIPEX SP3223EEX</code></a> - Basic TTL &lt;-&gt; RS232 chip, similar to MAX232.</p>
</li>
<li>
<p><a href="https://www.ite.com.tw/en/product/view?mid=100" target="_blank" rel="noopener noreffer"><code>IT66321E</code></a> - 2 IN to 1 OUT HDMI2.0 18Gb/s Switch with Audio In/Out</p>
</li>
<li>
<p><a href="https://www.ite.com.tw/en/product/view?mid=99" target="_blank" rel="noopener noreffer"><code>IT66341TE</code></a> - 4 IN to 1 OUT HDMI2.0 18Gb/s Switch with Audio In/Out</p>
</li>
<li>
<p>A sticker with the markings:</p>
<blockquote>
<p>XUFUNG
33.01.0072
2012020074</p>
</blockquote>
</li>
<li>
<p>The PCB is marked with:</p>
<blockquote>
<p>HK20801AU
32.02.0119
BJ</p>
</blockquote>
</li>
</ul>
<p>The USB PCB is marked with <code>HK20801A30-KVM</code> and is populated with:</p>
<ul>
<li><a href="https://github.com/kquinsland/hdmi-kvm-esphome/blob/main/docs/datasheets/PI5C3251QE-datasheetz.pdf" target="_blank" rel="noopener noreffer"><code>PI5C 3251QE</code></a> - 8:1 Mux/DeMux BusSwitch</li>
<li><a href="https://github.com/kquinsland/hdmi-kvm-esphome/blob/main/docs/datasheets//2008191807_WCH-Jiangsu-Qin-Heng-CH559L_C150548" target="_blank" rel="noopener noreffer"><code>CH559L</code></a> - 8 bit enhanced USB MCU CH559</li>
<li><a href="https://github.com/kquinsland/hdmi-kvm-esphome/blob/main/docs/datasheets/FE1.1s%2BData%2BSheet%2B%28Rev.%2B1.0%29.pdf" target="_blank" rel="noopener noreffer"><code>FE1.1s</code></a> - FE1.1S USB 2.0 HIGH SPEED 4-PORT HUB CONTROLLER</li>
</ul>
]]></description></item><item><title>Installing Tasmota on the Xiaomi Desk Lamp</title><link>https://karlquinsland.com/xaomi-s1-monitor-lamp-teardown-and-tasmota/</link><pubDate>Sat, 22 Jan 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/xaomi-s1-monitor-lamp-teardown-and-tasmota/</guid><description><![CDATA[<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>MJGJD02YL vs MUGJD01YL<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">There are <em>at least two</em> versions of this lamp. Thanks to <code>@htvekov</code> for confirming that the <code>MUGJD01YL</code> variant <strong>does <em>not</em> contain an ESP32</strong>. It contains a <code>TLSR8368</code>.
Some photos of the <code>MUGJD01YL</code> internals are provided <a href="#mugjd01yl" rel="">below</a>.</div>
        </div>
    </div>
<p>If you&rsquo;re here just for &ldquo;how do I flash tasmota&rdquo; bit, skip to the <a href="#tasmota" rel="">Tasmota</a> section below.</p>
<hr>
<p>I was looking for a way to light my desk my desk without screen glare.
The easiest way to prevent glare on a screen is to change the orientation of the light relative to the screen either from under or behind the screen.
This is not practical for ceiling mounted lights or for any floor lamps.</p>
<p>You can get a nearly glare free light if you mount the light to the top of the screen and direct the light away from the screen at a <em>slight</em> angle.
Light hitting the screen and bouncing into eyes is minimized and the majority of the light ends up directed down onto the desk where it&rsquo;s needed.</p>
<p>This isn&rsquo;t a new problem; a quick search of any online retailor will reveal that there are <em>many</em> different options out there at all sorts of price points.
As this light source would be heavily used for all sorts of work, the <em>quality</em> of the light is incredibly important; a high General CRI (Ra) and adjustable color temperature are <em>requirements</em>.</p>
<p>I also wanted one that had some basic remote control functions so I don&rsquo;t have to reach to the top of my monitor and risk destabilizing whatever I am working on or getting finger prints on the panel.
A wired remote would be simpler and thus cheaper but my desk is already too crowded with wires and cords; if the cost difference between a wired and wireless remote was marginal, opt for wireless.</p>
<p>After a bit of searching, I found the <code>2021 Xiaomi Mijia Lite Desk Lamp 1S</code> which fit the bill exactly.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Beyond the basic puck shaped wireless remote, the listing indicated that the &rsquo;new 1s version&rsquo; could be controlled with the <code>Xiaomi</code> app.</p>
<p>🤔</p>
<p>Instead of some very basic 433Mhz radio, the lamp/remote probably used BTLE.
In some ways, that&rsquo;s even better; the lamp only has a few simple functions and those shouldn&rsquo;t be that hard to reverse engineer from the Android app.</p>
<p>Once I know what data to send for on/off/dim/bright/ww/cw selection, I can use an ESP chip as a MQTT &lt;-&gt; BTLE gateway for relatively easy integration into my home automation system.
Worst case, the fall back plan of using a microcontroller to emulate interacting with the remote and then integrating that microcontroller with my home automation system would work.</p>
<p>Once the lamp showed up, I of course opened up the remote to see what type of wireless system I was going to be dealing with.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>Note<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">More photos of the remote are <a href="#teardown" rel="">below</a></div>
        </div>
    </div>
<p>Giving the model number <code>MHCB07P</code> a quick google didn&rsquo;t reveal much information other than confirm that it was using BTLE.
This almost certainly means that the phone app will <em>also</em> use BTLE to control the lamp!
If I&rsquo;m lucky, I can capture the entire discovery/pair/command packets using a rooted android device and then I won&rsquo;t have to bother with the puck at all.</p>
<h1 id="lamp---phone">Lamp &lt;-&gt; Phone</h1>
<p>After getting the app setup, it did discover the lamp and began to walk me through the setup flow.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>WiFi!? Really!? But why? This must be some generic screen shown for all devices, right?</p>
<p><strong>Nope</strong>.</p>
<p>There really is a simple access point inside this lamp!</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Well now I&rsquo;m curious.</p>
<p>What could this lamp <em>possibly need</em> WiFi credentials for? The remote used BTLE and every conceivable phone that will also control the lamp supports BTLE&hellip; so why spend the extra money for a WiFi enabled microcontroller at all!?</p>
<h1 id="et-lamp-phone-home"><del>ET</del> Lamp Phone Home:</h1>
<p>I threw the lamp behind an isolated access point and it sure is <em>chatty</em>&hellip;
After getting an IP address, the lamp looks up the <code>A</code> record for <code>dk.io.mi.com</code> and then attempts to open a TCP connection and send some bytes:</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Now I&rsquo;m more than a little bit curious.</p>
<p>Why send raw bytes to TCP/80 without at least the typical HTTP request headers?
Why even use WiFi at all for a <em>lamp</em>? Is there no way to use my phone to control the lamp over BTLE?</p>
<h2 id="dumping-the-fw">Dumping the FW</h2>
<p>Fortunately, this was pretty easy. After a cursory analysis, the dumped firmware did not appear to be encrypted or otherwise protected.
I did a quick search for a few things that I hoped would show up in the dumped OEM firmware and was not disappointed:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ cat lamp.bin.strings <span class="p">|</span> grep --ignore-case -E <span class="s1">&#39;certificate|encrypt|tls|agent|http|post|get|verify|remote|{&#34;&#39;</span> &gt; interesting_strings.txt
</span></span><span class="line"><span class="cl">❯ cat interesting_strings.txt<span class="p">|</span> wc -l
</span></span><span class="line"><span class="cl"><span class="m">710</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>🤨</p>
<p>Here are some of the highlights:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">[I] bluetooth_remote_double_click
</span></span><span class="line"><span class="cl">[E] %s: verify root cert is not valid! (%s,%d)
</span></span><span class="line"><span class="cl">[W] %s: Fail to get gatt db from connection %04x, ret = %d  (%s,%d)
</span></span><span class="line"><span class="cl">[E] %s: mbedtls_ecdh_calc_secret error %d (%s,%d)
</span></span><span class="line"><span class="cl">miio_signature_verify
</span></span><span class="line"><span class="cl">[E] %s: --&gt;login verify send failed. (%s,%d)
</span></span><span class="line"><span class="cl">-----BEGIN CERTIFICATE-----
</span></span><span class="line"><span class="cl">[E] %s: https need root cert. (%s,%d)
</span></span><span class="line"><span class="cl">User-Agent: MIoT
</span></span><span class="line"><span class="cl">http://dlg.io.mi.com/v1/ot/upload
</span></span><span class="line"><span class="cl">[W] %s: httpdns new resolve start failed, %d (%s,%d)
</span></span></code></pre></td></tr></table>
</div>
</div><p>There&rsquo;s a lot more interesting things in the dump but they&rsquo;ll have to wait for another day as
immediately after getting eyes on the PCB, I saw an ESP32 chip!</p>
<h2 id="a-change-of-plans">A change of plans</h2>
<p>Reverse engineering the firmware to figure out how/why the phone method of remote control was different from the remotes&rsquo; method no longer really mattered.
An ESP based chip means Tasmota or ESPHome should be possible.</p>
<p>If I could get either of those alternative firmwares running on the lamp, then cluttering up the desk with yet another remote and/or hacking MQTT support into the lamp via the remote was no longer necessary!</p>
<h1 id="teardown">Teardown</h1>
<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>Warning<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">The plastic end caps on either end of the lamp tube are <em>glued in</em>.
You will need some force to break the glue.
Even with all possible precautions, getting access to the lamp PCB <em>is a <strong>destructive</strong> process</em>.
If you are <em>careful</em> you can keep the destruction and cosmetic damage to a minimum.</div>
        </div>
    </div>
<p>I did this teardown the hard way and damaged more of the lamp than necessary.
Some of the photos below reflect this.</p>
<p>Now that I know how it all is <em>meant</em> to come apart, you will hopefully have an easier time and incur less damage!</p>
<h2 id="the-lamp">The lamp</h2>
<p>A closer look at the marked device information before we move <em>into</em> the lamp.
The ESP that we will soon flash with Tasmota is just behind this product information.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Product info and regulatory markings
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>Locate the small rectangle shaped protrusion from the lamp tube that mates with the magnetic mount. The protrusion has two small pogo pins on it.
You can see the protrusion in the middle of the tube facing the coiled USB power cable:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Everything that came in the box
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>With the protrusion facing you, locate the plastic cap closest to the product information.
This should be plastic cap on the <em>left</em> side of the tube.</p>
<p>Use non-marring pliers or similar to grip the plastic cap and twist with enough force to break the glue.
Do not twist more than a few degrees!
The plastic cap has some features that will come into contact with and could damage the PCB if rotated too far!</p>
<p>Use a razor blade or similar to peel back the grip-tape sticker on the protrusion.
If you&rsquo;re careful and manage to remove the sticker in one piece you might be able to re-apply it during reassembly.
The lamp functions fine without the sticker, though.</p>
<p>Underneath the sticker will be two small philips screws.
Remove them and the metal protrusion and small plastic part containing the two pogo pins should come free.
Set these aside.</p>
<p>Gently remove the clear plastic diffuser from the lamp tube and set aside.</p>
<p>The matte finish on the interior side of the diffuser is a fingerprint magnet.
Consider using gloves for this step.</p>
<p>Carefully slide the PCB out of the aluminum tube.
Be mindful of the two spring like contacts on the back of the PCB that mated with the pogo pins!</p>
<p>You can see the small black plastic bracket holding the pogo pins and the protrusion bit with some of the grip-tape still attached:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        If it feels like you&#39;re using too much force to open the lamp... you probably are!
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>If you try to remove the PCB without first detaching the pogo pins, you&rsquo;ll damage one or both of the spring contacts that mate the PCB to the pogo pins!</p>
<p>You <em>don&rsquo;t</em> want your <code>GND</code> spring to look like mine!</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Before realizing that the pogo pins could be removed from the lamp, I removed <em>both</em> caps and tried push/pull the PCB out.</p>
<p>The PCB is supported inside the tube with a few black plastic &lsquo;sleds&rsquo; which are heat-staked on to the PCB.</p>
<p>The &lsquo;sled&rsquo; closest to the ESP partially covers the <code>3V3</code> test point.
Rather than use a dedicated 3V power supply during flashing, I found it easiest to use this pin to bring the <code>EN</code> pin up high.</p>
<p>If you&rsquo;re going to use the <code>3V3</code> test pin instead of a dedicated external power supply, you will probably want to remove the &lsquo;sled&rsquo; to get easy access to the test point.</p>
<p>You can do this with some flush-cut snips.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Be careful to not scratch the solder mask / PCB with the sharp edges of the snips
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>The sled isn&rsquo;t technically required for re-assembly but it&rsquo;s pretty easy to re-attach to the PCB with some hotglue. Discard it at your peril!</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Here&rsquo;s a closeup of the PCB with most of the test points labeled.
You can see the <code>3V3</code> test point immediately to the left of <code>R6</code> in the shadow of the &lsquo;sled&rsquo;.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Repeat these steps in reverse order to re-assemble the lamp.</p>
<h3 id="the-puck">The puck</h3>
<p>Fortunately, opening up the remote is not difficult.</p>
<p>Remove the two philips screws under the bottom cap.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>The main body / rotary knob lifts away from the midframe.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Like with the lamp PCB, there are a few test points:</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<h1 id="tasmota">Tasmota</h1>
<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>Warning<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>It is likely that both the WW and CW LEDs <em>will</em> briefly light up during the flashing process. When this happens, you <em>will</em> draw more current than a typical USB &lt;-&gt; Serial adapter can provide. At <em>best</em> you&rsquo;ll cause a brownout and the flash will be interrupted.</p>
<p><strong>Use a dedicated 5V supply that can provide <em>at least</em> 10W of power</strong> while flashing the lamp! Make sure that the <code>GND</code> wire from your serial programmer <em>and</em> the <code>GND</code> wire for your dedicated 5V@2A/10W supply are tied together or you will likely destroy some of the electronics on both the lamp, your serial adapter <em>and</em> possibly your computer!</p>
</div>
        </div>
    </div>
<p>Having said all that, it&rsquo;s totally worth it:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        When all is said and done, the lamp is easily integrated and controlled with Home Assistant
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h2 id="flashing">Flashing</h2>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>Info<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">The ESP32 chip on this PCB is a <em>single core</em> version.
Follow the <a href="https://tasmota.github.io/docs/ESP32/#flashing" target="_blank" rel="noopener noreffer">instructions for flashing the ESP32 version of Tasmota</a>, specifically the <code>tasmota32solo1</code> version!</div>
        </div>
    </div>
<p>Solder wires to the usual <code>RX</code>, <code>TX</code>, <code>GPIO0</code> and <code>GND</code> test points.
The <code>GPIO0</code> test point is the test point nearest to the ESP32 chip; directly off the bottom right corner.
I used some solid-core cable from a length of cat5 cable but any similarly high gauge wire will work.</p>
<p>Solder a jumper between the <code>EN</code> and <code>3V3</code> test point. I used a small yellow wire for this.
The solid blue wire attached to <code>GPIO0</code> and the blue/white wire attached to <code>GND</code> are joined together just out of frame.
The ESP will not boot into programming mode unless <code>GPIO0</code> is tied to ground.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Leads from a dedicated 5V power supply are attached to the main contacts with reg/green alligator clips</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>After confirming that each point is soldered sufficiently and wired to the correct pin on your USB &lt;-&gt; Serial programmer, turn the dedicated power supply on and you should be able to flash.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ esptool.py --chip esp32 --port /dev/ttyUSB0 --baud <span class="m">921600</span> --before default_reset --after hard_reset write_flash -z --flash_mode dout --flash_freq 40m --flash_size detect 0x1000 bootloader_dout_40m.bin 0x8000 partitions.bin 0xe000 boot_app0.bin 0x10000 tasmota32solo1.bin
</span></span><span class="line"><span class="cl">esptool.py v3.2
</span></span><span class="line"><span class="cl">Serial port /dev/ttyUSB0
</span></span><span class="line"><span class="cl">Connecting.....
</span></span><span class="line"><span class="cl">&lt;...&gt;
</span></span><span class="line"><span class="cl">Stub running...
</span></span><span class="line"><span class="cl">Changing baud rate to <span class="m">921600</span>
</span></span><span class="line"><span class="cl">Changed.
</span></span><span class="line"><span class="cl">Configuring flash size...
</span></span><span class="line"><span class="cl">Auto-detected Flash size: 4MB
</span></span><span class="line"><span class="cl">Flash will be erased from 0x00001000 to 0x00004fff...
</span></span><span class="line"><span class="cl">Flash will be erased from 0x00008000 to 0x00008fff...
</span></span><span class="line"><span class="cl">Flash will be erased from 0x0000e000 to 0x0000ffff...
</span></span><span class="line"><span class="cl">Flash will be erased from 0x00010000 to 0x00157fff...
</span></span><span class="line"><span class="cl">Compressed <span class="m">15536</span> bytes to 10862...
</span></span><span class="line"><span class="cl">Wrote <span class="m">15536</span> bytes <span class="o">(</span><span class="m">10862</span> compressed<span class="o">)</span> at 0x00001000 in 0.4 seconds <span class="o">(</span>effective 353.8 kbit/s<span class="o">)</span>...
</span></span><span class="line"><span class="cl">&lt;...&gt;
</span></span><span class="line"><span class="cl">Hash of data verified.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Leaving...
</span></span><span class="line"><span class="cl">Hard resetting via RTS pin...
</span></span></code></pre></td></tr></table>
</div>
</div><p>Turn off the dedicated 5V supply and desolder the <code>GPIO0</code> wire and the <code>3V3</code> &lt;-&gt; <code>EN</code> jumper.
Leave the <code>RX</code>, <code>TX</code>, and <code>GND</code> wires in place so you can easily check the boot logs to confirm Tasmota flashed OK:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ screen /dev/ttyUSB0 <span class="m">115200</span>
</span></span><span class="line"><span class="cl">ets Jun  <span class="m">8</span> <span class="m">2016</span> 00:22:57
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">rst:0x1 <span class="o">(</span>POWERON_RESET<span class="o">)</span>,boot:0x13 <span class="o">(</span>SPI_FAST_FLASH_BOOT<span class="o">)</span>
</span></span><span class="line"><span class="cl">configsip: 0, SPIWP:0xee
</span></span><span class="line"><span class="cl">clk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x00
</span></span><span class="line"><span class="cl">mode:DOUT, clock div:2
</span></span><span class="line"><span class="cl">load:0x3fff0030,len:184
</span></span><span class="line"><span class="cl">load:0x40078000,len:12352
</span></span><span class="line"><span class="cl">load:0x40080400,len:2912
</span></span><span class="line"><span class="cl">entry 0x400805c4
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">00:00:00.002-228/73 HDW: ESP32-S0WD-OEM 
</span></span><span class="line"><span class="cl">./components/esp_littlefs/src/littlefs/lfs.c:1071:error: Corrupted dir pair at <span class="o">{</span>0x0, 0x1<span class="o">}</span>
</span></span><span class="line"><span class="cl">00:00:00.777-231/73 UFS: FlashFS mounted with <span class="m">312</span> kB free
</span></span><span class="line"><span class="cl">00:00:00.782-231/73 CFG: Use defaults
</span></span><span class="line"><span class="cl">00:00:00.893 QPC: Reset
</span></span><span class="line"><span class="cl">00:00:00.941 BRY: Berry initialized, RAM <span class="nv">used</span><span class="o">=</span><span class="m">3849</span>
</span></span><span class="line"><span class="cl">00:00:00.950 BRY: no <span class="s1">&#39;preinit.be&#39;</span>
</span></span><span class="line"><span class="cl">00:00:00.963 Project tasmota - Tasmota Version 10.1.0<span class="o">(</span>tasmota<span class="o">)</span>-2_0_1_1<span class="o">(</span>2021-12-08T14:50:34<span class="o">)</span>
</span></span><span class="line"><span class="cl">00:00:00.984 BRY: no <span class="s1">&#39;autoexec.be&#39;</span>
</span></span><span class="line"><span class="cl">00:00:00.243 WIF: WifiManager active <span class="k">for</span> <span class="m">3</span> minutes
</span></span><span class="line"><span class="cl">00:00:01.200 HTP: Web server active on tasmota-197907-6407 with IP address 192.168.4.1
</span></span></code></pre></td></tr></table>
</div>
</div><p>After confirming a successful flash/boot, you can continue to configure Tasmota via the serial console or just power off and de-solder all wires and finish configuration after you re-assemble.</p>
<h2 id="templates">Templates</h2>
<p>The ESP32 controls the lamp via 3 GPIO pins:</p>
<ul>
<li><code>GPIO04</code>: Global light enable/disable.</li>
<li><code>GPIO19</code>: Cold White channel</li>
<li><code>GPIO21</code>: Warm White channel</li>
</ul>
<p>Irrespective of what the WW or CW channel are doing, there will be no light if <code>GPIO4</code> is not high.
This means you have two choices for how to configure the GPIO.</p>
<p>Tasmota will disable both <code>GPIO19</code> and <code>GPIO21</code> when the light is switched off so there really is no need for independent control via <code>GPIO4</code>.
This template keeps <code>GPIO4</code> high and relies on Tasmota setting  to fully off to shut the light off.</p>
<p>Most people should use this template.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span><span class="nt">&#34;NAME&#34;</span><span class="p">:</span><span class="s2">&#34;Mijia Desk Lamp 1S (MJGJD02YL)&#34;</span><span class="p">,</span><span class="nt">&#34;GPIO&#34;</span><span class="p">:[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">3840</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">416</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">417</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span><span class="nt">&#34;FLAG&#34;</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="nt">&#34;BASE&#34;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="nt">&#34;CMND&#34;</span><span class="p">:</span><span class="s2">&#34;DimmerRange 45,255&#34;</span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>If, for some reason, you want to control the global on/off (<code>GPIO04</code>) independently of the WW/CW channels, use this template:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span><span class="nt">&#34;NAME&#34;</span><span class="p">:</span><span class="s2">&#34;Mijia Desk Lamp 1S (MJGJD02YL)&#34;</span><span class="p">,</span><span class="nt">&#34;GPIO&#34;</span><span class="p">:[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">224</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">416</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">417</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span><span class="nt">&#34;FLAG&#34;</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="nt">&#34;BASE&#34;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="nt">&#34;CMND&#34;</span><span class="p">:</span><span class="s2">&#34;DimmerRange 45,255&#34;</span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>If you do not need dimmer control and only need full on/off control, you can adjust the module so <code>GPIO{04,19,21}</code> are always high, low or simple on/off outputs by configuring them to be of type <code>Relay</code> instead of <code>PWM</code> outputs.</p>
<h3 id="dimmer-range">Dimmer Range</h3>
<p>In testing, extremely low brightness values for both the WW and CW channel had some undesirable behavior:</p>
<ul>
<li>Values lower than ~30 didn&rsquo;t light at all</li>
<li>Values between 30-35 caused unpleasant flicker</li>
<li>Values lower than ~40 would also cause flicker when attempting to light the WW <em>and</em> CW channels together</li>
</ul>
<p>For this reason, a <code>DimmerRange</code> of 45-255 is suggested.
Tasmota will let you dim the light as low as possible without flicker.</p>
<p>Your lamp, eyes and needs will differ so feel free to see if a lower <code>dimmer</code> value will work for you by unlocking the full dimmer range with <code>DimmerRange 0,255</code> and then playing with the <code>ct</code> and <code>dimmer</code> commands to find the lowest tolerable brightness for your needs.</p>
<p>That is why you see the <code>DimmerRange 45,255</code> command in the above templates.</p>
<h3 id="pcbic-markings">PCB/IC Markings</h3>
<p>Some of the interesting ICs and PCB markings</p>
<h4 id="lamp">Lamp</h4>
<ul>
<li>PCB is labeled <code>Yeelight Spider 1S V06</code>, <code>20210714 by XJD</code>, <code>94V-0</code>,  <code>Y Y21M09D13</code>, <code>JUl 7.820.0874-1</code></li>
<li>PCB has a QR code / sticker with <code>WF-E32-RWY1</code>, <code>Spider1S</code>, and the device mac address</li>
<li><code>SGM4065</code>: <a href="https://www.sg-micro.de/show-product-611.html" target="_blank" rel="noopener noreffer">Over-Voltage Protection IC and Li+ Charger Front-End Protection IC with LDO Mode</a></li>
<li>Some DFN-10 package that is marked with either <code>WRDPA</code> or <code>WRQPA</code> or <code>WR0PA</code>. It&rsquo;s a little hard to tell as the markings are super faint and I can&rsquo;t get them super clear even with high contrast / inverted color image filters. There are several of them with identical circuitry through the length of the board so this IC is some sort of pwm dimmable constant current LED driver.</li>
<li><code>ESP32-D0WD</code>: the star of the show</li>
<li><code>GD25Q32(B)</code>: a 4096 kB SPI flash chip</li>
<li>The lamp body is marked with <code>CMIT ID: 2021DP11423</code></li>
</ul>
<h4 id="remote">Remote</h4>
<ul>
<li>PCB labeled with <code>100-P806D1-1B-A1</code>, <code>Yeelight Spider 1S RC Board V02</code>, <code>20210716 by XJD</code></li>
<li><code>MHCB07P</code>. This is marked on the tiny BTLE module inside the remote. Not too many search <a href="https://twitter.com/simransingh931/status/1418120923568246786" target="_blank" rel="noopener noreffer">results</a> show <a href="https://www.ec.ust.hk/hackathon/2021/document/xiaomi_0319_eng.pdf" target="_blank" rel="noopener noreffer">up</a>.</li>
<li><code>CMIT ID: 2020DP3172(M)</code></li>
</ul>
<h2 id="mugjd01yl">MUGJD01YL</h2>
<p><figure >

    
        
    

    

    <figcaption>
        
        <p>
        Product details for the lamp that can&#39;t be converted to run Tasmota.
        
            Courtesy of @htvekov
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The PCB is held in the tube with similar plastic &#39;sleds&#39;. They are secured with screws rather than heatstake so they are easier to remove. The move to heatstake in the revised edition was likely to reduce costs.
        
            Courtesy of @htvekov
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        
        
            Courtesy of @htvekov
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        
        
            Courtesy of @htvekov
        
        </p> 
    </figcaption>
    
</figure>

</p>
]]></description></item><item><title>Using Home Assistant to dynamically layout openHasp widgets</title><link>https://karlquinsland.com/lanbon-l8-tuya-lcd-switch-openhasp/</link><pubDate>Tue, 18 Jan 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/lanbon-l8-tuya-lcd-switch-openhasp/</guid><description><![CDATA[<h1 id="background">Background</h1>
<p>This is one of those posts that sat in the <code>Drafts</code> folder for <em>way</em> too long.
Just before release, I&rsquo;d discover something new that would warrant substantial rewrites.
After several delays, false starts and re-writes, I finally have something that is mostly new <em>and</em> worth sharing with the world.</p>
<p>Like with the past few <a href="https://karlquinsland.com/categories/teardown/" rel="">teardown</a> posts, this one also started off as a &lsquo;cart-stuffer&rsquo; item so I could unlock a more generous discount on the total purchase. The listing that caught my eye had the generic title:</p>
<pre><code>EU US Wifi LCD Smart Wall Light Touch Switch Tuya Smart Life App Remote Control ON OFF Timer Voice Control For Google Home Alexa
</code></pre>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Naturally, a cursory check for existing writeups / teardowns didn&rsquo;t yield much.</p>
<p>I did have some hope that the <code>Tuya</code> compatibility meant an easily hacked ESP module running the show and not a proprietary module.
It was unlikely that the device would be Android powered at that price-point and an ESP8266 series would be woefully under powered for direct LCD control so &hellip; fingers crossed for an ESP32 module!
Or, at the very least there might be a way to retrofit in an ESP module like with the recent Mi-Boxer LED controller that <a href="https://github.com/arendst/Tasmota/issues/7385#issuecomment-991848762" target="_blank" rel="noopener noreffer">I helped to integrate with Tasmota</a>.</p>
<p>The <em>plan</em> was to do a teardown and dump as much technical data as I could possibly gather in an evening or two and conclude with a feasibility assessment of hacking the device for use with Home Assistant.</p>
<h2 id="generic-becomes-lanbon">Generic becomes Lanbon</h2>
<p>Immediately after opening the shipping box and getting eyes on the actual product packaging, it was clear that this was a Lanbon L8 series module.</p>
<p>A quick google later and it turns out that the venerable blakadder.com has <a href="https://blakadder.com/lanbon-L8/" target="_blank" rel="noopener noreffer">already covered this device</a>&hellip; <em>and</em> documented <a href="https://blakadder.com/lanbon-L8-custom-firmware/" target="_blank" rel="noopener noreffer">it&rsquo;s Tasmota compatibility</a>!</p>
<p>So much for publishing a teardown and trying to figure out if Home Assistant integration was feasible 😕.</p>
<p>Funny how once you have the &lsquo;magic query string&rsquo;, google starts to yield <em>a ton</em> of relevant results!
Just after finding the aforementioned blakadder.com posts on the L8 device, I found two <em>very</em> helpful sources of more information:</p>
<ul>
<li>Somebody by the name of Jan Newmarch has published a <a href="https://jan.newmarch.name/IoT/Home/Lanbon/" target="_blank" rel="noopener noreffer">comprehensive dive</a> into the protocol(s) used by the stock firmware / other devices in the Lanbon family.</li>
<li>This <a href="https://haswitchplate.github.io/openHASP-docs/latest/devices/lanbon-l8/" target="_blank" rel="noopener noreffer">page dedicated to the Lanbon L8</a> from a project called openHasp.</li>
</ul>
<p>I thought that second link seemed familiar&hellip;🤔.</p>
<p>Turns out, the <a href="https://haswitchplate.github.io/openHASP-docs/latest/" target="_blank" rel="noopener noreffer">openHASP project</a> is a <em>substantial</em> rewrite of the initial software that powered my <a href="https://karlquinsland.com/enhanced-homeassistantswitchplate/" rel="">Enhanced HomeAssistant Switch Plate (eHasp)</a> project.</p>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>Info<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">While digging through the above links, I realized that the model I had opened up had a different PCB layout.
In the interest of adding to the collective internet KB, photos and some other technical details from the model I tore apart are <a href="#teardown" rel="">below</a>.</div>
        </div>
    </div>
<h1 id="openhasp">openHasp</h1>
<p>As opposed to the <a href="https://github.com/aderusha/HASwitchPlate" target="_blank" rel="noopener noreffer">old HASP project</a>, openHasp leverages more powerful processors that can drive the LCD directly; graphical assets no longer need to be compiled down to a LCD-specific firmware before use and the content of the <em>entire</em> display <strong>can be arbitrarily manipulated at runtime</strong>!</p>
<p>openHasp <a href="https://haswitchplate.github.io/openHASP-docs/0.6/design/pages/" target="_blank" rel="noopener noreffer">uses <code>json</code> like files</a> to store the UI/widgets layout and configuration.
On boot, the content of the <code>jsonl</code> is parsed and turned into the actual UI widgets that are displayed on screen.
For example, <a href="https://haswitchplate.github.io/openHASP-docs/0.6/design/objects/#button" target="_blank" rel="noopener noreffer">here is the example <code>jsonl</code></a> that renders two buttons:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span><span class="nt">&#34;page&#34;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="nt">&#34;id&#34;</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span><span class="nt">&#34;obj&#34;</span><span class="p">:</span><span class="s2">&#34;btn&#34;</span><span class="p">,</span><span class="nt">&#34;x&#34;</span><span class="p">:</span><span class="mi">10</span><span class="p">,</span><span class="nt">&#34;y&#34;</span><span class="p">:</span><span class="mi">40</span><span class="p">,</span><span class="nt">&#34;w&#34;</span><span class="p">:</span><span class="mi">105</span><span class="p">,</span><span class="nt">&#34;h&#34;</span><span class="p">:</span><span class="mi">90</span><span class="p">,</span><span class="nt">&#34;toggle&#34;</span><span class="p">:</span><span class="kc">false</span><span class="p">,</span><span class="nt">&#34;text&#34;</span><span class="p">:</span><span class="s2">&#34;Button&#34;</span><span class="p">,</span><span class="nt">&#34;mode&#34;</span><span class="p">:</span><span class="s2">&#34;break&#34;</span><span class="p">,</span><span class="nt">&#34;align&#34;</span><span class="p">:</span><span class="s2">&#34;center&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span><span class="nt">&#34;page&#34;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="nt">&#34;id&#34;</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span><span class="nt">&#34;obj&#34;</span><span class="p">:</span><span class="s2">&#34;btn&#34;</span><span class="p">,</span><span class="nt">&#34;x&#34;</span><span class="p">:</span><span class="mi">125</span><span class="p">,</span><span class="nt">&#34;y&#34;</span><span class="p">:</span><span class="mi">40</span><span class="p">,</span><span class="nt">&#34;w&#34;</span><span class="p">:</span><span class="mi">105</span><span class="p">,</span><span class="nt">&#34;h&#34;</span><span class="p">:</span><span class="mi">90</span><span class="p">,</span><span class="nt">&#34;toggle&#34;</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span><span class="nt">&#34;text&#34;</span><span class="p">:</span><span class="s2">&#34;#FFD700 Toggle# Button&#34;</span><span class="p">,</span><span class="nt">&#34;mode&#34;</span><span class="p">:</span><span class="s2">&#34;break&#34;</span><span class="p">,</span><span class="nt">&#34;align&#34;</span><span class="p">:</span><span class="s2">&#34;center&#34;</span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><figure >

    
        
    

    

    <figcaption>
        
        <p>
        Image credit/source:
        <a href="https://haswitchplate.github.io/openHASP-docs/0.6/design/objects/#button"> 
            openHasp Docs
        </a> 
        </p> 
    </figcaption>
    
</figure>


<p>Notice how the absolute coordinates on screen (<code>x</code> and <code>y</code>) and and absolute width (<code>w</code>) and height (<code>w</code>) properties are explicitly declared.
The only reason the buttons look appropriately sized/positioned in the above screenshot is because someone took the time to calculate the appropriate values for the particular screen resolution and orientation.</p>
<p>The above <code>jsonl</code> example would look different on any openHasp device with a different screen orientation or resolution!
Manually calculating the exact size and position of every widget for <em>each</em> class of device isn&rsquo;t so bad if you&rsquo;re planning on deploying the same file to several instances of the same device&hellip; but it starts be become a real headache if you want to deploy the same layout to 2+ different types of device.</p>
<p>The L8 devices are designed to be installed into a wall electrical box; they don&rsquo;t sit well on my desk so prototyping various interface files on a L8 device isn&rsquo;t the easiest.
Instead, I am using a <a href="https://haswitchplate.github.io/openHASP-docs/latest/devices/wt32-sc01/" target="_blank" rel="noopener noreffer">device with a higher resolution</a> and bigger screen that <em>does</em> work well on a desk to prototype the various <code>jsonl</code> files.</p>
<p>If you&rsquo;re thinking that calculating the appropriate location for various UI widgets on one device and then having to re-do the math for the intended deploy targets sounds like a task better suited to a computer&hellip; you&rsquo;re right!</p>
<h2 id="dynamic-layouts-with-home-assistant">Dynamic Layouts with Home Assistant</h2>
<p>Fortunately, the properties of <em>every</em> UI widget can be modified over the network even <em>after</em> the <code>jsonl</code> file has been parsed and the initial display has been painted!</p>
<p>My C++ skills are pretty weak so contributing new code to enable dynamic layouts directly to the openHasp codebase is not immediately practical.
There is, however, a robust <a href="https://haswitchplate.github.io/openHASP-docs/latest/integrations/home-assistant/howto/" target="_blank" rel="noopener noreffer">Home Assistant integration</a> published in the form of a <a href="https://github.com/HASwitchPlate/openHASP-custom-component" target="_blank" rel="noopener noreffer">custom component</a>.
Home Assistant means Python and some Python code to calculate the appropriate position/size for a given element <em>is</em> immediately within my means.</p>
<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>Warning<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">A few <a href="https://github.com/HASwitchPlate/openHASP/issues/278" target="_blank" rel="noopener noreffer">(small) changes to the openHasp firmware</a> were required to make this work.
Any <em>recent</em> build of <code>0.7</code> should work.
As of 2022-01, there is no release of the custom component that works with <code>0.7</code> out of the box so if installing through <a href="https://hacs.xyz/" target="_blank" rel="noopener noreffer">HACS</a>, <a href="https://github.com/HASwitchPlate/openHASP-custom-component/issues/87" target="_blank" rel="noopener noreffer">you will need to patch the custom component</a> so devices running <code>.0.7</code> can be controlled via Home Assistant.</div>
        </div>
    </div>
<p>Please see the <a href="https://haswitchplate.github.io/openHASP-docs/latest/integrations/home-assistant/sampl_conf/" target="_blank" rel="noopener noreffer">openHasp &lt;-&gt; Home Assistant docs</a> for background information, examples and a lot more detail on how Home Assistant and openHasp work together or if any of the <code>jsonl</code> and <code>yaml</code> below does not make sense.</p>
<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>Warning<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Please make sure that your openHasp device can connect to your MQTT broker and that the openHasp custom integration can discover and &lsquo;register&rsquo; your device with Home Assistant before proceeding!</div>
        </div>
    </div>
<h3 id="two-devices-one-pagesjsonl">Two devices, one <code>pages.jsonl</code></h3>
<p>The <code>pages.jsonl</code> file used for this post and the screenshots below is a (lightly) modified versions of the <a href="https://haswitchplate.github.io/openHASP-docs/latest/integrations/home-assistant/sampl_conf/#display-clock-and-temperature" target="_blank" rel="noopener noreffer">clock and temperature example</a> and the
<a href="https://haswitchplate.github.io/openHASP-docs/latest/integrations/examples/example-pagination/" target="_blank" rel="noopener noreffer">simple page navigation</a> examples with a room specific set of ui widgets.</p>
<p>That <em>singular</em> <code>pages.jsonl</code> file was uploaded it to two devices:</p>
<ul>
<li>Lanbon L8 with a 240x320 resolution</li>
<li>WT32-SC01 module with a 320x480 resolution</li>
</ul>
<p>Each screenshot was taken with the device display configured to 0º and 90º of rotation.
A reboot was required for the configuration change to take effect but I made <em>zero</em> changes to the <code>pages.jsonl</code> file on the device between changing the screen orientation.</p>
<p><figure >

    
        
    

    

    <figcaption>
        
        <p>
        Lanbon L8 in it&#39;s rotated &#39;landscape&#39; orientation
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Lanbon L8 in it&#39;s default &#39;portrait&#39; orientation
        
            
        
        </p> 
    </figcaption>
    
</figure>

</p>
<p><figure >

    
        
    

    

    <figcaption>
        
        <p>
        wt32-sc01 in &#39;landscape&#39; orientation.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        wt32-sc01 in &#39;portrait&#39; orientation.
        
            
        
        </p> 
    </figcaption>
    
</figure>

</p>
<h3 id="building-a-pagesjsonl">building a <code>pages.jsonl</code></h3>
<p>You don&rsquo;t need to use this <em>exact</em> technique to build the <code>pages.jsonl</code> file; it works well for my needs / development flow.
All that matters is that you get every UI element for every page into a single <code>pages.jsonl</code> file and then get that file uploaded to the device(s) in question.
The page/id values declared in your <code>jsonl</code> file <em>must match</em> the object IDs that you will use to configure the Home Assistant integration.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ cat header.frag.jsonl footer.frag.jsonl room.frag.jsonl &gt; pages.jsonl
</span></span><span class="line"><span class="cl">❯ curl http://roomPlateIpv4Here/edit --form <span class="nv">name</span><span class="o">=</span>data --form <span class="nv">data</span><span class="o">=</span>@pages.jsonl
</span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>Info<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>I store the combined files in <code>pages.jsonl</code> because this is the default page that an openHasp device will render.
You can change this setting via the web UI: <code>http://roomPlateIpv4Here/config/hasp</code> or via telnet:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ telnet roomPlateIpv4Here
</span></span><span class="line"><span class="cl">&lt;...&gt;
</span></span><span class="line"><span class="cl">prompt&gt; config/hasp <span class="o">{</span><span class="s2">&#34;pages&#34;</span>:<span class="s2">&#34;/foo.jsonl&#34;</span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<h4 id="headerfragjsonl"><code>header.frag.jsonl</code></h4>
<p>This contains the three text labels that I wish to have at the top of <em>every</em> openHasp device I deploy.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;page&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;comment&#34;</span><span class="p">:</span> <span class="s2">&#34;Default to page0 as the header and page/layout&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;comment&#34;</span><span class="p">:</span> <span class="s2">&#34;Time in the top left&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;obj&#34;</span><span class="p">:</span> <span class="s2">&#34;label&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;text&#34;</span><span class="p">:</span> <span class="s2">&#34;00:00&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;align&#34;</span><span class="p">:</span> <span class="s2">&#34;center&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;bg_color&#34;</span><span class="p">:</span> <span class="s2">&#34;#2C3E50&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;comment&#34;</span><span class="p">:</span> <span class="s2">&#34;Temp in the middle&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;obj&#34;</span><span class="p">:</span> <span class="s2">&#34;label&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;text&#34;</span><span class="p">:</span> <span class="s2">&#34;00.0°C&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;align&#34;</span><span class="p">:</span> <span class="s2">&#34;center&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;bg_color&#34;</span><span class="p">:</span> <span class="s2">&#34;#2C3E50&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;comment&#34;</span><span class="p">:</span> <span class="s2">&#34;Humidity in the top right&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;obj&#34;</span><span class="p">:</span> <span class="s2">&#34;label&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;text&#34;</span><span class="p">:</span> <span class="s2">&#34;00.0%&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;align&#34;</span><span class="p">:</span> <span class="s2">&#34;right&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;bg_color&#34;</span><span class="p">:</span> <span class="s2">&#34;#2C3E50&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="footerfragjsonl"><code>footer.frag.jsonl</code></h4>
<p>This contains the three page navigation buttons that I wish to have at the bottom of <em>every</em> openHasp device that I deploy.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;comment&#34;</span><span class="p">:</span> <span class="s2">&#34;tab nav on the bottom, prev&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;obj&#34;</span><span class="p">:</span> <span class="s2">&#34;btn&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;action&#34;</span><span class="p">:</span> <span class="s2">&#34;prev&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;bg_color&#34;</span><span class="p">:</span> <span class="s2">&#34;#2C3E50&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;text&#34;</span><span class="p">:</span> <span class="s2">&#34;\uE141&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;text_color&#34;</span><span class="p">:</span> <span class="s2">&#34;#FFFFFF&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;radius&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;border_side&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;text_font&#34;</span><span class="p">:</span> <span class="mi">28</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;obj&#34;</span><span class="p">:</span> <span class="s2">&#34;btn&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;action&#34;</span><span class="p">:</span> <span class="s2">&#34;back&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;bg_color&#34;</span><span class="p">:</span> <span class="s2">&#34;#2C3E50&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;text&#34;</span><span class="p">:</span> <span class="s2">&#34;\uE2DC&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;text_color&#34;</span><span class="p">:</span> <span class="s2">&#34;#FFFFFF&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;radius&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;border_side&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;text_font&#34;</span><span class="p">:</span> <span class="mi">22</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;obj&#34;</span><span class="p">:</span> <span class="s2">&#34;btn&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;action&#34;</span><span class="p">:</span> <span class="s2">&#34;next&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;bg_color&#34;</span><span class="p">:</span> <span class="s2">&#34;#2C3E50&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;text&#34;</span><span class="p">:</span> <span class="s2">&#34;\uE142&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;text_color&#34;</span><span class="p">:</span> <span class="s2">&#34;#FFFFFF&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;radius&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;border_side&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;text_font&#34;</span><span class="p">:</span> <span class="mi">28</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="roomfragjson"><code>room.frag.json</code></h4>
<p>This file should contain all the page(s) and UI widgets that are unique to the openHasp device deployed into the room that I will call <code>room</code> for the purposes of this post.
As a <strong>demonstration</strong>, I have set up three buttons that control each of the three relays on a L8 device; you will almost certainly want to add multiple pages / other UI widgets as needed.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;page&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;comment&#34;</span><span class="p">:</span> <span class="s2">&#34;primary controls for the 3 relays&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">101</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;comment&#34;</span><span class="p">:</span> <span class="s2">&#34;relay1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;obj&#34;</span><span class="p">:</span> <span class="s2">&#34;btn&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;toggle&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;text&#34;</span><span class="p">:</span> <span class="s2">&#34;relay1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;mode&#34;</span><span class="p">:</span> <span class="s2">&#34;break&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;align&#34;</span><span class="p">:</span> <span class="s2">&#34;center&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;groupid&#34;</span><span class="p">:</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">102</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;comment&#34;</span><span class="p">:</span> <span class="s2">&#34;relay2&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;obj&#34;</span><span class="p">:</span> <span class="s2">&#34;btn&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;toggle&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;text&#34;</span><span class="p">:</span> <span class="s2">&#34;relay2&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;mode&#34;</span><span class="p">:</span> <span class="s2">&#34;break&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;align&#34;</span><span class="p">:</span> <span class="s2">&#34;center&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;groupid&#34;</span><span class="p">:</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">103</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;comment&#34;</span><span class="p">:</span> <span class="s2">&#34;relay3&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;obj&#34;</span><span class="p">:</span> <span class="s2">&#34;btn&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;toggle&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;text&#34;</span><span class="p">:</span> <span class="s2">&#34;relay3&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;mode&#34;</span><span class="p">:</span> <span class="s2">&#34;break&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;align&#34;</span><span class="p">:</span> <span class="s2">&#34;center&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;groupid&#34;</span><span class="p">:</span> <span class="mi">3</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="configure-home-assistant">Configure Home Assistant</h3>
<p>After the <code>pages.jsonl</code> is deployed to <em>each</em> of the openHasp devices, you will need to create a configuration file for Home Assistant.
For the above screenshots, I created two <em>identical</em> ⃰ copies of the yaml below</p>
<p>⃰  Other than the device name; in one file, the name was changed from <code>plate00</code> to <code>plate01</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span><span class="lnt">160
</span><span class="lnt">161
</span><span class="lnt">162
</span><span class="lnt">163
</span><span class="lnt">164
</span><span class="lnt">165
</span><span class="lnt">166
</span><span class="lnt">167
</span><span class="lnt">168
</span><span class="lnt">169
</span><span class="lnt">170
</span><span class="lnt">171
</span><span class="lnt">172
</span><span class="lnt">173
</span><span class="lnt">174
</span><span class="lnt">175
</span><span class="lnt">176
</span><span class="lnt">177
</span><span class="lnt">178
</span><span class="lnt">179
</span><span class="lnt">180
</span><span class="lnt">181
</span><span class="lnt">182
</span><span class="lnt">183
</span><span class="lnt">184
</span><span class="lnt">185
</span><span class="lnt">186
</span><span class="lnt">187
</span><span class="lnt">188
</span><span class="lnt">189
</span><span class="lnt">190
</span><span class="lnt">191
</span><span class="lnt">192
</span><span class="lnt">193
</span><span class="lnt">194
</span><span class="lnt">195
</span><span class="lnt">196
</span><span class="lnt">197
</span><span class="lnt">198
</span><span class="lnt">199
</span><span class="lnt">200
</span><span class="lnt">201
</span><span class="lnt">202
</span><span class="lnt">203
</span><span class="lnt">204
</span><span class="lnt">205
</span><span class="lnt">206
</span><span class="lnt">207
</span><span class="lnt">208
</span><span class="lnt">209
</span><span class="lnt">210
</span><span class="lnt">211
</span><span class="lnt">212
</span><span class="lnt">213
</span><span class="lnt">214
</span><span class="lnt">215
</span><span class="lnt">216
</span><span class="lnt">217
</span><span class="lnt">218
</span><span class="lnt">219
</span><span class="lnt">220
</span><span class="lnt">221
</span><span class="lnt">222
</span><span class="lnt">223
</span><span class="lnt">224
</span><span class="lnt">225
</span><span class="lnt">226
</span><span class="lnt">227
</span><span class="lnt">228
</span><span class="lnt">229
</span><span class="lnt">230
</span><span class="lnt">231
</span><span class="lnt">232
</span><span class="lnt">233
</span><span class="lnt">234
</span><span class="lnt">235
</span><span class="lnt">236
</span><span class="lnt">237
</span><span class="lnt">238
</span><span class="lnt">239
</span><span class="lnt">240
</span><span class="lnt">241
</span><span class="lnt">242
</span><span class="lnt">243
</span><span class="lnt">244
</span><span class="lnt">245
</span><span class="lnt">246
</span><span class="lnt">247
</span><span class="lnt">248
</span><span class="lnt">249
</span><span class="lnt">250
</span><span class="lnt">251
</span><span class="lnt">252
</span><span class="lnt">253
</span><span class="lnt">254
</span><span class="lnt">255
</span><span class="lnt">256
</span><span class="lnt">257
</span><span class="lnt">258
</span><span class="lnt">259
</span><span class="lnt">260
</span><span class="lnt">261
</span><span class="lnt">262
</span><span class="lnt">263
</span><span class="lnt">264
</span><span class="lnt">265
</span><span class="lnt">266
</span><span class="lnt">267
</span><span class="lnt">268
</span><span class="lnt">269
</span><span class="lnt">270
</span><span class="lnt">271
</span><span class="lnt">272
</span><span class="lnt">273
</span><span class="lnt">274
</span><span class="lnt">275
</span><span class="lnt">276
</span><span class="lnt">277
</span><span class="lnt">278
</span><span class="lnt">279
</span><span class="lnt">280
</span><span class="lnt">281
</span><span class="lnt">282
</span><span class="lnt">283
</span><span class="lnt">284
</span><span class="lnt">285
</span><span class="lnt">286
</span><span class="lnt">287
</span><span class="lnt">288
</span><span class="lnt">289
</span><span class="lnt">290
</span><span class="lnt">291
</span><span class="lnt">292
</span><span class="lnt">293
</span><span class="lnt">294
</span><span class="lnt">295
</span><span class="lnt">296
</span><span class="lnt">297
</span><span class="lnt">298
</span><span class="lnt">299
</span><span class="lnt">300
</span><span class="lnt">301
</span><span class="lnt">302
</span><span class="lnt">303
</span><span class="lnt">304
</span><span class="lnt">305
</span><span class="lnt">306
</span><span class="lnt">307
</span><span class="lnt">308
</span><span class="lnt">309
</span><span class="lnt">310
</span><span class="lnt">311
</span><span class="lnt">312
</span><span class="lnt">313
</span><span class="lnt">314
</span><span class="lnt">315
</span><span class="lnt">316
</span><span class="lnt">317
</span><span class="lnt">318
</span><span class="lnt">319
</span><span class="lnt">320
</span><span class="lnt">321
</span><span class="lnt">322
</span><span class="lnt">323
</span><span class="lnt">324
</span><span class="lnt">325
</span><span class="lnt">326
</span><span class="lnt">327
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># plate00 is a test L8 module</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Has a resolution of 240x320</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># The top left corner is 0,0, X grows positive to the right and Y grows positive down</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">plate00</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">## TODO: is there a way to fix this? Maybe a HA feature request or openHasp/CC change...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Would be really nice if HA had some way to save templates and load them</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#   that way I don&#39;t have to declare the same variables over and over...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">objects</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">###</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># COMMON</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">###</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Header: Time</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">obj</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;p0b1&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Align left most, If we do go over our permitted length, loop</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;align&#34;: </span><span class="s2">&#34;left&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;text&#34;: </span><span class="s2">&#34;{{ states(&#39;sensor.time&#39;) }}&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;mode&#34;: </span><span class="s2">&#34;loop&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Draw the labels with a 1% margin from the top and sides</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;x&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrHorMargin}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;y&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrVrtMargin}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Width is 1/3 of the screen width after subtracting margins</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;w&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set numObj = 3 %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set usableHdrWd = scnWd-(2*hdrHorMargin) %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrLblWd = (usableHdrWd/numObj) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrLblWd}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Height is 10% of the screen, after margin</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;h&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrLblHt = hdrHt-hdrVrtMargin %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrLblHt}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Header: Temp</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">obj</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;p0b2&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Align center, If we do go over our permitted length, loop</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;align&#34;: </span><span class="s2">&#34;center&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;text&#34;: </span><span class="s2">&#34;{{ states(&#39;sensor.room_temperature&#39;) }}°C&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;mode&#34;: </span><span class="s2">&#34;loop&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Draw the labels with a 1% margin from the top and sides</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;x&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set numObj = 3 %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set usableHdrWd = scnWd-(2*hdrHorMargin) %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrLblWd = (usableHdrWd/numObj) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrHorMargin+hdrLblWd}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;y&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrVrtMargin}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Width is 1/3 of the screen width after subtracting margins</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;w&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set numObj = 3 %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set usableHdrWd = scnWd-(2*hdrHorMargin) %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrLblWd = (usableHdrWd/numObj) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrLblWd}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Height is 10% of the screen, after margin</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;h&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrLblHt = hdrHt-hdrVrtMargin %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrLblHt}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Header: Humidity</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">obj</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;p0b3&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Align right most, If we do go over our permitted length, loop</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;align&#34;: </span><span class="s2">&#34;right&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;text&#34;: </span><span class="s2">&#34;{{ states(&#39;sensor.room_humidity&#39;) }}%&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;mode&#34;: </span><span class="s2">&#34;loop&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Draw the labels with a 1% margin from the top and sides</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;x&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set numObj = 3 %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set usableHdrWd = scnWd-(2*hdrHorMargin) %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrLblWd = (usableHdrWd/numObj) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrHorMargin+(2*hdrLblWd)}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;y&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrVrtMargin}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Width is 1/3 of the screen width after subtracting margins</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;w&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set numObj = 3 %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set usableHdrWd = scnWd-(2*hdrHorMargin) %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrLblWd = (usableHdrWd/numObj) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrLblWd}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Height is 10% of the screen, after margin</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;h&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrLblHt = hdrHt-hdrVrtMargin %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrLblHt}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># bottom nav: previous</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">obj</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;p0b6&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Left most button sits all the way up against the left side of the screen</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;x&#34;: </span><span class="m">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Start drawing the button from the bottom most pixel</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;y&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{scnHt-hdrHt}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># And since we have 3 buttons, 1/3 of the width</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;w&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set numObj = 3 %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set ftrBtnWd = (scnWd/numObj) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{ftrBtnWd-1}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># We want the bottom nav buttons to consume the bottom 10% of the screen</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;h&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set ftrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{ftrHt}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># bottom nav: home</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">obj</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;p0b7&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Start drawing exactly the next pixel over from where the first button stopped</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;x&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set numObj = 3 %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set ftrBtnWd = (scnWd/numObj) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{ftrBtnWd}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Start drawing the button from the bottom most pixel</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;y&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{scnHt-hdrHt}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># And since we have 3 buttons, 1/3 of the width</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;w&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set numObj = 3 %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set ftrBtnWd = (scnWd/numObj) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{ftrBtnWd-1}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># We want the bottom nav buttons to consume the bottom 10% of the screen</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;h&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set ftrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{ftrHt}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># bottom nav: next</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">obj</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;p0b8&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Start drawing exactly the next pixel over from where the first button stopped</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;x&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set numObj = 3 %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set ftrBtnWd = (scnWd/numObj) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{ftrBtnWd*2}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Start drawing the button from the bottom most pixel</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;y&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{scnHt-hdrHt}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># And since we have 3 buttons, 1/3 of the width</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;w&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set numObj = 3 %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set ftrBtnWd = (scnWd/numObj) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{ftrBtnWd}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># We want the bottom nav buttons to consume the bottom 10% of the screen</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;h&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set ftrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{ftrHt}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># ###</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># # Room Specific</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># ###</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># relay toggle 1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">obj</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;p1b101&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;x&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrHorMargin}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Figure out how tall the display is, subtract out the height of the header/footer and that&#39;s the usable</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">#   space. Within that usable space, we will want small margins.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;y&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrHt+hdrVrtMargin}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;w&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set usableHdrWd = scnWd-(2*hdrHorMargin) %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyWd = usableHdrWd %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{bdyWd}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># We want the bottom nav buttons to consume the bottom 10% of the screen</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;h&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set numObj = 3 %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set ftrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyHt = (scnHt - (hdrHt+ftrHt) - (2*hdrVrtMargin)) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyBtnVrtMargin = (bdyHt * 0.02) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyBtnHt = ((bdyHt-((numObj-1)*bdyBtnVrtMargin))/numObj) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{bdyBtnHt}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># relay toggle 2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">obj</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;p1b102&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;x&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrHorMargin}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Figure out how tall the display is, subtract out the height of the header/footer and that&#39;s the usable</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">#   space. Within that usable space, we will want small margins.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;y&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set numObj = 3 %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set ftrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyHt = (scnHt - (hdrHt+ftrHt) - (2*hdrVrtMargin)) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyBtnVrtMargin = (bdyHt * 0.02) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyBtnHt = ((bdyHt-((numObj-1)*bdyBtnVrtMargin))/numObj) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrHt+hdrVrtMargin+(1*bdyBtnHt+bdyBtnVrtMargin)}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;w&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set usableHdrWd = scnWd-(2*hdrHorMargin) %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyWd = usableHdrWd %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{bdyWd}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># We want the bottom nav buttons to consume the bottom 10% of the screen</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;h&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set numObj = 3 %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set ftrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyHt = (scnHt - (hdrHt+ftrHt) - (2*hdrVrtMargin)) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyBtnVrtMargin = (bdyHt * 0.02) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyBtnHt = ((bdyHt-((numObj-1)*bdyBtnVrtMargin))/numObj) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{bdyBtnHt}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># relay toggle 3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">obj</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;p1b103&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;x&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrHorMargin}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Figure out how tall the display is, subtract out the height of the header/footer and that&#39;s the usable</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">#   space. Within that usable space, we will want small margins.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;y&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set numObj = 3 %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set ftrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyHt = (scnHt - (hdrHt+ftrHt) - (2*hdrVrtMargin)) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyBtnVrtMargin = (bdyHt * 0.02) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyBtnHt = ((bdyHt-((numObj-1)*bdyBtnVrtMargin))/numObj) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrHt+hdrVrtMargin+(2*(bdyBtnHt+bdyBtnVrtMargin))}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;w&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set usableHdrWd = scnWd-(2*hdrHorMargin) %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyWd = usableHdrWd %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{bdyWd}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># We want the bottom nav buttons to consume the bottom 10% of the screen</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;h&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set numObj = 3 %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set ftrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyHt = (scnHt - (hdrHt+ftrHt) - (2*hdrVrtMargin)) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyBtnVrtMargin = (bdyHt * 0.02) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyBtnHt = ((bdyHt-((numObj-1)*bdyBtnVrtMargin))/numObj) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{bdyBtnHt}}</span><span class="w">          
</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Tip<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>This technique <em>could</em> be considered overkill. Each template incurs some additional memory/cpu overhead on the Home Assistant instance.</p>
<p>While this technique is pretty helpful during rapid prototyping, at some point the additional resource usage is hard to justify for layouts that do not change often.</p>
<p>A reasonable compromise would be to leverage the template evaluation functionality via the Home Assistant Developer tools to calculate the positions and locations for each UI elements while building out your interface(s) and then copy the computed values into your <code>pages.jsonl</code> file once the layout has been more or less finalized.</p>
</div>
        </div>
    </div>
<p>And you&rsquo;re done!
You might need to restart Home Assistant or reload the openHasp component/configuration so your update YAML is picked up.
Assuming everything works, you should see a flurry of activity on your MQTT broker or the plate telnet console as the openHasp component renders each template and commands the plate to re-draw each UI element.</p>
<p>You can then re-configure your device with a new display orientation and then reboot it. As it connects back to your MQTT broker, Home Assistant will re-evaluate the templates with the inverted screen height/width and each UI widget should get re-painted.</p>
<p>If I had a way to reliably capture the content of the framebuffer as a video rather than a screenshot, I&rsquo;d include it here.
You&rsquo;ll just have to trust me when I say that It&rsquo;s kinda neat to watch this happen in real time.</p>
<h2 id="teardown">Teardown</h2>
<h3 id="product-packaging">Product packaging</h3>
<p>Since it&rsquo;s all but impossible to find any photos of the product packaging online, here&rsquo;s a few of those:</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Minimal instructions and wasteful packaging. Other than the small foam insert, this entire package can be recycled!
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The provided screws are NOT the US standard #6 32 thread-per-inch. They are slightly larger and will strip out any screw holes in an electrical box!
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h3 id="internals">Internals</h3>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        This particular model is the 3 relay version. Packaging claims 200W power. It&#39;s not clear if that is per channel or total. My money is on total.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>You can clearly see the revised PCB that is substantially different from the one featured on <a href="https://blakadder.com/lanbon-L8-custom-firmware/#disassembly" target="_blank" rel="noopener noreffer">this blakadder post</a>.
My PCB has a parasitic TuYa module also attached.
Almost none of the pins are connected to the PCB so the TuYa module is 100% self contained and commands the main ESP module via UART.</p>
<p>Removing the TuYa module is pretty painless with some hot air.
It can also be left alone and the openHasp binaries will just ignore it.
You can also place an order directly with Lanbon for units that do not have the TuYa module populated but this will require a minimum order quantity.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Generic relays, generic caps, generic transformers... don&#39;t switch any critical loads with this!
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        A closer look at what appears to be a dedicated power monitoring IC. It appears to monitor the aggregate of all three channels, not each individually. Very likely to make sure no more than 200W is switched at one time...
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<h3 id="pcbic-markings">PCB/IC Markings</h3>
<p>Some of the interesting ICs and PCB markings:</p>
<ul>
<li>
<p><code>CB3S</code>: TuYa <a href="https://developer.tuya.com/en/docs/iot/cb3s?id=Kai94mec0s076" target="_blank" rel="noopener noreffer">wifi module</a></p>
</li>
<li>
<p><code>HLW8012</code>: Single phase energy monitor chip</p>
</li>
<li>
<p><code>ESP32-WROVER-IB</code>: the primary ESP32 module that runs the show</p>
</li>
<li>
<p>Primary PCB is marked: <code>L8-HS_CB_V1.17(20210805)</code></p>
</li>
<li>
<p>Daughter / &lsquo;power&rsquo; board <code>L8-HS MB V1,14</code></p>
</li>
</ul>
]]></description></item></channel></rss>