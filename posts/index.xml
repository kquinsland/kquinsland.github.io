<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>All Posts - karl</title><link>https://karlquinsland.com/posts/</link><description>All Posts | karl</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 25 Dec 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://karlquinsland.com/posts/" rel="self" type="application/rss+xml"/><item><title>Multi-Material Printing Hack for Prusa XL</title><link>https://karlquinsland.com/multi-material-printing-hack/</link><pubDate>Wed, 25 Dec 2024 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/multi-material-printing-hack/</guid><description><![CDATA[<!-- markdownlint-disable-file MD002 -->
<p>In the same spirit as <a href="/extending-the-mk3s-print-area/" rel="">an earlier post</a>, here is a quick hack I used to get my <strong>dual</strong>-headed Prusa XL printer to print with <strong>three</strong> materials at once.</p>
<p>While the technique worked, it may not be the best method, so proceed with caution.</p>
<h2 id="the-problem">The problem</h2>
<p>I am trying to print a part that requires two different materials at the same time: ABS and TPU.</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            The shaded blue area is meant to be TPU/FLEX material. The shaded yellow area is meant to be ABS material.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>The first complication comes from the &ldquo;unfriendly&rdquo; shape; the part is spherical and has no ideal orientation for printing without any supports.</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Grey is TPU, Green is ABS, and the Blue/Grey mix is the support material composed of interleaved PLA and TPU layers.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>To make matters slightly more complicated, TPU is one of those filaments that likes to stick to pretty much everything; I have few good options for support material.
The <a href="https://www.youtube.com/watch?v=5VV2fbJ0apg" target="_blank" rel="noopener noreffer"><em>least</em> sticky material</a> is PLA.</p>
<p>So now I have a single job that requires three materials: ABS, TPU, and PLA&hellip;. but still only two print heads to work with.</p>
<p>What to do?</p>
<p>Usually when faced with the &ldquo;more materials than heads&rdquo; problem, the solution is to use the <a href="https://marlinfw.org/docs/gcode/M600.html" target="_blank" rel="noopener noreffer"><code>M600</code></a> gCode command to have the printer pause, eject the current material and wait for the user to load the new material.</p>
<p>This technique is not new; it&rsquo;s widely supported and works perfectly <strong>if</strong> the materials are similar enough that the extrusion settings can be shared between them.</p>
<p>For my part, the tool head will have to transition from <code>PLA</code> to <code>ABS</code> which means virtually every instruction in the gCode will have to change as well.</p>
<h2 id="the-loophole">The loophole</h2>
<p>Fortunately, the geometry for this part has a &ldquo;gap&rdquo; between the initial section where supports are needed and the internal section where the ABS material is needed.</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            This is the &#39;per-layer&#39; view from the slicer with a &#39;bottom-up&#39; perspective. As before, Grey is TPU, Green is ABS, and the thin blue circle represents the topmost layer of the support material.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>Notice that the <em>last</em> support layer (blue circle) is still a few layers away from the first ABS layer (the green section).</p>
<p>Essentially, I do need three materials, <strong>but only two at a time</strong>.
What a coincidence that I have a printer with two heads!</p>
<h2 id="the-solution-hack">The <del>solution</del> hack</h2>
<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>Warning<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>This is a hack and may not work for all printers or all slicers.
Think of this more as a &ldquo;proof of concept&rdquo; than a reliable technique.
You can likely adapt this technique to other printers but you will need to understand the gCode generated by your slicer and the firmware running on your printer.</p>
<p>Ideally, this serves as a demonstration and inspires the development of a more robust solution; conceivably, the prusa slicer/firmware could be modified to support this use case directly with not much effort.</p>
</div>
        </div>
    </div>
<p>The solution is to lie to the slicer and tell it that I have three tool heads.
This way, I can use correct profiles for each material and the slicer will generate the correct gCode for each material.</p>
<p>All I have to do is post-process the gCode to pause for a manual material swap at the correct time and then replace all references to the third tool head with the second tool head after the swap.</p>
<p>Simple, right?</p>
<p>(yes, but not as simple as I thought)</p>
<p>This particular part has a little over 400K lines of gCode so I&rsquo;m not going to do this by hand!
Here&rsquo;s a quick and dirty Python script that rewrote the gCode for me:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/env -S uv run</span>
</span></span><span class="line"><span class="cl"><span class="c1"># /// script</span>
</span></span><span class="line"><span class="cl"><span class="c1"># requires-python = &#34;&gt;=3.13&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># dependencies = [</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   &#34;structlog&#34;,</span>
</span></span><span class="line"><span class="cl"><span class="c1"># ]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># ///</span>
</span></span><span class="line"><span class="cl"><span class="c1">##</span>
</span></span><span class="line"><span class="cl"><span class="c1"># See: https://github.com/prusa3d/Prusa-Firmware-Buddy/blob/master/lib/Marlin/Marlin/src/gcode/control/T.cpp</span>
</span></span><span class="line"><span class="cl"><span class="c1"># See: https://help.prusa3d.com/article/buddy-firmware-specific-g-code-commands_633112</span>
</span></span><span class="line"><span class="cl"><span class="c1"># See: https://old.reddit.com/r/prusa3d/comments/15djlgu/change_filament_settings_mid_print_not_just_colour/ju2c37f/</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">re</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">structlog</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">log</span> <span class="o">=</span> <span class="n">structlog</span><span class="o">.</span><span class="n">get_logger</span><span class="p">(</span><span class="vm">__name__</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">replace_t2_with_t1_after_m600</span><span class="p">(</span><span class="n">input_file</span><span class="p">,</span> <span class="n">output_file</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    Modifies a GCode file based on the following rules:
</span></span></span><span class="line"><span class="cl"><span class="s2">    1. Before the `M600` line, comment out any lines mentioning `T2` by adding `; HACK ;`.
</span></span></span><span class="line"><span class="cl"><span class="s2">    2. After the `M600` line, replace all instances of `T2` with `T1` if surrounded by whitespace.
</span></span></span><span class="line"><span class="cl"><span class="s2">    3. Lines beginning with `;` are always ignored.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s2">    - input_file: Path to the input GCode file.
</span></span></span><span class="line"><span class="cl"><span class="s2">    - output_file: Path to the output GCode file.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">m600_found</span> <span class="o">=</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">    <span class="n">line_number</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">&#34;Starting...&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">input_file</span><span class="p">,</span> <span class="s2">&#34;r&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">infile</span><span class="p">,</span> <span class="nb">open</span><span class="p">(</span><span class="n">output_file</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">outfile</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">infile</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># For debugging / status</span>
</span></span><span class="line"><span class="cl">            <span class="n">line_number</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1"># Skip lines starting with a semicolon</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s2">&#34;;&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                <span class="n">outfile</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">continue</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1"># For all intents and purposes, tool head 3 (T2) does not exist.</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># AT the time of the &#34;color swap&#34;, The second tool head stops being a PLA and starts being an ABS tool.</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># This means that we need to comment out all mentions of T2 before the swap and</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#   after the swap, re-write everything.</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># In all cases, we should never refer to T2.</span>
</span></span><span class="line"><span class="cl">            <span class="c1">##</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="ow">not</span> <span class="n">m600_found</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># Check for M600 line</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">re</span><span class="o">.</span><span class="k">match</span><span class="p">(</span><span class="sa">r</span><span class="s2">&#34;^M600$&#34;</span><span class="p">,</span> <span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">()):</span>
</span></span><span class="line"><span class="cl">                    <span class="n">m600_found</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">                    <span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">&#34;&#39;M600&#39; found!&#34;</span><span class="p">,</span> <span class="n">line_number</span><span class="o">=</span><span class="n">line_number</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="n">outfile</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="k">continue</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="c1"># Comment out lines mentioning T2 before M600</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="sa">r</span><span class="s2">&#34;\bT2\b&#34;</span><span class="p">,</span> <span class="n">line</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                    <span class="n">line</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&#34;; HACK ;</span><span class="si">{</span><span class="n">line</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">                    <span class="n">log</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                        <span class="s2">&#34;Removing mention of Tool Head 3 (t2)&#34;</span><span class="p">,</span> <span class="n">line_number</span><span class="o">=</span><span class="n">line_number</span>
</span></span><span class="line"><span class="cl">                    <span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">outfile</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">continue</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1"># Replace &#39;T2&#39; with &#39;T1&#39; only if surrounded by whitespace after M600</span>
</span></span><span class="line"><span class="cl">            <span class="n">modified_line</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="sa">r</span><span class="s2">&#34;\bT2\b&#34;</span><span class="p">,</span> <span class="s2">&#34;T1&#34;</span><span class="p">,</span> <span class="n">line</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">outfile</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">modified_line</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">input_file</span> <span class="o">=</span> <span class="s2">&#34;your_gcode_file_here.gcode&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">output_file</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&#34;MOD.</span><span class="si">{</span><span class="n">input_file</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">replace_t2_with_t1_after_m600</span><span class="p">(</span><span class="n">input_file</span><span class="p">,</span> <span class="n">output_file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">&#34;Done!&#34;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>I ran that script, loaded the modified gCode into the printer, and&hellip;was not able to fool the printer.</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Prusa XL refusing to start the print because it knows I&#39;m trying to cheat.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>The printer was - somehow - aware that the gCode wanted three heads with three distinct materials and refused to start the print until I added a third head.</p>
<p>As it turns out, that python script isn&rsquo;t quite enough to fool the printer.
I&rsquo;ll spare you from the many iterative attempts to get this working and say that the following additional optimizations/deletions were necessary:</p>
<h3 id="manual-fix-1-remove-all-routines-for-the-third-tool-head">Manual fix 1: Remove all routines for the third tool head</h3>
<p>Somewhere early on in the gCode is a section that looks like this</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">;</span> <span class="n">purge</span> <span class="n">third</span> <span class="k">tool</span>
</span></span><span class="line"><span class="cl"><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">G1</span> <span class="n">F24000</span>
</span></span><span class="line"><span class="cl"><span class="n">P0</span> <span class="n">S1</span> <span class="n">L2</span> <span class="n">D0</span><span class="p">;</span> <span class="n">park</span> <span class="n">the</span> <span class="k">tool</span>
</span></span><span class="line"><span class="cl"><span class="n">M109</span> <span class="n">T2</span> <span class="n">S255</span>
</span></span><span class="line"><span class="cl"><span class="n">T2</span> <span class="n">S1</span> <span class="n">L0</span> <span class="n">D0</span><span class="p">;</span> <span class="n">pick</span> <span class="n">the</span> <span class="k">tool</span>
</span></span><span class="line"><span class="cl"><span class="n">G92</span> <span class="n">E0</span> <span class="p">;</span> <span class="n">reset</span> <span class="n">extruder</span> <span class="n">position</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">M104</span><span class="o">.</span><span class="mi">1</span> <span class="n">T0</span> <span class="n">P13</span> <span class="n">Q13</span> <span class="n">S230</span>
</span></span><span class="line"><span class="cl"><span class="n">G0</span> <span class="n">X210</span> <span class="n">Y</span><span class="o">-</span><span class="mi">7</span> <span class="n">Z10</span> <span class="n">F24000</span> <span class="p">;</span> <span class="n">move</span> <span class="n">close</span> <span class="n">to</span> <span class="n">the</span> <span class="n">sheet</span><span class="s1">&#39;s edge</span>
</span></span><span class="line"><span class="cl"><span class="n">G0</span> <span class="n">E30</span> <span class="n">X220</span> <span class="n">Z0</span><span class="o">.</span><span class="mi">2</span> <span class="n">F170</span> <span class="p">;</span> <span class="n">purge</span> <span class="k">while</span> <span class="n">moving</span> <span class="n">towards</span> <span class="n">the</span> <span class="n">sheet</span>
</span></span><span class="line"><span class="cl"><span class="n">G0</span> <span class="n">X250</span> <span class="n">E9</span> <span class="n">F800</span> <span class="p">;</span> <span class="k">continue</span> <span class="n">purging</span> <span class="ow">and</span> <span class="n">wipe</span> <span class="n">the</span> <span class="n">nozzle</span>
</span></span><span class="line"><span class="cl"><span class="n">G0</span> <span class="n">X253</span> <span class="n">Z0</span><span class="o">.</span><span class="mi">05</span> <span class="n">F8000</span> <span class="p">;</span> <span class="n">wipe</span><span class="p">,</span> <span class="n">move</span> <span class="n">close</span> <span class="n">to</span> <span class="n">the</span> <span class="n">bed</span>
</span></span><span class="line"><span class="cl"><span class="n">G0</span> <span class="n">X256</span> <span class="n">Z0</span><span class="o">.</span><span class="mi">2</span> <span class="n">F8000</span> <span class="p">;</span> <span class="n">wipe</span><span class="p">,</span> <span class="n">move</span> <span class="n">quickly</span> <span class="n">away</span> <span class="n">from</span> <span class="n">the</span> <span class="n">bed</span>
</span></span><span class="line"><span class="cl"><span class="n">G1</span> <span class="n">E</span><span class="o">-</span><span class="mf">1.05</span> <span class="n">F2400</span> <span class="p">;</span> <span class="n">retract</span>
</span></span><span class="line"><span class="cl"> <span class="p">;</span> <span class="n">update</span> <span class="n">slicer</span> <span class="n">internal</span> <span class="n">retract</span> <span class="n">variable</span>
</span></span><span class="line"><span class="cl"><span class="n">G92</span> <span class="n">E0</span> <span class="p">;</span> <span class="n">reset</span> <span class="n">extruder</span> <span class="n">position</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">M104</span> <span class="n">S100</span> <span class="n">T2</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>This can be removed from the gCode as there is no physical 3rd head to purge or park, heat up, probe&hellip;etc.</p>
<p>If the python script naïvely replaced <em>all</em> instances of <code>T2</code> with <code>T1</code>, this section would be left in the gCode and would waste time running the second print head through the same routine twice.</p>
<h3 id="manual-fix-2-remove-all-metadata">Manual fix 2: Remove all metadata</h3>
<p>This one took quite a few trial/error attempts to figure out.
At the tail end of the unmodified gCode there are some &ldquo;shutdown&rdquo; commands and then a ton of metadata:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">&lt;... many many lines omitted ...&gt;
</span></span><span class="line"><span class="cl">; turn off extruder heaters
</span></span><span class="line"><span class="cl"> M104 T0 S0 
</span></span><span class="line"><span class="cl"> M104 T1 S0 
</span></span><span class="line"><span class="cl"> M104 T2 S0 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&lt;...&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">; objects_info = {&#34;objects&#34;:&lt;...&gt;}
</span></span><span class="line"><span class="cl">; filament used [mm] = 24022.62, 2012.80, 3975.01
</span></span><span class="line"><span class="cl">; filament used [cm3] = 57.78, 4.84, 9.56
</span></span><span class="line"><span class="cl">&lt;...&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">; prusaslicer_config = begin
</span></span><span class="line"><span class="cl">&lt;...&gt;
</span></span><span class="line"><span class="cl">; filament_type = FLEX;PLA;ABS
</span></span><span class="line"><span class="cl">&lt;...&gt;
</span></span><span class="line"><span class="cl">; filament_colour = #408080;#FF8000;#FFF2EC
</span></span><span class="line"><span class="cl">&lt;...&gt;
</span></span><span class="line"><span class="cl">; prusaslicer_config = end
</span></span></code></pre></td></tr></table>
</div>
</div><p>As best as I can tell, there&rsquo;s a few hundred lines that encode some basic metadata about the part(s) and the filament(s) used / print times and the slicer specific configuration information.
If you look closely, you can see that a fair number of properties have three values: one for each tool head:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">&lt;...&gt;
</span></span><span class="line"><span class="cl">; filament_type = FLEX;PLA;ABS
</span></span><span class="line"><span class="cl">&lt;...&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>I spent a few iterations trying to identify what each property did and if it was safe to drop the third value but wasn&rsquo;t making a ton of progress.
Eventually I just decided to drop <em>all</em> of the metadata&hellip; and that worked!</p>
<p>Initially I didn&rsquo;t think that the printer firmware would be reading <em>ANY</em> of the <strong>commented out</strong> sections of the file but I guess this makes sense for metadata and anything else that&rsquo;s not a gCode instruction.</p>
<p>As best as I can tell, nothing contained in the metadata sections changes how the actual print is executed.
All of the values are for the slicer UI and - in some cases - for the printer firmware to sanity check the gCode before starting the print.</p>
<p>I could be wrong about this but I don&rsquo;t have the time/patience/resources to properly test this. The gCode works well enough for my needs without the metadata so I&rsquo;m content to move on to the next steps on this project.</p>
<p>If I am wrong about what the metadata sections do and it turns out that they do help refine/improve how the printer firmware processes instructions&hellip;please do let me know!</p>
<h2 id="tldr">TL;DR</h2>
<p>If you have a need to print with more materials than you have tool heads, you <strong>might</strong> be able to trick the slicer/printer into re-configuring a print head mid-print.</p>
<p>To do this, get the slicer to generate valid and correct gCode for each material/tool head combination as if you had an appropriately configured printer.
After the gCode has been generated, map every &ldquo;virtual&rdquo; too head to a real tool head and remove any additional references to the virtual tool heads.</p>
]]></description></item><item><title>AliExpress 11.11 Sale Teardowns (2024 edition)</title><link>https://karlquinsland.com/aliexpress-11-11-sale-teardowns-2024/</link><pubDate>Sun, 01 Dec 2024 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/aliexpress-11-11-sale-teardowns-2024/</guid><description><![CDATA[<!-- markdownlint-disable-file MD024 -->
<h1 id="11-11-day-teardowns-2024-edition">11-11 day teardowns (2024 edition)</h1>
<p>I guess this is becoming a <a href="http://localhost:1313/categories/11.11-sale/" target="_blank" rel="noopener noreffer">tradition</a> now?</p>
<p>During China&rsquo;s Single&rsquo;s Day sale on AliExpress, I bought various gadgets - both for projects and out of curiosity.
Rather than write separate posts, here&rsquo;s a collection of mini teardowns showing what&rsquo;s inside each item.</p>
<p>Previous years:</p>
<ul>
<li><a href="/aliexpress-11-11-sale-teardowns/" rel="">2023</a></li>
</ul>
<h2 id="tuya-zigbee-35-inch-smart-wall-switch">Tuya Zigbee 3.5 Inch Smart Wall Switch</h2>
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p><a href="https://www.aliexpress.us/item/3256807444250563.html?gatewayAdapt=glo2usa" target="_blank" rel="noopener noreffer">non-affiliate link</a></p>
<p>I&rsquo;m always looking for a better scene controller/switch/Home Assistant interface.
I was curious about which chip they used for the full graphics display and was hoping for an easily hackable Android device.
Unfortunately, no such luck with this.</p>
<p>The main application processor is <a href="https://linux-sunxi.org/F1C100s" target="_blank" rel="noopener noreffer"><code>F1C100s</code></a> which is a low-cost, low-power, ARM9-based SoC.
It might be able to run a custom Linux build that could draw a custom UI, but it&rsquo;s not going to be as easy as rooting an Android device.</p>
<p>There’s not much in the box, just the switch and a manual.
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>

</p>
<p>It&rsquo;s a pretty standard &ldquo;power supply and relays in the back, touch screen in the front&rdquo; design.
This time, though, there&rsquo;s an <em>exposed</em> programming header!?</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Note the &#39;fire wire&#39; label for mains input... :D
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>A few screws later, the back panel comes off to reveal some power regulation/switching components and the Zigbee module.</p>
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>They achieved the &ldquo;mushy, then clicky&rdquo; feel of the buttons by using a rubber insert around the tactile switches.</p>
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>The power supply doesn&rsquo;t look too bad.
Clearance looks OK, there is a fuse, and the soldering is decent.
I don&rsquo;t know how well isolated that transformer is, but it&rsquo;s probably fine.</p>
<p><figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
        

    

    <figcaption>
        
        <p>
            J2 looks like it might be DC input or possibly RS485 for a future model?
            
                
                
        </p> 
    </figcaption>
    
</figure>

</p>
<h2 id="ueetop-175w-gan-usb-c-charger-bk-112d">Ueetop 175W GaN USB C Charger (BK-112D)</h2>
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p><a href="https://www.aliexpress.us/item/3256807203418058.html?gatewayAdapt=glo2usa" target="_blank" rel="noopener noreffer">non-affiliate link</a></p>
<p>As the USB-C PD standard matures and GaN technology makes high-power chargers cheaper, it&rsquo;s fun to see the internals get more complex but also more integrated.
This was less than $15 shipped which is <em>insane</em> for a 100W+ charger unless they cut corners somewhere&hellip;</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Hey, it came with a mains cord and it&#39;s even correct for my country!
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>There are a LOTS of chips holding things together; it&rsquo;s almost impossible to open this without breaking at least one!
Consider this a warning: you will be doing a destructive teardown if you open this!</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Look at those PCB traces going to the output. Easily 5mm wide!
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>As this is a <a href="/tags/two-minute-teardown/" rel="">#TwoMinuteTeardown</a>, I&rsquo;m not going to remove all the silastic glue on the power supply module nor will I check the ripple in the output.</p>
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Other than that, it&rsquo;s about what you&rsquo;d expect from a modern USB-C charger that isn&rsquo;t hyper-compact; beefy looking AC-to-DC converter, a few big caps and then the USB-C PD controller.</p>
<p>Between each group of ports is a series of passives, some beefy looking power MOSFETs and a protocol negotiation IC.</p>
<p><figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>

</p>
<h3 id="notable-ics">Notable ICs</h3>
<p><a href="https://ismartware.com/article-1-2.html" target="_blank" rel="noopener noreffer">SW3516</a></p>
<p><a href="https://www.lcsc.com/product-detail/USB-Converters_Shenzhen-Fuman-Elec-XPD977D30A_C2892062.html" target="_blank" rel="noopener noreffer">Shenzhen Fuman Elec XPD977D30A</a></p>
<p><a href="https://www.lcsc.com/product-detail/Microcontroller-Units-MCUs-MPUs-SOCs_CHIPSEA-CSU32P10-SOP8_C914988.html" target="_blank" rel="noopener noreffer">CHIPSEA CSU32P10</a></p>
<h2 id="generic-ozone-generator-xd001">Generic Ozone generator (XD001)</h2>
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p><a href="https://www.aliexpress.us/item/3256805759188983.html?gatewayAdapt=glo2usa" target="_blank" rel="noopener noreffer">non-affiliate link</a></p>
<p>There’s not much in the box other than the generator and a manual.</p>
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>It’s easy to take apart with no hidden screws!</p>
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Inside, you’ll find about what you’d expect: a potted HV module, fan, controller, and a battery.</p>
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Instead of the cheaper &ldquo;carbon needle&rdquo; ozone generators, this one uses a ceramic plate.</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Such a pretty glow!
            
                
                
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Micro USB is INEXCUSABLE in 2024!
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>Annoyingly, they used a micro USB port for charging.
This is <em>inexcusable</em> in 2024.
The silk screen on the PCB indicates that the design is from late 2020, which would be slightly more acceptable if USB-C wasn’t already the standard by then.
Furthermore, this device doesn’t need any complicated USB-C PD features, so it’s not like they’d have to worry about the extra cost or complexity of a USB-C controller.
Really, all they needed was <em>two</em> (very important, <a href="https://hackaday.com/2019/07/16/exploring-the-raspberry-pi-4-usb-c-issue-in-depth/" target="_blank" rel="noopener noreffer"><strong>NOT</strong> ONE</a>) 5.1k resistors and a USB-C port and they could have been future proofed!</p>
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>They scrubbed the markings off the SOIC16 CPU. The rest of the components are about what you’d expect for managing lithium batteries, switching the fan, and driving the boost converter for the ozone generator.</p>
<p>It appears another version of this device also features a buzzer.
I&rsquo;m not sure what for, but the silk screen clearly shows a spot for it.</p>
<p><figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>

</p>
<h2 id="btf-light-sp530e-led-controller">BTF Light SP530E LED Controller</h2>
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p><a href="https://www.aliexpress.us/item/3256806286614116.html?gatewayAdapt=glo2usa" target="_blank" rel="noopener noreffer">non-affiliate link</a></p>
<p>This is the first of a few LED controllers I bought to see if they are compatible with <a href="https://kno.wled.ge/" target="_blank" rel="noopener noreffer">WLED</a> or ESPHome.
I have some <a href="#side-note-the-ossha-community-is-being-heard" rel="">thoughts</a> on the state of the LED controller market, but to summarize: it&rsquo;s <em>getting better</em>!</p>
<p>The packaging is very nondescript, containing just the controller and a manual.</p>
<p><figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>

</p>
<p>They did include a screwdriver, which&hellip; makes me wonder how many people are buying the individual components to DIY a LED lighting solution but also don&rsquo;t already have a screwdriver?</p>
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>The PCB is pretty simple and, thankfully, is nothing more than an ESP32 and a level shifter.
It also includes a small condenser microphone for the music reactive mode.</p>
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>The MOSFETs look robust enough to handle a decent amount of current, and there&rsquo;s a decent amount of via stitching around the power traces, so it <em>should</em> be able to handle the heat.</p>
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
        

    

    <figcaption>
        
        <p>
            They labeled the programming header. ❤️
            
                
                
        </p> 
    </figcaption>
    
</figure>


<h3 id="notable-ics-1">Notable ICs</h3>
<p><a href="https://www.lcsc.com/product-detail/Microcontrollers-MCU-MPU-SOC_Espressif-Systems-ESP32-C3FN4_C2848860.html" target="_blank" rel="noopener noreffer">ESP32-C3</a></p>
<p><a href="https://www.lcsc.com/product-detail/74-Series_TM-Shenzhen-Titan-Micro-Elec-TM74HC245_C84121.html" target="_blank" rel="noopener noreffer">TM(Shenzhen Titan Micro Elec) TM74HC245</a></p>
<h2 id="gledepto-gl-c-015wl-d-led-controller">Gledepto GL-C-015WL-D LED Controller</h2>
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p><a href="https://www.aliexpress.us/item/3256807239400011.html?gatewayAdapt=glo2usa" target="_blank" rel="noopener noreffer">non-affiliate link</a></p>
<p>As with the other device, this controller also has bare-bones packaging.</p>
<p>No screwdriver needed because all the terminals have their own locking lever!</p>
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Happy to see an ESP32 module in here&hellip; on its own PCB? Complete with a micro USB port for flashing?!?</p>
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Yep, the ESP32 is on a separate PCB that&rsquo;s connected to the main board via a header.
The silk screen on the PCB makes me think that this was <em>initially</em> developed for an ESP8266 but then they added the header for the ESP32 module late(?) in design.</p>
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>The silk screen is really well done; everything is labeled well.</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Really happy to see that the GPIOs are labeled... for both the ESP32 and 8266 variant!
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>Because this is an &ldquo;addressable&rdquo; LED controller, there&rsquo;s not much to look at.
The GPIO from the ESP goes more or less directly to the output pins.</p>
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>And in case there was any doubt, the back of the PCB makes it super clear that this PCB <em>can</em> be used with an ESP8266 or ESP32.</p>
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<h2 id="smlight-a1-slwf-03-led-controller">SMLight A1-SLWF-03 LED Controller</h2>
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p><a href="https://www.aliexpress.us/item/3256805957696665.html?gatewayAdapt=glo2usa" target="_blank" rel="noopener noreffer">non-affiliate link</a></p>
<p>I saved the <em>best</em> for last!
This LED controller <em>really</em> did surprise me with how open it is!</p>
<p>They&rsquo;re not putting a generic &ldquo;ESP32 powered&rdquo; message on the label leaving the reader to read between the lines / infer that the device can be flashed with alternate firmware.</p>
<p>They&rsquo;re straight up saying so!
The label has the GPIO pins clearly labeled.
It uses USB-C for power and flashing.
The USB port is <em>modern</em> unlike <a href="#generic-ozone-generator-xd001" rel="">other</a> devices I&rsquo;ve <a href="#gledepto-gl-c-015wl-d-led-controller" rel="">shown</a> in this post.
The USB port can also be used for programming and isn&rsquo;t hidden!</p>
<p>Here&rsquo;s to hoping that they release a version for analog LED strips! 🤞</p>
<p><figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
        

    

    <figcaption>
        
        <p>
            🇺🇦
            
                
                
        </p> 
    </figcaption>
    
</figure>

</p>
<h3 id="side-note-the-ossha-community-is-being-heard">side note: the OSS/HA community is being heard</h3>
<p>Over the past few years, I&rsquo;ve been scouring AliExpress to find the latest and greatest in LED controllers and every year I&rsquo;ve been disappointed.
But over the last year or so, I&rsquo;ve noticed a <em>huge</em> uptick in the number of controllers that are <em>actually</em> compatible with Home Assistant and other open-source home automation systems.</p>
<p>In the beginning, they were all ESP8266 based and trivial to reverse engineer and flash.
Then they started using TuYa intermediate MCUs which were a bit more tedious to reverse engineer but still possible if you were willing to put in the effort.</p>
<p>Now, they&rsquo;re using ESP32 based chips and going out of their way to LABEL which GPIOs go to which pin(s) and to generally make it TRIVIAL to flash WLED or ESPHome or whatever you want.</p>
<p>This means some savvy manufacturers are paying attention and recognizing the growing hobbyist market for these devices and are catering to them.
There&rsquo;s somebody out there that&rsquo;s not going to force their garbage app/api on you and is going to let you do whatever you want with the device you bought.
This was UNHEARD OF just a few years ago and I&rsquo;m <em>so</em> happy to see it happening now!</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            This is such a victory for the DIY/HA/OSS community!
            
                
                
        </p> 
    </figcaption>
    
</figure>


<h2 id="g3061-pd65w-mini-hot-plate">G3061 PD65W Mini Hot Plate</h2>
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p><a href="https://www.aliexpress.us/item/3256806193753913.html?gatewayAdapt=glo2usa" target="_blank" rel="noopener noreffer">non-affiliate link</a></p>
<p>And the winner of the &ldquo;feels most like a hand-built prototype&rdquo; award goes to&hellip; this thing!</p>
<p>Normally I don&rsquo;t like it when screws are hidden under labels / stickers&hellip; but in this case, the &ldquo;sticker&rdquo; is a rubber foot that doesn&rsquo;t even &ldquo;hide&rdquo; the screws.</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Those lumps under the rubber mat are the screws holding the case together.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>Looking from the side, the construction becomes pretty clear; it&rsquo;s probably just using a PCB for the heating element and the stacked PCBs separated with little brass standoffs is for thermal isolation.</p>
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>USB-C for power is <em>always</em> a good sign.
Other than that, a basic <a href="https://www.mcu.com.cn/en/" target="_blank" rel="noopener noreffer">CMSemicon</a> IC runs the show.</p>
<p>The OLED screen module is for sure one of those prototype modules meant for hobbyists!</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            The use of threaded inserts for nuts just screams &#39;prototype&#39; to me. Nothing wrong with that, just makes me smile.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>As expected, the heating element is just PCB traces on an aluminum substrate PCB.
Cheap and effective!</p>
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>If anybody needs the instructions for this, I scanned a copy and you can get it from <a href="


https://karlquinsland.com/aliexpress-11-11-sale-teardowns-2024/files/07_hotplate/g3601-instructions.pdf


" rel="">here</a>.</p>
<h2 id="generic-usb-c-dock-w-lcd">Generic USB-C Dock w/ LCD</h2>
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p><a href="https://www.aliexpress.us/item/3256806850754746.html?gatewayAdapt=glo2usa" target="_blank" rel="noopener noreffer">non-affiliate link</a></p>
<p>USB-C &ldquo;expansion&rdquo; docs are a dime a dozen now.
This caught my attention because of the LCD display on the side.
What are the odds that it presents as a second display using <a href="https://www.displayport.org/displayport-over-usb-c/" target="_blank" rel="noopener noreffer">display port tunneling</a> via usb-alt mode?</p>
<p>There are no screws, just clips.</p>
<p><figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>

</p>
<p>It looks like a pretty straightforward de-mux and breakout PCB.
The display is an isolated / standalone component that&rsquo;s linked to the main PCB with just 4 wires.
What are the odds that it&rsquo;s hanging off a USB hub?</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            I&#39;m not exactly sure why they made the USB-C &#34;tail&#34; detachable.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>The silk screen markings make me think that the &ldquo;internal&rdquo; name for this product is <code>K0108-1D</code>.
Interesting that the <code>HUB</code> PCB has a date code almost a full <em>year</em> after the <code>LCD</code> PCB..
Also worth noting; the instructions that came with the device link to the same shady <code>key123.vip</code> site that the <a href="#ajazz-akp03e-stream-deck-clone" rel="">ajazz</a> used so there&rsquo;s <em>definitely</em> some sort of relationship between the two but I&rsquo;m not sure what it is.</p>
<p><figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>

</p>
<p>Annoyingly, they lasered off the markings on the display module.
I don&rsquo;t have a clip for the eeprom, but I bet that there&rsquo;d be at least a few interesting strings in there :D.</p>
<p><figure >

    
        
        

    

    <figcaption>
        
        <p>
            I wonder what SW1 is used for...
            
                
                
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Nothing much on the under side of the USB-Dock PCB.
            
                
                
        </p> 
    </figcaption>
    
</figure>

</p>
<h3 id="usb-details">USB details</h3>
<p>After seeing that the LCD is just a standalone module, I wanted to see how it presented itself to the host.
As expected, it&rsquo;s just a USB hub with a few devices hanging off it.
The display module is almost certainly the HID device.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ lsusb -vvv -t &gt; pre-dock
</span></span><span class="line"><span class="cl">❯ lsusb -vvv -t &gt; pre-dock
</span></span><span class="line"><span class="cl">❯ lsusb -vvv -t &gt; post-dock
</span></span><span class="line"><span class="cl">❯ diff pre-dock post-dock
</span></span><span class="line"><span class="cl">3a4,15
</span></span><span class="line"><span class="cl">&gt;     <span class="p">|</span>__ Port 003: Dev 006, If 0, <span class="nv">Class</span><span class="o">=</span>Hub, <span class="nv">Driver</span><span class="o">=</span>hub/4p, 480M
</span></span><span class="line"><span class="cl">&gt;         ID 1a40:0801 Terminus Technology Inc. 
</span></span><span class="line"><span class="cl">&gt;         /sys/bus/usb/devices/1-3  /dev/bus/usb/001/006
</span></span><span class="line"><span class="cl">&gt;         <span class="p">|</span>__ Port 003: Dev 007, If 0, <span class="nv">Class</span><span class="o">=</span>Hub, <span class="nv">Driver</span><span class="o">=</span>hub/4p, 480M
</span></span><span class="line"><span class="cl">&gt;             ID 1a40:0801 Terminus Technology Inc. 
</span></span><span class="line"><span class="cl">&gt;             /sys/bus/usb/devices/1-3.3  /dev/bus/usb/001/007
</span></span><span class="line"><span class="cl">&gt;             <span class="p">|</span>__ Port 002: Dev 009, If 0, <span class="nv">Class</span><span class="o">=</span>Human Interface Device, <span class="nv">Driver</span><span class="o">=</span>usbhid, 480M
</span></span><span class="line"><span class="cl">&gt;                 ID 5548:6667  
</span></span><span class="line"><span class="cl">&gt;                 /sys/bus/usb/devices/1-3.3.2  /dev/bus/usb/001/009
</span></span><span class="line"><span class="cl">&gt;         <span class="p">|</span>__ Port 004: Dev 008, If 0, <span class="nv">Class</span><span class="o">=</span>Vendor Specific Class, <span class="nv">Driver</span><span class="o">=</span>r8152, 480M
</span></span><span class="line"><span class="cl">&gt;             ID 0bda:8152 Realtek Semiconductor Corp. RTL8152 Fast Ethernet Adapter
</span></span><span class="line"><span class="cl">&gt;             /sys/bus/usb/devices/1-3.4  /dev/bus/usb/001/008
</span></span></code></pre></td></tr></table>
</div>
</div><p>And here&rsquo;s <code>dmesg</code> with the screen <em>not</em> attached versus <em>attached</em>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">usb 1-3: new high-speed USB device number <span class="m">23</span> using xhci_hcd
</span></span><span class="line"><span class="cl">usb 1-3: New USB device found, <span class="nv">idVendor</span><span class="o">=</span>1a40, <span class="nv">idProduct</span><span class="o">=</span>0801, <span class="nv">bcdDevice</span><span class="o">=</span> 1.00
</span></span><span class="line"><span class="cl">usb 1-3: New USB device strings: <span class="nv">Mfr</span><span class="o">=</span>0, <span class="nv">Product</span><span class="o">=</span>1, <span class="nv">SerialNumber</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl">usb 1-3: Product: USB 2.0 Hub
</span></span><span class="line"><span class="cl">hub 1-3:1.0: USB hub found
</span></span><span class="line"><span class="cl">hub 1-3:1.0: <span class="m">4</span> ports detected
</span></span><span class="line"><span class="cl">usb 1-3: USB disconnect, device number <span class="m">23</span>
</span></span><span class="line"><span class="cl">usb 1-3-port3: attempt power cycle
</span></span><span class="line"><span class="cl">usb 1-3: new high-speed USB device number <span class="m">28</span> using xhci_hcd
</span></span><span class="line"><span class="cl">usb 1-3: New USB device found, <span class="nv">idVendor</span><span class="o">=</span>1a40, <span class="nv">idProduct</span><span class="o">=</span>0801, <span class="nv">bcdDevice</span><span class="o">=</span> 1.00
</span></span><span class="line"><span class="cl">usb 1-3: New USB device strings: <span class="nv">Mfr</span><span class="o">=</span>0, <span class="nv">Product</span><span class="o">=</span>1, <span class="nv">SerialNumber</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl">usb 1-3: Product: USB 2.0 Hub
</span></span><span class="line"><span class="cl">hub 1-3:1.0: USB hub found
</span></span><span class="line"><span class="cl">hub 1-3:1.0: <span class="m">4</span> ports detected
</span></span><span class="line"><span class="cl">usb 1-3.3: new high-speed USB device number <span class="m">29</span> using xhci_hcd
</span></span><span class="line"><span class="cl">usb 1-3.3: New USB device found, <span class="nv">idVendor</span><span class="o">=</span>1a40, <span class="nv">idProduct</span><span class="o">=</span>0801, <span class="nv">bcdDevice</span><span class="o">=</span> 1.00
</span></span><span class="line"><span class="cl">usb 1-3.3: New USB device strings: <span class="nv">Mfr</span><span class="o">=</span>0, <span class="nv">Product</span><span class="o">=</span>1, <span class="nv">SerialNumber</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl">usb 1-3.3: Product: USB 2.0 Hub
</span></span><span class="line"><span class="cl">hub 1-3.3:1.0: USB hub found
</span></span><span class="line"><span class="cl">hub 1-3.3:1.0: <span class="m">4</span> ports detected
</span></span><span class="line"><span class="cl">usb 1-3.4: new high-speed USB device number <span class="m">30</span> using xhci_hcd
</span></span><span class="line"><span class="cl">usb 1-3.4: New USB device found, <span class="nv">idVendor</span><span class="o">=</span>0bda, <span class="nv">idProduct</span><span class="o">=</span>8152, <span class="nv">bcdDevice</span><span class="o">=</span>20.00
</span></span><span class="line"><span class="cl">usb 1-3.4: New USB device strings: <span class="nv">Mfr</span><span class="o">=</span>1, <span class="nv">Product</span><span class="o">=</span>2, <span class="nv">SerialNumber</span><span class="o">=</span><span class="m">3</span>
</span></span><span class="line"><span class="cl">usb 1-3.4: Product: USB 10/100 LAN
</span></span><span class="line"><span class="cl">usb 1-3.4: Manufacturer: Realtek
</span></span><span class="line"><span class="cl">usb 1-3.4: SerialNumber: 00E04C360C56
</span></span><span class="line"><span class="cl">r8152-cfgselector 1-3.4: reset high-speed USB device number <span class="m">30</span> using xhci_hcd
</span></span><span class="line"><span class="cl">r8152 1-3.4:1.0: skip request firmware
</span></span><span class="line"><span class="cl">r8152 1-3.4:1.0 eth0: v1.12.13
</span></span><span class="line"><span class="cl">r8152 1-3.4:1.0 enp5s0f1u3u4: renamed from eth0
</span></span></code></pre></td></tr></table>
</div>
</div><p>And with the screen attached, there&rsquo;s some additional lines as another device is enumerated:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">usb 1-3.3.2: new high-speed USB device number <span class="m">34</span> using xhci_hcd
</span></span><span class="line"><span class="cl">usb 1-3.3.2: New USB device found, <span class="nv">idVendor</span><span class="o">=</span>5548, <span class="nv">idProduct</span><span class="o">=</span>6667, <span class="nv">bcdDevice</span><span class="o">=</span> 3.00
</span></span><span class="line"><span class="cl">usb 1-3.3.2: New USB device strings: <span class="nv">Mfr</span><span class="o">=</span>1, <span class="nv">Product</span><span class="o">=</span>2, <span class="nv">SerialNumber</span><span class="o">=</span><span class="m">3</span>
</span></span><span class="line"><span class="cl">usb 1-3.3.2: Product: 997F1
</span></span><span class="line"><span class="cl">usb 1-3.3.2: Manufacturer: <span class="m">997</span>
</span></span><span class="line"><span class="cl">usb 1-3.3.2: SerialNumber: 997F11193737
</span></span><span class="line"><span class="cl">on usb-0000:05:00.1-3.3.2/input0
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="ajazz-akp03e-stream-deck-clone">Ajazz AKP03E (Stream Deck clone)</h2>
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p><a href="https://www.aliexpress.us/item/3256807320371570.html?gatewayAdapt=glo2usa" target="_blank" rel="noopener noreffer">non-affiliate link</a></p>
<p>This is a clone/knockoff of the Elgato Stream Deck products.
I was curious to see if they did anything differently than the original for the internal hardware.
Turns out, no.
It&rsquo;s still a basic LCD screen behind a matrix of clear buttons.</p>
<p>The unit can be easily separated from its stand and there are no hidden screws!</p>
<p><figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>

</p>
<p>After going around the edge w/ a spudger, the internals reveal themselves.</p>
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>The <code>-VxNx</code> suffix on the silk screen matches the silk screen seen on the <a href="#generic-usb-c-dock-w-lcd" rel="">USB-C Dock</a>&hellip; which really does make me think that there&rsquo;s some sort of relationship between the two products.</p>
<p>The board with the physical knobs/buttons is just a &ldquo;pass through&rdquo; PCB; everything here just goes right over the FFC to the board with the screen and buttons.</p>
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>I can&rsquo;t find <em>anything</em> when googling the main IC, unfortunately.</p>
<blockquote>
<p>ARX29025</p>
<p>Q2402</p>
</blockquote>
<p>The silk screen is:</p>
<blockquote>
<p>HSV293-N3-LCD-V2P1</p>
<p>20240620</p>
</blockquote>
<p><figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>

</p>
<p>The software is <em>super</em> sketchy; just trying to find a build that actually worked on macOS was a pain!</p>
<p>The <a href="https://www.a-jazz.com/en/search.jsp?id=422&amp;q=03" target="_blank" rel="noopener noreffer">official site</a> looks and functions like it was made with a 2000s-era website builder 🤮.</p>
<p>With some google-fu, I found links to a <a href="https://bbs.key123.vip/" target="_blank" rel="noopener noreffer">web forum</a> that may not be officially related to the product, but <a href="https://bbs.key123.vip/forum.php?mod=viewthread&amp;tid=1167&amp;highlight=AKP03" target="_blank" rel="noopener noreffer">has some download links</a> to software that is supposed to work with the device, on macOS in English.</p>
<p>I never got a working build of the software, but the few builds that I did try all have the same architecture; a <code>Qt</code> app that hosts plugins and does all of the thinking for the device.</p>
<p>With a bit more digging, I think that this &ldquo;Mirabox&rdquo; company is the underlying OEM and the ajazz is just a white-labeled version of this product: <a href="https://miraboxbuy.com/collections/stream-dock/products/streamdock-mbox-n3" target="_blank" rel="noopener noreffer">Stream Dock MBox 293N3</a>.</p>
<p>Mirabox also appears to have a <a href="https://sdk.key123.vip/en/guide/overview.html#stream-dock-mbox-293n4" target="_blank" rel="noopener noreffer">fledgling SDK</a> for plugins <em>and</em> a <a href="https://github.com/MiraboxSpace/Linux-StreamDock-PythonSDK" target="_blank" rel="noopener noreffer">Python SDK</a> for Linux users!</p>
<h3 id="usb-details-1">USB details</h3>
<p>Similar architecture; USB hub with two HID devices hanging off it; probably one HID for reading the buttons and another for writing to the screen.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ lsusb -vvv -t &gt; pre-deck
</span></span><span class="line"><span class="cl">❯ lsusb -vvv -t &gt; post-deck
</span></span><span class="line"><span class="cl">❯ diff pre-deck post-deck
</span></span><span class="line"><span class="cl">3a4,9
</span></span><span class="line"><span class="cl">&gt;     <span class="p">|</span>__ Port 003: Dev 019, If 0, <span class="nv">Class</span><span class="o">=</span>Human Interface Device, <span class="nv">Driver</span><span class="o">=</span>usbhid, 480M
</span></span><span class="line"><span class="cl">&gt;         ID 0300:3002  
</span></span><span class="line"><span class="cl">&gt;         /sys/bus/usb/devices/1-3  /dev/bus/usb/001/019
</span></span><span class="line"><span class="cl">&gt;     <span class="p">|</span>__ Port 003: Dev 019, If 1, <span class="nv">Class</span><span class="o">=</span>Human Interface Device, <span class="nv">Driver</span><span class="o">=</span>usbhid, 480M
</span></span><span class="line"><span class="cl">&gt;         ID 0300:3002  
</span></span><span class="line"><span class="cl">&gt;         /sys/bus/usb/devices/1-3  /dev/bus/usb/001/019
</span></span></code></pre></td></tr></table>
</div>
</div><p>And <code>dmesg</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">usb 1-3: new high-speed USB device number <span class="m">22</span> using xhci_hcd
</span></span><span class="line"><span class="cl">usb 1-3: New USB device found, <span class="nv">idVendor</span><span class="o">=</span>0300, <span class="nv">idProduct</span><span class="o">=</span>3002, <span class="nv">bcdDevice</span><span class="o">=</span> 0.02
</span></span><span class="line"><span class="cl">usb 1-3: New USB device strings: <span class="nv">Mfr</span><span class="o">=</span>1, <span class="nv">Product</span><span class="o">=</span>2, <span class="nv">SerialNumber</span><span class="o">=</span><span class="m">3</span>
</span></span><span class="line"><span class="cl">usb 1-3: Product: HOTSPOTEKUSB HID DEMO
</span></span><span class="line"><span class="cl">usb 1-3: Manufacturer: HOTSPOTEKUSB
</span></span><span class="line"><span class="cl">usb 1-3: SerialNumber: 0300D0781A4A
</span></span><span class="line"><span class="cl">on usb-0000:05:00.1-3/input0
</span></span><span class="line"><span class="cl">input: HOTSPOTEKUSB HOTSPOTEKUSB HID DEMO as /devices/pci0000:00/0000:00:01.2/0000:02:00.0/0000:03:08.0/0000:05:00.1/usb1/1-3/1-3:1.1/0003:0300:3002.00DE/input/input180
</span></span><span class="line"><span class="cl">on usb-0000:05:00.1-3/input1
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="generic-wifi-led-wall-clock">Generic WiFI LED Wall Clock</h2>
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p><a href="https://www.aliexpress.us/item/3256807326722207.html?gatewayAdapt=glo2usa" target="_blank" rel="noopener noreffer">non-affiliate link</a></p>
<p>I&rsquo;ve been looking for a &ldquo;Works with Home Assistant&rdquo; version of the <a href="https://www.amazon.com/Introducing-Echo-Wall-Clock---An-Echo-companion-to-see-timers-at-a-glance./dp/B07FQDMKFT" target="_blank" rel="noopener noreffer">Echo Wall Clock</a> ever since Amazon discontinued it.</p>
<p>I was hoping this would be a simple ESP8266 or ESP32 module linked directly to the LEDs&hellip; but there&rsquo;s an anonymous intermediate microcontroller in there.</p>
<p>Assuming that the microcontroller can be removed easily and the various segments of addressable LEDs can be driven directly from an ESP8266 or ESP32, this could still be a viable base for a custom LED wall clock.</p>
<p><figure >

    
        
        

    

    <figcaption>
        
        <p>
            Why bother with a custom USB cable? Just use a standard USB-C jack for power!
            
                
                
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Lots of SMD neopixels and a partition/mask system to keep high contrast between the segments.
            
                
                
        </p> 
    </figcaption>
    
</figure>

</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Kinda interesting to see how they spread the components out to not interfere with the partitions.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
        

    

    <figcaption>
        
        <p>
            PCB marking: YC-9108-WIFI-0807, Ver 1.6, 2024-6-8
            
                
                
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Markings have been sanded off. Why bother? What&#39;s the value in that?
            
                
                
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
        

    

    <figcaption>
        
        <p>
            I assume this is i2c for the RTC module.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<h2 id="mirabox-n4">Mirabox N4</h2>
<p>This was actually a late addition to the list.
<em>Technically</em> I didn&rsquo;t order it in 2024, but after learning about the Ajazz possibly being a Mirabox product, I wanted to see if there was anything interesting in the Mirabox product line so I found this for a reasonable price and held off publishing this post until it arrived.</p>
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p><a href="https://www.aliexpress.us/item/3256807963651419.html" target="_blank" rel="noopener noreffer">non-affiliate link</a></p>
<p>The packaging is nondescript and minimal; the unit and a nice USB A -&gt; C cable is essentially all that&rsquo;s in the box.</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Did they have to use foam for this? Cardboard would have been fine...
            
                
                
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
        

    

    <figcaption>
        
        <p>
            The Mirabox logo on top is laser engraved which is a nice touch.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
        

    

    <figcaption>
        
        <p>
            No screws, just clips! And they&#39;re not even that hard to find or pry up!
            
                
                
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>As was the case with the other LCD modules, this looks like it&rsquo;s just USB 2.0 module hanging off a USB hub.
Conceivably, you could embed a tiny raspberry pi zero or other <em>small</em> computer with USB Host support inside this thing 🤔&hellip;</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Really nice ofd them to label each FPC connector.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>The two internal PCBs are marked very similarly to the <a href="#generic-usb-c-dock-w-lcd" rel="">USB-Dock</a> <em>and</em> the <a href="#ajazz-akp03e-stream-deck-clone" rel="">Stream Deck clone</a> which really does make me think that mirabox is the ODM for those products as well.</p>
<p>Markings:</p>
<blockquote>
<p>HSV293-N4-LCD</p>
<p>20240807</p>
<p>HSV293-N4-SW</p>
<p>202400711</p>
</blockquote>
<p>And the USB hub PCB in the base doesn&rsquo;t have a part number, just a date code.
I&rsquo;d bet that they started designing this product in spring of 2024 and they finished the simplest part - the USB hub - first.</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            As expected, the buttons and the lower display are really just different regions of the same LCD.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>The dials are aluminum, which feels very premium for a device that&rsquo;s otherwise plastic.</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            That plastic insert almost looks 3d printed...
            
                
                
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Interesting to see what network calls were made...
            
                
                
        </p> 
    </figcaption>
    
</figure>


]]></description></item><item><title>Monitoring HVAC system with ESPHome</title><link>https://karlquinsland.com/esphome-hvac-monitor/</link><pubDate>Sat, 02 Nov 2024 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/esphome-hvac-monitor/</guid><description><![CDATA[<h1 id="using-esphome-to-monitor-hvac-system">Using ESPHome to Monitor HVAC System</h1>
<p>Here&rsquo;s a quick &ldquo;show-and-tell&rdquo; about a recent project I completed.</p>
<h2 id="the-concept">The concept</h2>
<p>I&rsquo;m not sure how I first came across the idea of measuring air pressure drop across a filter to gauge its remaining life, but I remember thinking it was a great idea.</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Conceptual diagram for the project.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>The idea has been lurking in the back of my mind for a while, but I never got around to implementing it&hellip; until now.</p>
<p>Years ago, I added a <a href="https://www.winsen-sensor.com/sensors/co2-sensor/mh-z16.html" target="_blank" rel="noopener noreffer">CO₂ sensor</a> to my HVAC return duct to monitor indoor air quality.
While the sensor provided useful data, I was never really satisfied with how quickly it was installed (read: hacked together messy prototype), and I always wanted to improve it.</p>
<p>While browsing AliExpress for an unrelated project, I stumbled upon some differential air pressure probes and decided to buy one of these <a href="https://www.aliexpress.us/item/3256807382388280.html" target="_blank" rel="noopener noreffer">sensors</a>.</p>
<p>After an afternoon of work, I had the sensor up and running and could <a href="https://github.com/kquinsland/qdx50d-air-pressure-sensor-poc" target="_blank" rel="noopener noreffer">communicate with it using some simple Python</a>.</p>
<p>I then designed a PCB to integrate the sensors and electronics and 3D-printed a case to house the whole setup.</p>
<h2 id="the-hardware">The Hardware</h2>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>Note<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">I&rsquo;m not sharing the PCB or other mechanical files because they&rsquo;re specific to my setup.
Unless you have the same HVAC system configuration, layout, and dimensional constraints, these files likely won&rsquo;t be useful.
This post aims to share the concept and hopefully inspire others.
Use this as a starting point and adapt it to your needs.</div>
        </div>
    </div>
<p>At a high level, the BOM for the project includes:</p>
<ul>
<li>ESP32-C3 mini module</li>
<li>Bosch BME680 sensor / Co2 sensor</li>
<li>QDX50D air pressure sensor</li>
<li>AC to DC power supply for interfacing with existing 24VAC HVAC power</li>
<li>Custom PCB</li>
</ul>
<p>The assembled setup looks like this:</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Fully assembled PCB just before final assembly.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>Installed in the HVAC system, it appears like this:</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            A picture of the probe installed and operating. The air filter has been removed and you can see the AC evaporator.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<h2 id="esphome-config">ESPHome Config</h2>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            How the sensor shows up in HomeAssistant.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>Below is a snippet of the ESPHome configuration file for this project. It’s similar to my configuration, but I&rsquo;ve removed boilerplate sections (e.g., <code>mqtt</code>, <code>wifi</code>, etc.) for brevity.</p>
<p>I&rsquo;ve included numerous in-line comments to clarify each section. To briefly recap:</p>
<ul>
<li>Press the &ldquo;Clear High Water Mark&rdquo; button whenever you change the filter to reset the high water mark.</li>
<li>Ensure that <code>glbl_air_pressure_delta_clogged_pa</code> and <code>glbl_air_pressure_delta_virgin_pa</code> fields contain values tailored to your system.</li>
<li>To calibrate these values, install a new filter and note the value reported by <code>sense_air_pressure_delta_raw_pa</code>. As the filter clogs over time, this value will rise. When the filter blocks most light when held up to a bright light, it’s time for a replacement. Record the value of <code>sense_air_pressure_delta_raw_pa</code> at this point and use it as the &ldquo;clogged&rdquo; threshold.</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span><span class="lnt">160
</span><span class="lnt">161
</span><span class="lnt">162
</span><span class="lnt">163
</span><span class="lnt">164
</span><span class="lnt">165
</span><span class="lnt">166
</span><span class="lnt">167
</span><span class="lnt">168
</span><span class="lnt">169
</span><span class="lnt">170
</span><span class="lnt">171
</span><span class="lnt">172
</span><span class="lnt">173
</span><span class="lnt">174
</span><span class="lnt">175
</span><span class="lnt">176
</span><span class="lnt">177
</span><span class="lnt">178
</span><span class="lnt">179
</span><span class="lnt">180
</span><span class="lnt">181
</span><span class="lnt">182
</span><span class="lnt">183
</span><span class="lnt">184
</span><span class="lnt">185
</span><span class="lnt">186
</span><span class="lnt">187
</span><span class="lnt">188
</span><span class="lnt">189
</span><span class="lnt">190
</span><span class="lnt">191
</span><span class="lnt">192
</span><span class="lnt">193
</span><span class="lnt">194
</span><span class="lnt">195
</span><span class="lnt">196
</span><span class="lnt">197
</span><span class="lnt">198
</span><span class="lnt">199
</span><span class="lnt">200
</span><span class="lnt">201
</span><span class="lnt">202
</span><span class="lnt">203
</span><span class="lnt">204
</span><span class="lnt">205
</span><span class="lnt">206
</span><span class="lnt">207
</span><span class="lnt">208
</span><span class="lnt">209
</span><span class="lnt">210
</span><span class="lnt">211
</span><span class="lnt">212
</span><span class="lnt">213
</span><span class="lnt">214
</span><span class="lnt">215
</span><span class="lnt">216
</span><span class="lnt">217
</span><span class="lnt">218
</span><span class="lnt">219
</span><span class="lnt">220
</span><span class="lnt">221
</span><span class="lnt">222
</span><span class="lnt">223
</span><span class="lnt">224
</span><span class="lnt">225
</span><span class="lnt">226
</span><span class="lnt">227
</span><span class="lnt">228
</span><span class="lnt">229
</span><span class="lnt">230
</span><span class="lnt">231
</span><span class="lnt">232
</span><span class="lnt">233
</span><span class="lnt">234
</span><span class="lnt">235
</span><span class="lnt">236
</span><span class="lnt">237
</span><span class="lnt">238
</span><span class="lnt">239
</span><span class="lnt">240
</span><span class="lnt">241
</span><span class="lnt">242
</span><span class="lnt">243
</span><span class="lnt">244
</span><span class="lnt">245
</span><span class="lnt">246
</span><span class="lnt">247
</span><span class="lnt">248
</span><span class="lnt">249
</span><span class="lnt">250
</span><span class="lnt">251
</span><span class="lnt">252
</span><span class="lnt">253
</span><span class="lnt">254
</span><span class="lnt">255
</span><span class="lnt">256
</span><span class="lnt">257
</span><span class="lnt">258
</span><span class="lnt">259
</span><span class="lnt">260
</span><span class="lnt">261
</span><span class="lnt">262
</span><span class="lnt">263
</span><span class="lnt">264
</span><span class="lnt">265
</span><span class="lnt">266
</span><span class="lnt">267
</span><span class="lnt">268
</span><span class="lnt">269
</span><span class="lnt">270
</span><span class="lnt">271
</span><span class="lnt">272
</span><span class="lnt">273
</span><span class="lnt">274
</span><span class="lnt">275
</span><span class="lnt">276
</span><span class="lnt">277
</span><span class="lnt">278
</span><span class="lnt">279
</span><span class="lnt">280
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># The air pressure probe seems to sample continuously; the display is updated a few times per second.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># This is a bit overkill for this application as I really only need to check occasionally while the HVAC fan is running.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># I say occasionally because the filter is not going to clog up in a matter of seconds; it will take many weeks.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># There&#39;s little value in knowing that the filter is dropping 2 more Pascals this second compared to what it was </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#   at 10 seconds ago. The value is in knowing that the filter is dropping 2000 more Pascals now than it was four</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#   months ago!</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Additionally, when measuring using individual Pascals, the readings can be quite noisy!</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Just being near the probe can warm up the ambient ari enough to register a few pascals of pressure change.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Breathing / talking / just walking past the probe can also cause the readings to jump around a bit!</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># The point that I&#39;m trying to make here is that we are concerned with the overall trend of the pressure readings, not</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#   instantaneous values.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># This isn&#39;t quite so straightforward, however since we don&#39;t know when the fan is running!</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># It may not run for months at a time if the weather is pleasant... or it might be running for days at a time if it&#39;s not.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># While it would certainly be the most reliable indicator, electrically interfacing with the 240v blower motor is way, way</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#   out of scope for this project!</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Fortunately, we have a pretty reliable backup method that allows us to infer when the fan is running with a high degree of</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#   confidence: the air pressure probe!</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># When the fan is off, the measured air pressure difference will be pretty small since there is (virtually) no flow through the filter.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Sure, it will bounce around a bit due to environmental factors but the overall measured delta will not be very large.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># When the fan is running, the pressure drop across the filter will be much larger than the idle/ambient value.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># If we know what the air pressure drop is across a brand new / virgin filter, we can use that as a threshold; if the measured</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#   pressure delta is lower than this threshold, the fan is (probably) not running. If above, the fan is almost certainly running.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Ok, we can infer if the fan is running or not given a measurement, but how do we know when to sample the pressure delta?</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Because the blower motor is going to run for AT LEAST a few hundred seconds at a time, we don&#39;t need to sample the</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#   pressure delta very often. 2x per minute should be more than enough opportunity to catch the fan running.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Knowing that the pressure delta will only increase as the filter gets clogged, we can compare the current air pressure delta</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#   to the absolute maximum value to estimate the remaining life of the filter.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># To prevent the estimated filter life percentages from going all over the place, we use a high-water-marker approach.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># This isn&#39;t _perfect_ since we&#39;d ideally be keeping track of the average pressure delta but setting that up in ESPHome</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#    isn&#39;t trivial and the high-water-mark approach is good enough for this application.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># So, this means that we need to supply two calibration values for most of the code below to work properly:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#   - The pressure drop across a virgin / brand new filter. This value should be adjusted if the type of filter</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#       is changed (e.g. MERV 8 to MERV 13). This value can be obtained &#34;automatically&#34; by just installing a new filter and</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#       clicking the &#34;reset high-water mark&#34; button. The next time that the fan runs, the probe will record the highest value</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#       and this is a good estimate of the virgin value. Maybe round down just a bit to be safe.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#   - The pressure drop across an end-of-life/clogged filter. The best way to get this value is to use a filter that&#39;s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#       about to be replaced. In testing, the difference between a new filter and a clogged filter was about 20-30 hPa</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#       so it is possible to estimate this value if you only have the virgin value. If using the estimation approach, check the</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#       filter from time to time to see how dirty it is and adjust the clogged value as needed. Once the filter is so dirty that</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#       you can&#39;t see sunlight through it, it&#39;s probably time to replace it. Record the high water marker value at this time</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#       and use that as the clogged value. Maybe round down just a bit to be safe.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">substitutions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Remember, the sensor is configured to report in Pascals but the user is more likely to think in hPa</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># hPa = 100 Pascals</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">template_number_input_min_hpa</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;10&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">template_number_input_max_hpa</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;150&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># We do need all of these values to persist across reboots; for this reason, do not use an ESP8266!</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Internally, this config uses Pascals but the user is more likely to think in hPa so we scale by 100 in each direction</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">globals</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># High water marker</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_air_pressure_delta_hwm_pa</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">float</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_value</span><span class="p">:</span><span class="w"> </span><span class="kc">yes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">initial_value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;0.0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># The air pressure delta we&#39;d expect to see for a fresh filter</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_air_pressure_delta_virgin_pa</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_value</span><span class="p">:</span><span class="w"> </span><span class="kc">yes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Probe is in Pascals and a new filter is about 70 hPa</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">initial_value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;70000&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># And for a clogged filter</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_air_pressure_delta_clogged_pa</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_value</span><span class="p">:</span><span class="w"> </span><span class="kc">yes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># In testing, a very dirty filter has a roughly 30 hPa delta</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">initial_value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;95000&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">uart</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">uart_co2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># &lt; ... Omitted ...&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">uart_modbus</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># &lt; ... Omitted ...&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">modbus</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">bus_mod_1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">uart_id</span><span class="p">:</span><span class="w"> </span><span class="l">uart_modbus</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">modbus_controller</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">modbus_device</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">modbus_id</span><span class="p">:</span><span class="w"> </span><span class="l">bus_mod_1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Datasheet defaults to addr 01</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">address</span><span class="p">:</span><span class="w"> </span><span class="m">0x01</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># See note above about sampling rate; 2x/min should be fine as long as the fan runs for at least 5 min at a time</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">update_interval</span><span class="p">:</span><span class="w"> </span><span class="l">30s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">setup_priority</span><span class="p">:</span><span class="w"> </span>-<span class="m">10</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Note: The air pressure sensor requires a bit of configuration and setup before it can be used with this ESPHome configuration.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># This ESPHome configuration assumes that the sensor has already been configured to 9600 baud, address 0x01</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#   and that the reading is in Pascals and has been set to the appropriate level of precision (xx.yy Pascals)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># It might be possible to write a custom script / component / ESPHome automation to write out the necessary configuration from</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#   within ESPHome but I didn&#39;t see a need to port the python script to ESPHome.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># https://github.com/kquinsland/qdx50d-air-pressure-sensor-poc/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">sensor</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># This sensor is the instantaneous air pressure value. This sensor will be updated at the rate outlined by the</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># modbus_controller.update_interval value</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># It is expected that teh measured value will be noisy at idle but will stabilize when the HVAC fan is running.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Despite the value from this entity being used in other sensors, we do NOT mark this as internal since we want the raw value</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#   to be available in HA for advanced diagnostic / tuning purposes.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Air Pressure Delta (Raw)&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">modbus_controller</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">sense_air_pressure_delta_raw_pa</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">modbus_controller_id</span><span class="p">:</span><span class="w"> </span><span class="l">modbus_device</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">register_type</span><span class="p">:</span><span class="w"> </span><span class="l">holding</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">address</span><span class="p">:</span><span class="w"> </span><span class="m">0x04</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">device_class</span><span class="p">:</span><span class="w"> </span><span class="l">atmospheric_pressure</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">unit_of_measurement</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Pa&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">state_class</span><span class="p">:</span><span class="w"> </span><span class="l">measurement</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:gauge&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">value_type</span><span class="p">:</span><span class="w"> </span><span class="l">S_WORD</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># When we get a new reading update the various presentation layers that depend on us</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_value</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Pass value to the smoothed sensor</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="l">id(sense_air_pressure_delta_smoothed_pa).publish_state(id(sense_air_pressure_delta_raw_pa).state);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Update the global high water mark, but only if the incoming value is at least as high as the virgin value</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Until we see a value equal to / higher than virgin, we can assume that the fan is not running.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          // Use absolute value so we don&#39;t care if the probe is installed backwards or not; we&#39;re only interested in the magnitude
</span></span></span><span class="line"><span class="cl"><span class="sd">          float abs_x = fabs(x);
</span></span></span><span class="line"><span class="cl"><span class="sd">          ESP_LOGD(&#34;sense_air_pressure_delta_raw_pa.on_value&#34;, &#34;[RAW] abs_x: %f&#34;, abs_x);
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          // If the blower motor is off, the values will be quite small and noisy.
</span></span></span><span class="line"><span class="cl"><span class="sd">          // We don&#39;t bother with any value that&#39;s less than the virgin value
</span></span></span><span class="line"><span class="cl"><span class="sd">          if (abs_x &lt; id(glbl_air_pressure_delta_virgin_pa) ) {
</span></span></span><span class="line"><span class="cl"><span class="sd">            ESP_LOGD(&#34;sense_air_pressure_delta_raw_pa.on_value&#34;, &#34;abs_x: %f IS BELOW VIRGIN: %d&#34;, abs_x, id(glbl_air_pressure_delta_virgin_pa));
</span></span></span><span class="line"><span class="cl"><span class="sd">          } else {
</span></span></span><span class="line"><span class="cl"><span class="sd">            // We are at or above the virgin value so the blower motor is almost certainly running
</span></span></span><span class="line"><span class="cl"><span class="sd">            ESP_LOGD(&#34;sense_air_pressure_delta_raw_pa.on_value&#34;, &#34;abs_x: %f IS ABOVE VIRGIN: %d&#34;, abs_x, id(glbl_air_pressure_delta_virgin_pa));
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">            if (abs_x &gt; id(glbl_air_pressure_delta_hwm_pa) ) {
</span></span></span><span class="line"><span class="cl"><span class="sd">              id(glbl_air_pressure_delta_hwm_pa) = abs_x;
</span></span></span><span class="line"><span class="cl"><span class="sd">              // Update the hwm sensor (which kicks off other updates)
</span></span></span><span class="line"><span class="cl"><span class="sd">              id(sense_air_pressure_delta_hwm_pa).update();
</span></span></span><span class="line"><span class="cl"><span class="sd">            }
</span></span></span><span class="line"><span class="cl"><span class="sd">          }
</span></span></span><span class="line"><span class="cl"><span class="sd">          // Log the new values
</span></span></span><span class="line"><span class="cl"><span class="sd">          ESP_LOGD(&#34;sense_air_pressure_delta_raw_pa.on_value&#34;, &#34;glbl_air_pressure_delta_hwm_pa: %f&#34;, id(glbl_air_pressure_delta_hwm_pa));</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Air Pressure Delta (Smoothed)&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">sense_air_pressure_delta_smoothed_pa</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">device_class</span><span class="p">:</span><span class="w"> </span><span class="l">atmospheric_pressure</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">unit_of_measurement</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Pa&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">state_class</span><span class="p">:</span><span class="w"> </span><span class="l">measurement</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:gauge&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># We are template, driven by the raw sensor</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">update_interval</span><span class="p">:</span><span class="w"> </span><span class="l">never</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">expire_after</span><span class="p">:</span><span class="w"> </span><span class="l">120s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">filters</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">exponential_moving_average</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">alpha</span><span class="p">:</span><span class="w"> </span><span class="l">.2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">send_every</span><span class="p">:</span><span class="w"> </span><span class="m">15</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># ESPHome has a few different ways of interfacing with the BME680</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># The `bme68x_bsec2` platform requires arduino base for ESPHome and has two large drawbacks:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#   1. License prevents distributing binary; not a problem here, but annoying for some / in principle</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#   2. Does not permit arbitrary `update_interval` settings. Only choice is 3s or every 300s!</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># It appears that the only real difference between the two platforms is that the proprietary one</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#   has a calculated VOC and CO2 sensor. </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># This build already has a real CO2 sensor and - while better than nothing - I&#39;d rather have a real VOC sensor as well.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">bme680</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># &lt; ... Omitted ...&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">mhz19</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">uart_id</span><span class="p">:</span><span class="w"> </span><span class="l">uart_co2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># &lt; ... Omitted ...&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># For debugging purposes, show the current value of glbl_air_pressure_delta_hwm_pa</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Air Pressure Delta High Water Mark&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">sense_air_pressure_delta_hwm_pa</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="l">diagnostic</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">device_class</span><span class="p">:</span><span class="w"> </span><span class="l">atmospheric_pressure</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">unit_of_measurement</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Pa&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">state_class</span><span class="p">:</span><span class="w"> </span><span class="l">TOTAL_INCREASING</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">update_interval</span><span class="p">:</span><span class="w"> </span><span class="l">never</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      return id(glbl_air_pressure_delta_hwm_pa);</span><span class="w">      
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_value</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="l">id(sense_est_filter_life_remaining).update();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Estimated Filter Life Remaining&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">sense_est_filter_life_remaining</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="l">diagnostic</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">unit_of_measurement</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;%&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Technically, this is true but the value could change in a negative direction if the user changes the virgin/clogged values</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Home Assistant does NOT like it when this class of measurement goes down unless it goes back to zero</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># state_class: TOTAL_INCREASING</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># When the HWM is updated, we&#39;ll be called to update</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">update_interval</span><span class="p">:</span><span class="w"> </span><span class="l">never</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      if (id(glbl_air_pressure_delta_hwm_pa) &lt; id(glbl_air_pressure_delta_virgin_pa)) {
</span></span></span><span class="line"><span class="cl"><span class="sd">        ESP_LOGW(&#34;sense_est_filter_life_remaining&#34;, &#34;[NaN CASE] glbl_air_pressure_delta_hwm_pa: %f glbl_air_pressure_delta_virgin_pa: %f&#34;, id(glbl_air_pressure_delta_hwm_pa), id(glbl_air_pressure_delta_virgin_pa));
</span></span></span><span class="line"><span class="cl"><span class="sd">        return NAN;
</span></span></span><span class="line"><span class="cl"><span class="sd">      } else {
</span></span></span><span class="line"><span class="cl"><span class="sd">        ESP_LOGD(&#34;sense_est_filter_life_remaining&#34;, &#34;[CalcCase] glbl_air_pressure_delta_hwm_pa: %f glbl_air_pressure_delta_virgin_pa: %f, glbl_air_pressure_delta_clogged_pa: %f&#34;, id(glbl_air_pressure_delta_hwm_pa), id(glbl_air_pressure_delta_virgin_pa), id(glbl_air_pressure_delta_clogged_pa));
</span></span></span><span class="line"><span class="cl"><span class="sd">        return 100 - ((id(glbl_air_pressure_delta_hwm_pa) - id(glbl_air_pressure_delta_virgin_pa)) / (id(glbl_air_pressure_delta_clogged_pa) - id(glbl_air_pressure_delta_virgin_pa)) * 100);
</span></span></span><span class="line"><span class="cl"><span class="sd">      }</span><span class="w">      
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Button to clear the high water mark</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># This button should be pressed when a new filter is installed</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">button</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Clear High Water Mark&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">btn_clear_hwm</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="l">config</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:refresh&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_press</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">globals.set</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_air_pressure_delta_hwm_pa</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;0.0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">sensor.template.publish</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">sense_air_pressure_delta_hwm_pa</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">state</span><span class="p">:</span><span class="w"> </span>!<span class="l">lambda &#34;return id(glbl_air_pressure_delta_hwm_pa);&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">sensor.template.publish</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">sense_est_filter_life_remaining</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">state</span><span class="p">:</span><span class="w"> </span>!<span class="l">lambda &#34;return NAN;&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># And allow the user to set what a virgin/clogged filter looks like w/o recompiling</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Store the values in Pascals but present them in hPa, use abs() since we only care</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#   about the magnitude; not direction.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Any time we are set, we need to re-calculate the estimated filter life</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">number</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Virgin Filter Pressure Delta&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">num_virgin_filter_pressure_delta</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="l">config</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:gauge&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Internally, we use Pascals but the user is more likely to think in hPa so we</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># scale by 100 in each direction</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">unit_of_measurement</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;hPa&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">device_class</span><span class="p">:</span><span class="w"> </span><span class="l">atmospheric_pressure</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">min_value</span><span class="p">:</span><span class="w"> </span><span class="l">${template_number_input_min_hpa}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">max_value</span><span class="p">:</span><span class="w"> </span><span class="l">${template_number_input_max_hpa}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">step</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      return id(glbl_air_pressure_delta_virgin_pa)/100;</span><span class="w">      
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">set_action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(glbl_air_pressure_delta_virgin_pa) = abs(x)*100;</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(sense_est_filter_life_remaining).update();</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Clogged Filter Pressure Delta&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">num_virgin_filter_pressure_clogged</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="l">config</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:gauge&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">unit_of_measurement</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;hPa&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">device_class</span><span class="p">:</span><span class="w"> </span><span class="l">atmospheric_pressure</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">min_value</span><span class="p">:</span><span class="w"> </span><span class="l">${template_number_input_min_hpa}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">max_value</span><span class="p">:</span><span class="w"> </span><span class="l">${template_number_input_max_hpa}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">step</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      return id(glbl_air_pressure_delta_clogged_pa)/100;</span><span class="w">      
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">set_action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(glbl_air_pressure_delta_clogged_pa) = abs(x)*100;</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(sense_est_filter_life_remaining).update();</span><span class="w">          
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>Watch Band RFID fob</title><link>https://karlquinsland.com/watch-band-rfid/</link><pubDate>Sat, 14 Sep 2024 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/watch-band-rfid/</guid><description><![CDATA[<h1 id="watch-band-rfid-fob">Watch Band RFID fob</h1>
<p>This is a quick project to create a wearable RFID fob that can be easily attached to a watch band.
The idea is to have a small RFID tag that can be used for various purposes, such as access control or identification that is - more or less - as convenient as a surgically implanted tag, but without the need for embedding anything in your body.</p>
<p>I was inspired by both the <a href="https://en.wikipedia.org/wiki/Microchip_implant_%28human%29" target="_blank" rel="noopener noreffer">bio-hacking community</a> and the medical-alert &lsquo;accessory bands&rsquo; for Android Wear devices.</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            The inspiration for this project
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>Don&rsquo;t mind the few small print imperfections; <em>this was a prototype</em> printed with a .6mm nozzle.
A final version of this would be printed with a smaller nozzle, a finer layer height and probably a different color/material.</p>
<p>The point is to have a small, unobtrusive design that can be easily attached to a watch band.
Because of the wide variety of watch bands available, I have <a href="#files" rel="">included</a> the raw Fusion360 file for you to modify as needed.</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Installed on a watch band.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
        

    

    <figcaption>
        
        <p>
            A single watch band pin is used to secure the plastic part to the band.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Hopefully this gives you an idea of how the parts come together.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<h2 id="bill-of-materials">Bill of Materials</h2>
<p>The core component of this project is the <a href="#sourcing-the-rfid-tag" rel="">RFID tag</a> which needs to be small and reprogrammable.</p>
<p>Other than that, you will need to design or print your own enclosure and secure it to the watch band with a standard pin.
Sourcing these is quite easy; a local watch shop or jeweler should have them available or you can buy a watch-band kit online.
A kit is advisable if you need to prototype multiple designs / play with different pin diameters/lengths.</p>
<p>Printing the tag enclosure is straightforward but due to it&rsquo;s small size, the more precise your printer is, the better the results will be.</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Suggested print orientation for best results
            
                
                
        </p> 
    </figcaption>
    
</figure>


<h2 id="sourcing-the-rfid-tag">Sourcing the RFID tag</h2>
<p>This application is severely space constrained, so you need the smallest possible tag that is also reprogrammable.
If you search for tags meant to be embedded under the skin of animals, you will find many options&hellip; but they are not reprogrammable.</p>
<p>There are also tags meant for <a href="https://dangerousthings.com/category/implants/x-series/" target="_blank" rel="noopener noreffer">humans</a> but they&rsquo;re not cheap!
I did eventually find a suitable tag on eBay:</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            eBay listing for the RFID tag
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>eBay being what it is, there&rsquo;s no guarantee that <a href="https://www.ebay.com/itm/254607033331" target="_blank" rel="noopener noreffer">the same listing I purchased from</a> will still be active in the future so I am including a copy of the listing description that you can use for reference when searching for a suitable tag:</p>
<blockquote>
<p>New 2pcs T5577 125KHz E/H Rewrite Writable R/W Proximity Bio Glass Tag 2.12x12mm</p>
</blockquote>
<p>A portion of the listing text:</p>
<blockquote>
<p>Specifications:</p>
<p>This is the 125KHZ T5577 Glass RFID Writeable tags Proximity Induction For animal identification or other 125KHz RFID Access controller.</p>
<p>FEATURES:</p>
<ul>
<li>
<p>This tag very small so difficult to read or write,please use the better device or sensor strong device.</p>
</li>
<li>
<p>Operation frequency: 125Khz</p>
</li>
<li>
<p>Chip:T5577,Rewrite Writable EM4100 &amp; HID Chip(This Chip better and factory cost high than EM4305)</p>
</li>
<li>
<p>Compatible with 125KHz EM4100 or 125KHz HID reader to gain access controller and the animal identification.</p>
</li>
<li>
<p>Detecting distance: 0-5cm(if the Reader sensor Different so the Read Distance will Different ).</p>
</li>
<li>
<p>Glass Housing Material:Bio-glass.</p>
</li>
<li>
<p>Size:2.12 x12mm</p>
</li>
<li>
<p>Page included: 2pcs 125KHz T5577 Writeable Glass RFID TAGS</p>
</li>
</ul>
</blockquote>
<h2 id="files">Files</h2>
<ul>
    
    <li>
        

        
        

        <figure>
            <a target="_blank" href="https://karlquinsland.com/watch-band-rfid/images/eBay-listing.png">
                
            </a>
            
            <figcaption>
                <small>eBay listing for the RFID tag</small>
            </figcaption>
            
        </figure>

        
    </li>
    
    <li>
        
        <a target="_blank" href="https://karlquinsland.com/watch-band-rfid/files/fusion-export.step">
            <i class="far fa-file-"></i>
            files/fusion-export.step:
            
            
        </a>
        
    </li>
    
    <li>
        
        <a target="_blank" href="https://karlquinsland.com/watch-band-rfid/files/main.f3z">
            <i class="far fa-file-"></i>
            files/main.f3z:
            
            
        </a>
        
    </li>
    
    <li>
        

        
        

        <figure>
            <a target="_blank" href="https://karlquinsland.com/watch-band-rfid/images/official-medical-band-render.webp">
                
            </a>
            
            <figcaption>
                <small>The inspiration for this project</small>
            </figcaption>
            
        </figure>

        
    </li>
    
    <li>
        

        
        

        <figure>
            <a target="_blank" href="https://karlquinsland.com/watch-band-rfid/images/suggested-print-orientation.png">
                
            </a>
            
            <figcaption>
                <small>Suggested print orientation for best results</small>
            </figcaption>
            
        </figure>

        
    </li>
    
    <li>
        

        
        

        <figure>
            <a target="_blank" href="https://karlquinsland.com/watch-band-rfid/images/prototype01.jpg">
                
            </a>
            
            <figcaption>
                <small>Hopefully this gives you an idea of how the parts come together.</small>
            </figcaption>
            
        </figure>

        
    </li>
    
    <li>
        

        
        

        <figure>
            <a target="_blank" href="https://karlquinsland.com/watch-band-rfid/images/prototype02.jpg">
                
            </a>
            
            <figcaption>
                <small>A single watch band pin is used to secure the plastic part to the band.</small>
            </figcaption>
            
        </figure>

        
    </li>
    
    <li>
        

        
        

        <figure>
            <a target="_blank" href="https://karlquinsland.com/watch-band-rfid/images/prototype03.jpg">
                
            </a>
            
            <figcaption>
                <small>Installed on a watch band.</small>
            </figcaption>
            
        </figure>

        
    </li>
    
</ul>

]]></description></item><item><title>AKASO DL12 Dashcam Teardown</title><link>https://karlquinsland.com/akaso-dl12-teardown/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/akaso-dl12-teardown/</guid><description><![CDATA[<!-- markdownlint-disable-file MD002 -->
<h1 id="akaso-dl12-dashcam-teardown">AKASO DL12 Dashcam Teardown</h1>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            If the double yellow lines are in the middle of your rear-view mirror, you&#39;re doing it wrong.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>This was my dashcam for a while until the front camera stopped working.
It was a good dashcam while it lasted but there are better options now&hellip; so let&rsquo;s take it apart!</p>
<p>Ultimately, it&rsquo;s a highly integrated consumer-grade bit of electronics.
Everything&rsquo;s built down to a price and anything that didn&rsquo;t need to be done &hellip; wasn&rsquo;t.
There&rsquo;s not much to see and not much to say so this is a <a href="/tags/two-minute-teardown/" rel="">&ldquo;two minute teardown&rdquo; </a>.</p>
<h2 id="teardown">Teardown</h2>
<p>There are 4 screws holding the case together. They are hidden under the rubber feet.</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            There are 4 screws holding the case together. Remove and the case comes apart easily.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>Once the screws are removed, the case comes apart easily to reveal a mostly empty shell.
The LiPo battery is an interesting choice given the heat that can build up in a car.
As far as I know, this is only needed for the few seconds after power loss so the camera can save the current recording and shut down cleanly.</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Lift the screen side away to reveal the paltry internals
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>Close up of the rear of the main PCB shows a few test points and populated but unused connectors.</p>
<p>I love the <code>TV_IN</code> silkscreen for the rear camera connector. Almost makes me wonder if this was a re-purposed schematic from a different product.</p>
<p>Why there&rsquo;s a dedicated <code>RTC_BAT</code> connector and not sipper power from the main battery is a mystery to me.
The unit does have a GPS module so there&rsquo;s really no need for an RTC battery&hellip; just use the GPS time!</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Close up of the &#39;screen&#39; side of the main PCB. Not much to see here.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>The &lsquo;forward facing&rsquo; side of the PCB has a few more populated/un-used connectors and a heat-spreader over the main CPU.
The two push buttons in the top left are not accessible from the outside of the case so there&rsquo;s probably something interesting that happens when they&rsquo;re pressed.</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            The &#39;rear&#39; of the main PCB has a few unpopulated footprints and a flimsy heat-spreader.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>Removing it reveals a HiSilicon Hi3556 SoC, EEPROM and what is probably the image processor for the rear camera.
The large unpopulated footprint in the top right looks like it&rsquo;s meant for a radio module.
Not sure if it&rsquo;s for a wireless link to the rear camera or for something like a <a href="https://en.wikipedia.org/wiki/Tire-pressure_monitoring_system" target="_blank" rel="noopener noreffer">TPMS sensor</a> or possibly WiFi for a phone app.</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Close up of the most interesting part of the main PCB.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
        

    

    <figcaption>
        
        <p>
            The forward facing camera is in a swivel mount and is highly integrated; there&#39;s nothing under that black tape.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<h2 id="pcb-markings">PCB Markings</h2>
<p>AKA SEO optimization 😉</p>
<p>Main PCB is marked:</p>
<blockquote>
<p>77-56V200(20) V3.411</p>
<p>6105</p>
<p>V200-AMWG-V3.411
2019.12.03</p>
</blockquote>
<p>And on the rear:</p>
<blockquote>
<p>F02Z1B
F15Z1B</p>
</blockquote>
<p>The main CPU is <a href="https://silicondevice.com/file.upload/images/Gid1551Pdf_Hi3556%20V100%20HD%20Mobile%20Camera%20SoC%20Brief%20Data%20Sheet.pdf" target="_blank" rel="noopener noreffer">meant for consumer cameras</a> and is marked:</p>
<blockquote>
<p>Hi 3556</p>
<p>RBCV200</p>
<p>CP9881938</p>
<p>1939-CN</p>
</blockquote>
<p>The LCD is marked:</p>
<blockquote>
<p>XTY TB118-I4018E30A-01</p>
<p>T B118-45a164200402-J</p>
</blockquote>
<p>I can&rsquo;t find a datasheet for what I suspect is the rear-camera processor but it&rsquo;s marked:</p>
<blockquote>
<p>pixelplus</p>
<p>PR2020</p>
<p>S3CWN</p>
<p>KAG2006</p>
</blockquote>
<h2 id="firmware">Firmware</h2>
<p>Just for giggles, I dumped the firmware from the SPI flash to get an idea of what software powers this device.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ flashrom --force -c <span class="s2">&#34;GD25B128B/GD25Q128B&#34;</span> --verbose --programmer ch341a_spi --read oem.bin
</span></span><span class="line"><span class="cl">&lt;...&gt;
</span></span><span class="line"><span class="cl">Reading flash... 
</span></span><span class="line"><span class="cl">&lt;...&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>I did run <code>strings</code> on it and there&rsquo;s some mildly interesting stuff in there but nothing interesting enough to warrant a deep dive.</p>
<p><code>binwalk</code> didn&rsquo;t have any trouble extracting things but I&rsquo;m not going to spend any time reversing this firmware.</p>
<p>It looked like the usual &ldquo;bootloader and two identical copies of the application firmware&rdquo; setup.
Taking a look at what I think is the main application:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">Scan Time:     2024-08-02 16:52:43
</span></span><span class="line"><span class="cl">Target File:   /home/karl/scratch/dash-fw/_oem.bin.extracted/media_app.bin
</span></span><span class="line"><span class="cl">MD5 Checksum:  557e5a7578dfb20ed8328888479bc973
</span></span><span class="line"><span class="cl">Signatures:    <span class="m">436</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">DECIMAL       HEXADECIMAL     DESCRIPTION
</span></span><span class="line"><span class="cl">--------------------------------------------------------------------------------
</span></span><span class="line"><span class="cl"><span class="m">510070</span>        0x7C876         JBOOT STAG header, image id: 10, timestamp 0x3AF8E51B, image size: <span class="m">454878491</span> bytes, image JBOOT checksum: 0xE51B, header JBOOT checksum: 0x3233
</span></span><span class="line"><span class="cl"><span class="m">2689033</span>       0x290809        Certificate in DER format <span class="o">(</span>x509 v3<span class="o">)</span>, header length: 4, sequence length: <span class="m">5380</span>
</span></span><span class="line"><span class="cl"><span class="m">3038273</span>       0x2E5C41        Certificate in DER format <span class="o">(</span>x509 v3<span class="o">)</span>, header length: 4, sequence length: <span class="m">5380</span>
</span></span><span class="line"><span class="cl"><span class="m">3828721</span>       0x3A6BF1        Certificate in DER format <span class="o">(</span>x509 v3<span class="o">)</span>, header length: 4, sequence length: <span class="m">13692</span>
</span></span><span class="line"><span class="cl"><span class="m">4056525</span>       0x3DE5CD        ESP Image <span class="o">(</span>ESP32<span class="o">)</span>: segment count: 15, flash mode: QUIO, flash size: 2MB, entry address: 0x40006a7
</span></span><span class="line"><span class="cl"><span class="m">4732974</span>       0x48382E        eCos RTOS string reference: <span class="s2">&#34;eCostInSystem&#34;</span>
</span></span><span class="line"><span class="cl"><span class="m">4732991</span>       0x48383F        eCos RTOS string reference: <span class="s2">&#34;eCostInSystem&#34;</span>
</span></span><span class="line"><span class="cl"><span class="m">4771774</span>       0x48CFBE        TIFF image data, big-endian, offset of first image directory: <span class="m">8</span>
</span></span><span class="line"><span class="cl"><span class="m">4773180</span>       0x48D53C        TIFF image data, big-endian, offset of first image directory: <span class="m">8</span>
</span></span><span class="line"><span class="cl"><span class="m">4980260</span>       0x4BFE24        Unix path: /home/user04/work/kashite/3556-11.8-v1013-AKASO/osdrv/components/ipcm/ipcm/message/ipcm.c
</span></span><span class="line"><span class="cl"><span class="m">4982320</span>       0x4C0630        Unix path: /home/user04/work/kashite/3556-11.8-v1013-AKASO/osdrv/components/ipcm/ipcm/message/ipcm_data.c
</span></span><span class="line"><span class="cl"><span class="m">4983576</span>       0x4C0B18        Unix path: /home/user04/work/kashite/3556-11.8-v1013-AKASO/osdrv/platform/liteos/kernel/base/ipc/los_mux.c
</span></span><span class="line"><span class="cl"><span class="m">4983960</span>       0x4C0C98        Unix path: /home/user04/work/kashite/3556-11.8-v1013-AKASO/osdrv/platform/liteos/kernel/base/core/los_task.c
</span></span><span class="line"><span class="cl"><span class="m">4986708</span>       0x4C1754        Unix path: /home/user04/work/kashite/3556-11.8-v1013-AKASO/osdrv/platform/liteos/kernel/base/mem/mem_bestfit/los_memory.c
</span></span><span class="line"><span class="cl"><span class="m">4998096</span>       0x4C43D0        Unix path: /usr/local/etc/zoneinfo
</span></span><span class="line"><span class="cl"><span class="m">4999016</span>       0x4C4768        Unix path: /home/user04/work/kashite/3556-11.8-v1013-AKASO/osdrv/platform/liteos/lib/libc/src/time/time64.c
</span></span><span class="line"><span class="cl"><span class="m">5000336</span>       0x4C4C90        Unix path: /home/user04/work/kashite/3556-11.8-v1013-AKASO/osdrv/platform/liteos/compat/posix/src/pthread_mutex.c
</span></span><span class="line"><span class="cl"><span class="m">5001228</span>       0x4C500C        Unix path: /home/user04/work/kashite/3556-11.8-v1013-AKASO/osdrv/platform/liteos/fs/vfs/inode/fs_inode.c
</span></span><span class="line"><span class="cl"><span class="m">5006876</span>       0x4C661C        Unix path: /home/user04/work/kashite/3556-11.8-v1013-AKASO/osdrv/platform/liteos/platform/bsp/board/hi3556v200/include/hisoc/spi.h
</span></span><span class="line"><span class="cl"><span class="m">5194272</span>       0x4F4220        ESP Image <span class="o">(</span>ESP32<span class="o">)</span>: segment count: 11, flash mode: QUIO, flash speed: 40MHz, flash size: 1MB, entry address: 0x4003d1
</span></span><span class="line"><span class="cl"><span class="m">5363994</span>       0x51D91A        ESP Image <span class="o">(</span>ESP32<span class="o">)</span>: segment count: 1, flash mode: QUIO, flash speed: 40MHz, flash size: 1MB, entry address: 0x0
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>Arizer XQ2 Teardown</title><link>https://karlquinsland.com/arizer-xq2-teardown/</link><pubDate>Mon, 01 Jul 2024 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/arizer-xq2-teardown/</guid><description><![CDATA[<!-- markdownlint-disable-file MD002 -->
<h1 id="arizer-xq2-teardown">Arizer XQ2 Teardown</h1>
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>A friend of mine reached out and asked me about automating some aspects of their <a href="https://www.webmd.com/balance/stress-management/aromatherapy-overview" target="_blank" rel="noopener noreffer">aroma therapy</a> treatment.</p>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>Note<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">I was not given permission to share the specifics of their medical condition or the larger treatment plan so this post is going to deal with <em>just</em> the technical aspects of the device.</div>
        </div>
    </div>
<p>The device they&rsquo;re using for aromatherapy is the <a href="https://arizer.com/xq2/" target="_blank" rel="noopener noreffer">Arizer XQ2</a> and we agreed that integration with their existing Home Assistant setup would be ideal.</p>
<p>I know nothing about aroma therapy but I do suffer from an obsession that compels me to integrate ESPHome with <em>everything</em>&hellip;I was intrigued!</p>
<p>At worst, I get a new toy to tear down and at best, I&rsquo;d be able to deliver a solution that would make their life a little easier.</p>
<h2 id="the-plan">The plan</h2>
<p>First, the bad news.</p>
<p>There&rsquo;s next to no technical information about the XQ2 online.</p>
<p>The device has no radio connectivity so there&rsquo;s no FCC filings.
There are several reviews of the device online, but none of them tear it down or provide any technical information.</p>
<p>Now, the good news.</p>
<p>The device does have an IR remote control!</p>
<p>It is not difficult to capture the IR signals from the remote and replay them with an ESP32 or similar device.
This meant that the likely outcome would be an <a href="https://en.wikipedia.org/wiki/Open-loop_controller" target="_blank" rel="noopener noreffer">open-loop control system</a>; building something to to send commands to the device would be trivial but confirming that a particular command had been executed would be tedious at best.</p>
<p>This put us in an awkward position.</p>
<p>After some back and forth, we agreed that closed-loop would be ideal, but open-loop control would be acceptable for their needs given that the device is meant to be used in close proximity to the user and already features a few safety features.</p>
<p>Unless there was some lucky break discovered while tearing down the device, I&rsquo;d be stuck with emulating the IR remote control.
This isn&rsquo;t ideal, but it also means that there&rsquo;s virtually no risk that any of the built-in safety features would be bypassed/disabled.</p>
<h2 id="teardown">Teardown</h2>
<p>The manufacturer has clearly designed this thing to be serviceable!</p>
<p>They <a href="https://vimeo.com/648841530" target="_blank" rel="noopener noreffer">have a guide</a> for replacing a common wear item (the ceramic heating element) and it turns out that the rest of the device is just as easy to access.</p>
<p>From the bottom of the device, there are 4 rubber feet that can be removed to reveal 4 screws.
Amazingly, these feet are NOT glued in <em>and</em> they have tiny holes in them to allow the screws to be removed without removing the feet! 😚👌.</p>
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Once the screws are removed, the bottom cover just lifts off.
Again, no glue, no clips, no nothing!</p>
<p>This reveals the main PCB. I&rsquo;ve identified a few of the main ICs <a href="#notable-chips-and-stuff" rel="">below</a>.</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            View from the bottom just after removing the panel.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Close up of the main application processor.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>Note that the DC jack is on a separate board that is easily removed.
This is a nice touch as it makes it easy to replace if it ever breaks; it&rsquo;s a standard 5.5mm OD barrel jack so sourcing a replacement should be easy.</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Close up of the two MOSFETs used to control the heating element.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>The PCB is <em>almost</em> entirely single sided; only a few passives and connectors for the various peripherals are on the top side.</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            The top side of the main PCB. Sorry for the off-center angle and the glare.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>The power supply isn&rsquo;t exotic so sourcing a replacement should be easy if it ever fails.
It&rsquo;s also worth noting that the 19V / 3.42A rated output is <em>really close</em> to 20V / 3 A output profile from <a href="https://web.archive.org/web/20190711152956/https://github.com/vi117/ppkos/blob/master/extdoc/usb_31_060115/USB%20Type-C/USB%20Type-C%20Specification%20Release%201.1.pdf" target="_blank" rel="noopener noreffer">USB-C PD 1.0 spec</a> and totally within the adjustable range of a USB-C PD 2.0+ power supply.
It should be possible to adapt this device to use USB-C PD power with minimal effort if needed.</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Power supply is pretty standard; feels well made.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>All in all, I&rsquo;m impressed with the build quality of the device!</p>
<p>It&rsquo;s well made and easy to service. No glue or clips to break, no hidden screws to find, no proprietary connectors to deal with.</p>
<p>The main PCB is well laid out, all components are marked with crisp silkscreen and nobody lasered off the markings on the ICs.</p>
<p>The most dangerous part of the device it the heating element and there are <em>multiple</em> heat-shields between it and the user and all the heat-shields are easily replaceable!</p>
<p>The PCB designer also knew that MOSFETs can fail short so they use both a high <em>and</em> low side FET to control the heating element!</p>
<p>Normally little piezo beepers are annoying but this one can be attenuated or disabled in software.</p>
<p>I was pleasantly surprised to find that the device <em>does</em> have a UART and programming port onboard <strong>but I was not given permission to probe further.</strong></p>
<p>My friend decided that IR control would be sufficient for their needs so I don&rsquo;t have any more information about the UART.</p>
<h3 id="notable-chips-and-stuff">Notable Chips and stuff</h3>
<ul>
<li><code>SWM260CBT7-50</code>: This is the main application processor. The manufacturer&rsquo;s <a href="https://www.synwit.cn/gaishu313/" target="_blank" rel="noopener noreffer">product details page</a> has both a (Chinese) <a href="https://www.synwit.cn/uploads/soft/20221222/1-221222144341C1.pdf" target="_blank" rel="noopener noreffer">datasheet</a> and a collection of <a href="https://www.synwit.cn/uploads/soft/20231114/1-23111414411W47.rar" target="_blank" rel="noopener noreffer">reference code</a>.</li>
</ul>
<p>Assuming the read/write protect fuses aren&rsquo;t blown, it should be possible to dump the firmware from this chip and possibly come up with an open-source replacement firmware for the device.
With the UART so nicely broken out, adding in an ESP32 or similar to provide wireless control should be trivial&hellip; :D.</p>
<ul>
<li>
<p><a href="https://item.szlcsc.com/5893434.html" target="_blank" rel="noopener noreffer"><code>CMOS CMS6679</code></a>: MOSFET driver for the heating element.</p>
</li>
<li>
<p><a href="https://www.mouser.com/ProductDetail/Toshiba/TPC8062-HLQCM?qs=QrGA9tEX17N%2FMHC76X%252B99w%3D%3D" target="_blank" rel="noopener noreffer"><code>TPC8062</code></a>: MOSFET driver for the heating element.</p>
</li>
</ul>
<h2 id="esphome-ir-remote">ESPHome IR Remote</h2>
<p>I already mentioned this above but it&rsquo;s worth repeating!</p>
<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>Open Loop controls suck<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>Basically, the code below emulates the IR remote control that comes with the device.
As there is no way for the device to communicate back to the original remote to say &ldquo;I got your command&rdquo; or &ldquo;I&rsquo;m busy right now, try again later&rdquo;, there&rsquo;s no way to know if the device is in the state you think it is.</p>
<p>The human operator can see the device&rsquo;s state and confirm that it&rsquo;s doing what they want&hellip; but this is <em>not</em> the case for the ESPHome/Home Assistant integration.</p>
<p>The device also has a few safety features built in that the &ldquo;remote&rdquo; can&rsquo;t bypass.
If - somehow - the integration becomes fully broken, it&rsquo;s no different from sitting on the remote or otherwise spamming some signal.
In this case, the device will still operate safely.</p>
</div>
        </div>
    </div>
<p>If you understand the risks and still want to proceed, here&rsquo;s a simple ESPHome configuration that will allow you to control the XQ2 via IR blaster.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">button</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Power&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_press</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">remote_transmitter.transmit_nec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">address</span><span class="p">:</span><span class="w"> </span><span class="l">0xFE01</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="l">0xE41B</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command_repeats</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Fan Off&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_press</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">remote_transmitter.transmit_nec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">address</span><span class="p">:</span><span class="w"> </span><span class="l">0xFE01</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="l">0xFE01</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command_repeats</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Fan Low&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_press</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">remote_transmitter.transmit_nec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">address</span><span class="p">:</span><span class="w"> </span><span class="l">0xFE01</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="l">0xF609</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command_repeats</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Fan Med&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_press</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">remote_transmitter.transmit_nec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">address</span><span class="p">:</span><span class="w"> </span><span class="l">0xFE01</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="l">0xFB04</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command_repeats</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Fan High&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_press</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">remote_transmitter.transmit_nec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">address</span><span class="p">:</span><span class="w"> </span><span class="l">0xFE01</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="l">0xF807</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command_repeats</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Preset 1&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_press</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">remote_transmitter.transmit_nec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">address</span><span class="p">:</span><span class="w"> </span><span class="l">0xFE01</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="l">0xEF10</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command_repeats</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Preset 2&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_press</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">remote_transmitter.transmit_nec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">address</span><span class="p">:</span><span class="w"> </span><span class="l">0xFE01</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="l">0xF906</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command_repeats</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Preset 3&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_press</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">remote_transmitter.transmit_nec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">address</span><span class="p">:</span><span class="w"> </span><span class="l">0xFE01</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="l">0xE01F</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command_repeats</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Temp UP&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_press</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">remote_transmitter.transmit_nec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">address</span><span class="p">:</span><span class="w"> </span><span class="l">0xFE01</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="l">0xFA05</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command_repeats</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Temp DOWN&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_press</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">remote_transmitter.transmit_nec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">address</span><span class="p">:</span><span class="w"> </span><span class="l">0xFE01</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="l">0xF50A</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command_repeats</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Speaker&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_press</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">remote_transmitter.transmit_nec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">address</span><span class="p">:</span><span class="w"> </span><span class="l">0xFE01</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="l">0xED12</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command_repeats</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Auto Off Timer&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_press</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">remote_transmitter.transmit_nec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">address</span><span class="p">:</span><span class="w"> </span><span class="l">0xFE01</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="l">0xF708</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command_repeats</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Light&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_press</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">remote_transmitter.transmit_nec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">address</span><span class="p">:</span><span class="w"> </span><span class="l">0xFE01</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="l">0xE11E</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command_repeats</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">remote_transmitter</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">transmitter</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">pin</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Your values here will likely be different</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO14</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">output</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">carrier_duty_percent</span><span class="p">:</span><span class="w"> </span><span class="m">50</span><span class="l">%</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>Using ESPHome to Automatically restart frozen cable modem</title><link>https://karlquinsland.com/automatic-modem-restart-with-esphome/</link><pubDate>Sun, 09 Jun 2024 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/automatic-modem-restart-with-esphome/</guid><description><![CDATA[<!-- markdownlint-disable-file MD002 -->
<p>Part of the reason for developing my <a href="/arris-sb8200-prometheus-exporter/" rel="">SB8200 monitor</a> was to get to the bottom of some infrequent but regular outages.</p>
<p>To make a long story short, the <a href="https://en.wikipedia.org/wiki/Link_aggregation" target="_blank" rel="noopener noreffer">LAG</a> implementation on the modem seems to have some issues.
A quick google will return many complaint threads detailing issues with the modem regularly locking up all traffic stopping.
More annoyingly, these reports date back <em>years</em> and allege that later revisions of the firmware <em>might</em> fix the issue for good.</p>
<p>My ISP is <a href="https://deadline.com/2014/09/netflix-discovery-response-comcast-extortion-840530" target="_blank" rel="noopener noreffer">evil</a> and doesn&rsquo;t give me a way to check for or manually update the firmware on device.</p>
<p>As expected, their stance is that all my issues will go away if I rent  <em>their</em> modem and let them up-sell me a faster service tier, though 🙄.</p>
<p>When the modem falls over, it&rsquo;s pretty sudden; things will be fine one moment and then no traffic flows the next.
The exact timing seems to vary a bit, but the average time between lockups is about 10 days with very little variance.</p>
<p>I&rsquo;ve been &ldquo;lucky&rdquo; in the sense that most of these lockups have happened during the day while I was at home; I could notice the issue, triage and fix it pretty quickly.
My dashboards have at most 300 seconds of down time or so.</p>
<p>There&rsquo;s only so much luck to go around, though; what happens when I&rsquo;m out of the house?I&rsquo;ve been thinking about how to automate the process of restarting the modem and this is what I came up with.</p>
<h2 id="the-fix">The &ldquo;fix&rdquo;</h2>
<p>My modem is powered through a <a href="https://devices.esphome.io/devices/Sonoff-S31" target="_blank" rel="noopener noreffer">Sonoff S31 plug</a> running <a href="https://esphome.io/" target="_blank" rel="noopener noreffer">ESPHome</a>.</p>
<p>Every 10 seconds, the S31 tries to fetch the modem&rsquo;s http interface using the <a href="https://esphome.io/components/http_request.html" target="_blank" rel="noopener noreffer"><code>http_request</code></a> component.
If - after 2 seconds - the modem doesn&rsquo;t respond, a counter is incremented.
Once the counter reaches 5 consecutive failures, the power to the modem is briefly interrupted just as if I had unplugged it, counted to 10 and plugged it back in.</p>
<p>To make this bit of ESPHome configuration re-usable, I&rsquo;ve packaged up the functionality into a pair of standalone files that can be included into an existing ESPHome configuration.</p>
<p>Documentation for why/how things work has been put in the comments of each file to aid understanding.</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            How the S31 powering modem appears in Home Assistant
            
                
                
        </p> 
    </figcaption>
    
</figure>


<h3 id="baseyaml"><code>base.yaml</code></h3>
<p>This implements 95% of the logic and everything that&rsquo;s not implementation specific:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span><span class="lnt">160
</span><span class="lnt">161
</span><span class="lnt">162
</span><span class="lnt">163
</span><span class="lnt">164
</span><span class="lnt">165
</span><span class="lnt">166
</span><span class="lnt">167
</span><span class="lnt">168
</span><span class="lnt">169
</span><span class="lnt">170
</span><span class="lnt">171
</span><span class="lnt">172
</span><span class="lnt">173
</span><span class="lnt">174
</span><span class="lnt">175
</span><span class="lnt">176
</span><span class="lnt">177
</span><span class="lnt">178
</span><span class="lnt">179
</span><span class="lnt">180
</span><span class="lnt">181
</span><span class="lnt">182
</span><span class="lnt">183
</span><span class="lnt">184
</span><span class="lnt">185
</span><span class="lnt">186
</span><span class="lnt">187
</span><span class="lnt">188
</span><span class="lnt">189
</span><span class="lnt">190
</span><span class="lnt">191
</span><span class="lnt">192
</span><span class="lnt">193
</span><span class="lnt">194
</span><span class="lnt">195
</span><span class="lnt">196
</span><span class="lnt">197
</span><span class="lnt">198
</span><span class="lnt">199
</span><span class="lnt">200
</span><span class="lnt">201
</span><span class="lnt">202
</span><span class="lnt">203
</span><span class="lnt">204
</span><span class="lnt">205
</span><span class="lnt">206
</span><span class="lnt">207
</span><span class="lnt">208
</span><span class="lnt">209
</span><span class="lnt">210
</span><span class="lnt">211
</span><span class="lnt">212
</span><span class="lnt">213
</span><span class="lnt">214
</span><span class="lnt">215
</span><span class="lnt">216
</span><span class="lnt">217
</span><span class="lnt">218
</span><span class="lnt">219
</span><span class="lnt">220
</span><span class="lnt">221
</span><span class="lnt">222
</span><span class="lnt">223
</span><span class="lnt">224
</span><span class="lnt">225
</span><span class="lnt">226
</span><span class="lnt">227
</span><span class="lnt">228
</span><span class="lnt">229
</span><span class="lnt">230
</span><span class="lnt">231
</span><span class="lnt">232
</span><span class="lnt">233
</span><span class="lnt">234
</span><span class="lnt">235
</span><span class="lnt">236
</span><span class="lnt">237
</span><span class="lnt">238
</span><span class="lnt">239
</span><span class="lnt">240
</span><span class="lnt">241
</span><span class="lnt">242
</span><span class="lnt">243
</span><span class="lnt">244
</span><span class="lnt">245
</span><span class="lnt">246
</span><span class="lnt">247
</span><span class="lnt">248
</span><span class="lnt">249
</span><span class="lnt">250
</span><span class="lnt">251
</span><span class="lnt">252
</span><span class="lnt">253
</span><span class="lnt">254
</span><span class="lnt">255
</span><span class="lnt">256
</span><span class="lnt">257
</span><span class="lnt">258
</span><span class="lnt">259
</span><span class="lnt">260
</span><span class="lnt">261
</span><span class="lnt">262
</span><span class="lnt">263
</span><span class="lnt">264
</span><span class="lnt">265
</span><span class="lnt">266
</span><span class="lnt">267
</span><span class="lnt">268
</span><span class="lnt">269
</span><span class="lnt">270
</span><span class="lnt">271
</span><span class="lnt">272
</span><span class="lnt">273
</span><span class="lnt">274
</span><span class="lnt">275
</span><span class="lnt">276
</span><span class="lnt">277
</span><span class="lnt">278
</span><span class="lnt">279
</span><span class="lnt">280
</span><span class="lnt">281
</span><span class="lnt">282
</span><span class="lnt">283
</span><span class="lnt">284
</span><span class="lnt">285
</span><span class="lnt">286
</span><span class="lnt">287
</span><span class="lnt">288
</span><span class="lnt">289
</span><span class="lnt">290
</span><span class="lnt">291
</span><span class="lnt">292
</span><span class="lnt">293
</span><span class="lnt">294
</span><span class="lnt">295
</span><span class="lnt">296
</span><span class="lnt">297
</span><span class="lnt">298
</span><span class="lnt">299
</span><span class="lnt">300
</span><span class="lnt">301
</span><span class="lnt">302
</span><span class="lnt">303
</span><span class="lnt">304
</span><span class="lnt">305
</span><span class="lnt">306
</span><span class="lnt">307
</span><span class="lnt">308
</span><span class="lnt">309
</span><span class="lnt">310
</span><span class="lnt">311
</span><span class="lnt">312
</span><span class="lnt">313
</span><span class="lnt">314
</span><span class="lnt">315
</span><span class="lnt">316
</span><span class="lnt">317
</span><span class="lnt">318
</span><span class="lnt">319
</span><span class="lnt">320
</span><span class="lnt">321
</span><span class="lnt">322
</span><span class="lnt">323
</span><span class="lnt">324
</span><span class="lnt">325
</span><span class="lnt">326
</span><span class="lnt">327
</span><span class="lnt">328
</span><span class="lnt">329
</span><span class="lnt">330
</span><span class="lnt">331
</span><span class="lnt">332
</span><span class="lnt">333
</span><span class="lnt">334
</span><span class="lnt">335
</span><span class="lnt">336
</span><span class="lnt">337
</span><span class="lnt">338
</span><span class="lnt">339
</span><span class="lnt">340
</span><span class="lnt">341
</span><span class="lnt">342
</span><span class="lnt">343
</span><span class="lnt">344
</span><span class="lnt">345
</span><span class="lnt">346
</span><span class="lnt">347
</span><span class="lnt">348
</span><span class="lnt">349
</span><span class="lnt">350
</span><span class="lnt">351
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">substitutions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># How many seconds between http requests</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">poll_interval_seconds</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;10&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># How many failed requests before we take action</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># If polling happens every 10 seconds and runs for at most 2 seconds then</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 5 failures in a row would mean that the host has been in a failed state for</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># somewhere between 50 and 60 seconds before we take action.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">consecutive_failure_threshold</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;5&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># How many polls to wait for until action can be taken again</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">lockout_ticks_count</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;20&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">globals</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># How many seconds between checking the remote host</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_http_poll_interval_ticks</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_value</span><span class="p">:</span><span class="w"> </span><span class="kc">yes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">initial_value</span><span class="p">:</span><span class="w"> </span><span class="l">${poll_interval_seconds}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Not clear if script execution is blocked while the http request is in flight.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># It appears to be, so I might be able to safely remove this?</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">_glbl_http_poll_request_in_flight</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">bool</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_value</span><span class="p">:</span><span class="w"> </span><span class="kc">no</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">initial_value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;false&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Lockout/cool-down prevents a failed result from immediately triggering another cycle</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># E.g.: if the poll target is down and we power cycle it and then immediately check... it won&#39;t respond</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># which will mean another power cycle ...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">_glbl_http_poll_lockout_ticks</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_value</span><span class="p">:</span><span class="w"> </span><span class="kc">yes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">initial_value</span><span class="p">:</span><span class="w"> </span><span class="l">${lockout_ticks_count}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Need to keep track of the number of ticks since we last took the failure action</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">_glbl_http_poll_ticks_since_last_failure_action</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_value</span><span class="p">:</span><span class="w"> </span><span class="kc">no</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">initial_value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Monotonically increasing counter</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">_glbl_http_poll_ticks</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_value</span><span class="p">:</span><span class="w"> </span><span class="kc">no</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">initial_value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># How many failures have we had?</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">_glbl_http_poll_failures_count</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_value</span><span class="p">:</span><span class="w"> </span><span class="kc">no</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">initial_value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># How many failures before we do something?</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_http_poll_failures_threshold</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_value</span><span class="p">:</span><span class="w"> </span><span class="kc">no</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">initial_value</span><span class="p">:</span><span class="w"> </span><span class="l">${consecutive_failure_threshold}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Allows for disconnecting consecutive failure action if needed.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">_glbl_http_poll_consecutive_failure_action_enabled</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">bool</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_value</span><span class="p">:</span><span class="w"> </span><span class="kc">no</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">initial_value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;true&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Expose the current state of the poll/lockout timer</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">text_sensor</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;HTTP Poll Status&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">txt_operation_mode</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:information-off-outline&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;diagnostic&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Will be called to update as necessary from other components</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">update_interval</span><span class="p">:</span><span class="w"> </span><span class="l">never</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      // This lambda function should never be called / we should never update the text sensor this way
</span></span></span><span class="line"><span class="cl"><span class="sd">      return {&#34;Unknown&#34;};</span><span class="w">      
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Expose the current success/failure counts for stats</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">sensor</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Consecutive Poll Failure Count&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">s_consecutive_poll_failure_count</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:progress-alert&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;diagnostic&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      if (id(_glbl_http_poll_failures_count)) {
</span></span></span><span class="line"><span class="cl"><span class="sd">        return id(_glbl_http_poll_failures_count);
</span></span></span><span class="line"><span class="cl"><span class="sd">      } else {
</span></span></span><span class="line"><span class="cl"><span class="sd">        return 0.0;
</span></span></span><span class="line"><span class="cl"><span class="sd">      }</span><span class="w">      
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Will be called to update as necessary from other components</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">update_interval</span><span class="p">:</span><span class="w"> </span><span class="l">never</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Allow tweaking the poll interval and failure threshold via Home Assistant</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># See: https://esphome.io/components/number/template.html</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">number</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Poll Interval&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">num_poll_interval</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:timer-sand&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;config&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">unit_of_measurement</span><span class="p">:</span><span class="w"> </span><span class="l">seconds</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">box</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">min_value</span><span class="p">:</span><span class="w"> </span><span class="m">2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">max_value</span><span class="p">:</span><span class="w"> </span><span class="m">120</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">step</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      return (int) id(glbl_http_poll_interval_ticks);</span><span class="w">      
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">set_action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Store the val</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">globals.set</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_http_poll_interval_ticks</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span>!<span class="l">lambda |-</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="l">return (int) x;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Consecutive Failure Threshold&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">num_consecutive_failure_threshold</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:alert-minus-outline&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;config&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">unit_of_measurement</span><span class="p">:</span><span class="w"> </span><span class="l">failures</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">box</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">min_value</span><span class="p">:</span><span class="w"> </span><span class="m">2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">max_value</span><span class="p">:</span><span class="w"> </span><span class="m">10</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">step</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      return (int) id(glbl_http_poll_failures_threshold);</span><span class="w">      
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">set_action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Store the val</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">globals.set</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_http_poll_failures_threshold</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span>!<span class="l">lambda |-</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="l">return (int) x;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">switch</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># A global arm/disarm switch for the http poll</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;HTTP Request Check&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">sw_http_request</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:web-sync&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;config&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># It&#39;s OK to have this set to ON at boot since we immediately go into lockout mode before we start polling</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_mode</span><span class="p">:</span><span class="w"> </span><span class="l">RESTORE_DEFAULT_ON</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># This way we don&#39;t need to create a global for the state</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">optimistic</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_turn_on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">script.execute</span><span class="p">:</span><span class="w"> </span><span class="l">_on_http_poll_turned_on</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_turn_off</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">script.execute</span><span class="p">:</span><span class="w"> </span><span class="l">_on_http_poll_turned_off</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># In addition to polling, also gate the actual consecutive failure action.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># This way, action can be disabled without disabling the polling itself; useful for testing polling</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#   or just gathering stats about how often the poll fails...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Consecutive Failure Action Enable&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">sw_cons_failure_action</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:alert-outline&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;config&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># It&#39;s OK to have this set to ON at boot since we immediately go into lockout mode before we start polling</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_mode</span><span class="p">:</span><span class="w"> </span><span class="l">RESTORE_DEFAULT_ON</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># This way we don&#39;t need to create a global for the state</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      return id(_glbl_http_poll_consecutive_failure_action_enabled);</span><span class="w">      
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">turn_on_action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">globals.set</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">_glbl_http_poll_consecutive_failure_action_enabled</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;true&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">turn_off_action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">globals.set</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">_glbl_http_poll_consecutive_failure_action_enabled</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;false&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">script</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># When polling starts back up, we have some variable initialization to do</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">_on_http_poll_turned_on</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">single</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_glbl_http_poll_ticks) = 0;
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_glbl_http_poll_ticks_since_last_failure_action) = 0;
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_glbl_http_poll_failures_count) = 0;
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_glbl_http_poll_request_in_flight) = false;
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(txt_operation_mode).publish_state(&#34;Armed&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_http_poll_tick).execute();</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># When polling function is turned off, there&#39;s a few things to clean up</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">_on_http_poll_turned_off</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">single</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_glbl_http_poll_ticks) = 0;
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_glbl_http_poll_ticks_since_last_failure_action) = 0;
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_glbl_http_poll_request_in_flight) = false;
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(txt_operation_mode).publish_state(&#34;Disarmed&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_do_poll).stop();
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_http_poll_tick).stop();</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># What do we do when we get a 200 response?</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">_on_http_poll_ok</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">single</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Poll was OK, indicate status and reset the _glbl_http_poll_failures_count</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          auto const static TAG = &#34;_on_http_poll_ok&#34;;
</span></span></span><span class="line"><span class="cl"><span class="sd">          ESP_LOGD(TAG, &#34;Poll OK. Resetting failure count.&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_glbl_http_poll_failures_count) = 0;
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(s_consecutive_poll_failure_count).update();
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(txt_operation_mode).publish_state(&#34;Success&#34;);</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># What do we do when we get a non-200 response?</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">_on_http_poll_failure</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">single</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Disable timer, have the text sensor update</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          auto const static TAG = &#34;_on_http_poll_failure&#34;;
</span></span></span><span class="line"><span class="cl"><span class="sd">          // Count and publish
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_glbl_http_poll_failures_count)++;
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(s_consecutive_poll_failure_count).update();
</span></span></span><span class="line"><span class="cl"><span class="sd">          
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(txt_operation_mode).publish_state(&#34;Failure&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">          ESP_LOGW(TAG, &#34;Failures: %i, Threshold: %i&#34;, id(_glbl_http_poll_failures_count), id(glbl_http_poll_failures_threshold));
</span></span></span><span class="line"><span class="cl"><span class="sd">          
</span></span></span><span class="line"><span class="cl"><span class="sd">          if( id(_glbl_http_poll_failures_count) &gt;= id(glbl_http_poll_failures_threshold) ) {
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(_on_http_poll_failure_threshold_met).execute();
</span></span></span><span class="line"><span class="cl"><span class="sd">          }</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># And when failure count reaches threshold, what do we do?</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">_on_http_poll_failure_threshold_met</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">single</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Disable timer, have the text sensor update</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          auto const static TAG = &#34;_on_http_poll_failure_threshold_met&#34;;
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          ESP_LOGE(TAG, &#34;Consecutive failure threshold met!&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">          if (id(_glbl_http_poll_consecutive_failure_action_enabled)) {
</span></span></span><span class="line"><span class="cl"><span class="sd">            ESP_LOGE(TAG, &#34;Executing action!&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">            // User must provide _valid_ C++ code here to be substituted in at compile time
</span></span></span><span class="line"><span class="cl"><span class="sd">            ${failure_threshold_met_action}
</span></span></span><span class="line"><span class="cl"><span class="sd">          } else {
</span></span></span><span class="line"><span class="cl"><span class="sd">            ESP_LOGE(TAG, &#34;Action disabled!&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">          }
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          // Reset the failure count
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_glbl_http_poll_failures_count) = 0;
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(s_consecutive_poll_failure_count).update();
</span></span></span><span class="line"><span class="cl"><span class="sd">          // Reset the time since last failure counter to enter lockout mode
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_glbl_http_poll_ticks_since_last_failure_action) = 0;</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">_do_poll</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># DO NOT start a new run until the previous one completes!</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">single</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Tell the user we&#39;re polling</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          // Indicate we are now polling
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(txt_operation_mode).publish_state(&#34;Polling&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_glbl_http_poll_request_in_flight) = true;</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Fire off the http request</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">http_request.get</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">http_poll</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">${http_url}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">verify_ssl</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="c"># In testing, was able to confirm that this will be called even if there&#39;s an error.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="c"># If failure occurred before HTTP could happen, status will be negative integer</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="c"># ESPHome does not permit defining lambda functions &#34;externally&#34;... but we can do this with scripts.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="c"># To make this package as re-usable as possible, call into a `handle_on_response` script and expect the user</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="c"># to provide one at compile time.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">on_response</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">script.execute</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">handle_on_response</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">status_code</span><span class="p">:</span><span class="w"> </span>!<span class="l">lambda |- </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="l">return status_code;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">duration_ms</span><span class="p">:</span><span class="w"> </span>!<span class="l">lambda |-</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="l">return duration_ms;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">_http_poll_tick</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Start a new run after previous runs completes. This will happen until timer.stop() is called on us</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">queued</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">max_runs</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># A single &#39;tick&#39; is 1 second long</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">delay</span><span class="p">:</span><span class="w"> </span><span class="l">1s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          /*
</span></span></span><span class="line"><span class="cl"><span class="sd">            The &#34;super loop&#34; scheduler.
</span></span></span><span class="line"><span class="cl"><span class="sd">            This script is called every second and is responsible for determining if it&#39;s time to poll the target.
</span></span></span><span class="line"><span class="cl"><span class="sd">          */
</span></span></span><span class="line"><span class="cl"><span class="sd">          auto const static TAG = &#34;lambda._http_poll_tick&#34;;
</span></span></span><span class="line"><span class="cl"><span class="sd">          static int num_ticks = 0;
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          // Count this tick
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_glbl_http_poll_ticks) += 1;
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_glbl_http_poll_ticks_since_last_failure_action)++;
</span></span></span><span class="line"><span class="cl"><span class="sd">          num_ticks = id(_glbl_http_poll_ticks);
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          // Are we supposed to be running at all?
</span></span></span><span class="line"><span class="cl"><span class="sd">          if( !id(sw_http_request) ) {
</span></span></span><span class="line"><span class="cl"><span class="sd">            ESP_LOGD(TAG, &#34;Not running. sw_http_request: %i&#34;, id(sw_http_request).state);
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(_on_http_poll_turned_off).execute();
</span></span></span><span class="line"><span class="cl"><span class="sd">            return;
</span></span></span><span class="line"><span class="cl"><span class="sd">          }
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          // Check if there&#39;s already a request in flight.
</span></span></span><span class="line"><span class="cl"><span class="sd">          // Note that there appears to be a yaml only way of checking if a script is already running?
</span></span></span><span class="line"><span class="cl"><span class="sd">          // I can&#39;t find an API that allows me to do this ... so for now we have to keep track of this flag in a global bool.
</span></span></span><span class="line"><span class="cl"><span class="sd">          if (id(_glbl_http_poll_request_in_flight)) {
</span></span></span><span class="line"><span class="cl"><span class="sd">            ESP_LOGD(TAG, &#34;Request in flight! Nothing to do...&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(_on_http_poll_turned_off).execute();
</span></span></span><span class="line"><span class="cl"><span class="sd">            return;
</span></span></span><span class="line"><span class="cl"><span class="sd">          }
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          // We should be running and there is currently no request in flight... Are we in lockout?
</span></span></span><span class="line"><span class="cl"><span class="sd">          if( id(_glbl_http_poll_ticks_since_last_failure_action) &lt; id(_glbl_http_poll_lockout_ticks) ) {
</span></span></span><span class="line"><span class="cl"><span class="sd">            ESP_LOGD(TAG, &#34;In lockout! ticks_since_last_failure_action: %i, lockout_ticks: %i&#34;, id(_glbl_http_poll_ticks_since_last_failure_action), id(_glbl_http_poll_lockout_ticks));
</span></span></span><span class="line"><span class="cl"><span class="sd">            
</span></span></span><span class="line"><span class="cl"><span class="sd">            // TODO: add the lockout time remaining to the text sensor?
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(txt_operation_mode).publish_state(&#34;Locked Out&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(_http_poll_tick).execute();
</span></span></span><span class="line"><span class="cl"><span class="sd">            return;
</span></span></span><span class="line"><span class="cl"><span class="sd">          }
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          // We&#39;re not in lock out...Is it time to poll?
</span></span></span><span class="line"><span class="cl"><span class="sd">          if( num_ticks % id(glbl_http_poll_interval_ticks) != 0 ) {
</span></span></span><span class="line"><span class="cl"><span class="sd">            ESP_LOGD(TAG, &#34;Not time to poll. num_ticks: %i, interval_ticks: %i&#34;, num_ticks, id(glbl_http_poll_interval_ticks));
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(txt_operation_mode).publish_state(&#34;Waiting&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">          } else {
</span></span></span><span class="line"><span class="cl"><span class="sd">            ESP_LOGD(TAG, &#34;Time to poll! num_ticks: %i, glbl_http_poll_interval_ticks: %i&#34;, num_ticks, id(glbl_http_poll_interval_ticks));
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(_do_poll).execute();
</span></span></span><span class="line"><span class="cl"><span class="sd">          }
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          // re-schedule so we&#39;re called again in a second!
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_http_poll_tick).execute();</span><span class="w">          
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="modemyaml"><code>modem.yaml</code></h3>
<p>This file is the &ldquo;implementation specific&rdquo; details that can&rsquo;t be done in <code>base.yaml</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">packages</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">base</span><span class="p">:</span><span class="w"> </span>!<span class="l">include</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">file</span><span class="p">:</span><span class="w"> </span><span class="l">base.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">vars</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Comcast does not permit users to change this address on their own modems... 😡</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">http_url</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;http://192.168.100.1&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># When enough consecutive failures have been detected, this is what is &#34;injected&#34; into the</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># `_on_http_poll_failure_threshold_met` script. It must be _valid_ c++ code or compilation will fail.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Elsewhere in my main ESPHome configuration, I have button that triggers an automation to </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># briefly cut and then restore power to effectively power cycle the modem.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># This code is the same as the user manually pressing that button.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">failure_threshold_met_action</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;id(btn_modem_restart).press();&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># In testing, the web server on modem does come up quickly but seems to go back down after</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># ISP pushes their configuration down. Web server comes back up a few seconds later.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Best to just wait a while for things to stabilize.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">lockout_ticks_count</span><span class="p">:</span><span class="w"> </span><span class="m">120</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Note: not possible to have this defined in `base.yaml` and tweaked with !extend here</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># See: https://github.com/esphome/issues/issues/5360</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">http_request</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">http_poll</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">follow_redirects</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">timeout</span><span class="p">:</span><span class="w"> </span><span class="l">2s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Note: omit this for ESP32 devices :)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">esp8266_disable_ssl_support</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># This is where a request result is classified into either a failure or success.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># It lives outside of the base package because each http server is different.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">script</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">handle_on_response</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">parameters</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># status_code, duration_ms</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">status_code</span><span class="p">:</span><span class="w"> </span><span class="l">int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">duration_ms</span><span class="p">:</span><span class="w"> </span><span class="l">int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          auto const static TAG = &#34;_do_poll.on_response&#34;;
</span></span></span><span class="line"><span class="cl"><span class="sd">          // Request is no longer in flight
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_glbl_http_poll_request_in_flight) = false;
</span></span></span><span class="line"><span class="cl"><span class="sd">          ESP_LOGD(TAG, &#34;Response status: %d, Duration: %u ms&#34;, status_code, duration_ms);
</span></span></span><span class="line"><span class="cl"><span class="sd">          // Nominally, 200/OK is the ONLY success condition but since modem uses 302 redirect to HTTPS
</span></span></span><span class="line"><span class="cl"><span class="sd">          // and the ESP8266 does not support TLS, we can&#39;t follow the redirect to the 200/OK page and
</span></span></span><span class="line"><span class="cl"><span class="sd">          // must consider the 302 redirect as a success as well.
</span></span></span><span class="line"><span class="cl"><span class="sd">          switch( status_code ) {
</span></span></span><span class="line"><span class="cl"><span class="sd">              case 200:
</span></span></span><span class="line"><span class="cl"><span class="sd">                id(_on_http_poll_ok).execute();
</span></span></span><span class="line"><span class="cl"><span class="sd">                break;
</span></span></span><span class="line"><span class="cl"><span class="sd">              case 302:
</span></span></span><span class="line"><span class="cl"><span class="sd">                id(_on_http_poll_ok).execute();
</span></span></span><span class="line"><span class="cl"><span class="sd">                break;
</span></span></span><span class="line"><span class="cl"><span class="sd">              default:
</span></span></span><span class="line"><span class="cl"><span class="sd">                ESP_LOGW(TAG, &#34;Response status: %d, Duration: %u ms&#34;, status_code, duration_ms);
</span></span></span><span class="line"><span class="cl"><span class="sd">                id(_on_http_poll_failure).execute();
</span></span></span><span class="line"><span class="cl"><span class="sd">                break;
</span></span></span><span class="line"><span class="cl"><span class="sd">            }</span><span class="w">          
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="all-together-now">All together now</h3>
<p>Hopefully it&rsquo;s clear to see that <code>modem.yaml</code> wraps/includes <code>base.yaml</code>.
This is how <code>modem.yaml</code> is injected into the existing configuration that I have deployed on the S31 powering my modem.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># See: https://esphome.io/guides/configuration-types.html#packages</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">packages</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Omitted: common packages for Network info, NTP, OTA, MQTT, </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#   relay/gpio and other device specific things... etc</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Add http polling configured for this specific application</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">http_poll</span><span class="p">:</span><span class="w"> </span>!<span class="l">include packages/http_poll/modem.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">logger</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#  &lt;...&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">logs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># ESPHome considers anything not 200/OK as a failure and will WARN about it.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># See: https://github.com/esphome/esphome/blob/38b7bed2faa522e7e065d8362d6ea0bcaf1c64d5/esphome/components/http_request/http_request.cpp#L92</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># This is technically correct but results in log spam that is not useful to me.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># For my purposes, hearing anything back from the modem (302 or 200) counts as a success.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Silence log spam by hiding all http_request log lines unless they&#39;re ERROR level</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">http_request</span><span class="p">:</span><span class="w"> </span><span class="l">ERROR</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">button</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Note: must not conflict with the button named &#34;Restart&#34; which reboots the ESP, not toggles the relay!</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Modem Restart&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">btn_modem_restart</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:restart&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_press</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">switch.turn_off</span><span class="p">:</span><span class="w"> </span><span class="l">sw_relay_toggle</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">delay</span><span class="p">:</span><span class="w"> </span><span class="l">15s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">switch.turn_on</span><span class="p">:</span><span class="w"> </span><span class="l">sw_relay_toggle</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>Arris SB8200 Prometheus Exporter</title><link>https://karlquinsland.com/arris-sb8200-prometheus-exporter/</link><pubDate>Tue, 19 Mar 2024 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/arris-sb8200-prometheus-exporter/</guid><description><![CDATA[<!-- markdownlint-disable-file MD002 -->
<p>This is a very short &ldquo;announcement&rdquo; post.</p>
<p>To beef up my home-lab observability stack, I&rsquo;ve been working on a few projects to expose more data to Prometheus.
Getting metrics from my cable modem has been on the &ldquo;todo&rdquo; list for literally years.
There have been various metric exporters written in the past but they have either been archived/deleted off of GitHub or are otherwise inappropriate for my needs.
So, I wrote my own.</p>
<p>The GitHub repo is <a href="https://github.com/kquinsland/sb820_prometheus_exporter/" target="_blank" rel="noopener noreffer">here</a> if you want to dive right in.</p>
<p>When set up, one possible way to visualize the data looks like this:</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            blah
            
                
                
        </p> 
    </figcaption>
    
</figure>


<h2 id="a-few-observations">A few observations</h2>
<p>While building out the dashboard / prototyping it, a few things immediately stood out as &ldquo;interesting&rdquo;</p>
<p>After rebooting the modem, the metrics that keep track of error-corrected symbols sent/received over the connection are 0.
This makes sense as the modem has just been rebooted and hasn&rsquo;t had time to accumulate any errors yet.
The first jump in correctable/uncorrectable errors&hellip; happens to corelate directly with a meaningful change in both received/downstream power <em>and</em> transmit/upstream power.</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            blah
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>The metric exporter keeps track of how long scraping the modem&rsquo;s web interface takes as well as weather or not the scraped data was complete / well formed.
The time it takes to scrape a particular endpoint increases pretty quickly after power up before leveling off.
I&rsquo;d love to know why the web server on the modem slows down so quickly after booting up&hellip;.</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            blah
            
                
                
        </p> 
    </figcaption>
    
</figure>


]]></description></item><item><title>Quick and dirty hack to extend the MK3S print area.</title><link>https://karlquinsland.com/extending-the-mk3s-print-area/</link><pubDate>Sun, 04 Feb 2024 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/extending-the-mk3s-print-area/</guid><description><![CDATA[<!-- markdownlint-disable-file MD002 -->
<p>This isn&rsquo;t going to be a long post. I&rsquo;m working on a larger project but hit a snag and I didn&rsquo;t find any easy/obvious solutions online so I thought I&rsquo;d share what I came up with.</p>
<p>Details will come later when the bigger project is ready to be released so you&rsquo;ll have to forgive me for the lack of context.
Essentially I have a large / multi-hour print that <strong>almost</strong> fits on my MK3s print bed but is too large to slice as is.</p>
<p>Here&rsquo;s the short version:</p>
<ul>
<li>The MK3S has a print area of 250mm x 210mm x 210mm (X, Y, Z).</li>
<li>The part in question is circular and has a circumference of ~215mm so I need to extend the Y axis by ~5mm.</li>
<li>I can&rsquo;t scale it down to fit as it&rsquo;s a functional part with specific dimensions.</li>
</ul>
<h2 id="the-problem">The problem</h2>
<p>PrusaSlicer refuses to slice the part and gives the following error message:</p>
<blockquote>
<p>&ldquo;An object outside the print area was detected. Resolve the current problem to continue slicing.</p>
</blockquote>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            The part JUST BARELY fits on the print bed. This whole trick only works because the dark blue portion is so small.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>Since the part is circular, there&rsquo;s no way to &ldquo;rotate&rdquo; it to fit within the print area.</p>
<h2 id="the-idea">The &ldquo;idea&rdquo;</h2>
<p>In the image above, the dark blue portion of the part is &ldquo;outside&rdquo; the print area; some portion of the object is below the <code>0,0</code> origin of the print bed.</p>
<p>But the pre-print priming line is done further &ldquo;south&rdquo; on the build plate so we know the printer can physically print in the area; it&rsquo;s only a software limitation preventing it from doing so.</p>
<p>This can be confirmed by looking at &ldquo;stock&rdquo; <code>gcode</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">&lt;...&gt;
</span></span><span class="line"><span class="cl">; Prime line routine
</span></span><span class="line"><span class="cl">G0 Z0.15 ; Restore nozzle position - (thanks tim.m30)
</span></span><span class="line"><span class="cl">M900 K0; Disable Linear Advance for prime line
</span></span><span class="line"><span class="cl">G92 E0.0 ; reset extrusion distance
</span></span><span class="line"><span class="cl">G1 Y-3.0 F1000.0 ; go outside print area
</span></span><span class="line"><span class="cl">&lt;...&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>The <code>G1</code> line shown above moves the print head to <code>-3.0</code> mm on the Y axis.</p>
<p>Since I only need a few mm of extra space an the printer clearly has a few mm of extra space&hellip; 🤔.</p>
<p>Can I &ldquo;trick&rdquo; the slicer into generating valid <code>gcode</code> and then modify the <code>gcode</code> to shift the part down by 5mm?
Yep.</p>
<p>It works 😅.</p>
<h2 id="the-fix">The &ldquo;fix&rdquo;</h2>
<p>Convince the slicer to generate valid gcode and then modify the gcode to shift the part down by 5mm.
To do this:</p>
<ul>
<li>Modify the print bed dimensions in PrusaSlicer so the part will fit the print bed w/o any warnings. Don&rsquo;t make the print bed any larger than needed and do not make it any larger than the printer is physically capable of.</li>
<li>Slice as usual, save the <code>gcode</code> to a file.</li>
<li>Run the script below which will shift every print instruction by 5mm in the Y direction.</li>
<li>Send the modified <code>gcode</code> to the printer and hope for the best 🤞.</li>
</ul>
<p>Graphically, it looks like this:</p>
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>After saving the adjusted print bed dimensions, the part should fit and slice without any warnings.</p>
<h2 id="the-code">The code</h2>
<p>It&rsquo;s not pretty but it works.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python3" data-lang="python3"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">adjust_gcode_y_position</span><span class="p">(</span><span class="n">input_file</span><span class="p">,</span> <span class="n">output_file</span><span class="p">,</span> <span class="n">adjustment</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">input_file</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">infile</span><span class="p">,</span> <span class="nb">open</span><span class="p">(</span><span class="n">output_file</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">outfile</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">infile</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="s1">&#39;Y&#39;</span> <span class="ow">in</span> <span class="n">line</span> <span class="ow">and</span> <span class="p">(</span><span class="s1">&#39;G0&#39;</span> <span class="ow">in</span> <span class="n">line</span> <span class="ow">or</span> <span class="s1">&#39;G1&#39;</span> <span class="ow">in</span> <span class="n">line</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># Split the line into components to find the Y component</span>
</span></span><span class="line"><span class="cl">                <span class="n">parts</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                <span class="n">new_parts</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">                <span class="k">for</span> <span class="n">part</span> <span class="ow">in</span> <span class="n">parts</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="k">if</span> <span class="n">part</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s1">&#39;Y&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                        <span class="c1"># Extract current Y value and adjust</span>
</span></span><span class="line"><span class="cl">                        <span class="n">y_value</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">part</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span> <span class="o">-</span> <span class="n">adjustment</span>
</span></span><span class="line"><span class="cl">                        <span class="n">new_parts</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;Y</span><span class="si">{:.3f}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">y_value</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                        <span class="n">new_parts</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">part</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># Write the adjusted line</span>
</span></span><span class="line"><span class="cl">                <span class="n">outfile</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">new_parts</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># Write unmodified line</span>
</span></span><span class="line"><span class="cl">                <span class="n">outfile</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Usage</span>
</span></span><span class="line"><span class="cl"><span class="n">input_gcode_path</span> <span class="o">=</span> <span class="s1">&#39;your_original_gcode_file_here.gcode&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">output_gcode_path</span> <span class="o">=</span> <span class="s1">&#39;ADJ.your_original_gcode_file_here.gcode&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">y_adjustment</span> <span class="o">=</span> <span class="mf">5.0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">adjust_gcode_y_position</span><span class="p">(</span><span class="n">input_gcode_path</span><span class="p">,</span> <span class="n">output_gcode_path</span><span class="p">,</span> <span class="n">y_adjustment</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="the-result">The result</h2>
<p>See for yourself:</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Ignore the wrinkles just to the right of the PINDA probe; it&#39;s a separate issue.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>Note that the edge of the circle just barely touches the edge of the print bed on the right and &ldquo;sits&rdquo; a few mm below the &ldquo;usable&rdquo; print bed area on the left.</p>
<p>Hopefully that&rsquo;s helpful to someone else out there.
If anybody knows why Prusa &ldquo;reserves&rdquo; this space, I&rsquo;d love to know.</p>
]]></description></item><item><title>Altinex TE460-137 Teardown</title><link>https://karlquinsland.com/altinex-te460-137-teardown/</link><pubDate>Sat, 02 Dec 2023 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/altinex-te460-137-teardown/</guid><description><![CDATA[<h1 id="altinex-te460-137-teardown">Altinex TE460-137 Teardown</h1>
<p>It is surprisingly hard to find a device that can dump details about the various protocols and negotiated standards for a HDMI connection.
For how ubiquitous HDMI is, you&rsquo;d <em>think</em> that there would be a lot of devices that can do this.
There are LOADS of devices that can snoop USB and Ethernet, but HDMI is a bit of a different beast, apparently.</p>
<p>After a bit of searching, I found the <a href="https://www.altinex.com/product/te460-137/" target="_blank" rel="noopener noreffer">Altinex TE460-137</a> could do exactly what I wanted.</p>
<p>(/enhanced-homeassistantswitchplate/) project.</p>
<p>Like the <a href="/pulse-eight-hdmi-cec-injector-teardown/" rel="">HDMI CEC dongle</a> this device is a bit specialized and so there&rsquo;s not a lot of readily available information about it online.
I was curious about what&rsquo;s inside and how it works, so I decided to take a look.</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Front of the device.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<h2 id="magnuson-moss-warranty-act">Magnuson-Moss Warranty Act</h2>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            The case split open.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>Notice that pierced <code>Warranty void if removed</code> sticker over the bottom right screw?
Yeah, that&rsquo;s <a href="https://www.npr.org/sections/thetwo-way/2018/04/11/601582169/warranty-void-if-removed-as-it-turns-out-feds-say-those-warnings-are-illegal" target="_blank" rel="noopener noreffer"><strong>illegal</strong></a>.
Naturally, companies don&rsquo;t want you to know that the sticker is <a href="https://www.ifixit.com/News/15464/warranty-voiding-stickers-are-illegal-but-these-companies-are-still-using-them" target="_blank" rel="noopener noreffer">unenforceable</a>.</p>
<p>Consider this a small <a href="https://www.ifixit.com/News/11748/warranty-stickers-are-illegal" target="_blank" rel="noopener noreffer">PSA</a>: if you see a sticker like this, you can safely ignore it.
The company <em>cannot</em> void your warranty for removing it but they absolutely can make your life difficult if you do.
If you get pushback, direct them to the <a href="https://www.ftc.gov/business-guidance/resources/businesspersons-guide-federal-warranty-law" target="_blank" rel="noopener noreffer">FTC&rsquo;s official statement</a> on the matter.</p>
<p>Anyways.</p>
<h2 id="quick-peek-inside">Quick peek Inside</h2>
<p>After removing the four screws, the case splits open easily enough.
The construction is a bit more elaborate than expected; there&rsquo;s a main PCB, a control PCB, and a battery interface PCB.</p>
<p>I was in a hurry so the photos are &ldquo;as-is&rdquo; and not my best work.
I&rsquo;ve <a href="#chips-and-other-markings" rel="">noted down the markings on the chips</a> and other components for future reference.</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Internals feature three PCBs.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>If the battery ever does leak, the entire PCB assembly can be removed and replaced.
It also shouldn&rsquo;t be that difficult to just modify the battery interface PCB to use a different battery.
The thermistor is a nice touch!</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Rear of the battery interface PCB.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>Taking a quick look at the control PCB, we can see a few big ICs&hellip;
The populated JTAG header is an interesting find.</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Top of the control PCB.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>There&rsquo;s not much on the rear of the control PCB:</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Bottom of the control PCB.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>Nor is there much on the side of the PCB just behind the OLED screen / front panel.
Oddly enough, each button gets <em>two</em> sets of contacts&hellip;</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            The side of the main PCB that faces the user from within.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>And there&rsquo;s nothing interesting on the &lsquo;internal&rsquo; side of the front panel:</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Interior of the front panel features button matrix and OLED.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<h2 id="some-technical-details">Some Technical Details</h2>
<p>If you catch the device early enough in boot, you can see the panasonic HDMI switch chip enumerating in it&rsquo;s default state.
Don&rsquo;t ask me where the 2% overscan comes from&hellip;</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            The default EDID info doesn&#39;t last long; as soon as the device is powered on, it tries to read the EDID from the connected sink and use that.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<h3 id="chips-and-other-markings">Chips and other markings</h3>
<h4 id="control-pcb">Control PCB</h4>
<ul>
<li>The main application processor is the <a href="https://www.nxp.com/part/LPC1830FET100#/" target="_blank" rel="noopener noreffer">NXP LPC1830FET100</a>.</li>
<li>It seems like all audio is handled by the <a href="https://www.analog.com/en/products/adau1701.html" target="_blank" rel="noopener noreffer">Analog Devices ADAU1701</a>.</li>
</ul>
<p>Oddly enough there are <em>two</em> flash chips here. Presumably firmware storage for the  NXP and Analog Devices chips.</p>
<ul>
<li><a href="https://www.winbond.com/hq/product/code-storage-flash-memory/serial-nor-flash/?__locale=en&amp;partNo=W25Q32JV" target="_blank" rel="noopener noreffer">Winbond 25Q32JV</a></li>
<li><a href="https://www.microchip.com/en-us/product/24lc128" target="_blank" rel="noopener noreffer">Microchip 24LC128I</a></li>
</ul>
<p>I didn&rsquo;t bother dumping either, but Altinex does make an older version of the firmware <a href="#firmware" rel="">available</a>.</p>
<h3 id="main-pcb">Main PCB</h3>
<p>The big QFP144 chip on the main PCB is a <a href="https://panasonic.encompass.com/item/10292549/Panasonic/MN864788/" target="_blank" rel="noopener noreffer">Panasonic MN864788</a>.
I can&rsquo;t find a data sheet, but one <a href="https://stesys.eu/ocart/index.php?route=product/product&amp;manufacturer_id=135&amp;product_id=2544&amp;limit=75" target="_blank" rel="noopener noreffer">supplier has labeled it</a> a &ldquo;HDMI 2.0 Receiver/Switch&rdquo;.
Given the proximity to the two HDMI ports &hellip; this makes sense.</p>
<h3 id="dmesg"><code>dmesg</code></h3>
<p>For thoroughness, here&rsquo;s how the device enumerates over USB when plugged in when configured in RS-232 mode:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">usb 5-4.1.2.2: new full-speed USB device number <span class="m">91</span> using xhci_hcd
</span></span><span class="line"><span class="cl">usb 5-4.1.2.2: New USB device found, <span class="nv">idVendor</span><span class="o">=</span>04e2, <span class="nv">idProduct</span><span class="o">=</span>1411, <span class="nv">bcdDevice</span><span class="o">=</span> 0.01
</span></span><span class="line"><span class="cl">usb 5-4.1.2.2: New USB device strings: <span class="nv">Mfr</span><span class="o">=</span>1, <span class="nv">Product</span><span class="o">=</span>2, <span class="nv">SerialNumber</span><span class="o">=</span><span class="m">3</span>
</span></span><span class="line"><span class="cl">usb 5-4.1.2.2: Product: XR21B1411
</span></span><span class="line"><span class="cl">usb 5-4.1.2.2: Manufacturer: Exar Corp.
</span></span><span class="line"><span class="cl">usb 5-4.1.2.2: SerialNumber: Q9065270561
</span></span><span class="line"><span class="cl">usbcore: registered new interface driver xr_serial
</span></span><span class="line"><span class="cl">usbserial: USB Serial support registered <span class="k">for</span> xr_serial
</span></span><span class="line"><span class="cl">xr_serial 5-4.1.2.2:1.0: xr_serial converter detected
</span></span><span class="line"><span class="cl">usb 5-4.1.2.2: xr_serial converter now attached to ttyUSB0
</span></span></code></pre></td></tr></table>
</div>
</div><p>And when in FW update mode:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">usb 5-4.1.2.2: new high-speed USB device number <span class="m">92</span> using xhci_hcd
</span></span><span class="line"><span class="cl">usb 5-4.1.2.2: config <span class="m">1</span> interface <span class="m">0</span> altsetting <span class="m">0</span> bulk endpoint 0x83 has invalid maxpacket <span class="m">64</span>
</span></span><span class="line"><span class="cl">usb 5-4.1.2.2: config <span class="m">1</span> interface <span class="m">0</span> altsetting <span class="m">0</span> bulk endpoint 0x2 has invalid maxpacket <span class="m">64</span>
</span></span><span class="line"><span class="cl">usb 5-4.1.2.2: New USB device found, <span class="nv">idVendor</span><span class="o">=</span>1fc9, <span class="nv">idProduct</span><span class="o">=</span>8001, <span class="nv">bcdDevice</span><span class="o">=</span> 1.00
</span></span><span class="line"><span class="cl">usb 5-4.1.2.2: New USB device strings: <span class="nv">Mfr</span><span class="o">=</span>1, <span class="nv">Product</span><span class="o">=</span>2, <span class="nv">SerialNumber</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl">usb 5-4.1.2.2: Product: USB Mass Storage            
</span></span><span class="line"><span class="cl">usb 5-4.1.2.2: Manufacturer: USB
</span></span><span class="line"><span class="cl">usb-storage 5-4.1.2.2:1.0: USB Mass Storage device detected
</span></span><span class="line"><span class="cl">scsi host4: usb-storage 5-4.1.2.2:1.0
</span></span><span class="line"><span class="cl">scsi 4:0:0:0: Direct-Access     NXP      Dataflash Disk   0.00 PQ: <span class="m">0</span> ANSI: <span class="m">0</span>
</span></span><span class="line"><span class="cl">sd 4:0:0:0: <span class="o">[</span>sda<span class="o">]</span> <span class="m">3968</span> 512-byte logical blocks: <span class="o">(</span>2.03 MB/1.94 MiB<span class="o">)</span>
</span></span><span class="line"><span class="cl">sd 4:0:0:0: <span class="o">[</span>sda<span class="o">]</span> Write Protect is off
</span></span><span class="line"><span class="cl">sd 4:0:0:0: <span class="o">[</span>sda<span class="o">]</span> Mode Sense: <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>
</span></span><span class="line"><span class="cl">sd 4:0:0:0: <span class="o">[</span>sda<span class="o">]</span> Asking <span class="k">for</span> cache data failed
</span></span><span class="line"><span class="cl">sd 4:0:0:0: <span class="o">[</span>sda<span class="o">]</span> Assuming drive cache: write through
</span></span><span class="line"><span class="cl">usb 5-4.1.2.2: reset high-speed USB device number <span class="m">92</span> using xhci_hcd
</span></span><span class="line"><span class="cl">usb 5-4.1.2.2: device descriptor read/64, error -110
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="firmware">Firmware</h3>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>Note<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>The device ships with FW 3.06A/R3.</p>
<p>Their <a href="https://www.altinex.com/download/te460-137-firmware-update-v-3-04a-easy-mode/" target="_blank" rel="noopener noreffer">website</a> only have 3.04 available.</p>
</div>
        </div>
    </div>
]]></description></item></channel></rss>