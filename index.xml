<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>karl</title><link>https://karlquinsland.com/</link><description>Karl's little corner of the internet</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 01 Aug 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://karlquinsland.com/index.xml" rel="self" type="application/rss+xml"/><item><title>AKASO DL12 Dashcam Teardown</title><link>https://karlquinsland.com/akaso-dl12-teardown/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/akaso-dl12-teardown/</guid><description><![CDATA[<!-- markdownlint-disable-file MD002 -->
<h1 id="akaso-dl12-dashcam-teardown">AKASO DL12 Dashcam Teardown</h1>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        If the double yellow lines are in the middle of your rear-view mirror, you&#39;re doing it wrong.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>This was my dashcam for a while until the front camera stopped working.
It was a good dashcam while it lasted but there are better options now&hellip; so let&rsquo;s take it apart!</p>
<p>Ultimately, it&rsquo;s a highly integrated consumer-grade bit of electronics.
Everything&rsquo;s built down to a price and anything that didn&rsquo;t need to be done &hellip; wasn&rsquo;t.
There&rsquo;s not much to see and not much to say so this is a <a href="/tags/two-minute-teardown/" rel="">&ldquo;two minute teardown&rdquo; </a>.</p>
<h2 id="teardown">Teardown</h2>
<p>There are 4 screws holding the case together. They are hidden under the rubber feet.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        There are 4 screws holding the case together. Remove and the case comes apart easily.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>Once the screws are removed, the case comes apart easily to reveal a mostly empty shell.
The LiPo battery is an interesting choice given the heat that can build up in a car.
As far as I know, this is only needed for the few seconds after power loss so the camera can save the current recording and shut down cleanly.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Lift the screen side away to reveal the paltry internals
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>Close up of the rear of the main PCB shows a few test points and populated but unused connectors.</p>
<p>I love the <code>TV_IN</code> silkscreen for the rear camera connector. Almost makes me wonder if this was a re-purposed schematic from a different product.</p>
<p>Why there&rsquo;s a dedicated <code>RTC_BAT</code> connector and not sipper power from the main battery is a mystery to me.
The unit does have a GPS module so there&rsquo;s really no need for an RTC battery&hellip; just use the GPS time!</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Close up of the &#39;screen&#39; side of the main PCB. Not much to see here.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>The &lsquo;forward facing&rsquo; side of the PCB has a few more populated/un-used connectors and a heat-spreader over the main CPU.
The two push buttons in the top left are not accessible from the outside of the case so there&rsquo;s probably something interesting that happens when they&rsquo;re pressed.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The &#39;rear&#39; of the main PCB has a few unpopulated footprints and a flimsy heat-spreader.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>Removing it reveals a HiSilicon Hi3556 SoC, EEPROM and what is probably the image processor for the rear camera.
The large unpopulated footprint in the top right looks like it&rsquo;s meant for a radio module.
Not sure if it&rsquo;s for a wireless link to the rear camera or for something like a <a href="https://en.wikipedia.org/wiki/Tire-pressure_monitoring_system" target="_blank" rel="noopener noreffer">TPMS sensor</a> or possibly WiFi for a phone app.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Close up of the most interesting part of the main PCB.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The forward facing camera is in a swivel mount and is highly integrated; there&#39;s nothing under that black tape.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h2 id="pcb-markings">PCB Markings</h2>
<p>AKA SEO optimization üòâ</p>
<p>Main PCB is marked:</p>
<blockquote>
<p>77-56V200(20) V3.411</p>
<p>6105</p>
<p>V200-AMWG-V3.411
2019.12.03</p>
</blockquote>
<p>And on the rear:</p>
<blockquote>
<p>F02Z1B
F15Z1B</p>
</blockquote>
<p>The main CPU is <a href="https://silicondevice.com/file.upload/images/Gid1551Pdf_Hi3556%20V100%20HD%20Mobile%20Camera%20SoC%20Brief%20Data%20Sheet.pdf" target="_blank" rel="noopener noreffer">meant for consumer cameras</a> and is marked:</p>
<blockquote>
<p>Hi 3556</p>
<p>RBCV200</p>
<p>CP9881938</p>
<p>1939-CN</p>
</blockquote>
<p>The LCD is marked:</p>
<blockquote>
<p>XTY TB118-I4018E30A-01</p>
<p>T B118-45a164200402-J</p>
</blockquote>
<p>I can&rsquo;t find a datasheet for what I suspect is the rear-camera processor but it&rsquo;s marked:</p>
<blockquote>
<p>pixelplus</p>
<p>PR2020</p>
<p>S3CWN</p>
<p>KAG2006</p>
</blockquote>
<h2 id="firmware">Firmware</h2>
<p>Just for giggles, I dumped the firmware from the SPI flash to get an idea of what software powers this device.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">‚ùØ flashrom --force -c <span class="s2">&#34;GD25B128B/GD25Q128B&#34;</span> --verbose --programmer ch341a_spi --read oem.bin
</span></span><span class="line"><span class="cl">&lt;...&gt;
</span></span><span class="line"><span class="cl">Reading flash... 
</span></span><span class="line"><span class="cl">&lt;...&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>I did run <code>strings</code> on it and there&rsquo;s some mildly interesting stuff in there but nothing interesting enough to warrant a deep dive.</p>
<p><code>binwalk</code> didn&rsquo;t have any trouble extracting things but I&rsquo;m not going to spend any time reversing this firmware.</p>
<p>It looked like the usual &ldquo;bootloader and two identical copies of the application firmware&rdquo; setup.
Taking a look at what I think is the main application:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">Scan Time:     2024-08-02 16:52:43
</span></span><span class="line"><span class="cl">Target File:   /home/karl/scratch/dash-fw/_oem.bin.extracted/media_app.bin
</span></span><span class="line"><span class="cl">MD5 Checksum:  557e5a7578dfb20ed8328888479bc973
</span></span><span class="line"><span class="cl">Signatures:    <span class="m">436</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">DECIMAL       HEXADECIMAL     DESCRIPTION
</span></span><span class="line"><span class="cl">--------------------------------------------------------------------------------
</span></span><span class="line"><span class="cl"><span class="m">510070</span>        0x7C876         JBOOT STAG header, image id: 10, timestamp 0x3AF8E51B, image size: <span class="m">454878491</span> bytes, image JBOOT checksum: 0xE51B, header JBOOT checksum: 0x3233
</span></span><span class="line"><span class="cl"><span class="m">2689033</span>       0x290809        Certificate in DER format <span class="o">(</span>x509 v3<span class="o">)</span>, header length: 4, sequence length: <span class="m">5380</span>
</span></span><span class="line"><span class="cl"><span class="m">3038273</span>       0x2E5C41        Certificate in DER format <span class="o">(</span>x509 v3<span class="o">)</span>, header length: 4, sequence length: <span class="m">5380</span>
</span></span><span class="line"><span class="cl"><span class="m">3828721</span>       0x3A6BF1        Certificate in DER format <span class="o">(</span>x509 v3<span class="o">)</span>, header length: 4, sequence length: <span class="m">13692</span>
</span></span><span class="line"><span class="cl"><span class="m">4056525</span>       0x3DE5CD        ESP Image <span class="o">(</span>ESP32<span class="o">)</span>: segment count: 15, flash mode: QUIO, flash size: 2MB, entry address: 0x40006a7
</span></span><span class="line"><span class="cl"><span class="m">4732974</span>       0x48382E        eCos RTOS string reference: <span class="s2">&#34;eCostInSystem&#34;</span>
</span></span><span class="line"><span class="cl"><span class="m">4732991</span>       0x48383F        eCos RTOS string reference: <span class="s2">&#34;eCostInSystem&#34;</span>
</span></span><span class="line"><span class="cl"><span class="m">4771774</span>       0x48CFBE        TIFF image data, big-endian, offset of first image directory: <span class="m">8</span>
</span></span><span class="line"><span class="cl"><span class="m">4773180</span>       0x48D53C        TIFF image data, big-endian, offset of first image directory: <span class="m">8</span>
</span></span><span class="line"><span class="cl"><span class="m">4980260</span>       0x4BFE24        Unix path: /home/user04/work/kashite/3556-11.8-v1013-AKASO/osdrv/components/ipcm/ipcm/message/ipcm.c
</span></span><span class="line"><span class="cl"><span class="m">4982320</span>       0x4C0630        Unix path: /home/user04/work/kashite/3556-11.8-v1013-AKASO/osdrv/components/ipcm/ipcm/message/ipcm_data.c
</span></span><span class="line"><span class="cl"><span class="m">4983576</span>       0x4C0B18        Unix path: /home/user04/work/kashite/3556-11.8-v1013-AKASO/osdrv/platform/liteos/kernel/base/ipc/los_mux.c
</span></span><span class="line"><span class="cl"><span class="m">4983960</span>       0x4C0C98        Unix path: /home/user04/work/kashite/3556-11.8-v1013-AKASO/osdrv/platform/liteos/kernel/base/core/los_task.c
</span></span><span class="line"><span class="cl"><span class="m">4986708</span>       0x4C1754        Unix path: /home/user04/work/kashite/3556-11.8-v1013-AKASO/osdrv/platform/liteos/kernel/base/mem/mem_bestfit/los_memory.c
</span></span><span class="line"><span class="cl"><span class="m">4998096</span>       0x4C43D0        Unix path: /usr/local/etc/zoneinfo
</span></span><span class="line"><span class="cl"><span class="m">4999016</span>       0x4C4768        Unix path: /home/user04/work/kashite/3556-11.8-v1013-AKASO/osdrv/platform/liteos/lib/libc/src/time/time64.c
</span></span><span class="line"><span class="cl"><span class="m">5000336</span>       0x4C4C90        Unix path: /home/user04/work/kashite/3556-11.8-v1013-AKASO/osdrv/platform/liteos/compat/posix/src/pthread_mutex.c
</span></span><span class="line"><span class="cl"><span class="m">5001228</span>       0x4C500C        Unix path: /home/user04/work/kashite/3556-11.8-v1013-AKASO/osdrv/platform/liteos/fs/vfs/inode/fs_inode.c
</span></span><span class="line"><span class="cl"><span class="m">5006876</span>       0x4C661C        Unix path: /home/user04/work/kashite/3556-11.8-v1013-AKASO/osdrv/platform/liteos/platform/bsp/board/hi3556v200/include/hisoc/spi.h
</span></span><span class="line"><span class="cl"><span class="m">5194272</span>       0x4F4220        ESP Image <span class="o">(</span>ESP32<span class="o">)</span>: segment count: 11, flash mode: QUIO, flash speed: 40MHz, flash size: 1MB, entry address: 0x4003d1
</span></span><span class="line"><span class="cl"><span class="m">5363994</span>       0x51D91A        ESP Image <span class="o">(</span>ESP32<span class="o">)</span>: segment count: 1, flash mode: QUIO, flash speed: 40MHz, flash size: 1MB, entry address: 0x0
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>Arizer XQ2 Teardown</title><link>https://karlquinsland.com/arizer-xq2-teardown/</link><pubDate>Mon, 01 Jul 2024 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/arizer-xq2-teardown/</guid><description><![CDATA[<!-- markdownlint-disable-file MD002 -->
<h1 id="arizer-xq2-teardown">Arizer XQ2 Teardown</h1>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>A friend of mine reached out and asked me about automating some aspects of their <a href="https://www.webmd.com/balance/stress-management/aromatherapy-overview" target="_blank" rel="noopener noreffer">aroma therapy</a> treatment.</p>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>Note<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">I was not given permission to share the specifics of their medical condition or the larger treatment plan so this post is going to deal with <em>just</em> the technical aspects of the device.</div>
        </div>
    </div>
<p>The device they&rsquo;re using for aromatherapy is the <a href="https://arizer.com/xq2/" target="_blank" rel="noopener noreffer">Arizer XQ2</a> and we agreed that integration with their existing Home Assistant setup would be ideal.</p>
<p>I know nothing about aroma therapy but I do suffer from an obsession that compels me to integrate ESPHome with <em>everything</em>&hellip;I was intrigued!</p>
<p>At worst, I get a new toy to tear down and at best, I&rsquo;d be able to deliver a solution that would make their life a little easier.</p>
<h2 id="the-plan">The plan</h2>
<p>First, the bad news.</p>
<p>There&rsquo;s next to no technical information about the XQ2 online.</p>
<p>The device has no radio connectivity so there&rsquo;s no FCC filings.
There are several reviews of the device online, but none of them tear it down or provide any technical information.</p>
<p>Now, the good news.</p>
<p>The device does have an IR remote control!</p>
<p>It is not difficult to capture the IR signals from the remote and replay them with an ESP32 or similar device.
This meant that the likely outcome would be an <a href="https://en.wikipedia.org/wiki/Open-loop_controller" target="_blank" rel="noopener noreffer">open-loop control system</a>; building something to to send commands to the device would be trivial but confirming that a particular command had been executed would be tedious at best.</p>
<p>This put us in an awkward position.</p>
<p>After some back and forth, we agreed that closed-loop would be ideal, but open-loop control would be acceptable for their needs given that the device is meant to be used in close proximity to the user and already features a few safety features.</p>
<p>Unless there was some lucky break discovered while tearing down the device, I&rsquo;d be stuck with emulating the IR remote control.
This isn&rsquo;t ideal, but it also means that there&rsquo;s virtually no risk that any of the built-in safety features would be bypassed/disabled.</p>
<h2 id="teardown">Teardown</h2>
<p>The manufacturer has clearly designed this thing to be serviceable!</p>
<p>They <a href="https://vimeo.com/648841530" target="_blank" rel="noopener noreffer">have a guide</a> for replacing a common wear item (the ceramic heating element) and it turns out that the rest of the device is just as easy to access.</p>
<p>From the bottom of the device, there are 4 rubber feet that can be removed to reveal 4 screws.
Amazingly, these feet are NOT glued in <em>and</em> they have tiny holes in them to allow the screws to be removed without removing the feet! üòöüëå.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Once the screws are removed, the bottom cover just lifts off.
Again, no glue, no clips, no nothing!</p>
<p>This reveals the main PCB. I&rsquo;ve identified a few of the main ICs <a href="#notable-chips-and-stuff" rel="">below</a>.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        View from the bottom just after removing the panel.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Close up of the main application processor.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>Note that the DC jack is on a separate board that is easily removed.
This is a nice touch as it makes it easy to replace if it ever breaks; it&rsquo;s a standard 5.5mm OD barrel jack so sourcing a replacement should be easy.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Close up of the two MOSFETs used to control the heating element.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>The PCB is <em>almost</em> entirely single sided; only a few passives and connectors for the various peripherals are on the top side.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The top side of the main PCB. Sorry for the off-center angle and the glare.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>The power supply isn&rsquo;t exotic so sourcing a replacement should be easy if it ever fails.
It&rsquo;s also worth noting that the 19V / 3.42A rated output is <em>really close</em> to 20V / 3 A output profile from <a href="https://web.archive.org/web/20190711152956/https://github.com/vi117/ppkos/blob/master/extdoc/usb_31_060115/USB%20Type-C/USB%20Type-C%20Specification%20Release%201.1.pdf" target="_blank" rel="noopener noreffer">USB-C PD 1.0 spec</a> and totally within the adjustable range of a USB-C PD 2.0+ power supply.
It should be possible to adapt this device to use USB-C PD power with minimal effort if needed.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Power supply is pretty standard; feels well made.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>All in all, I&rsquo;m impressed with the build quality of the device!</p>
<p>It&rsquo;s well made and easy to service. No glue or clips to break, no hidden screws to find, no proprietary connectors to deal with.</p>
<p>The main PCB is well laid out, all components are marked with crisp silkscreen and nobody lasered off the markings on the ICs.</p>
<p>The most dangerous part of the device it the heating element and there are <em>multiple</em> heat-shields between it and the user and all the heat-shields are easily replaceable!</p>
<p>The PCB designer also knew that MOSFETs can fail short so they use both a high <em>and</em> low side FET to control the heating element!</p>
<p>Normally little piezo beepers are annoying but this one can be attenuated or disabled in software.</p>
<p>I was pleasantly surprised to find that the device <em>does</em> have a UART and programming port onboard <strong>but I was not given permission to probe further.</strong></p>
<p>My friend decided that IR control would be sufficient for their needs so I don&rsquo;t have any more information about the UART.</p>
<h3 id="notable-chips-and-stuff">Notable Chips and stuff</h3>
<ul>
<li><code>SWM260CBT7-50</code>: This is the main application processor. The manufacturer&rsquo;s <a href="https://www.synwit.cn/gaishu313/" target="_blank" rel="noopener noreffer">product details page</a> has both a (Chinese) <a href="https://www.synwit.cn/uploads/soft/20221222/1-221222144341C1.pdf" target="_blank" rel="noopener noreffer">datasheet</a> and a collection of <a href="https://www.synwit.cn/uploads/soft/20231114/1-23111414411W47.rar" target="_blank" rel="noopener noreffer">reference code</a>.</li>
</ul>
<p>Assuming the read/write protect fuses aren&rsquo;t blown, it should be possible to dump the firmware from this chip and possibly come up with an open-source replacement firmware for the device.
With the UART so nicely broken out, adding in an ESP32 or similar to provide wireless control should be trivial&hellip; :D.</p>
<ul>
<li>
<p><a href="https://item.szlcsc.com/5893434.html" target="_blank" rel="noopener noreffer"><code>CMOS CMS6679</code></a>: MOSFET driver for the heating element.</p>
</li>
<li>
<p><a href="https://www.mouser.com/ProductDetail/Toshiba/TPC8062-HLQCM?qs=QrGA9tEX17N%2FMHC76X%252B99w%3D%3D" target="_blank" rel="noopener noreffer"><code>TPC8062</code></a>: MOSFET driver for the heating element.</p>
</li>
</ul>
<h2 id="esphome-ir-remote">ESPHome IR Remote</h2>
<p>I already mentioned this above but it&rsquo;s worth repeating!</p>
<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>Open Loop controls suck<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>Basically, the code below emulates the IR remote control that comes with the device.
As there is no way for the device to communicate back to the original remote to say &ldquo;I got your command&rdquo; or &ldquo;I&rsquo;m busy right now, try again later&rdquo;, there&rsquo;s no way to know if the device is in the state you think it is.</p>
<p>The human operator can see the device&rsquo;s state and confirm that it&rsquo;s doing what they want&hellip; but this is <em>not</em> the case for the ESPHome/Home Assistant integration.</p>
<p>The device also has a few safety features built in that the &ldquo;remote&rdquo; can&rsquo;t bypass.
If - somehow - the integration becomes fully broken, it&rsquo;s no different from sitting on the remote or otherwise spamming some signal.
In this case, the device will still operate safely.</p>
</div>
        </div>
    </div>
<p>If you understand the risks and still want to proceed, here&rsquo;s a simple ESPHome configuration that will allow you to control the XQ2 via IR blaster.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">button</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Power&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_press</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">remote_transmitter.transmit_nec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">address</span><span class="p">:</span><span class="w"> </span><span class="l">0xFE01</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="l">0xE41B</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command_repeats</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Fan Off&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_press</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">remote_transmitter.transmit_nec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">address</span><span class="p">:</span><span class="w"> </span><span class="l">0xFE01</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="l">0xFE01</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command_repeats</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Fan Low&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_press</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">remote_transmitter.transmit_nec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">address</span><span class="p">:</span><span class="w"> </span><span class="l">0xFE01</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="l">0xF609</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command_repeats</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Fan Med&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_press</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">remote_transmitter.transmit_nec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">address</span><span class="p">:</span><span class="w"> </span><span class="l">0xFE01</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="l">0xFB04</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command_repeats</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Fan High&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_press</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">remote_transmitter.transmit_nec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">address</span><span class="p">:</span><span class="w"> </span><span class="l">0xFE01</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="l">0xF807</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command_repeats</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Preset 1&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_press</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">remote_transmitter.transmit_nec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">address</span><span class="p">:</span><span class="w"> </span><span class="l">0xFE01</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="l">0xEF10</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command_repeats</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Preset 2&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_press</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">remote_transmitter.transmit_nec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">address</span><span class="p">:</span><span class="w"> </span><span class="l">0xFE01</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="l">0xF906</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command_repeats</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Preset 3&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_press</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">remote_transmitter.transmit_nec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">address</span><span class="p">:</span><span class="w"> </span><span class="l">0xFE01</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="l">0xE01F</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command_repeats</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Temp UP&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_press</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">remote_transmitter.transmit_nec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">address</span><span class="p">:</span><span class="w"> </span><span class="l">0xFE01</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="l">0xFA05</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command_repeats</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Temp DOWN&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_press</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">remote_transmitter.transmit_nec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">address</span><span class="p">:</span><span class="w"> </span><span class="l">0xFE01</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="l">0xF50A</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command_repeats</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Speaker&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_press</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">remote_transmitter.transmit_nec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">address</span><span class="p">:</span><span class="w"> </span><span class="l">0xFE01</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="l">0xED12</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command_repeats</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Auto Off Timer&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_press</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">remote_transmitter.transmit_nec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">address</span><span class="p">:</span><span class="w"> </span><span class="l">0xFE01</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="l">0xF708</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command_repeats</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Light&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_press</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">remote_transmitter.transmit_nec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">address</span><span class="p">:</span><span class="w"> </span><span class="l">0xFE01</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="l">0xE11E</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command_repeats</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">remote_transmitter</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">transmitter</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">pin</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Your values here will likely be different</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO14</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">output</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">carrier_duty_percent</span><span class="p">:</span><span class="w"> </span><span class="m">50</span><span class="l">%</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>Using ESPHome to Automatically restart frozen cable modem</title><link>https://karlquinsland.com/automatic-modem-restart-with-esphome/</link><pubDate>Sun, 09 Jun 2024 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/automatic-modem-restart-with-esphome/</guid><description><![CDATA[<!-- markdownlint-disable-file MD002 -->
<p>Part of the reason for developing my <a href="/arris-sb8200-prometheus-exporter/" rel="">SB8200 monitor</a> was to get to the bottom of some infrequent but regular outages.</p>
<p>To make a long story short, the <a href="https://en.wikipedia.org/wiki/Link_aggregation" target="_blank" rel="noopener noreffer">LAG</a> implementation on the modem seems to have some issues.
A quick google will return many complaint threads detailing issues with the modem regularly locking up all traffic stopping.
More annoyingly, these reports date back <em>years</em> and allege that later revisions of the firmware <em>might</em> fix the issue for good.</p>
<p>My ISP is <a href="https://deadline.com/2014/09/netflix-discovery-response-comcast-extortion-840530" target="_blank" rel="noopener noreffer">evil</a> and doesn&rsquo;t give me a way to check for or manually update the firmware on device.</p>
<p>As expected, their stance is that all my issues will go away if I rent  <em>their</em> modem and let them up-sell me a faster service tier, though üôÑ.</p>
<p>When the modem falls over, it&rsquo;s pretty sudden; things will be fine one moment and then no traffic flows the next.
The exact timing seems to vary a bit, but the average time between lockups is about 10 days with very little variance.</p>
<p>I&rsquo;ve been &ldquo;lucky&rdquo; in the sense that most of these lockups have happened during the day while I was at home; I could notice the issue, triage and fix it pretty quickly.
My dashboards have at most 300 seconds of down time or so.</p>
<p>There&rsquo;s only so much luck to go around, though; what happens when I&rsquo;m out of the house?I&rsquo;ve been thinking about how to automate the process of restarting the modem and this is what I came up with.</p>
<h2 id="the-fix">The &ldquo;fix&rdquo;</h2>
<p>My modem is powered through a <a href="https://devices.esphome.io/devices/Sonoff-S31" target="_blank" rel="noopener noreffer">Sonoff S31 plug</a> running <a href="https://esphome.io/" target="_blank" rel="noopener noreffer">ESPHome</a>.</p>
<p>Every 10 seconds, the S31 tries to fetch the modem&rsquo;s http interface using the <a href="https://esphome.io/components/http_request.html" target="_blank" rel="noopener noreffer"><code>http_request</code></a> component.
If - after 2 seconds - the modem doesn&rsquo;t respond, a counter is incremented.
Once the counter reaches 5 consecutive failures, the power to the modem is briefly interrupted just as if I had unplugged it, counted to 10 and plugged it back in.</p>
<p>To make this bit of ESPHome configuration re-usable, I&rsquo;ve packaged up the functionality into a pair of standalone files that can be included into an existing ESPHome configuration.</p>
<p>Documentation for why/how things work has been put in the comments of each file to aid understanding.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        How the S31 powering modem appears in Home Assistant
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h3 id="baseyaml"><code>base.yaml</code></h3>
<p>This implements 95% of the logic and everything that&rsquo;s not implementation specific:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span><span class="lnt">160
</span><span class="lnt">161
</span><span class="lnt">162
</span><span class="lnt">163
</span><span class="lnt">164
</span><span class="lnt">165
</span><span class="lnt">166
</span><span class="lnt">167
</span><span class="lnt">168
</span><span class="lnt">169
</span><span class="lnt">170
</span><span class="lnt">171
</span><span class="lnt">172
</span><span class="lnt">173
</span><span class="lnt">174
</span><span class="lnt">175
</span><span class="lnt">176
</span><span class="lnt">177
</span><span class="lnt">178
</span><span class="lnt">179
</span><span class="lnt">180
</span><span class="lnt">181
</span><span class="lnt">182
</span><span class="lnt">183
</span><span class="lnt">184
</span><span class="lnt">185
</span><span class="lnt">186
</span><span class="lnt">187
</span><span class="lnt">188
</span><span class="lnt">189
</span><span class="lnt">190
</span><span class="lnt">191
</span><span class="lnt">192
</span><span class="lnt">193
</span><span class="lnt">194
</span><span class="lnt">195
</span><span class="lnt">196
</span><span class="lnt">197
</span><span class="lnt">198
</span><span class="lnt">199
</span><span class="lnt">200
</span><span class="lnt">201
</span><span class="lnt">202
</span><span class="lnt">203
</span><span class="lnt">204
</span><span class="lnt">205
</span><span class="lnt">206
</span><span class="lnt">207
</span><span class="lnt">208
</span><span class="lnt">209
</span><span class="lnt">210
</span><span class="lnt">211
</span><span class="lnt">212
</span><span class="lnt">213
</span><span class="lnt">214
</span><span class="lnt">215
</span><span class="lnt">216
</span><span class="lnt">217
</span><span class="lnt">218
</span><span class="lnt">219
</span><span class="lnt">220
</span><span class="lnt">221
</span><span class="lnt">222
</span><span class="lnt">223
</span><span class="lnt">224
</span><span class="lnt">225
</span><span class="lnt">226
</span><span class="lnt">227
</span><span class="lnt">228
</span><span class="lnt">229
</span><span class="lnt">230
</span><span class="lnt">231
</span><span class="lnt">232
</span><span class="lnt">233
</span><span class="lnt">234
</span><span class="lnt">235
</span><span class="lnt">236
</span><span class="lnt">237
</span><span class="lnt">238
</span><span class="lnt">239
</span><span class="lnt">240
</span><span class="lnt">241
</span><span class="lnt">242
</span><span class="lnt">243
</span><span class="lnt">244
</span><span class="lnt">245
</span><span class="lnt">246
</span><span class="lnt">247
</span><span class="lnt">248
</span><span class="lnt">249
</span><span class="lnt">250
</span><span class="lnt">251
</span><span class="lnt">252
</span><span class="lnt">253
</span><span class="lnt">254
</span><span class="lnt">255
</span><span class="lnt">256
</span><span class="lnt">257
</span><span class="lnt">258
</span><span class="lnt">259
</span><span class="lnt">260
</span><span class="lnt">261
</span><span class="lnt">262
</span><span class="lnt">263
</span><span class="lnt">264
</span><span class="lnt">265
</span><span class="lnt">266
</span><span class="lnt">267
</span><span class="lnt">268
</span><span class="lnt">269
</span><span class="lnt">270
</span><span class="lnt">271
</span><span class="lnt">272
</span><span class="lnt">273
</span><span class="lnt">274
</span><span class="lnt">275
</span><span class="lnt">276
</span><span class="lnt">277
</span><span class="lnt">278
</span><span class="lnt">279
</span><span class="lnt">280
</span><span class="lnt">281
</span><span class="lnt">282
</span><span class="lnt">283
</span><span class="lnt">284
</span><span class="lnt">285
</span><span class="lnt">286
</span><span class="lnt">287
</span><span class="lnt">288
</span><span class="lnt">289
</span><span class="lnt">290
</span><span class="lnt">291
</span><span class="lnt">292
</span><span class="lnt">293
</span><span class="lnt">294
</span><span class="lnt">295
</span><span class="lnt">296
</span><span class="lnt">297
</span><span class="lnt">298
</span><span class="lnt">299
</span><span class="lnt">300
</span><span class="lnt">301
</span><span class="lnt">302
</span><span class="lnt">303
</span><span class="lnt">304
</span><span class="lnt">305
</span><span class="lnt">306
</span><span class="lnt">307
</span><span class="lnt">308
</span><span class="lnt">309
</span><span class="lnt">310
</span><span class="lnt">311
</span><span class="lnt">312
</span><span class="lnt">313
</span><span class="lnt">314
</span><span class="lnt">315
</span><span class="lnt">316
</span><span class="lnt">317
</span><span class="lnt">318
</span><span class="lnt">319
</span><span class="lnt">320
</span><span class="lnt">321
</span><span class="lnt">322
</span><span class="lnt">323
</span><span class="lnt">324
</span><span class="lnt">325
</span><span class="lnt">326
</span><span class="lnt">327
</span><span class="lnt">328
</span><span class="lnt">329
</span><span class="lnt">330
</span><span class="lnt">331
</span><span class="lnt">332
</span><span class="lnt">333
</span><span class="lnt">334
</span><span class="lnt">335
</span><span class="lnt">336
</span><span class="lnt">337
</span><span class="lnt">338
</span><span class="lnt">339
</span><span class="lnt">340
</span><span class="lnt">341
</span><span class="lnt">342
</span><span class="lnt">343
</span><span class="lnt">344
</span><span class="lnt">345
</span><span class="lnt">346
</span><span class="lnt">347
</span><span class="lnt">348
</span><span class="lnt">349
</span><span class="lnt">350
</span><span class="lnt">351
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">substitutions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># How many seconds between http requests</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">poll_interval_seconds</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;10&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># How many failed requests before we take action</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># If polling happens every 10 seconds and runs for at most 2 seconds then</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 5 failures in a row would mean that the host has been in a failed state for</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># somewhere between 50 and 60 seconds before we take action.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">consecutive_failure_threshold</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;5&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># How many polls to wait for until action can be taken again</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">lockout_ticks_count</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;20&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">globals</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># How many seconds between checking the remote host</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_http_poll_interval_ticks</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_value</span><span class="p">:</span><span class="w"> </span><span class="kc">yes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">initial_value</span><span class="p">:</span><span class="w"> </span><span class="l">${poll_interval_seconds}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Not clear if script execution is blocked while the http request is in flight.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># It appears to be, so I might be able to safely remove this?</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">_glbl_http_poll_request_in_flight</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">bool</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_value</span><span class="p">:</span><span class="w"> </span><span class="kc">no</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">initial_value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;false&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Lockout/cool-down prevents a failed result from immediately triggering another cycle</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># E.g.: if the poll target is down and we power cycle it and then immediately check... it won&#39;t respond</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># which will mean another power cycle ...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">_glbl_http_poll_lockout_ticks</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_value</span><span class="p">:</span><span class="w"> </span><span class="kc">yes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">initial_value</span><span class="p">:</span><span class="w"> </span><span class="l">${lockout_ticks_count}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Need to keep track of the number of ticks since we last took the failure action</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">_glbl_http_poll_ticks_since_last_failure_action</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_value</span><span class="p">:</span><span class="w"> </span><span class="kc">no</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">initial_value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Monotonically increasing counter</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">_glbl_http_poll_ticks</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_value</span><span class="p">:</span><span class="w"> </span><span class="kc">no</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">initial_value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># How many failures have we had?</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">_glbl_http_poll_failures_count</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_value</span><span class="p">:</span><span class="w"> </span><span class="kc">no</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">initial_value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># How many failures before we do something?</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_http_poll_failures_threshold</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_value</span><span class="p">:</span><span class="w"> </span><span class="kc">no</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">initial_value</span><span class="p">:</span><span class="w"> </span><span class="l">${consecutive_failure_threshold}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Allows for disconnecting consecutive failure action if needed.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">_glbl_http_poll_consecutive_failure_action_enabled</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">bool</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_value</span><span class="p">:</span><span class="w"> </span><span class="kc">no</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">initial_value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;true&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Expose the current state of the poll/lockout timer</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">text_sensor</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;HTTP Poll Status&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">txt_operation_mode</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:information-off-outline&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;diagnostic&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Will be called to update as necessary from other components</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">update_interval</span><span class="p">:</span><span class="w"> </span><span class="l">never</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      // This lambda function should never be called / we should never update the text sensor this way
</span></span></span><span class="line"><span class="cl"><span class="sd">      return {&#34;Unknown&#34;};</span><span class="w">      
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Expose the current success/failure counts for stats</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">sensor</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Consecutive Poll Failure Count&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">s_consecutive_poll_failure_count</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:progress-alert&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;diagnostic&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      if (id(_glbl_http_poll_failures_count)) {
</span></span></span><span class="line"><span class="cl"><span class="sd">        return id(_glbl_http_poll_failures_count);
</span></span></span><span class="line"><span class="cl"><span class="sd">      } else {
</span></span></span><span class="line"><span class="cl"><span class="sd">        return 0.0;
</span></span></span><span class="line"><span class="cl"><span class="sd">      }</span><span class="w">      
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Will be called to update as necessary from other components</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">update_interval</span><span class="p">:</span><span class="w"> </span><span class="l">never</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Allow tweaking the poll interval and failure threshold via Home Assistant</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># See: https://esphome.io/components/number/template.html</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">number</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Poll Interval&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">num_poll_interval</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:timer-sand&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;config&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">unit_of_measurement</span><span class="p">:</span><span class="w"> </span><span class="l">seconds</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">box</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">min_value</span><span class="p">:</span><span class="w"> </span><span class="m">2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">max_value</span><span class="p">:</span><span class="w"> </span><span class="m">120</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">step</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      return (int) id(glbl_http_poll_interval_ticks);</span><span class="w">      
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">set_action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Store the val</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">globals.set</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_http_poll_interval_ticks</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span>!<span class="l">lambda |-</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="l">return (int) x;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Consecutive Failure Threshold&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">num_consecutive_failure_threshold</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:alert-minus-outline&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;config&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">unit_of_measurement</span><span class="p">:</span><span class="w"> </span><span class="l">failures</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">box</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">min_value</span><span class="p">:</span><span class="w"> </span><span class="m">2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">max_value</span><span class="p">:</span><span class="w"> </span><span class="m">10</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">step</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      return (int) id(glbl_http_poll_failures_threshold);</span><span class="w">      
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">set_action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Store the val</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">globals.set</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_http_poll_failures_threshold</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span>!<span class="l">lambda |-</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="l">return (int) x;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">switch</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># A global arm/disarm switch for the http poll</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;HTTP Request Check&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">sw_http_request</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:web-sync&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;config&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># It&#39;s OK to have this set to ON at boot since we immediately go into lockout mode before we start polling</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_mode</span><span class="p">:</span><span class="w"> </span><span class="l">RESTORE_DEFAULT_ON</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># This way we don&#39;t need to create a global for the state</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">optimistic</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_turn_on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">script.execute</span><span class="p">:</span><span class="w"> </span><span class="l">_on_http_poll_turned_on</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_turn_off</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">script.execute</span><span class="p">:</span><span class="w"> </span><span class="l">_on_http_poll_turned_off</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># In addition to polling, also gate the actual consecutive failure action.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># This way, action can be disabled without disabling the polling itself; useful for testing polling</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#   or just gathering stats about how often the poll fails...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Consecutive Failure Action Enable&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">sw_cons_failure_action</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:alert-outline&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;config&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># It&#39;s OK to have this set to ON at boot since we immediately go into lockout mode before we start polling</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_mode</span><span class="p">:</span><span class="w"> </span><span class="l">RESTORE_DEFAULT_ON</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># This way we don&#39;t need to create a global for the state</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      return id(_glbl_http_poll_consecutive_failure_action_enabled);</span><span class="w">      
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">turn_on_action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">globals.set</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">_glbl_http_poll_consecutive_failure_action_enabled</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;true&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">turn_off_action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">globals.set</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">_glbl_http_poll_consecutive_failure_action_enabled</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;false&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">script</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># When polling starts back up, we have some variable initialization to do</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">_on_http_poll_turned_on</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">single</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_glbl_http_poll_ticks) = 0;
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_glbl_http_poll_ticks_since_last_failure_action) = 0;
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_glbl_http_poll_failures_count) = 0;
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_glbl_http_poll_request_in_flight) = false;
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(txt_operation_mode).publish_state(&#34;Armed&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_http_poll_tick).execute();</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># When polling function is turned off, there&#39;s a few things to clean up</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">_on_http_poll_turned_off</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">single</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_glbl_http_poll_ticks) = 0;
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_glbl_http_poll_ticks_since_last_failure_action) = 0;
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_glbl_http_poll_request_in_flight) = false;
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(txt_operation_mode).publish_state(&#34;Disarmed&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_do_poll).stop();
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_http_poll_tick).stop();</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># What do we do when we get a 200 response?</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">_on_http_poll_ok</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">single</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Poll was OK, indicate status and reset the _glbl_http_poll_failures_count</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          auto const static TAG = &#34;_on_http_poll_ok&#34;;
</span></span></span><span class="line"><span class="cl"><span class="sd">          ESP_LOGD(TAG, &#34;Poll OK. Resetting failure count.&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_glbl_http_poll_failures_count) = 0;
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(s_consecutive_poll_failure_count).update();
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(txt_operation_mode).publish_state(&#34;Success&#34;);</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># What do we do when we get a non-200 response?</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">_on_http_poll_failure</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">single</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Disable timer, have the text sensor update</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          auto const static TAG = &#34;_on_http_poll_failure&#34;;
</span></span></span><span class="line"><span class="cl"><span class="sd">          // Count and publish
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_glbl_http_poll_failures_count)++;
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(s_consecutive_poll_failure_count).update();
</span></span></span><span class="line"><span class="cl"><span class="sd">          
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(txt_operation_mode).publish_state(&#34;Failure&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">          ESP_LOGW(TAG, &#34;Failures: %i, Threshold: %i&#34;, id(_glbl_http_poll_failures_count), id(glbl_http_poll_failures_threshold));
</span></span></span><span class="line"><span class="cl"><span class="sd">          
</span></span></span><span class="line"><span class="cl"><span class="sd">          if( id(_glbl_http_poll_failures_count) &gt;= id(glbl_http_poll_failures_threshold) ) {
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(_on_http_poll_failure_threshold_met).execute();
</span></span></span><span class="line"><span class="cl"><span class="sd">          }</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># And when failure count reaches threshold, what do we do?</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">_on_http_poll_failure_threshold_met</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">single</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Disable timer, have the text sensor update</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          auto const static TAG = &#34;_on_http_poll_failure_threshold_met&#34;;
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          ESP_LOGE(TAG, &#34;Consecutive failure threshold met!&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">          if (id(_glbl_http_poll_consecutive_failure_action_enabled)) {
</span></span></span><span class="line"><span class="cl"><span class="sd">            ESP_LOGE(TAG, &#34;Executing action!&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">            // User must provide _valid_ C++ code here to be substituted in at compile time
</span></span></span><span class="line"><span class="cl"><span class="sd">            ${failure_threshold_met_action}
</span></span></span><span class="line"><span class="cl"><span class="sd">          } else {
</span></span></span><span class="line"><span class="cl"><span class="sd">            ESP_LOGE(TAG, &#34;Action disabled!&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">          }
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          // Reset the failure count
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_glbl_http_poll_failures_count) = 0;
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(s_consecutive_poll_failure_count).update();
</span></span></span><span class="line"><span class="cl"><span class="sd">          // Reset the time since last failure counter to enter lockout mode
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_glbl_http_poll_ticks_since_last_failure_action) = 0;</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">_do_poll</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># DO NOT start a new run until the previous one completes!</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">single</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Tell the user we&#39;re polling</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          // Indicate we are now polling
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(txt_operation_mode).publish_state(&#34;Polling&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_glbl_http_poll_request_in_flight) = true;</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Fire off the http request</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">http_request.get</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">http_poll</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">${http_url}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">verify_ssl</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="c"># In testing, was able to confirm that this will be called even if there&#39;s an error.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="c"># If failure occurred before HTTP could happen, status will be negative integer</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="c"># ESPHome does not permit defining lambda functions &#34;externally&#34;... but we can do this with scripts.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="c"># To make this package as re-usable as possible, call into a `handle_on_response` script and expect the user</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="c"># to provide one at compile time.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">on_response</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">script.execute</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">handle_on_response</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">status_code</span><span class="p">:</span><span class="w"> </span>!<span class="l">lambda |- </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="l">return status_code;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">duration_ms</span><span class="p">:</span><span class="w"> </span>!<span class="l">lambda |-</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="l">return duration_ms;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">_http_poll_tick</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Start a new run after previous runs completes. This will happen until timer.stop() is called on us</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">queued</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">max_runs</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># A single &#39;tick&#39; is 1 second long</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">delay</span><span class="p">:</span><span class="w"> </span><span class="l">1s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          /*
</span></span></span><span class="line"><span class="cl"><span class="sd">            The &#34;super loop&#34; scheduler.
</span></span></span><span class="line"><span class="cl"><span class="sd">            This script is called every second and is responsible for determining if it&#39;s time to poll the target.
</span></span></span><span class="line"><span class="cl"><span class="sd">          */
</span></span></span><span class="line"><span class="cl"><span class="sd">          auto const static TAG = &#34;lambda._http_poll_tick&#34;;
</span></span></span><span class="line"><span class="cl"><span class="sd">          static int num_ticks = 0;
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          // Count this tick
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_glbl_http_poll_ticks) += 1;
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_glbl_http_poll_ticks_since_last_failure_action)++;
</span></span></span><span class="line"><span class="cl"><span class="sd">          num_ticks = id(_glbl_http_poll_ticks);
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          // Are we supposed to be running at all?
</span></span></span><span class="line"><span class="cl"><span class="sd">          if( !id(sw_http_request) ) {
</span></span></span><span class="line"><span class="cl"><span class="sd">            ESP_LOGD(TAG, &#34;Not running. sw_http_request: %i&#34;, id(sw_http_request).state);
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(_on_http_poll_turned_off).execute();
</span></span></span><span class="line"><span class="cl"><span class="sd">            return;
</span></span></span><span class="line"><span class="cl"><span class="sd">          }
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          // Check if there&#39;s already a request in flight.
</span></span></span><span class="line"><span class="cl"><span class="sd">          // Note that there appears to be a yaml only way of checking if a script is already running?
</span></span></span><span class="line"><span class="cl"><span class="sd">          // I can&#39;t find an API that allows me to do this ... so for now we have to keep track of this flag in a global bool.
</span></span></span><span class="line"><span class="cl"><span class="sd">          if (id(_glbl_http_poll_request_in_flight)) {
</span></span></span><span class="line"><span class="cl"><span class="sd">            ESP_LOGD(TAG, &#34;Request in flight! Nothing to do...&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(_on_http_poll_turned_off).execute();
</span></span></span><span class="line"><span class="cl"><span class="sd">            return;
</span></span></span><span class="line"><span class="cl"><span class="sd">          }
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          // We should be running and there is currently no request in flight... Are we in lockout?
</span></span></span><span class="line"><span class="cl"><span class="sd">          if( id(_glbl_http_poll_ticks_since_last_failure_action) &lt; id(_glbl_http_poll_lockout_ticks) ) {
</span></span></span><span class="line"><span class="cl"><span class="sd">            ESP_LOGD(TAG, &#34;In lockout! ticks_since_last_failure_action: %i, lockout_ticks: %i&#34;, id(_glbl_http_poll_ticks_since_last_failure_action), id(_glbl_http_poll_lockout_ticks));
</span></span></span><span class="line"><span class="cl"><span class="sd">            
</span></span></span><span class="line"><span class="cl"><span class="sd">            // TODO: add the lockout time remaining to the text sensor?
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(txt_operation_mode).publish_state(&#34;Locked Out&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(_http_poll_tick).execute();
</span></span></span><span class="line"><span class="cl"><span class="sd">            return;
</span></span></span><span class="line"><span class="cl"><span class="sd">          }
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          // We&#39;re not in lock out...Is it time to poll?
</span></span></span><span class="line"><span class="cl"><span class="sd">          if( num_ticks % id(glbl_http_poll_interval_ticks) != 0 ) {
</span></span></span><span class="line"><span class="cl"><span class="sd">            ESP_LOGD(TAG, &#34;Not time to poll. num_ticks: %i, interval_ticks: %i&#34;, num_ticks, id(glbl_http_poll_interval_ticks));
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(txt_operation_mode).publish_state(&#34;Waiting&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">          } else {
</span></span></span><span class="line"><span class="cl"><span class="sd">            ESP_LOGD(TAG, &#34;Time to poll! num_ticks: %i, glbl_http_poll_interval_ticks: %i&#34;, num_ticks, id(glbl_http_poll_interval_ticks));
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(_do_poll).execute();
</span></span></span><span class="line"><span class="cl"><span class="sd">          }
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          // re-schedule so we&#39;re called again in a second!
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_http_poll_tick).execute();</span><span class="w">          
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="modemyaml"><code>modem.yaml</code></h3>
<p>This file is the &ldquo;implementation specific&rdquo; details that can&rsquo;t be done in <code>base.yaml</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">packages</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">base</span><span class="p">:</span><span class="w"> </span>!<span class="l">include</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">file</span><span class="p">:</span><span class="w"> </span><span class="l">base.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">vars</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Comcast does not permit users to change this address on their own modems... üò°</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">http_url</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;http://192.168.100.1&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># When enough consecutive failures have been detected, this is what is &#34;injected&#34; into the</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># `_on_http_poll_failure_threshold_met` script. It must be _valid_ c++ code or compilation will fail.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Elsewhere in my main ESPHome configuration, I have button that triggers an automation to </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># briefly cut and then restore power to effectively power cycle the modem.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># This code is the same as the user manually pressing that button.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">failure_threshold_met_action</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;id(btn_modem_restart).press();&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># In testing, the web server on modem does come up quickly but seems to go back down after</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># ISP pushes their configuration down. Web server comes back up a few seconds later.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Best to just wait a while for things to stabilize.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">lockout_ticks_count</span><span class="p">:</span><span class="w"> </span><span class="m">120</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Note: not possible to have this defined in `base.yaml` and tweaked with !extend here</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># See: https://github.com/esphome/issues/issues/5360</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">http_request</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">http_poll</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">follow_redirects</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">timeout</span><span class="p">:</span><span class="w"> </span><span class="l">2s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Note: omit this for ESP32 devices :)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">esp8266_disable_ssl_support</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># This is where a request result is classified into either a failure or success.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># It lives outside of the base package because each http server is different.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">script</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">handle_on_response</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">parameters</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># status_code, duration_ms</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">status_code</span><span class="p">:</span><span class="w"> </span><span class="l">int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">duration_ms</span><span class="p">:</span><span class="w"> </span><span class="l">int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          auto const static TAG = &#34;_do_poll.on_response&#34;;
</span></span></span><span class="line"><span class="cl"><span class="sd">          // Request is no longer in flight
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_glbl_http_poll_request_in_flight) = false;
</span></span></span><span class="line"><span class="cl"><span class="sd">          ESP_LOGD(TAG, &#34;Response status: %d, Duration: %u ms&#34;, status_code, duration_ms);
</span></span></span><span class="line"><span class="cl"><span class="sd">          // Nominally, 200/OK is the ONLY success condition but since modem uses 302 redirect to HTTPS
</span></span></span><span class="line"><span class="cl"><span class="sd">          // and the ESP8266 does not support TLS, we can&#39;t follow the redirect to the 200/OK page and
</span></span></span><span class="line"><span class="cl"><span class="sd">          // must consider the 302 redirect as a success as well.
</span></span></span><span class="line"><span class="cl"><span class="sd">          switch( status_code ) {
</span></span></span><span class="line"><span class="cl"><span class="sd">              case 200:
</span></span></span><span class="line"><span class="cl"><span class="sd">                id(_on_http_poll_ok).execute();
</span></span></span><span class="line"><span class="cl"><span class="sd">                break;
</span></span></span><span class="line"><span class="cl"><span class="sd">              case 302:
</span></span></span><span class="line"><span class="cl"><span class="sd">                id(_on_http_poll_ok).execute();
</span></span></span><span class="line"><span class="cl"><span class="sd">                break;
</span></span></span><span class="line"><span class="cl"><span class="sd">              default:
</span></span></span><span class="line"><span class="cl"><span class="sd">                ESP_LOGW(TAG, &#34;Response status: %d, Duration: %u ms&#34;, status_code, duration_ms);
</span></span></span><span class="line"><span class="cl"><span class="sd">                id(_on_http_poll_failure).execute();
</span></span></span><span class="line"><span class="cl"><span class="sd">                break;
</span></span></span><span class="line"><span class="cl"><span class="sd">            }</span><span class="w">          
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="all-together-now">All together now</h3>
<p>Hopefully it&rsquo;s clear to see that <code>modem.yaml</code> wraps/includes <code>base.yaml</code>.
This is how <code>modem.yaml</code> is injected into the existing configuration that I have deployed on the S31 powering my modem.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># See: https://esphome.io/guides/configuration-types.html#packages</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">packages</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Omitted: common packages for Network info, NTP, OTA, MQTT, </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#   relay/gpio and other device specific things... etc</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Add http polling configured for this specific application</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">http_poll</span><span class="p">:</span><span class="w"> </span>!<span class="l">include packages/http_poll/modem.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">logger</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#  &lt;...&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">logs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># ESPHome considers anything not 200/OK as a failure and will WARN about it.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># See: https://github.com/esphome/esphome/blob/38b7bed2faa522e7e065d8362d6ea0bcaf1c64d5/esphome/components/http_request/http_request.cpp#L92</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># This is technically correct but results in log spam that is not useful to me.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># For my purposes, hearing anything back from the modem (302 or 200) counts as a success.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Silence log spam by hiding all http_request log lines unless they&#39;re ERROR level</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">http_request</span><span class="p">:</span><span class="w"> </span><span class="l">ERROR</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">button</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Note: must not conflict with the button named &#34;Restart&#34; which reboots the ESP, not toggles the relay!</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Modem Restart&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">btn_modem_restart</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:restart&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_press</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">switch.turn_off</span><span class="p">:</span><span class="w"> </span><span class="l">sw_relay_toggle</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">delay</span><span class="p">:</span><span class="w"> </span><span class="l">15s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">switch.turn_on</span><span class="p">:</span><span class="w"> </span><span class="l">sw_relay_toggle</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>Arris SB8200 Prometheus Exporter</title><link>https://karlquinsland.com/arris-sb8200-prometheus-exporter/</link><pubDate>Tue, 19 Mar 2024 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/arris-sb8200-prometheus-exporter/</guid><description><![CDATA[<!-- markdownlint-disable-file MD002 -->
<p>This is a very short &ldquo;announcement&rdquo; post.</p>
<p>To beef up my home-lab observability stack, I&rsquo;ve been working on a few projects to expose more data to Prometheus.
Getting metrics from my cable modem has been on the &ldquo;todo&rdquo; list for literally years.
There have been various metric exporters written in the past but they have either been archived/deleted off of GitHub or are otherwise inappropriate for my needs.
So, I wrote my own.</p>
<p>The GitHub repo is <a href="https://github.com/kquinsland/sb820_prometheus_exporter/" target="_blank" rel="noopener noreffer">here</a> if you want to dive right in.</p>
<p>When set up, one possible way to visualize the data looks like this:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        blah
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h2 id="a-few-observations">A few observations</h2>
<p>While building out the dashboard / prototyping it, a few things immediately stood out as &ldquo;interesting&rdquo;</p>
<p>After rebooting the modem, the metrics that keep track of error-corrected symbols sent/received over the connection are 0.
This makes sense as the modem has just been rebooted and hasn&rsquo;t had time to accumulate any errors yet.
The first jump in correctable/uncorrectable errors&hellip; happens to corelate directly with a meaningful change in both received/downstream power <em>and</em> transmit/upstream power.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        blah
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>The metric exporter keeps track of how long scraping the modem&rsquo;s web interface takes as well as weather or not the scraped data was complete / well formed.
The time it takes to scrape a particular endpoint increases pretty quickly after power up before leveling off.
I&rsquo;d love to know why the web server on the modem slows down so quickly after booting up&hellip;.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        blah
        
            
        
        </p> 
    </figcaption>
    
</figure>


]]></description></item><item><title>Quick and dirty hack to extend the MK3S print area.</title><link>https://karlquinsland.com/extending-the-mk3s-print-area/</link><pubDate>Sun, 04 Feb 2024 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/extending-the-mk3s-print-area/</guid><description><![CDATA[<!-- markdownlint-disable-file MD002 -->
<p>This isn&rsquo;t going to be a long post. I&rsquo;m working on a larger project but hit a snag and I didn&rsquo;t find any easy/obvious solutions online so I thought I&rsquo;d share what I came up with.</p>
<p>Details will come later when the bigger project is ready to be released so you&rsquo;ll have to forgive me for the lack of context.
Essentially I have a large / multi-hour print that <strong>almost</strong> fits on my MK3s print bed but is too large to slice as is.</p>
<p>Here&rsquo;s the short version:</p>
<ul>
<li>The MK3S has a print area of 250mm x 210mm x 210mm (X, Y, Z).</li>
<li>The part in question is circular and has a circumference of ~215mm so I need to extend the Y axis by ~5mm.</li>
<li>I can&rsquo;t scale it down to fit as it&rsquo;s a functional part with specific dimensions.</li>
</ul>
<h2 id="the-problem">The problem</h2>
<p>PrusaSlicer refuses to slice the part and gives the following error message:</p>
<blockquote>
<p>&ldquo;An object outside the print area was detected. Resolve the current problem to continue slicing.</p>
</blockquote>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The part JUST BARELY fits on the print bed. This whole trick only works because the dark blue portion is so small.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>Since the part is circular, there&rsquo;s no way to &ldquo;rotate&rdquo; it to fit within the print area.</p>
<h2 id="the-idea">The &ldquo;idea&rdquo;</h2>
<p>In the image above, the dark blue portion of the part is &ldquo;outside&rdquo; the print area; some portion of the object is below the <code>0,0</code> origin of the print bed.</p>
<p>But the pre-print priming line is done further &ldquo;south&rdquo; on the build plate so we know the printer can physically print in the area; it&rsquo;s only a software limitation preventing it from doing so.</p>
<p>This can be confirmed by looking at &ldquo;stock&rdquo; <code>gcode</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">&lt;...&gt;
</span></span><span class="line"><span class="cl">; Prime line routine
</span></span><span class="line"><span class="cl">G0 Z0.15 ; Restore nozzle position - (thanks tim.m30)
</span></span><span class="line"><span class="cl">M900 K0; Disable Linear Advance for prime line
</span></span><span class="line"><span class="cl">G92 E0.0 ; reset extrusion distance
</span></span><span class="line"><span class="cl">G1 Y-3.0 F1000.0 ; go outside print area
</span></span><span class="line"><span class="cl">&lt;...&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>The <code>G1</code> line shown above moves the print head to <code>-3.0</code> mm on the Y axis.</p>
<p>Since I only need a few mm of extra space an the printer clearly has a few mm of extra space&hellip; ü§î.</p>
<p>Can I &ldquo;trick&rdquo; the slicer into generating valid <code>gcode</code> and then modify the <code>gcode</code> to shift the part down by 5mm?
Yep.</p>
<p>It works üòÖ.</p>
<h2 id="the-fix">The &ldquo;fix&rdquo;</h2>
<p>Convince the slicer to generate valid gcode and then modify the gcode to shift the part down by 5mm.
To do this:</p>
<ul>
<li>Modify the print bed dimensions in PrusaSlicer so the part will fit the print bed w/o any warnings. Don&rsquo;t make the print bed any larger than needed and do not make it any larger than the printer is physically capable of.</li>
<li>Slice as usual, save the <code>gcode</code> to a file.</li>
<li>Run the script below which will shift every print instruction by 5mm in the Y direction.</li>
<li>Send the modified <code>gcode</code> to the printer and hope for the best ü§û.</li>
</ul>
<p>Graphically, it looks like this:</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>After saving the adjusted print bed dimensions, the part should fit and slice without any warnings.</p>
<h2 id="the-code">The code</h2>
<p>It&rsquo;s not pretty but it works.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python3" data-lang="python3"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">adjust_gcode_y_position</span><span class="p">(</span><span class="n">input_file</span><span class="p">,</span> <span class="n">output_file</span><span class="p">,</span> <span class="n">adjustment</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">input_file</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">infile</span><span class="p">,</span> <span class="nb">open</span><span class="p">(</span><span class="n">output_file</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">outfile</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">infile</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="s1">&#39;Y&#39;</span> <span class="ow">in</span> <span class="n">line</span> <span class="ow">and</span> <span class="p">(</span><span class="s1">&#39;G0&#39;</span> <span class="ow">in</span> <span class="n">line</span> <span class="ow">or</span> <span class="s1">&#39;G1&#39;</span> <span class="ow">in</span> <span class="n">line</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># Split the line into components to find the Y component</span>
</span></span><span class="line"><span class="cl">                <span class="n">parts</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                <span class="n">new_parts</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">                <span class="k">for</span> <span class="n">part</span> <span class="ow">in</span> <span class="n">parts</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="k">if</span> <span class="n">part</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s1">&#39;Y&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                        <span class="c1"># Extract current Y value and adjust</span>
</span></span><span class="line"><span class="cl">                        <span class="n">y_value</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">part</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span> <span class="o">-</span> <span class="n">adjustment</span>
</span></span><span class="line"><span class="cl">                        <span class="n">new_parts</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;Y</span><span class="si">{:.3f}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">y_value</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                        <span class="n">new_parts</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">part</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># Write the adjusted line</span>
</span></span><span class="line"><span class="cl">                <span class="n">outfile</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">new_parts</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># Write unmodified line</span>
</span></span><span class="line"><span class="cl">                <span class="n">outfile</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Usage</span>
</span></span><span class="line"><span class="cl"><span class="n">input_gcode_path</span> <span class="o">=</span> <span class="s1">&#39;your_original_gcode_file_here.gcode&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">output_gcode_path</span> <span class="o">=</span> <span class="s1">&#39;ADJ.your_original_gcode_file_here.gcode&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">y_adjustment</span> <span class="o">=</span> <span class="mf">5.0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">adjust_gcode_y_position</span><span class="p">(</span><span class="n">input_gcode_path</span><span class="p">,</span> <span class="n">output_gcode_path</span><span class="p">,</span> <span class="n">y_adjustment</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="the-result">The result</h2>
<p>See for yourself:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Ignore the wrinkles just to the right of the PINDA probe; it&#39;s a separate issue.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>Note that the edge of the circle just barely touches the edge of the print bed on the right and &ldquo;sits&rdquo; a few mm below the &ldquo;usable&rdquo; print bed area on the left.</p>
<p>Hopefully that&rsquo;s helpful to someone else out there.
If anybody knows why Prusa &ldquo;reserves&rdquo; this space, I&rsquo;d love to know.</p>
]]></description></item><item><title>Altinex TE460-137 Teardown</title><link>https://karlquinsland.com/altinex-te460-137-teardown/</link><pubDate>Sat, 02 Dec 2023 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/altinex-te460-137-teardown/</guid><description><![CDATA[<h1 id="altinex-te460-137-teardown">Altinex TE460-137 Teardown</h1>
<p>It is surprisingly hard to find a device that can dump details about the various protocols and negotiated standards for a HDMI connection.
For how ubiquitous HDMI is, you&rsquo;d <em>think</em> that there would be a lot of devices that can do this.
There are LOADS of devices that can snoop USB and Ethernet, but HDMI is a bit of a different beast, apparently.</p>
<p>After a bit of searching, I found the <a href="https://www.altinex.com/product/te460-137/" target="_blank" rel="noopener noreffer">Altinex TE460-137</a> could do exactly what I wanted.</p>
<p>(/enhanced-homeassistantswitchplate/) project.</p>
<p>Like the <a href="/pulse-eight-hdmi-cec-injector-teardown/" rel="">HDMI CEC dongle</a> this device is a bit specialized and so there&rsquo;s not a lot of readily available information about it online.
I was curious about what&rsquo;s inside and how it works, so I decided to take a look.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Front of the device.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h2 id="magnuson-moss-warranty-act">Magnuson-Moss Warranty Act</h2>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The case split open.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>Notice that pierced <code>Warranty void if removed</code> sticker over the bottom right screw?
Yeah, that&rsquo;s <a href="https://www.npr.org/sections/thetwo-way/2018/04/11/601582169/warranty-void-if-removed-as-it-turns-out-feds-say-those-warnings-are-illegal" target="_blank" rel="noopener noreffer"><strong>illegal</strong></a>.
Naturally, companies don&rsquo;t want you to know that the sticker is <a href="https://www.ifixit.com/News/15464/warranty-voiding-stickers-are-illegal-but-these-companies-are-still-using-them" target="_blank" rel="noopener noreffer">unenforceable</a>.</p>
<p>Consider this a small <a href="https://www.ifixit.com/News/11748/warranty-stickers-are-illegal" target="_blank" rel="noopener noreffer">PSA</a>: if you see a sticker like this, you can safely ignore it.
The company <em>cannot</em> void your warranty for removing it but they absolutely can make your life difficult if you do.
If you get pushback, direct them to the <a href="https://www.ftc.gov/business-guidance/resources/businesspersons-guide-federal-warranty-law" target="_blank" rel="noopener noreffer">FTC&rsquo;s official statement</a> on the matter.</p>
<p>Anyways.</p>
<h2 id="quick-peek-inside">Quick peek Inside</h2>
<p>After removing the four screws, the case splits open easily enough.
The construction is a bit more elaborate than expected; there&rsquo;s a main PCB, a control PCB, and a battery interface PCB.</p>
<p>I was in a hurry so the photos are &ldquo;as-is&rdquo; and not my best work.
I&rsquo;ve <a href="#chips-and-other-markings" rel="">noted down the markings on the chips</a> and other components for future reference.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Internals feature three PCBs.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>If the battery ever does leak, the entire PCB assembly can be removed and replaced.
It also shouldn&rsquo;t be that difficult to just modify the battery interface PCB to use a different battery.
The thermistor is a nice touch!</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Rear of the battery interface PCB.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>Taking a quick look at the control PCB, we can see a few big ICs&hellip;
The populated JTAG header is an interesting find.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Top of the control PCB.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>There&rsquo;s not much on the rear of the control PCB:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Bottom of the control PCB.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>Nor is there much on the side of the PCB just behind the OLED screen / front panel.
Oddly enough, each button gets <em>two</em> sets of contacts&hellip;</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The side of the main PCB that faces the user from within.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>And there&rsquo;s nothing interesting on the &lsquo;internal&rsquo; side of the front panel:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Interior of the front panel features button matrix and OLED.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h2 id="some-technical-details">Some Technical Details</h2>
<p>If you catch the device early enough in boot, you can see the panasonic HDMI switch chip enumerating in it&rsquo;s default state.
Don&rsquo;t ask me where the 2% overscan comes from&hellip;</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The default EDID info doesn&#39;t last long; as soon as the device is powered on, it tries to read the EDID from the connected sink and use that.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h3 id="chips-and-other-markings">Chips and other markings</h3>
<h4 id="control-pcb">Control PCB</h4>
<ul>
<li>The main application processor is the <a href="https://www.nxp.com/part/LPC1830FET100#/" target="_blank" rel="noopener noreffer">NXP LPC1830FET100</a>.</li>
<li>It seems like all audio is handled by the <a href="https://www.analog.com/en/products/adau1701.html" target="_blank" rel="noopener noreffer">Analog Devices ADAU1701</a>.</li>
</ul>
<p>Oddly enough there are <em>two</em> flash chips here. Presumably firmware storage for the  NXP and Analog Devices chips.</p>
<ul>
<li><a href="https://www.winbond.com/hq/product/code-storage-flash-memory/serial-nor-flash/?__locale=en&amp;partNo=W25Q32JV" target="_blank" rel="noopener noreffer">Winbond 25Q32JV</a></li>
<li><a href="https://www.microchip.com/en-us/product/24lc128" target="_blank" rel="noopener noreffer">Microchip 24LC128I</a></li>
</ul>
<p>I didn&rsquo;t bother dumping either, but Altinex does make an older version of the firmware <a href="#firmware" rel="">available</a>.</p>
<h3 id="main-pcb">Main PCB</h3>
<p>The big QFP144 chip on the main PCB is a <a href="https://panasonic.encompass.com/item/10292549/Panasonic/MN864788/" target="_blank" rel="noopener noreffer">Panasonic MN864788</a>.
I can&rsquo;t find a data sheet, but one <a href="https://stesys.eu/ocart/index.php?route=product/product&amp;manufacturer_id=135&amp;product_id=2544&amp;limit=75" target="_blank" rel="noopener noreffer">supplier has labeled it</a> a &ldquo;HDMI 2.0 Receiver/Switch&rdquo;.
Given the proximity to the two HDMI ports &hellip; this makes sense.</p>
<h3 id="dmesg"><code>dmesg</code></h3>
<p>For thoroughness, here&rsquo;s how the device enumerates over USB when plugged in when configured in RS-232 mode:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">usb 5-4.1.2.2: new full-speed USB device number <span class="m">91</span> using xhci_hcd
</span></span><span class="line"><span class="cl">usb 5-4.1.2.2: New USB device found, <span class="nv">idVendor</span><span class="o">=</span>04e2, <span class="nv">idProduct</span><span class="o">=</span>1411, <span class="nv">bcdDevice</span><span class="o">=</span> 0.01
</span></span><span class="line"><span class="cl">usb 5-4.1.2.2: New USB device strings: <span class="nv">Mfr</span><span class="o">=</span>1, <span class="nv">Product</span><span class="o">=</span>2, <span class="nv">SerialNumber</span><span class="o">=</span><span class="m">3</span>
</span></span><span class="line"><span class="cl">usb 5-4.1.2.2: Product: XR21B1411
</span></span><span class="line"><span class="cl">usb 5-4.1.2.2: Manufacturer: Exar Corp.
</span></span><span class="line"><span class="cl">usb 5-4.1.2.2: SerialNumber: Q9065270561
</span></span><span class="line"><span class="cl">usbcore: registered new interface driver xr_serial
</span></span><span class="line"><span class="cl">usbserial: USB Serial support registered <span class="k">for</span> xr_serial
</span></span><span class="line"><span class="cl">xr_serial 5-4.1.2.2:1.0: xr_serial converter detected
</span></span><span class="line"><span class="cl">usb 5-4.1.2.2: xr_serial converter now attached to ttyUSB0
</span></span></code></pre></td></tr></table>
</div>
</div><p>And when in FW update mode:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">usb 5-4.1.2.2: new high-speed USB device number <span class="m">92</span> using xhci_hcd
</span></span><span class="line"><span class="cl">usb 5-4.1.2.2: config <span class="m">1</span> interface <span class="m">0</span> altsetting <span class="m">0</span> bulk endpoint 0x83 has invalid maxpacket <span class="m">64</span>
</span></span><span class="line"><span class="cl">usb 5-4.1.2.2: config <span class="m">1</span> interface <span class="m">0</span> altsetting <span class="m">0</span> bulk endpoint 0x2 has invalid maxpacket <span class="m">64</span>
</span></span><span class="line"><span class="cl">usb 5-4.1.2.2: New USB device found, <span class="nv">idVendor</span><span class="o">=</span>1fc9, <span class="nv">idProduct</span><span class="o">=</span>8001, <span class="nv">bcdDevice</span><span class="o">=</span> 1.00
</span></span><span class="line"><span class="cl">usb 5-4.1.2.2: New USB device strings: <span class="nv">Mfr</span><span class="o">=</span>1, <span class="nv">Product</span><span class="o">=</span>2, <span class="nv">SerialNumber</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl">usb 5-4.1.2.2: Product: USB Mass Storage ¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†
</span></span><span class="line"><span class="cl">usb 5-4.1.2.2: Manufacturer: USB
</span></span><span class="line"><span class="cl">usb-storage 5-4.1.2.2:1.0: USB Mass Storage device detected
</span></span><span class="line"><span class="cl">scsi host4: usb-storage 5-4.1.2.2:1.0
</span></span><span class="line"><span class="cl">scsi 4:0:0:0: Direct-Access ¬†¬†¬†¬†NXP ¬†¬†¬†¬†¬†Dataflash Disk ¬†¬†0.00 PQ: <span class="m">0</span> ANSI: <span class="m">0</span>
</span></span><span class="line"><span class="cl">sd 4:0:0:0: <span class="o">[</span>sda<span class="o">]</span> <span class="m">3968</span> 512-byte logical blocks: <span class="o">(</span>2.03 MB/1.94 MiB<span class="o">)</span>
</span></span><span class="line"><span class="cl">sd 4:0:0:0: <span class="o">[</span>sda<span class="o">]</span> Write Protect is off
</span></span><span class="line"><span class="cl">sd 4:0:0:0: <span class="o">[</span>sda<span class="o">]</span> Mode Sense: <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>
</span></span><span class="line"><span class="cl">sd 4:0:0:0: <span class="o">[</span>sda<span class="o">]</span> Asking <span class="k">for</span> cache data failed
</span></span><span class="line"><span class="cl">sd 4:0:0:0: <span class="o">[</span>sda<span class="o">]</span> Assuming drive cache: write through
</span></span><span class="line"><span class="cl">usb 5-4.1.2.2: reset high-speed USB device number <span class="m">92</span> using xhci_hcd
</span></span><span class="line"><span class="cl">usb 5-4.1.2.2: device descriptor read/64, error -110
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="firmware">Firmware</h3>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>Note<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>The device ships with FW 3.06A/R3.</p>
<p>Their <a href="https://www.altinex.com/download/te460-137-firmware-update-v-3-04a-easy-mode/" target="_blank" rel="noopener noreffer">website</a> only have 3.04 available.</p>
</div>
        </div>
    </div>
]]></description></item><item><title>AliExpress 11.11 Sale Teardowns</title><link>https://karlquinsland.com/aliexpress-11-11-sale-teardowns/</link><pubDate>Fri, 01 Dec 2023 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/aliexpress-11-11-sale-teardowns/</guid><description><![CDATA[<!-- markdownlint-disable-file MD024 -->
<h1 id="11-11-day-teardowns">11-11 day teardowns</h1>
<p><a href="https://en.wikipedia.org/wiki/Singles%27_Day" target="_blank" rel="noopener noreffer">Single&rsquo;s Day</a> is a big deal in China and AliExpress has a big sale in celebration.</p>
<p>In addition to project supplies, I found quite a few items that can only be classified as  &ldquo;ohh, that looks interesting and I need another $11 in the cart to unlock free shipping&hellip;&rdquo; items.</p>
<p>I was planing on doing a series of posts covering some of the stuff I bought but nothing on it&rsquo;s own was really &ldquo;worth&rdquo; a full post so instead of a bunch of short <a href="/tags/two-minute-teardown/" rel="">&ldquo;Two Minute Teardown&rdquo;</a> posts, I decided to just roll everything into this massive post.</p>
<p>And with that, here&rsquo;s a whole grab bag of worth of #TwoMinuteTeardowns with the appropriate level of detail for each item.</p>
<h2 id="super-cheap-airtag">Super cheap &lsquo;AirTag&rsquo;</h2>
<p>Product in question: <a href="https://www.aliexpress.us/item/3256804801453934.html?gatewayAdapt=glo2usa" target="_blank" rel="noopener noreffer">Mini Tracker Bluetooth4.0 Smart Locator Smart Anti Lost Device Locator Mobile Keys Pet Kids Finder For Apple</a></p>
<p>This was a mistake on my part.
I saw a BTLE powered device tracker shaped and styled exactly like an air tag for <strong>$5 shipped</strong> and thought &ldquo;why not?&rdquo;
One good reason why not: it&rsquo;s not compatible with Apple&rsquo;s Find My network.</p>
<p>In hindsight, if it was only $5 and if it worked &rsquo;natively&rsquo; with apple devices&hellip; I&rsquo;d have heard about it before browsing Ali Express!</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<h3 id="markings-and-other-details">Markings and other details</h3>
<p>The main CPU appears to be a <a href="https://www.lenzetech.com/public/store/pdf/jsggs/ST17H66B2_BLE_SoC_Datasheet_v1.1.2.pdf" target="_blank" rel="noopener noreffer">Lenze Tech ST17H66B</a></p>
<p>The instructions point to an <a href="https://www.qrtransfer.com/iSearching.html" target="_blank" rel="noopener noreffer"><code>iSearching</code> app</a>
I didn&rsquo;t bother installing it, here&rsquo;s what a quick scan of the BTLE characteristics shows quite a few services and characteristics:</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<h2 id="tuya-wifi-power-monitor">TuYa WiFi Power Monitor</h2>
<p>Product in question: <a href="https://s.click.aliexpress.com/e/_mNLeK44" target="_blank" rel="noopener noreffer">16A Tuya WIFI Smart Socket AC220V 110V Digital Wattmeter EU Plug Electricity consumption Power KWH US AU FR Power Energy Meter</a></p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>TuYa module doesn&rsquo;t seem to be running the show; most of the pads are not connected; only the UART pins seem to be going somewhere.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>A bit more going on than you&rsquo;d expect at first; I was expecting a simple Switch Mode power supply driver for DC and then a single MCU to do everything but the WiFi.
Not so!
There&rsquo;s a dedicated chip for power monitoring, BT, Power supply, and the main MCU&hellip;</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<h3 id="markings-and-other-details-1">Markings and other details</h3>
<ul>
<li>
<p><a href="https://en.sekorm.com/doc/2232723.html" target="_blank" rel="noopener noreffer">KP3211BSG</a></p>
</li>
<li>
<p><a href="https://www.wch-ic.com/products/CH573.html" target="_blank" rel="noopener noreffer">CH573F</a></p>
</li>
<li>
<p><a href="https://www.aliexpress.us/item/2255799832871961.html?gatewayAdapt=glo2usa4itemAdapt" target="_blank" rel="noopener noreffer">GMT024-01</a></p>
</li>
<li>
<p><a href="https://developer.tuya.com/en/docs/iot/cb3s?id=Kai94mec0s076" target="_blank" rel="noopener noreffer">TuYa CBS3 module</a></p>
</li>
<li>
<p><a href="https://www.lcsc.com/product-detail/Energy-Metering-ICs_BL-Shanghai-Belling-BL0942_C2837510.html" target="_blank" rel="noopener noreffer">BL0942</a></p>
</li>
<li>
<p><code>BP0S229-28A2</code>: This is the same chip that shows up in the <a href="#pet-rfid-tag-reader" rel="">pet RFID reader</a> and I cant&rsquo; find an exact match for it.</p>
</li>
<li>
<p>LCD is marked <code>AVDD AVCL</code> which seems to be pretty generic</p>
</li>
</ul>
<h2 id="tuya-wifi-air-quality-monitor">TuYa WiFi Air Quality Monitor</h2>
<p>Product in question: <a href="https://s.click.aliexpress.com/e/_mPXVCDO" target="_blank" rel="noopener noreffer">Tuya Wifi Portable Air Quality Meter 8in1 PM1.0 PM2.5 PM10 CO2 TVOC HCHO Temperature and Humidity Tester Carbon Dioxide Detector</a></p>
<p>Unfortunately you have to peel off the screen cover to get access to the screws.
At least they&rsquo;re just regular philips screws and not some weird security screws.</p>
<p>Interesting to see the IR sensor at the top. Presumably this is for proximity sensing to turn the screen on and off and not some kind of IR blaster or remote control.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Makes sense that the various sensors would be facing the vents holes.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Looks like it&rsquo;s using a micro controller to do the heavy lifting and only communicate to the TuYa module via UART.
This is a common and well-supported pattern for these kinds of devices &hellip; even if it does mean that it won&rsquo;t be <em>trivial</em> to just replace the TuYa module with an ESPHome or Tasmota compatible module.</p>
<p>Sniffing the UART shouldn&rsquo;t be that difficult but it&rsquo;s not something I&rsquo;m going to do in this post.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>The various sensors aren&rsquo;t easily removed or clearly identified so your guess is as good as mine.
The main PCB has a few unpopulated connections so this module either works with a different suite of sensors or - more likely - supports a few different footprints for each sensor.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<h3 id="markings-and-other-details-2">Markings and other details</h3>
<ul>
<li>Main MCU: FMD B2CACSK. I can&rsquo;t find <em>anything</em> on this chip.</li>
<li>TuYa module: <a href="https://developer.tuya.com/en/docs/iot/cbu-module-datasheet?id=Ka07pykl5dk4u" target="_blank" rel="noopener noreffer">CBU</a></li>
</ul>
<p>PCB is marked with:</p>
<pre><code>PV28_TFT_v3
2022/10/25
</code></pre>
<p>Screen is marked with:</p>
<pre><code>LY028S24256
</code></pre>
<h2 id="waveshare-poe-rs232485422-adapter">WaveShare PoE RS232/485/422 adapter</h2>
<p>Product in question: <a href="https://s.click.aliexpress.com/e/_mPR1X7e" target="_blank" rel="noopener noreffer">with POE optional Modbus MQTT JSON serial server RS485 RS232 RS422 to Ethernet TCP/IP to serial converter</a>.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p><a href="https://electronics.stackexchange.com/questions/413295/rs485-termination" target="_blank" rel="noopener noreffer">Line termination resistors</a> that can be switched  in/out via jumpers is a very nice touch!</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Neat and clean PCB layout with adequate protections on the RS485/422/232 lines.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Unfortunately the main MCU has it&rsquo;s markings lasered off so your guess is as good as mine.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<h3 id="markings-and-other-details-3">Markings and other details</h3>
<p>All the RS485/422/232 seems to be done with Sipex/MaxLinear chips:</p>
<ul>
<li>
<p>RS484/422 via <a href="https://assets.maxlinear.com/web/documents/sipex/datasheets/sp483e.pdf" target="_blank" rel="noopener noreffer">MaxLinear SP483E</a></p>
</li>
<li>
<p>RS232 via <a href="https://assets.maxlinear.com/web/documents/sipex/datasheets/sp3222e_sp3232e.pdf" target="_blank" rel="noopener noreffer">Max Linear (Sipex) SP3222E</a>.</p>
</li>
<li>
<p>Isolation between PoE and Comms via <a href="https://www.aliexpress.us/item/3256804720041549.html?gatewayAdapt=glo2usa4itemAdapt" target="_blank" rel="noopener noreffer">2PAI SEMI 141E61</a></p>
</li>
</ul>
<p>There&rsquo;s also a few Diodes Inc. chips on the board:</p>
<ul>
<li>
<p>PoE rectification via <a href="https://www.diodes.com/assets/Datasheets/MB10F.pdf" target="_blank" rel="noopener noreffer">Diodes Incorporated MB10F</a></p>
</li>
<li>
<p>PoE power switching via <a href="https://www.diodes.com/assets/Datasheets/SBR8U60P5.pdf" target="_blank" rel="noopener noreffer">Diodes Incorporated SBR8U60P5</a></p>
</li>
</ul>
<p>PoE negotiation via <a href="https://www.silan.com.cn/en/index.php/product/details/3145.html" target="_blank" rel="noopener noreffer">Silan SD4950</a></p>
<h2 id="asometech-wlx-x69-usb-c-power-brick">Asometech WLX-X69 USB-C power brick</h2>
<p>Product in question: <a href="https://s.click.aliexpress.com/e/_mPlQZcs" target="_blank" rel="noopener noreffer">140W 6 Ports PD Fast Charger 30W Multi USB-C Fast Charging Station with LED Display for IPhone 14 13 Pro Max Samsung Xiaomi lpad</a></p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>The mirror finish &hellip; is certainly a choice.
It gets better once you remove the protective film, at least.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>There are no screws holding the case together; just pry the back panel off, slide out the power supply and you can access the front PCB that does the actual USB-C power negotiations.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>I am 100% sure that this power supply was originally designed for something else.
One of the original leads was cut off before the power supply was re-purposed.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>After removing the power distribution board from the case, it&rsquo;s quite clean!
It would also be trivial to use this board in other projects ü§î.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Single CPU to run the show and a USB-C power negotiation chip per port.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Too much glue keeping everything the power supply together for me to bother taking it apart further.
It&rsquo;s got some heft to it but I&rsquo;m not able to easily check out quality of transformer or other components.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<h3 id="markings-and-other-details-4">Markings and other details</h3>
<ul>
<li>Main CPU is marked <code>FMD A3JMLTH</code> but I can&rsquo;t find any information on it.</li>
<li>USB-C PD negotiations handled with <a href="https://www.ismartware.com/upload/admin/20210312/202103121815173213.pdf" target="_blank" rel="noopener noreffer">ZHUHAI ISMARTWARE TECHNOLOGY SW3526</a></li>
</ul>
<h2 id="pet-rfid-tag-reader">Pet RFID tag reader</h2>
<p>Product in question: <a href="https://s.click.aliexpress.com/e/_mrfMB5i" target="_blank" rel="noopener noreffer">134.2Khz RFID Animal Tag Reader Handheld Pet Microchip Scanner IISO11784/85/FDX-B/EMID Data Storage Microchip For Pet/Dog/Cat/Pig</a></p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Not much on the back of the PCB: just a beeper and generic battery management IC.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>I honestly thought this would be more integrated.
Instead there&rsquo;s quite a few chips on the board.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<h3 id="markings-and-other-details-5">Markings and other details</h3>
<ul>
<li>
<p><a href="https://www.microchip.com/en-us/product/mcp602" target="_blank" rel="noopener noreffer">Microchip MCP602</a>: OpAmp, likely used for processing the signal from the antenna.</p>
</li>
<li>
<p><a href="https://datasheetspdf.com/datasheet/XN297.html" target="_blank" rel="noopener noreffer">Panchip XN297L8W</a>: 2.4 ghz radio</p>
</li>
<li>
<p><code>MT00606XA</code>: I can&rsquo;t find any information on this chip.</p>
</li>
<li>
<p><code>BP0S229-28A2</code>: A chip from <a href="https://www.zh-jieli.com/" target="_blank" rel="noopener noreffer">Zhuhai Jieli Technology</a> that I can&rsquo;t seem to 100% identify.
The markings match the same chip that showed up in the <a href="#tuya-wifi-power-monitor" rel="">power monitor</a> above.
The power monitor has both WiFi and Bluetooth so it&rsquo;s not a stretch to think that this chip is Bluetooth connectivity.</p>
</li>
</ul>
<p>PCB is marked <code>W90A-V1.9</code></p>
<h2 id="atk-ptdp100-dc-power-supply">ATK-PTDP100 DC Power Supply</h2>
<p>Product in question: <a href="https://s.click.aliexpress.com/e/_mOfFkQY" target="_blank" rel="noopener noreffer">DP100 DC Power Supply Adjustable Digital DC Power Supply MINI Portable Lab Source Power Supply Voltage Regulator Switch 30V 5A</a></p>
<p>This is nothing more than a desk-friendly version of the <a href="/electronics-lab-enhanced-bench-psu/" rel="">RD6006</a> power supply and it&rsquo;s amazing.</p>
<p>Here&rsquo;s everything that came in the box:</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>It shipped with this power supply and a barrel jack to USB-C adapter&hellip; because the DP100 actually expects its power to come <em>from</em> a USB-C/PD capable source.
It&rsquo;ll be trivial to use this power supply with a USB-C power bank.
It - annoyingly - has a USB-A <strong><em>male</em></strong> port for data logging / firmware updates.
At least they included a Male &lt;-&gt; Male USB A cable&hellip;
I would have preferred two USB-C ports with clear labeling about which was meant for PD input and which was meant for PC communications.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>For reference, the power supply is pretty beefy:</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Terminals are compact but decently high quality.
The little red and black rubber bands are a nice touch.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Annoying security torx screws under the rubber feet.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Screen is a bit cramped and navigation is a bit clunky but once you get used to it, it&rsquo;s not bad.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>After removing the screws and prying the case apart, it&rsquo;s quite clean inside.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Main CPU next to some unpopulated pin headers and some loctite screwing the PCB to the terminals.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>On the other side of the PCB is a metal can with all the fun power conversion stuff.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>They&rsquo;re doing a <a href="https://www.allaboutcircuits.com/textbook/direct-current/chpt-8/kelvin-resistance-measurement/" target="_blank" rel="noopener noreffer">4 wire measurement</a> at the terminals via a small secondary PCB.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>And after removing the can, it&rsquo;s just a bunch of filter caps and an inductor.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<h3 id="markings-and-other-details-6">Markings and other details</h3>
<p>Unfortunately most of the ICs didn&rsquo;t photograph well or otherwise have scratched / obscured markings.
Most of the power switching ICs <em>look</em> like they&rsquo;re from Monolithic Power Systems but I can&rsquo;t confirm exactly.</p>
<p><a href="https://www.lcsc.com/product-detail/USB-ICs_WCH-Jiangsu-Qin-Heng-CH224K_C970725.html" target="_blank" rel="noopener noreffer">WCH(Jiangsu Qin Heng) CH224K</a></p>
<p>Main CPU is <a href="https://www.arterychip.com/en/product/AT32F415.jsp" target="_blank" rel="noopener noreffer">Artery AT32F415</a></p>
]]></description></item><item><title>Inside of the Pulse-Eight HDMI CEC Injector.</title><link>https://karlquinsland.com/pulse-eight-hdmi-cec-injector-teardown/</link><pubDate>Fri, 01 Dec 2023 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/pulse-eight-hdmi-cec-injector-teardown/</guid><description><![CDATA[<h1 id="inside-the-pulse-eight-hdmi-cec-injector">Inside the Pulse-Eight HDMI CEC Injector</h1>
<p>To make a long store short, Google recently pushed a few updates to my TV that made it slow as all hell and frustratingly unusable.
I finally got fed up with the laggy UI and dug out an old mini PC and installed <a href="https://libreelec.tv/" target="_blank" rel="noopener noreffer">LibreELEC</a> on it.</p>
<p>Everything worked perfectly <em>except</em> for the lack of <a href="https://en.wikipedia.org/wiki/Consumer_Electronics_Control" target="_blank" rel="noopener noreffer">CEC</a> support on the mini PC.</p>
<p>This is a common enough problem that there&rsquo;s a few different devices out there that can add CEC support to a device that doesn&rsquo;t have it.
I chose the <a href="https://www.pulse-eight.com/p/104/usb-hdmi-cec-adapter" target="_blank" rel="noopener noreffer">Pulse-Eight HDMI CEC Injector</a> because it&rsquo;s natively supported by LibreELEC.</p>
<p>I was curious what was inside and I couldn&rsquo;t find any teardowns online so I decided to do one myself.
There&rsquo;s not much to the device and I&rsquo;m not doing any serious reverse engineering here so let&rsquo;s call this a <a href="/tags/two-minute-teardown/" rel="">&ldquo;Two Minute Teardown&rdquo;</a>.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The device is small and unassuming.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Opening is trivial. No glue or anything. Just a few pins and sockets. Gently pry the two halves apart and you&#39;re in.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>I wasn&rsquo;t expecting much; I thought CEC was implemented via UART and not SPI so I was expecting to see a cheap FTDI knockoff chip or similar.
Turns out I was wrong and the device uses an <a href="https://www.microchip.com/en-us/product/at90usb162" target="_blank" rel="noopener noreffer">ATMEL 90USB162</a> which is a USB to SPI bridge.
I haven&rsquo;t looked too closely at the <a href="https://github.com/Pulse-Eight/libcec" target="_blank" rel="noopener noreffer">firmware</a> but I suspect there&rsquo;s some abstraction layer that makes it look like a <a href="#dmesg" rel="">UART</a> to the OS.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Other than a few passives, there&#39;s only one chip on the board.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Nothing interesting other than a programming header.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The full PCB sans case.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h2 id="dmesg"><code>dmesg</code></h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">usb 5-4.1.2.3.2: new full-speed USB device number <span class="m">2</span> using xhci_hcd
</span></span><span class="line"><span class="cl">usb 5-4.1.2.3.2: New USB device found, <span class="nv">idVendor</span><span class="o">=</span>2548, <span class="nv">idProduct</span><span class="o">=</span>1002, <span class="nv">bcdDevice</span><span class="o">=</span>10.00
</span></span><span class="line"><span class="cl">usb 5-4.1.2.3.2: New USB device strings: <span class="nv">Mfr</span><span class="o">=</span>1, <span class="nv">Product</span><span class="o">=</span>2, <span class="nv">SerialNumber</span><span class="o">=</span><span class="m">3</span>
</span></span><span class="line"><span class="cl">usb 5-4.1.2.3.2: Product: CEC Adapter
</span></span><span class="line"><span class="cl">usb 5-4.1.2.3.2: Manufacturer: Pulse-Eight
</span></span><span class="line"><span class="cl">usb 5-4.1.2.3.2: SerialNumber: v12
</span></span><span class="line"><span class="cl">input: Pulse-Eight CEC Adapter as /devices/pci0000:00/0000:00:08.1/0000:0d:00.3/usb5/5-4/5-4.1/5-4.1.2/5-4.1.2.3/5-4.1.2.3.2/5-4.1.2.3.2:1.2/0003:2548:1002.0102/input/input195
</span></span><span class="line"><span class="cl">hid-generic 0003:2548:1002.0102: input,hidraw10: USB HID v1.10 Mouse <span class="o">[</span>Pulse-Eight CEC Adapter<span class="o">]</span> on usb-0000:0d:00.3-4.1.2.3.2/input2
</span></span><span class="line"><span class="cl">cdc_acm 5-4.1.2.3.2:1.0: ttyACM0: USB ACM device
</span></span><span class="line"><span class="cl">usbcore: registered new interface driver cdc_acm
</span></span><span class="line"><span class="cl">cdc_acm: USB Abstract Control Model driver <span class="k">for</span> USB modems and ISDN adapters
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>ESPHome for Sonoff T5 family of Switches</title><link>https://karlquinsland.com/sonoff-t5-esphome/</link><pubDate>Sat, 11 Nov 2023 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/sonoff-t5-esphome/</guid><description><![CDATA[<h1 id="esphome-for-sonoff-t5-family-of-switches">ESPHome for Sonoff T5 family of Switches</h1>
<p>It&rsquo;s hard to beat Sonoff switches when it comes to well-made, affordable, Home Assistant compatible switches.
Ever since they announced the <a href="https://sonoff.tech/product/smart-wall-switches/tx-ultimate/" target="_blank" rel="noopener noreffer">T5 series</a>, I&rsquo;ve been patiently waiting for the US variant to become available so I could replace my M5 switches with T5 switches.</p>
<p>Don&rsquo;t get me wrong, the M5 switches are great&hellip; but <a href="#t5-improvements-over-m5" rel="">not perfect</a>.</p>
<p>The T5 switches improve on the M5 limitations with some new and novel hardware features.
Taking advantage of these unique features requires a considerably more complex <a href="#esphome-configuration" rel="">ESPHome configuration</a> than the M5 series switches.</p>
<p>But before diving into the configuration, let&rsquo;s briefly take a closer look at the hardware.</p>
<h2 id="brief-hardware-overview">Brief hardware overview</h2>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>Note<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>Everything I&rsquo;m going to cover below is for the US version.</p>
<p>Presumably the international version has a different layout and total number of LEDs.</p>
</div>
        </div>
    </div>
<p>The T5 series follows the &ldquo;two part&rdquo; design of the M5 switches; there&rsquo;s a &ldquo;base&rdquo; that gets mounted in the wall and then the &ldquo;face plate&rdquo; that snaps on to the base.
All high-voltage electronics stay in the base and the face plate is just a PCB with a touch sensor and LEDs.
As far as I can tell, the face plates are interchangeable between the 1, 2, 3 and 4 relay variants but only within the same family; the physical features that mate the face plate to the base differ between M and T series switches.</p>
<p>The one bit of information that <a href="https://github.com/SmartHome-yourself/sonoff-tx-ultimate-for-esphome/issues/15" target="_blank" rel="noopener noreffer">doesn&rsquo;t seem to be readily available online</a> is the location of the LEDs on the PCB, specifically the US version.</p>
<h3 id="led-locations">LED locations</h3>
<p>For the US version, there are 32 LEDs around the perimeter of the switch; 6 on the top, 6 on the bottom, and 10 on each side.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Clear shot of the PCB showing location of each LED. This is from the rear so the numbers on the right will be on the left when looking at the front of the switch.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>From the front of the switch, mounted in traditional &ldquo;tall&rdquo; orientation:</p>
<ul>
<li>Top right corner going down the right side
LED 32, 1-9</li>
<li>Bottom right corner going across the bottom to the left
LED 10-15</li>
<li>Bottom left corner going up the left side
LED 16-25</li>
<li>Top left corner going across the top to the right
LED 26-31</li>
</ul>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>Note<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Note that the silk screen on the PCB starts counting at 1 but ESPHome starts counting at 0.</div>
        </div>
    </div>
<h2 id="t5-improvements-over-m5">T5 improvements over M5</h2>
<p>My issues with the M5 switches can be broadly summarized as:</p>
<ul>
<li>The physical touch targets are <strong>TINY</strong> relative to the size of the switch face.</li>
<li>There&rsquo;s only a <strong>TINY</strong> single-color LED that indicates the state of the switch <em>and</em> where the user should touch to trigger the relay.</li>
</ul>
<h3 id="small-touch-area">Small Touch Area</h3>
<p>The <code>1C</code> variant has the largest touch area but it&rsquo;s still only about 50% of the switch face.
As you increase the number of relays, the area dedicated to each physical touch zone decreases which makes it harder to press.</p>
<p>If you&rsquo;re coming into a room with arms full of groceries and you try to hit one of the buttons on the <code>3C</code> variant with your elbow, you&rsquo;re going to have a bad time.
There&rsquo;s no reason why the physical touch zones couldn&rsquo;t use the entire surface of the switch.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Unlike the International version of the M5 series, the US version doesn&#39;t use the full surface of the switch for touch input.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>The T5 series fixes this by making the entire surface of the switch touch sensitive!</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Instead of a single touch zone, the entire surface is touch sensitive.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>This introduces a <em>new</em> problem, though, how do you know where to touch to toggle a given output?
Look at these two styles of face plates for the T5 series and see if you can identify which belongs to the 1, 2, 3 and 4 relay variants:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Which face plate belongs to which variant? You can&#39;t tell just by looking at them!
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p><strong>You can&rsquo;t.</strong></p>
<p>If you look <strong>really close</strong>, you can see <em>very</em> faint delineation lines between the touch zones but it&rsquo;s not obvious at a glance and it certainly will not be obvious to guests looking at the switch from across the room.
Trying to figure out where to touch in a <em>dark</em> room is even harder.</p>
<p>We can solve this with the LEDs around the perimeter of the switch, though!</p>
<h3 id="indicating-touch-zone-and-relay-state">Indicating touch zone and relay state</h3>
<p>The M5 switches have a single red LED for each physical button that is fully illuminated when the relay is on.
As a group, these indicator LEDs can be dimmed to indicate where to touch to trigger the relay.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        You can _clearly_ tell that this is a 3 relay variant and the left most relay is ON.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>To get a comparable visual indicator, we can use the LEDs around the perimeter of the touch panel; split the LEDs on the sides into groups; one group per relay/touch-area.</p>
<p>Instead of using LEDs on both the right and left side together, alternate which side is lit up to indicate the state of the relay; if the LEDs on the left are lit up, the relay is on and if the LEDs on the right are lit up, the relay is off.</p>
<p>Given this picture, you can <em>clearly</em> tell that this T5 switch supports two touch areas and both relays are currently off:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Please ignore the smudge on the bottom half of the switch that I didn&#39;t notice until after I took the picture.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>This is a <em>huge</em> improvement over the M5 series switches but it comes with a cost: complexity.
The T5 comes in 1, 2, 3 and 4 relay variants.
Each relay means a set of lights that need to be controlled.
Excluding the RGB LEDs on the top/bottom of the switch, this gives us up to 8 partition lights that we need to create in the ESPHome configuration.</p>
<h2 id="esphome-configuration">ESPHome Configuration</h2>
<p>Here&rsquo;s what the UI looks like for the 1 relay variant.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        1 Relay variant with timer for light counting down.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>For a single switch that has just a single relay, there&rsquo;s an awful lot going on here as the copious amount of <code>yaml</code> <a href="#file-structure" rel="">below</a> will demonstrate.
Normally I&rsquo;d just show the <code>yaml</code> with comments in the relevant sections but there&rsquo;s a few &ldquo;features&rdquo; that I want to detail first before diving into how they are implemented.</p>
<h3 id="features">Features</h3>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>Note<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Home Assistant orders entities alphabetically and does not offer any way to cluster related entities together.
I&rsquo;m going in the same order that they appear in the screenshot above even though it&rsquo;ll seem like I&rsquo;m jumping around a bit.</div>
        </div>
    </div>
<p><strong>Controls:</strong></p>
<ul>
<li><code>light.{Bottom,Top}</code>: These are the bottom/top <a href="https://esphome.io/components/light/partition.html" target="_blank" rel="noopener noreffer">partitions</a> of the RGB LEDs around the perimeter of the switch. I don&rsquo;t use them for anything in the ESPHome configuration but they are exposed to Home Assistant so that I can use them for other automations and notifications. Think &ldquo;pulse the top LEDs on the front-door switch when the garage door is open&rdquo; &hellip;</li>
<li><code>light.Mood Light</code>: This is the entire ring of RGB LEDs around the perimeter of the switch. Like the Top/Bottom lights, I don&rsquo;t use this for anything explicitly in the ESPHome configuration but it is exposed to Home Assistant so that I can use it for other automations and notifications.</li>
<li><code>light.Light</code>: This is the actual light entity that is controlled by the relay.</li>
</ul>
<p><strong>Configuration:</strong></p>
<ul>
<li><code>button.{Daytime,Nighttime} Mode</code>: These act as simple &ldquo;one touch&rdquo; buttons that set the <code>light.Indicator</code> to a hardcoded color/brightness for a given <a href="#regimes" rel="">regime</a>.</li>
<li><code>button.Determine Mode</code>: This is a manual trigger for an otherwise automatic script that determines which <a href="#regimes" rel="">regime</a> to use.</li>
<li><code>light.Indicator</code>: This is a <a href="#indicator--template-light" rel="">&ldquo;template&rdquo; light</a> that wraps the set of lights that indicate the state of the relay and touch zone.</li>
<li><code>number.Light Timer</code>: This is a <a href="#dynamic-timer" rel="">dynamic timer</a> that is used to turn off the light after a given amount of time. A sane default value is chosen but it can be overridden from the Home Assistant UI if needed. Example: normally, keep the bathroom fan on for 30 minutes unless taking a long and luxurious bath, then adjust the timer for 90 minutes.</li>
<li><code>button.Light Timer Restart</code>: Restarts the dynamic timer for the light. Useful for extending the amount of time the light is on if, for example, Home Assistant detects that the room is still occupied.</li>
<li><code>switch.Light Timer</code>: Toggle to control if the dynamic timer should be armed or not.</li>
<li><code>switch.Sun position changes light regime</code>: Toggle to control if the sun position should trigger a change in the <a href="#regimes" rel="">regime</a>.</li>
<li><code>switch.Touch Enable</code>: Toggle to control if the touch sensor inputs should be processed or ignored.</li>
</ul>
<p><strong>Diagnostic:</strong></p>
<ul>
<li><code>text.Light Timeout Time Remaining</code>: This is a <a href="https://esphome.io/components/text_sensor/template.html" target="_blank" rel="noopener noreffer">template text</a> that displays the remaining time on the <a href="#dynamic-timer" rel="">dynamic timer</a>. Useful for triggering other automations when the timer is about to expire.</li>
</ul>
<h4 id="indicator--template-light">Indicator / &ldquo;Template&rdquo; Light</h4>
<p>Remember that the <a href="#indicating-touch-zone-and-relay-state" rel="">solution</a> to the &ldquo;where do I touch to toggle / what&rsquo;s the current state of the&rdquo; relay problem is to use the LEDs around the perimeter of the switch.
Specifically, cut the LEDs on left and right side into groups and then associate each left/right pair with a relay/touch zone.</p>
<p>This will result in two &ldquo;lights&rdquo; for <em>each</em> relay; one for the &ldquo;on&rdquo; state and one for the &ldquo;off&rdquo; state.
I want to hide these lights from Home Assistant as they are just an implementation detail and should not be controlled directly.
For each relay, I want only a single &ldquo;template&rdquo; light that I can assign color/brightness to and have that automatically propagate to the &ldquo;on&rdquo; or &ldquo;off&rdquo; partition light as appropriate for the relay&rsquo;s current state.</p>
<p>This single light is the <code>light.Indicator</code> entity.</p>
<p>ESPHome doesn&rsquo;t <em>technically</em> have a &ldquo;template&rdquo; light but it does have a <a href="https://esphome.io/components/light/custom.html" target="_blank" rel="noopener noreffer">custom light component</a> that can be used to create a &ldquo;template&rdquo; light.</p>
<p>For convenience, the <code>button.{Daytime,Nighttime} Mode</code> entities set the color/brightness of the <code>light.Indicator</code> to a hardcoded value for the given regime.
This is useful for quickly getting each indicator light into a consistent state after some other automation has changed the color/brightness for a subset of indicator lights.</p>
<h4 id="regimes">Regimes</h4>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>Note<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>I use the word regime and mode interchangeably to refer to a set of color/brightness values for the indicator lights.
This is a byproduct of an earlier version of the configuration where I had stricter control over weather or not the partition lights or moodlight should be &ldquo;in control&rdquo; of what the RGB LEDs are doing.
I&rsquo;ve since relaxed this requirement and settled on a general &ldquo;the partition lights are in control until the Moodlight is turned on&rdquo; policy.</p>
<p>This ultimately stems from how ESPHome tries to make a single string of addressable LEDs behave like multiple independent strings of LEDs.
The last &ldquo;light&rdquo; to be updated is the one that &ldquo;wins&rdquo;, and gets to control the LEDs.
If you set an effect like Rainbow on the moodlight and then turn on the partition lights, the partition lights will &ldquo;win&rdquo; until the moodlight moves to a new color; then the moodlight will &ldquo;win&rdquo; until the partition lights are updated again.</p>
<p>However, when the moodlight is turned <em>off</em>, the partition lights will resume their default regime.</p>
</div>
        </div>
    </div>
<p>Since each &ldquo;indicator&rdquo; light is exposed to Home Assistant, it&rsquo;s possible to set a unique color for each relay if desired.
But without explicitly changing the color/brightness of the indicator lights, two &ldquo;baked-in&rdquo; modes are present: daytime, and nighttime.</p>
<p>The color/brightness values for these two modes are declared once in the <code>yaml</code>, so they&rsquo;re easy to change if your particular deployment calls for different colors.
It just so happened that given the various locations that each switch is deployed a soft blue and red happened to work best for me.</p>
<p>Here&rsquo;s two pictures of the same switch under the &ldquo;no-moodlight&rdquo; regime in both daytime and nighttime mode.</p>
<p>In the first photo, relays 1 and 3 are on, relay 2 is off.
In the second photo, relay 1 is off but 2 and 3 are on.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Lightish blue is easy to see / spot in the daytime.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The dark red color looks a lot better at night.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h4 id="dynamic-timer">Dynamic Timer</h4>
<p>I&rsquo;ve already covered the basics of how to do this with ESPHome in my <a href="https://karlquinsland.com/esphome-dynamic-timer/" rel="">&ldquo;dynamic timers in ESPHome&rdquo;</a> post.
The same technique is used again here but it&rsquo;s been refined a bit and turned into a proper package which is easier to re-use.</p>
<h2 id="yaml">YAML</h2>
<p>There are some similarities to the examples provided by <a href="https://smarthomeyourself.de/" target="_blank" rel="noopener noreffer"><code>SmartHome-yourself</code></a> in their <a href="https://github.com/SmartHome-yourself/sonoff-tx-ultimate-for-esphome" target="_blank" rel="noopener noreffer"><code>sonoff-tx-ultimate-for-esphome</code> custom component</a> but I ultimately decided to go in a different direction for most things.
I still use his custom component for the touch sensor but the rest of the configuration is my own.</p>
<p>Below I have provided a complete and working example of the configuration for a 3 relay variant.
I specifically chose the 3 relay variant because it&rsquo;s the most complex; creating a 1 or 2 relay variant is a subset of the 3 relay variant; take what&rsquo;s below and delete the parts you don&rsquo;t need.</p>
<p>For this example, I&rsquo;ve provided a sample <code>garage.yaml</code> file which is a lightly modified version of the configuration I have deployed.
Specifically, I have a combination of lights and a fan wired to the switch so the example demonstrates how to use multiple relays to control multiple different types of devices.</p>
<p>I&rsquo;ve left comments throughout the files to explain what&rsquo;s going on and why.
Those comments - in addition to the &ldquo;features&rdquo; described above - should be enough to get you started with your own configuration.</p>
<h3 id="file-structure">File structure</h3>
<p>For readability and composability, I like to break up my ESPHome configuration into multiple files using the <a href="https://esphome.io/guides/configuration-types.html#packages" target="_blank" rel="noopener noreffer"><code>packages</code></a> pattern.</p>
<p>Here is how I have this example laid out:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">‚ùØ tree .
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">‚îú‚îÄ‚îÄ garage.yaml
</span></span><span class="line"><span class="cl">‚îî‚îÄ‚îÄ packages
</span></span><span class="line"><span class="cl">    ‚îú‚îÄ‚îÄ base.esphome.yaml
</span></span><span class="line"><span class="cl">    ‚îú‚îÄ‚îÄ base.yaml
</span></span><span class="line"><span class="cl">    ‚îú‚îÄ‚îÄ buzzer.yaml
</span></span><span class="line"><span class="cl">    ‚îú‚îÄ‚îÄ countdown-timer.yaml
</span></span><span class="line"><span class="cl">    ‚îú‚îÄ‚îÄ light-automations.yaml
</span></span><span class="line"><span class="cl">    ‚îú‚îÄ‚îÄ status_led.yaml
</span></span><span class="line"><span class="cl">    ‚îú‚îÄ‚îÄ template_light.h
</span></span><span class="line"><span class="cl">    ‚îú‚îÄ‚îÄ touch_disable.yaml
</span></span><span class="line"><span class="cl">    ‚îî‚îÄ‚îÄ variant.c3.yaml
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">2</span> directories, <span class="m">10</span> files
</span></span></code></pre></td></tr></table>
</div>
</div><p>Assuming you reproduce this structure, you can compile and flash the example with:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">‚ùØ esphome -s version_hash <span class="k">$(</span>git rev-parse --short HEAD<span class="k">)</span> run garage.yaml
</span></span></code></pre></td></tr></table>
</div>
</div><p>If you don&rsquo;t want to embed the git hash into the build, remove the <code>-s version_hash $(git rev-parse --short HEAD)</code> part and remove the <code>version_hash</code> substitution from <code>packages/base.esphome.yaml</code>.</p>
<h4 id="garageyaml"><code>garage.yaml</code></h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span><span class="lnt">160
</span><span class="lnt">161
</span><span class="lnt">162
</span><span class="lnt">163
</span><span class="lnt">164
</span><span class="lnt">165
</span><span class="lnt">166
</span><span class="lnt">167
</span><span class="lnt">168
</span><span class="lnt">169
</span><span class="lnt">170
</span><span class="lnt">171
</span><span class="lnt">172
</span><span class="lnt">173
</span><span class="lnt">174
</span><span class="lnt">175
</span><span class="lnt">176
</span><span class="lnt">177
</span><span class="lnt">178
</span><span class="lnt">179
</span><span class="lnt">180
</span><span class="lnt">181
</span><span class="lnt">182
</span><span class="lnt">183
</span><span class="lnt">184
</span><span class="lnt">185
</span><span class="lnt">186
</span><span class="lnt">187
</span><span class="lnt">188
</span><span class="lnt">189
</span><span class="lnt">190
</span><span class="lnt">191
</span><span class="lnt">192
</span><span class="lnt">193
</span><span class="lnt">194
</span><span class="lnt">195
</span><span class="lnt">196
</span><span class="lnt">197
</span><span class="lnt">198
</span><span class="lnt">199
</span><span class="lnt">200
</span><span class="lnt">201
</span><span class="lnt">202
</span><span class="lnt">203
</span><span class="lnt">204
</span><span class="lnt">205
</span><span class="lnt">206
</span><span class="lnt">207
</span><span class="lnt">208
</span><span class="lnt">209
</span><span class="lnt">210
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># A lightly modified version of a deployed sonoff T5 switch.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># This example demonstrates how to use multiple relays to control multiple different types of devices.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># In this case, two lights and a fan.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Also demonstrates how to use the timer package to create a countdown timer for the fan.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Build / flash with:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># ‚ùØ esphome -s version_hash $(git rev-parse --short HEAD) run garage.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># This build results in a pretty full flash so be careful about adding more features!</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#     RAM:   [=         ]  13.0% (used 42704 bytes from 327680 bytes)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#     Flash: [======    ]  61.3% (used 1124229 bytes from 1835008 bytes)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">substitutions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Upper case used for human facing labels</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">variant</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Garage&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Lower case is for hostname and machine facing labels</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">variant_lc</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;garage&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># For 2023.11</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">esphome_area</span><span class="p">:</span><span class="w"> </span><span class="l">Garage</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Each instance of the timer needs a unique id</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># This suffix will be appended to the id of each component to make it unique.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">timer_one_instance_uid</span><span class="p">:</span><span class="w"> </span><span class="l">fan</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">packages</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">common</span><span class="p">:</span><span class="w"> </span>!<span class="l">include packages/base.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 3 relay version</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">output</span><span class="p">:</span><span class="w"> </span>!<span class="l">include</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">file</span><span class="p">:</span><span class="w"> </span><span class="l">packages/variant.c3.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">vars</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Relay 1,3 are wired up to lights</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">out_1_state_exp</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;current_values.is_on()&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">out_3_state_exp</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;current_values.is_on()&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">out_2_state_exp</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;state&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Want the fan to have an auto-off timer function.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">fan_relay_timeout_automation</span><span class="p">:</span><span class="w"> </span>!<span class="l">include</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">file</span><span class="p">:</span><span class="w"> </span><span class="l">packages/countdown-timer.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">vars</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Prefix for the UI components</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">entity_name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Fan&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Suffix to create unique ids for each component</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># We need substitution to work in THIS file as well not just the included</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">instance_uid</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;${timer_one_instance_uid}&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">timer_duration_seconds</span><span class="p">:</span><span class="w"> </span><span class="m">3600</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Pass in which entity / how to control it</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">timer_control_entity_id</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;out_2&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Will get plugged into this expression:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># call-&gt;${timer_control_action_exp}.perform();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># So values are &#34;turn_on()&#34; or &#34;turn_off()&#34; or &#34;toggle()&#34; depending on</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c">#  what the the value of id(${timer_control_entity_id}) supports.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">timer_control_action_exp</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;turn_off()&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Will get plugged into this expression:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># if ( ${timer_control_entity_state_exp} )</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># so needs to return a bool. Exact value will depend on the type of entity</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># being controlled. E.G.: &#34;.current_values.is_on()&#34; or &#34;.state&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">timer_control_entity_state_exp</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;id(out_2).state&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Customize what each of the three relays do</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">light</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Relay 1 and 2 are the fan/light combo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Fan Light</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">out_1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">binary</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">output</span><span class="p">:</span><span class="w"> </span><span class="l">relay_1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:ceiling-fan-light&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_mode</span><span class="p">:</span><span class="w"> </span><span class="l">RESTORE_DEFAULT_OFF</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># When changing between states, we need to update the partition light(s)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_turn_on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">script.execute</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">figure_out_which_partition_to_light</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">output_num</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_turn_off</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">script.execute</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">figure_out_which_partition_to_light</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">output_num</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Main overhead light</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Main Light</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">out_3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">binary</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">output</span><span class="p">:</span><span class="w"> </span><span class="l">relay_3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_mode</span><span class="p">:</span><span class="w"> </span><span class="l">RESTORE_DEFAULT_OFF</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_turn_on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">script.execute</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">figure_out_which_partition_to_light</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">output_num</span><span class="p">:</span><span class="w"> </span><span class="m">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_turn_off</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">script.execute</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">figure_out_which_partition_to_light</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">output_num</span><span class="p">:</span><span class="w"> </span><span class="m">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># See: https://esphome.io/components/fan/binary.html</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">fan</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Fan</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">out_2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">binary</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">output</span><span class="p">:</span><span class="w"> </span><span class="l">relay_2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:fan&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># On boot, fan should be off</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_mode</span><span class="p">:</span><span class="w"> </span><span class="l">ALWAYS_OFF</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Wire in the count down timer automation if enabled</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_turn_on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">script.execute</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">figure_out_which_partition_to_light</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">output_num</span><span class="p">:</span><span class="w"> </span><span class="m">2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">if</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">condition</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="c"># If the countdown timer is enabled</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;return id(glbl_timeout_armed_${timer_one_instance_uid});&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="c"># The light is already on, start counting the seconds.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="c"># When timer ends, light will be turned off</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">script.execute</span><span class="p">:</span><span class="w"> </span><span class="l">_timer_tick_${timer_one_instance_uid}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">else</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">logger.log</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">level</span><span class="p">:</span><span class="w"> </span><span class="l">DEBUG</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">format</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;${timer_one_instance_uid} turned on, countdown timer not armed&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># This can be called by the natural end of the timer OR manually through any other source.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_turn_off</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">script.execute</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">figure_out_which_partition_to_light</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">output_num</span><span class="p">:</span><span class="w"> </span><span class="m">2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">if</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">condition</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="c"># If the timer is still running</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;return id(_timer_tick_${timer_one_instance_uid}).is_running();&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">script.execute</span><span class="p">:</span><span class="w"> </span><span class="l">on_timer_stop_${timer_one_instance_uid}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="c"># Don&#39;t wait for ESPHome to schedule updating the text sensor to re-draw the HA UI.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="c"># As soon as the entity is off cancel the timer and update the text sensor</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;id(s_txt_timeout_remaining_${timer_one_instance_uid}).update();&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">else</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">logger.log</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">level</span><span class="p">:</span><span class="w"> </span><span class="l">DEBUG</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">format</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;${timer_one_instance_uid} turned off, countdown timer not armed&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Don&#39;t abstract the touch handling away behind a variant specific file.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Allow for customizing what happens for a given touch event/location on a per-device basis.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">tx_ultimate_touch</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">tx_touch</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">uart</span><span class="p">:</span><span class="w"> </span><span class="l">uart_touch</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">on_press</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Let the user know we&#39;ve registered the touch</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">script.execute</span><span class="p">:</span><span class="w"> </span><span class="l">buzz_default</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Like &#34;traditional&#34; switches, we act as soon as pressed and do not wait for &#34;release&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Unless user has disabled touch input processing</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">&gt;</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">        ESP_LOGD(&#34;tx_ultimate_touch.on_press&#34;, &#34;Touch Position: %d / State: %d&#34;, touch.x, touch.state);
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">        if (!id(glbl_sw_touch_enable)) {
</span></span></span><span class="line"><span class="cl"><span class="sd">          ESP_LOGD(&#34;tx_ultimate_touch.on_press&#34;, &#34;Touch is disabled, ignoring&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">          return;
</span></span></span><span class="line"><span class="cl"><span class="sd">        }
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">        // 3 ch version means we split the touch surface into 3 equal size zones
</span></span></span><span class="line"><span class="cl"><span class="sd">        // 0-3, 4-7, 8-11
</span></span></span><span class="line"><span class="cl"><span class="sd">        // There&#39;s nothing stopping you from creating unequal sized zones if desired!
</span></span></span><span class="line"><span class="cl"><span class="sd">        /////////////////////////////////
</span></span></span><span class="line"><span class="cl"><span class="sd">        // The if/else pattern is extended or shortened depending on the number of relays
</span></span></span><span class="line"><span class="cl"><span class="sd">        // In addition to modifying the if/else pattern, you&#39;ll need to update the code that
</span></span></span><span class="line"><span class="cl"><span class="sd">        //    checks the state of each output.
</span></span></span><span class="line"><span class="cl"><span class="sd">        // Below, out_1 and out_3 are lights so current_values.is_on() is used instead of just .state
</span></span></span><span class="line"><span class="cl"><span class="sd">        //    which works for binary fan / out_2.
</span></span></span><span class="line"><span class="cl"><span class="sd">        // I wish ESPHome would have a more homogenous API for this since there IS a homogenous
</span></span></span><span class="line"><span class="cl"><span class="sd">        //  API for calling the turn_on/turn_off methods!
</span></span></span><span class="line"><span class="cl"><span class="sd">        /////////////////////////////////
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">        if (touch.x &lt;= 3) {
</span></span></span><span class="line"><span class="cl"><span class="sd">          ESP_LOGD(&#34;tx_ultimate_touch.on_press&#34;, &#34;Toggle 1&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">          if(id(out_1).current_values.is_on() ) {
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(out_1).turn_off().perform();
</span></span></span><span class="line"><span class="cl"><span class="sd">          } else {
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(out_1).turn_on().perform();
</span></span></span><span class="line"><span class="cl"><span class="sd">          }
</span></span></span><span class="line"><span class="cl"><span class="sd">        } else if (touch.x &lt;= 7) {
</span></span></span><span class="line"><span class="cl"><span class="sd">          ESP_LOGD(&#34;tx_ultimate_touch.on_press&#34;, &#34;Toggle 2&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">          if(id(out_2).state ) {
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(out_2).turn_off().perform();
</span></span></span><span class="line"><span class="cl"><span class="sd">          } else {
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(out_2).turn_on().perform();
</span></span></span><span class="line"><span class="cl"><span class="sd">          }
</span></span></span><span class="line"><span class="cl"><span class="sd">        } else {
</span></span></span><span class="line"><span class="cl"><span class="sd">          ESP_LOGD(&#34;tx_ultimate_touch.on_press&#34;, &#34;Toggle 3&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">          if(id(out_3).current_values.is_on() ) {
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(out_3).turn_off().perform();
</span></span></span><span class="line"><span class="cl"><span class="sd">          } else {
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(out_3).turn_on().perform();
</span></span></span><span class="line"><span class="cl"><span class="sd">          }
</span></span></span><span class="line"><span class="cl"><span class="sd">        }</span><span class="w">        
</span></span></span></code></pre></td></tr></table>
</div>
</div><h4 id="packagesbaseesphomeyaml"><code>packages/base.esphome.yaml</code></h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span><span class="lnt">89
</span><span class="lnt">90
</span><span class="lnt">91
</span><span class="lnt">92
</span><span class="lnt">93
</span><span class="lnt">94
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">esphome</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">${hostname}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">friendly_name</span><span class="p">:</span><span class="w"> </span><span class="l">${friendly_name}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">comment</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Controls ${friendly_name}&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">area</span><span class="p">:</span><span class="w"> </span><span class="l">${esphome_area}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">build_path</span><span class="p">:</span><span class="w"> </span><span class="l">../../build-root/${hostname}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># The device name / hostname is unique enough</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name_add_mac_suffix</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">project</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;t5.${variant_lc}&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;1.0.${version_hash}&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">includes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">packages/template_light.h</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Shortly after booting up, refresh the partition lights to make sure the right</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># colors are used.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Might be useful in day-to-day use, but is _very_ useful when testing late at night and</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#   after flashing new build and the lights come on full blast/white!</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">on_boot</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># The higher the number, the earlier in the boot process it runs</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># We do need to wait for NTP to get a fix, though.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># With that, we can properly figure out which light mode to use</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">priority</span><span class="p">:</span><span class="w"> </span>-<span class="m">200</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">button.press</span><span class="p">:</span><span class="w"> </span><span class="l">button_determine_mode</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Throttle writing parameters to the internal flash memory to reduce ESP memory wear / degradation</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">preferences</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">flash_write_interval</span><span class="p">:</span><span class="w"> </span><span class="l">15min</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">esp32</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># There is no platform.io board preset so we go with a generic one</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">board</span><span class="p">:</span><span class="w"> </span><span class="l">esp32dev</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Enable logging</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">logger</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#  hardware_uart: UART2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">level</span><span class="p">:</span><span class="w"> </span><span class="l">INFO</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">logs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">binary_sensor</span><span class="p">:</span><span class="w"> </span><span class="l">INFO</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">script</span><span class="p">:</span><span class="w"> </span><span class="l">INFO</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># I don&#39;t need to see wifi strength, internal temp and other sensor updates spamming logs</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">text_sensor</span><span class="p">:</span><span class="w"> </span><span class="l">INFO</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">sensor</span><span class="p">:</span><span class="w"> </span><span class="l">INFO</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Also don&#39;t need to get log span every time I toggle main relays</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">switch</span><span class="p">:</span><span class="w"> </span><span class="l">INFO</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mqtt.fan</span><span class="p">:</span><span class="w"> </span><span class="l">INFO</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">fan</span><span class="p">:</span><span class="w"> </span><span class="l">INFO</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">light</span><span class="p">:</span><span class="w"> </span><span class="l">INFO</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># DEBUG is very helpful for mapping position to numbers but it&#39;s a lot of spam otherwise</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">tx_ultimate_touch</span><span class="p">:</span><span class="w"> </span><span class="l">INFO</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">uart_debug</span><span class="p">:</span><span class="w"> </span><span class="l">INFO</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ledc.output</span><span class="p">:</span><span class="w"> </span><span class="l">INFO</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Note: the content of these includes is not shown in this example as the values are unique to my setup</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># The name of the package matches the name of the component set up in the package so you can substitute</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#   your own values as needed. E.G.: you&#39;d set up your own MQTT connection and remove the one I have here.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">packages</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">time</span><span class="p">:</span><span class="w"> </span>!<span class="l">include ../../../packages/ntp/home.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">mqtt</span><span class="p">:</span><span class="w"> </span>!<span class="l">include ../../../packages/mqtt/home.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ota</span><span class="p">:</span><span class="w"> </span>!<span class="l">include ../../../packages/ota/home.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">web_server</span><span class="p">:</span><span class="w"> </span>!<span class="l">include ../../../packages/web_server.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">wifi</span><span class="p">:</span><span class="w"> </span>!<span class="l">include ../../../packages/wifi/home.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">friendly_uptime</span><span class="p">:</span><span class="w"> </span>!<span class="l">include ../../../packages/sensor/friendly_uptime.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Enable IPv6 support</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Note, seems like dual-stack isn&#39;t well supported w/ the IP address text sensor</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># See: https://github.com/esphome/issues/issues/5126</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ipv6</span><span class="p">:</span><span class="w"> </span>!<span class="l">include ../../../packages/network/ipv6.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">text_sensor</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># See above GH issue</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">&lt;&lt;</span><span class="p">:</span><span class="w"> </span>!<span class="l">include ../../../packages/sensor/ip_addr.wifi.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">button</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Allow restarting via HA UI</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- !<span class="l">include ../../../packages/button/restart.external.config.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- !<span class="l">include ../../../packages/button/safemode.external.config.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">sensor</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Misc diagnostic sensors</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">&lt;&lt;</span><span class="p">:</span><span class="w"> </span>!<span class="l">include ../../../packages/sensor/esp32_internal_temp.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">&lt;&lt;</span><span class="p">:</span><span class="w"> </span>!<span class="l">include ../../../packages/sensor/wifi_signal_strength.config.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">binary_sensor</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">&lt;&lt;</span><span class="p">:</span><span class="w"> </span>!<span class="l">include ../../../packages/binary_sensor/connection_status.config.yaml</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h4 id="packagesbaseyaml"><code>packages/base.yaml</code></h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Base configuration for the Sonoff T5 switches</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># See: https://templates.blakadder.com/sonoff_T5-1C-86</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># See: https://github.com/SmartHome-yourself/sonoff-tx-ultimate-for-esphome</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">substitutions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Displayed in HA frontend</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">friendly_name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;${variant} Switch&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">friendly_name_short</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;${variant}&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">hostname</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;${variant_lc}-switch&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">version_hash</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;not_set&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">external_components</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">source</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">git</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">https://github.com/SmartHome-yourself/sonoff-tx-ultimate-for-esphome</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">ref</span><span class="p">:</span><span class="w"> </span><span class="l">main</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">components</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">tx_ultimate_touch</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># See: https://esphome.io/guides/configuration-types.html#packages</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">packages</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Common configuration used in virtually every device on my network</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">esphome</span><span class="p">:</span><span class="w"> </span>!<span class="l">include base.esphome.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Device specific</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">status_led</span><span class="p">:</span><span class="w"> </span>!<span class="l">include status_led.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Automatic day/night regime for partitioned LEDs</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">day_night_mode</span><span class="p">:</span><span class="w"> </span>!<span class="l">include light-automations.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Buzzer motor</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">buzzer</span><span class="p">:</span><span class="w"> </span>!<span class="l">include buzzer.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Global &#34;ignore touch&#34; switch</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">touch_disable</span><span class="p">:</span><span class="w"> </span>!<span class="l">include touch_disable.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># regardless of which variant, we have some common configurations for LED lights</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">light</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Expose all LEDs as a single lamp</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Mood Light&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">neopixelbus</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">leds_all</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">GRB</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">variant</span><span class="p">:</span><span class="w"> </span><span class="l">WS2811</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO13</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">num_leds</span><span class="p">:</span><span class="w"> </span><span class="m">32</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Gently fade between states</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">default_transition_length</span><span class="p">:</span><span class="w"> </span><span class="m">1.</span><span class="l">5s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># The mood light is meant for subtle indications so we don&#39;t really overdo it here</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">effects</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">addressable_rainbow</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Rainbow&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">speed</span><span class="p">:</span><span class="w"> </span><span class="m">30</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">width</span><span class="p">:</span><span class="w"> </span><span class="m">8</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">pulse</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Pulse&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">transition_length</span><span class="p">:</span><span class="w"> </span><span class="m">1.</span><span class="l">4s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">update_interval</span><span class="p">:</span><span class="w"> </span><span class="l">1s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># When the mood light is turned off, will need to restore the last state to the side/indicator leds</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_turn_off</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">script.execute</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">resume_normal_regime_for_leds</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Leave the lights on the side for relay/switch state indication.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Use the top/bottom of the switch for general indication purposes.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Note that ALL the leds are on the same bus so ESPHome is doing</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#   a lot of internal processing / merging to generate the &#34;final&#34; stream</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#   of data to send to the LEDs. Complicated / quick moving effects don&#39;t</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#   look awesome here so we keep it simple, subtle and slow.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Top&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">partition</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">leds_sw_top</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">segments</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">leds_all</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">from</span><span class="p">:</span><span class="w"> </span><span class="m">25</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">to</span><span class="p">:</span><span class="w"> </span><span class="m">30</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">effects</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">addressable_scan</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Scan&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">addressable_rainbow</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Rainbow&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">speed</span><span class="p">:</span><span class="w"> </span><span class="m">10</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">width</span><span class="p">:</span><span class="w"> </span><span class="m">20</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Bottom&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">partition</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">leds_sw_bottom</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">segments</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">leds_all</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">from</span><span class="p">:</span><span class="w"> </span><span class="m">9</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">to</span><span class="p">:</span><span class="w"> </span><span class="m">14</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">effects</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">addressable_scan</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Scan&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">addressable_rainbow</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Rainbow&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">speed</span><span class="p">:</span><span class="w"> </span><span class="m">10</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">width</span><span class="p">:</span><span class="w"> </span><span class="m">20</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Interact with the touch panel</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">uart</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">tx_pin</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO19</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">rx_pin</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO22</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">uart_touch</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">baud_rate</span><span class="p">:</span><span class="w"> </span><span class="m">115200</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">data_bits</span><span class="p">:</span><span class="w"> </span><span class="m">8</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">stop_bits</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">parity</span><span class="p">:</span><span class="w"> </span><span class="l">NONE</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">debug</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">direction</span><span class="p">:</span><span class="w"> </span><span class="l">RX</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">dummy_receiver</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">after</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">timeout</span><span class="p">:</span><span class="w"> </span><span class="l">2s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">bytes</span><span class="p">:</span><span class="w"> </span><span class="m">2048</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Debug raw packets from the touch panel</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">sequence</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="l">UARTDebug::log_hex(direction, bytes, &#39; &#39;);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">switch</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># I tried to make this a switch that I could toggle from HA.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># The hope was that It would function as a quick way to disable all touch inputs.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># I was able to reliably trigger a crash when the switch was toggled.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Leaving this as an internal switch that can&#39;t be controlled from HA to avoid the crash and using</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#   a template switch to disable touch inputs instead.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># TODO: if I can&#39;t really control this, just make it a GPIO output?</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># See: https://esphome.io/components/output/gpio.html</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;touch panel power&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">gpio</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO5</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">inverted</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">touch_power</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">internal</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_mode</span><span class="p">:</span><span class="w"> </span><span class="l">RESTORE_DEFAULT_ON</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h4 id="packagesbuzzeryaml"><code>packages/buzzer.yaml</code></h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># There is a very small motor w/ an offset weight that vibrates the switch.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Rather than basic binary control we can use PWM for more interesting patterns.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">output</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">ledc</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO21</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">out_buzzer</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">script</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Standard &#34;click&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">buzz_default</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">single</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Enable output</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">output.turn_on</span><span class="p">:</span><span class="w"> </span><span class="l">out_buzzer</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">output.ledc.set_frequency</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">out_buzzer</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">frequency</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;1000Hz&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">output.set_level</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">out_buzzer</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">level</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;30%&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">delay</span><span class="p">:</span><span class="w"> </span><span class="l">20ms</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">output.set_level</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">out_buzzer</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">level</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;90%&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">delay</span><span class="p">:</span><span class="w"> </span><span class="l">30ms</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">output.turn_off</span><span class="p">:</span><span class="w"> </span><span class="l">out_buzzer</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h4 id="packagescountdown-timeryaml"><code>packages/countdown-timer.yaml</code></h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span><span class="lnt">160
</span><span class="lnt">161
</span><span class="lnt">162
</span><span class="lnt">163
</span><span class="lnt">164
</span><span class="lnt">165
</span><span class="lnt">166
</span><span class="lnt">167
</span><span class="lnt">168
</span><span class="lnt">169
</span><span class="lnt">170
</span><span class="lnt">171
</span><span class="lnt">172
</span><span class="lnt">173
</span><span class="lnt">174
</span><span class="lnt">175
</span><span class="lnt">176
</span><span class="lnt">177
</span><span class="lnt">178
</span><span class="lnt">179
</span><span class="lnt">180
</span><span class="lnt">181
</span><span class="lnt">182
</span><span class="lnt">183
</span><span class="lnt">184
</span><span class="lnt">185
</span><span class="lnt">186
</span><span class="lnt">187
</span><span class="lnt">188
</span><span class="lnt">189
</span><span class="lnt">190
</span><span class="lnt">191
</span><span class="lnt">192
</span><span class="lnt">193
</span><span class="lnt">194
</span><span class="lnt">195
</span><span class="lnt">196
</span><span class="lnt">197
</span><span class="lnt">198
</span><span class="lnt">199
</span><span class="lnt">200
</span><span class="lnt">201
</span><span class="lnt">202
</span><span class="lnt">203
</span><span class="lnt">204
</span><span class="lnt">205
</span><span class="lnt">206
</span><span class="lnt">207
</span><span class="lnt">208
</span><span class="lnt">209
</span><span class="lnt">210
</span><span class="lnt">211
</span><span class="lnt">212
</span><span class="lnt">213
</span><span class="lnt">214
</span><span class="lnt">215
</span><span class="lnt">216
</span><span class="lnt">217
</span><span class="lnt">218
</span><span class="lnt">219
</span><span class="lnt">220
</span><span class="lnt">221
</span><span class="lnt">222
</span><span class="lnt">223
</span><span class="lnt">224
</span><span class="lnt">225
</span><span class="lnt">226
</span><span class="lnt">227
</span><span class="lnt">228
</span><span class="lnt">229
</span><span class="lnt">230
</span><span class="lnt">231
</span><span class="lnt">232
</span><span class="lnt">233
</span><span class="lnt">234
</span><span class="lnt">235
</span><span class="lnt">236
</span><span class="lnt">237
</span><span class="lnt">238
</span><span class="lnt">239
</span><span class="lnt">240
</span><span class="lnt">241
</span><span class="lnt">242
</span><span class="lnt">243
</span><span class="lnt">244
</span><span class="lnt">245
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># Common bits for GPIO based timer</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">globals</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># For the auto-off automation</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_timeout_armed_${instance_uid}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">bool</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_value</span><span class="p">:</span><span class="w"> </span><span class="kc">yes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">initial_value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;true&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_timeout_length_ticks_${instance_uid}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_value</span><span class="p">:</span><span class="w"> </span><span class="kc">yes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">initial_value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;${timer_duration_seconds}&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># We ALSO need to keep track of the number of &#39;ticks&#39; that have passed</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">_glbl_timeout_ticks_${instance_uid}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_value</span><span class="p">:</span><span class="w"> </span><span class="kc">no</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">initial_value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># This particular implementation intentionally does not restart the timer when the time is running</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#   and changed. If the timer is running but the user changes the duration, the timer will keep</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#   counting ticks until it expires. Restarting the timer via HA is possible by either toggling the enabled</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#   switch or setting the time to 0, waiting 1 second for ESPHome to figure out that the timer has expires</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#   and then setting the time back / turning on the $thing.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Not elegant so we provide this helper button to clear out the elapsed time and start the timer over.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># This can be more useful than the above method if the timer is running and the user wants to &#34;add&#34; more time.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># E.G.: Home Assistant can detect that $room is still occupied but that the timer is about to expire and can just</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#   press the button so the light does not go off while the room is still occupied instead of having to guess</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#   about what the user wants and just extending the timer by some arbitrary amount.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">button</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;${entity_name} Timeout Restart&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">btn_restart_timer_${instance_uid}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:timer-refresh-outline&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;config&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_press</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Just set the elapsed ticks to 0 and start the _tick script</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">globals.set</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">_glbl_timeout_ticks_${instance_uid}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">script.execute</span><span class="p">:</span><span class="w"> </span><span class="l">_timer_tick_${instance_uid}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># And a way to disable the timer</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">switch</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Another arm/disarm toggle for the &#34;auto off&#34; timer</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;${entity_name} Timer&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">sw_timeout_arm_${instance_uid}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">device_class</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;switch&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:link-variant&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;config&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Default to on unless user says no.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_mode</span><span class="p">:</span><span class="w"> </span><span class="l">RESTORE_DEFAULT_ON</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Lambda to figure out the current state/value</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      if (id(glbl_timeout_armed_${instance_uid})) {
</span></span></span><span class="line"><span class="cl"><span class="sd">        return true;
</span></span></span><span class="line"><span class="cl"><span class="sd">      } else {
</span></span></span><span class="line"><span class="cl"><span class="sd">        return false;
</span></span></span><span class="line"><span class="cl"><span class="sd">      }</span><span class="w">      
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">turn_on_action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># If the $thing is already on, start counting down</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">            // Indicate that the timer _should_ be set, though
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(glbl_timeout_armed_${instance_uid}) = true;
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">            auto TAG = &#34;template.Timeout Automation.turn_on_action&#34;;
</span></span></span><span class="line"><span class="cl"><span class="sd">            if ( ${timer_control_entity_state_exp} ) {
</span></span></span><span class="line"><span class="cl"><span class="sd">              ESP_LOGD(TAG, &#34;Timeout Automation ARMED with &#39;${timer_control_entity_id}&#39;&#39; already on... starting timer!&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">              id(_timer_tick_${instance_uid}).execute();
</span></span></span><span class="line"><span class="cl"><span class="sd">            } else {
</span></span></span><span class="line"><span class="cl"><span class="sd">              ESP_LOGD(TAG, &#34;Timeout Automation ARMED with &#39;${timer_control_entity_id}&#39;&#39; NOT on... nothing to do!&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">            }
</span></span></span><span class="line"><span class="cl"><span class="sd">            // Don&#39;t wait for ESPHome to schedule updating the text sensor to re-draw the HA ui
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(s_txt_timeout_remaining_${instance_uid}).update();</span><span class="w">            
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">turn_off_action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># If the light is still on when the timeout timer is engaged then we stop the timer and clean up.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># The light will just stay on until something else turns it off</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">            // Set the global to OFF, it will be checked next time the _tick fires
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(glbl_timeout_armed_${instance_uid}) = false;
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(on_timer_stop_${instance_uid}).execute();
</span></span></span><span class="line"><span class="cl"><span class="sd">            // Don&#39;t wait for ESPHome to schedule updating the text sensor to re-draw the HA ui
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(s_txt_timeout_remaining_${instance_uid}).update();</span><span class="w">            
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Expose a control to HA so we can adjust timer length</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># See: https://esphome.io/components/number/template.html</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">number</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;${entity_name} Timeout Length&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">num_timeout_length_${instance_uid}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:timer-cog-outline&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;config&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">unit_of_measurement</span><span class="p">:</span><span class="w"> </span><span class="l">minutes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Internally, we do everything in seconds but I can&#39;t really see the value in</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">#   allowing the user to set precise values in seconds. Do you really need a</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">#   timer for 170 seconds or can we just do 3 minutes and call it good?</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># To Home Assistant, we&#39;ll expose a number input that allows the user to set</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">#   the number of whole minutes. A slider _can_ work but when the MAX value</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">#   is quite a ways from the min and typical, the slider is not very useful and</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">#   direct numeric input becomes a bit more appropriate even if the UX is bad</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">#   on mobile.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">box</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># At least one minute and no more than 6 hours</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">min_value</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">max_value</span><span class="p">:</span><span class="w"> </span><span class="m">360</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">step</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      // HA expects value in minutes, we do everything in seconds so convert
</span></span></span><span class="line"><span class="cl"><span class="sd">      return (int) id(glbl_timeout_length_ticks_${instance_uid})/60;</span><span class="w">      
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">set_action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Store the val</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">globals.set</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_timeout_length_ticks_${instance_uid}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span>!<span class="l">lambda |-</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="l">return (int) x*60;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># And update the text sensor so HA displays the new value</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;id(s_txt_timeout_remaining_${instance_uid}).update();&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># And while counting down, show the time remaining to HA</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">text_sensor</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;${entity_name} Timeout Time Remaining&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">s_txt_timeout_remaining_${instance_uid}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:timer-stop-outline&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;diagnostic&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># If i set this to 10s, then every 10s we need to get on WiFi and talk to MQTT... even if the value hasn&#39;t changed</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># If i set this to the esphome default of 60s, the timer does not update often in the UI which leads to ... poor experience.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># The solution is to manually update it when appropriate.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">update_interval</span><span class="p">:</span><span class="w"> </span><span class="l">never</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      auto TAG=&#34;textSensor.lambda.${instance_uid}&#34;;
</span></span></span><span class="line"><span class="cl"><span class="sd">      //Assuming 3 digits for hours, min, seconds _and_ three colons + 2 char extra
</span></span></span><span class="line"><span class="cl"><span class="sd">      char buff[15];
</span></span></span><span class="line"><span class="cl"><span class="sd">      int hr, min, sec;
</span></span></span><span class="line"><span class="cl"><span class="sd">      hr = min = sec = 0;
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      int _remaining_sec = id(glbl_timeout_length_ticks_${instance_uid}) - id(_glbl_timeout_ticks_${instance_uid});
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      // Sanity checks
</span></span></span><span class="line"><span class="cl"><span class="sd">      if(_remaining_sec &lt; 0) {
</span></span></span><span class="line"><span class="cl"><span class="sd">        ESP_LOGE(TAG, &#34;negative time remaining error! _remaining_sec: %d&#34;, _remaining_sec);
</span></span></span><span class="line"><span class="cl"><span class="sd">        return {&#34;negative time remaining error&#34;};
</span></span></span><span class="line"><span class="cl"><span class="sd">      }
</span></span></span><span class="line"><span class="cl"><span class="sd">      if(! id(glbl_timeout_armed_${instance_uid})) {
</span></span></span><span class="line"><span class="cl"><span class="sd">        return {&#34;Disarmed&#34;};
</span></span></span><span class="line"><span class="cl"><span class="sd">      }
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      ESP_LOGD(TAG, &#34;_remaining_sec: %d&#34;, _remaining_sec);
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      hr = _remaining_sec/3600;
</span></span></span><span class="line"><span class="cl"><span class="sd">      min = (_remaining_sec % 3600) / 60;
</span></span></span><span class="line"><span class="cl"><span class="sd">      sec = _remaining_sec % 60;
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      ESP_LOGD(TAG, &#34;hr: %d, min: %d, sec: %d&#34;, hr, min, sec);
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      snprintf(buff, 15, &#34;%02d:%02d:%02d&#34;, hr, min, sec);
</span></span></span><span class="line"><span class="cl"><span class="sd">      ESP_LOGD(TAG, &#34;buff: %s&#34;, buff);
</span></span></span><span class="line"><span class="cl"><span class="sd">      return to_string(buff);</span><span class="w">      
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">script</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># End meaning the natural conclusion of the timer. Do whatever we&#39;re supposed to do when the timer fires off</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">on_timer_end_${instance_uid}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">single</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          auto call = id(${timer_control_entity_id});
</span></span></span><span class="line"><span class="cl"><span class="sd">          call-&gt;${timer_control_action_exp}.perform();
</span></span></span><span class="line"><span class="cl"><span class="sd">          ESP_LOGI(&#34;script.on_timer_end_${instance_uid}&#34;, &#34;output should be ${timer_control_action_exp}!&#34;);</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Stop meaning the pre-mature ending of the timer</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">on_timer_stop_${instance_uid}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Do not start a new run. Issue a warning.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">single</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          auto TAG = &#34;lambda.on_timer_stop_${instance_uid}&#34;;
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          // For now, we just clean up the _timer_tick_${instance_uid} stuff.
</span></span></span><span class="line"><span class="cl"><span class="sd">          // I could use this opportunity to do other things like turn the light off when the timer is stopped...
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_timer_tick_${instance_uid}).stop();
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_glbl_timeout_ticks_${instance_uid}) = 0;
</span></span></span><span class="line"><span class="cl"><span class="sd">          ESP_LOGD(TAG, &#34;_timer_tick_${instance_uid} now stopped and _glbl_timeout_ticks_${instance_uid} is %d&#34;, id(_glbl_timeout_ticks_${instance_uid}));</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">_timer_tick_${instance_uid}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Start a new run after previous runs completes. This will happen until timer.stop() is called on us</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">queued</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># A single &#39;tick&#39; is 1 second long</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">delay</span><span class="p">:</span><span class="w"> </span><span class="l">1s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          auto TAG = &#34;timer_tick.${instance_uid}&#34;;
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          // First, update the number of ticks
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(_glbl_timeout_ticks_${instance_uid}) += 1;
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          // Then update the text sensor showing the time remaining; do this every 10 ticks
</span></span></span><span class="line"><span class="cl"><span class="sd">          // We also update on the FIRST tick so the user has immediate confirmation that we&#39;re counting down
</span></span></span><span class="line"><span class="cl"><span class="sd">          if( id(_glbl_timeout_ticks_${instance_uid}) % 10 == 0 || id(_glbl_timeout_ticks_${instance_uid}) == 1) {
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(s_txt_timeout_remaining_${instance_uid}).update();
</span></span></span><span class="line"><span class="cl"><span class="sd">          }
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          // Then check if we have timed out
</span></span></span><span class="line"><span class="cl"><span class="sd">          if (id(_glbl_timeout_ticks_${instance_uid}) &gt;= id(glbl_timeout_length_ticks_${instance_uid}) ) {
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">            // If we have timed out, run the script to handle the timer expiration
</span></span></span><span class="line"><span class="cl"><span class="sd">            // It&#39;s cleaner to call out to a script rather than put all the &#34;what no?&#34; code in here!
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(on_timer_end_${instance_uid}).execute();
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">            ESP_LOGD(TAG, &#34;_glbl_timeout_ticks_${instance_uid} is &gt;= glbl_timeout_length_ticks  %d &gt;= %d &#34;, id(_glbl_timeout_ticks_${instance_uid}), id(glbl_timeout_length_ticks_${instance_uid}) );
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">            // And then re-set the internal counter
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(_glbl_timeout_ticks_${instance_uid}) = 0;
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">            // And finally, stop the ticking timer
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(_timer_tick_${instance_uid}).stop();
</span></span></span><span class="line"><span class="cl"><span class="sd">            ESP_LOGD(TAG, &#34;_timer_tick_${instance_uid} now stopped!&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          } else {
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">            ESP_LOGD(TAG, &#34;_glbl_timeout_ticks_${instance_uid} is &lt; glbl_timeout_length_ticks  %d &lt; %d &#34;, id(_glbl_timeout_ticks_${instance_uid}), id(glbl_timeout_length_ticks_${instance_uid}) );
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">            // make sure we run again.. unless we&#39;re not supposed to
</span></span></span><span class="line"><span class="cl"><span class="sd">            if( id(glbl_timeout_armed_${instance_uid}) ) {
</span></span></span><span class="line"><span class="cl"><span class="sd">              id(_timer_tick_${instance_uid}).execute();
</span></span></span><span class="line"><span class="cl"><span class="sd">            }
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          }</span><span class="w">          
</span></span></span></code></pre></td></tr></table>
</div>
</div><h4 id="packageslight-automationsyaml"><code>packages/light-automations.yaml</code></h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Create two buttons to trigger night/day mode immediately and expose them to HA for easy automation.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Also offer up a template switch + global to control weather or not the sun triggers transition between modes.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">substitutions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Found after some trial/error.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># In dark room, make light.turn_on calls in HA dev tools, dialing the brightness down as much as possible</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># until lights no longer turned on and the general color/brightness was what I wanted for the room.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># nt = night time</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">nt_exp_red</span><span class="p">:</span><span class="w"> </span><span class="m">255</span><span class="l">/255.0;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">nt_exp_green</span><span class="p">:</span><span class="w"> </span><span class="m">110</span><span class="l">/255.0;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">nt_exp_blue</span><span class="p">:</span><span class="w"> </span><span class="m">84</span><span class="l">/255.0;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">nt_exp_bright</span><span class="p">:</span><span class="w"> </span><span class="m">28</span><span class="l">/255.0;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># dt = day time</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">dt_exp_red</span><span class="p">:</span><span class="w"> </span><span class="m">127</span><span class="l">/255.0;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">dt_exp_green</span><span class="p">:</span><span class="w"> </span><span class="m">172</span><span class="l">/255.0;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">dt_exp_blue</span><span class="p">:</span><span class="w"> </span><span class="m">255</span><span class="l">/255.0;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">dt_exp_bright</span><span class="p">:</span><span class="w"> </span><span class="m">100</span><span class="l">/255.0;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">globals</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_automation_sun_position_triggers_light_modes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">bool</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Store to flash on change; not expected to change often</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_value</span><span class="p">:</span><span class="w"> </span><span class="kc">yes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">initial_value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;true&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_normal_regime_mode_is_nighttime</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">bool</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># On boot, assume it is not night time</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_value</span><span class="p">:</span><span class="w"> </span><span class="kc">yes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">initial_value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;false&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">script</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Note that this only figures out WHICH mode we should be in, it does not actually change any light colors.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">figure_out_normal_regime_mode</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">single</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># So simple we don&#39;t need a lambda :D</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">if</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">condition</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">sun.is_above_horizon</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">logger.log</span><span class="p">:</span><span class="w"> </span><span class="l">Sun is above horizon!</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">globals.set</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_normal_regime_mode_is_nighttime</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;false&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">else</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">logger.log</span><span class="p">:</span><span class="w"> </span><span class="l">Sun is below horizon!</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">globals.set</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_normal_regime_mode_is_nighttime</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;true&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">button</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Daytime Mode&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">button_daytime_mode</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:sun-clock&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;config&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_press</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">script.execute</span><span class="p">:</span><span class="w"> </span><span class="l">do_daytime_mode_active</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">globals.set</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_normal_regime_mode_is_nighttime</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;false&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Nighttime Mode&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">button_nighttime_mode</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:lightbulb-night&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;config&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_press</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">script.execute</span><span class="p">:</span><span class="w"> </span><span class="l">do_nighttime_mode_active</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">globals.set</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_normal_regime_mode_is_nighttime</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;true&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># A helper button to trigger the &#34;reset lights to normal regime/color&#34; script</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Determine Mode&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">button_determine_mode</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:theme-light-dark&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;config&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_press</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Consult the sun position to figure out which mode we should be in</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Day/Night will be stored in `glbl_normal_regime_mode_is_nighttime`</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">script.execute</span><span class="p">:</span><span class="w"> </span><span class="l">figure_out_normal_regime_mode</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Based on what&#39;s stored in the global, set the template lights to the correct colors</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># And then refresh the partition lights</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          if ( id(glbl_normal_regime_mode_is_nighttime) ) {
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(do_nighttime_mode_active).execute();
</span></span></span><span class="line"><span class="cl"><span class="sd">          } else {
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(do_daytime_mode_active).execute();
</span></span></span><span class="line"><span class="cl"><span class="sd">          }
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(resume_normal_regime_for_leds).execute();</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Switch to control different bits of functionality</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">switch</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Sun position changes light modes&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">sw_sun_position_triggers_light_modes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:theme-light-dark&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># By default, we want the automation enabled.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_mode</span><span class="p">:</span><span class="w"> </span><span class="l">RESTORE_DEFAULT_ON</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="l">config</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">device_class</span><span class="p">:</span><span class="w"> </span><span class="l">switch</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      if (id(glbl_automation_sun_position_triggers_light_modes)) {
</span></span></span><span class="line"><span class="cl"><span class="sd">        return true;
</span></span></span><span class="line"><span class="cl"><span class="sd">      } else {
</span></span></span><span class="line"><span class="cl"><span class="sd">        return false;
</span></span></span><span class="line"><span class="cl"><span class="sd">      }</span><span class="w">      
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">turn_on_action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(glbl_automation_sun_position_triggers_light_modes) = true;</span><span class="w">            
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">turn_off_action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(glbl_automation_sun_position_triggers_light_modes) = false;</span><span class="w">            
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># See: https://esphome.io/components/sun.html</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">sun</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">sun_position</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">latitude</span><span class="p">:</span><span class="w"> </span>!<span class="l">secret home_latitude_deg</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">longitude</span><span class="p">:</span><span class="w"> </span>!<span class="l">secret home_longitude_deg</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># When the sun is up, we assume ambient brightness is sufficient to show the user where the buttons are</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">on_sunrise</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Delays us a bit after true sun rise.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">elevation</span><span class="p">:</span><span class="w"> </span><span class="m">5</span><span class="l">¬∞</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">if</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">condition</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;return id(glbl_automation_sun_position_triggers_light_modes);&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">button.press</span><span class="p">:</span><span class="w"> </span><span class="l">button_daytime_mode</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">else</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">logger.log</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Sunrise, but automation disabled.&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># When the sun sets, though, we want the LEDS to come on at about 50% brightness. They can then be seen in a dim</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#   room. When the relay is activated, the led will be on FULL which is distinct from the background 50% brightness</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">on_sunset</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Trigger a bit before the sun actually sets</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">elevation</span><span class="p">:</span><span class="w"> </span><span class="m">5</span><span class="l">¬∞</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">if</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">condition</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;return id(glbl_automation_sun_position_triggers_light_modes);&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">button.press</span><span class="p">:</span><span class="w"> </span><span class="l">button_nighttime_mode</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">else</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">logger.log</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Sunset, but automation disabled.&#34;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h4 id="packagesstatus_ledyaml"><code>packages/status_led.yaml</code></h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># I can&#39;t find a ton of evidence that there actually IS a status LED on the T5... but it costs nothing to include this.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># See: https://github.com/SmartHome-yourself/sonoff-tx-ultimate-for-esphome/blob/main/tx_ultimate_local.yaml#L53</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">status_led</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">pin</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO33</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">inverted</span><span class="p">:</span><span class="w"> </span><span class="kc">True</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h4 id="packagestemplate_lighth"><code>packages/template_light.h</code></h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;esphome.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">  ESPHome does not have a template light component but it does have &#34;custom&#34; light component.
</span></span></span><span class="line"><span class="cl"><span class="cm">  As it turns out, the backbones example that they provide for setting up a custom light component
</span></span></span><span class="line"><span class="cl"><span class="cm">    is exactly what I need to do. Love it when stuff works out that way :D!
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">  Essentially, I have two partition lights that I want to present to Home Assistant as a single light.
</span></span></span><span class="line"><span class="cl"><span class="cm">  Which partition light is active depends on the state of relay / switched output.
</span></span></span><span class="line"><span class="cl"><span class="cm">  This &#34;template&#34; entity just needs to &#34;store&#34; the color/brightness assigned by the user / HA.
</span></span></span><span class="line"><span class="cl"><span class="cm">  When appropriate, we&#39;ll consult the stored values and forward them to the appropriate partition light.
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">TemplateLight</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Component</span><span class="p">,</span> <span class="k">public</span> <span class="n">LightOutput</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="kt">void</span> <span class="n">setup</span><span class="p">()</span> <span class="k">override</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">ESP_LOGCONFIG</span><span class="p">(</span><span class="s">&#34;TemplateLight&#34;</span><span class="p">,</span> <span class="s">&#34;Nothing to do for setup...&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">LightTraits</span> <span class="nf">get_traits</span><span class="p">()</span> <span class="k">override</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">auto</span> <span class="n">traits</span> <span class="o">=</span> <span class="n">LightTraits</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">traits</span><span class="p">.</span><span class="n">set_supported_color_modes</span><span class="p">({</span><span class="n">ColorMode</span><span class="o">::</span><span class="n">RGB</span><span class="p">});</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">traits</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// Called when there&#39;s a new state to write out to hardware.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// The whole point of this Light is that there IS no hardware to drive so we do nothing
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">void</span> <span class="nf">write_state</span><span class="p">(</span><span class="n">LightState</span> <span class="o">*</span><span class="n">state</span><span class="p">)</span> <span class="k">override</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// TODO: I might need to implement the minimum brightness here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// Implementation here might be useful: https://esphome.io/api/float__output_8cpp_source#l00016
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// See: https://github.com/esphome/feature-requests/issues/920
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// float red, green, blue;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// state-&gt;current_values_as_rgb(&amp;red, &amp;green, &amp;blue);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// ESP_LOGD(&#34;TemplateLight&#34;, &#34;Color is. R: %f, G: %f, B: %f.&#34;, red, green, blue);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="packagestouch_disableyaml"><code>packages/touch_disable.yaml</code></h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># For reasons that I don&#39;t understand, toggling the GPIO that powers the touch panel causes a crash.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># I would have preferred using that to lock out touch inputs but this plan-B works well enough.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># This is useful for &#34;guest&#34; or &#34;cleaning&#34; mode when you don&#39;t want the touch panel to do anything.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">globals</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_sw_touch_enable</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">bool</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_value</span><span class="p">:</span><span class="w"> </span><span class="kc">no</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">initial_value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;true&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">switch</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Touch Enable&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">sw_sw_touch_disable</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:publish-off&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="l">config</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">device_class</span><span class="p">:</span><span class="w"> </span><span class="l">switch</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># If something goes wrong, a reboot should re-enable touch</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_mode</span><span class="p">:</span><span class="w"> </span><span class="l">ALWAYS_ON</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      if (id(glbl_sw_touch_enable)) {
</span></span></span><span class="line"><span class="cl"><span class="sd">        return true;
</span></span></span><span class="line"><span class="cl"><span class="sd">      } else {
</span></span></span><span class="line"><span class="cl"><span class="sd">        return false;
</span></span></span><span class="line"><span class="cl"><span class="sd">      }</span><span class="w">      
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">turn_on_action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(glbl_sw_touch_enable) = true;</span><span class="w">            
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">turn_off_action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(glbl_sw_touch_enable) = false;</span><span class="w">            
</span></span></span></code></pre></td></tr></table>
</div>
</div><h4 id="packagesvariantc3yaml"><code>packages/variant.c3.yaml</code></h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span><span class="lnt">160
</span><span class="lnt">161
</span><span class="lnt">162
</span><span class="lnt">163
</span><span class="lnt">164
</span><span class="lnt">165
</span><span class="lnt">166
</span><span class="lnt">167
</span><span class="lnt">168
</span><span class="lnt">169
</span><span class="lnt">170
</span><span class="lnt">171
</span><span class="lnt">172
</span><span class="lnt">173
</span><span class="lnt">174
</span><span class="lnt">175
</span><span class="lnt">176
</span><span class="lnt">177
</span><span class="lnt">178
</span><span class="lnt">179
</span><span class="lnt">180
</span><span class="lnt">181
</span><span class="lnt">182
</span><span class="lnt">183
</span><span class="lnt">184
</span><span class="lnt">185
</span><span class="lnt">186
</span><span class="lnt">187
</span><span class="lnt">188
</span><span class="lnt">189
</span><span class="lnt">190
</span><span class="lnt">191
</span><span class="lnt">192
</span><span class="lnt">193
</span><span class="lnt">194
</span><span class="lnt">195
</span><span class="lnt">196
</span><span class="lnt">197
</span><span class="lnt">198
</span><span class="lnt">199
</span><span class="lnt">200
</span><span class="lnt">201
</span><span class="lnt">202
</span><span class="lnt">203
</span><span class="lnt">204
</span><span class="lnt">205
</span><span class="lnt">206
</span><span class="lnt">207
</span><span class="lnt">208
</span><span class="lnt">209
</span><span class="lnt">210
</span><span class="lnt">211
</span><span class="lnt">212
</span><span class="lnt">213
</span><span class="lnt">214
</span><span class="lnt">215
</span><span class="lnt">216
</span><span class="lnt">217
</span><span class="lnt">218
</span><span class="lnt">219
</span><span class="lnt">220
</span><span class="lnt">221
</span><span class="lnt">222
</span><span class="lnt">223
</span><span class="lnt">224
</span><span class="lnt">225
</span><span class="lnt">226
</span><span class="lnt">227
</span><span class="lnt">228
</span><span class="lnt">229
</span><span class="lnt">230
</span><span class="lnt">231
</span><span class="lnt">232
</span><span class="lnt">233
</span><span class="lnt">234
</span><span class="lnt">235
</span><span class="lnt">236
</span><span class="lnt">237
</span><span class="lnt">238
</span><span class="lnt">239
</span><span class="lnt">240
</span><span class="lnt">241
</span><span class="lnt">242
</span><span class="lnt">243
</span><span class="lnt">244
</span><span class="lnt">245
</span><span class="lnt">246
</span><span class="lnt">247
</span><span class="lnt">248
</span><span class="lnt">249
</span><span class="lnt">250
</span><span class="lnt">251
</span><span class="lnt">252
</span><span class="lnt">253
</span><span class="lnt">254
</span><span class="lnt">255
</span><span class="lnt">256
</span><span class="lnt">257
</span><span class="lnt">258
</span><span class="lnt">259
</span><span class="lnt">260
</span><span class="lnt">261
</span><span class="lnt">262
</span><span class="lnt">263
</span><span class="lnt">264
</span><span class="lnt">265
</span><span class="lnt">266
</span><span class="lnt">267
</span><span class="lnt">268
</span><span class="lnt">269
</span><span class="lnt">270
</span><span class="lnt">271
</span><span class="lnt">272
</span><span class="lnt">273
</span><span class="lnt">274
</span><span class="lnt">275
</span><span class="lnt">276
</span><span class="lnt">277
</span><span class="lnt">278
</span><span class="lnt">279
</span><span class="lnt">280
</span><span class="lnt">281
</span><span class="lnt">282
</span><span class="lnt">283
</span><span class="lnt">284
</span><span class="lnt">285
</span><span class="lnt">286
</span><span class="lnt">287
</span><span class="lnt">288
</span><span class="lnt">289
</span><span class="lnt">290
</span><span class="lnt">291
</span><span class="lnt">292
</span><span class="lnt">293
</span><span class="lnt">294
</span><span class="lnt">295
</span><span class="lnt">296
</span><span class="lnt">297
</span><span class="lnt">298
</span><span class="lnt">299
</span><span class="lnt">300
</span><span class="lnt">301
</span><span class="lnt">302
</span><span class="lnt">303
</span><span class="lnt">304
</span><span class="lnt">305
</span><span class="lnt">306
</span><span class="lnt">307
</span><span class="lnt">308
</span><span class="lnt">309
</span><span class="lnt">310
</span><span class="lnt">311
</span><span class="lnt">312
</span><span class="lnt">313
</span><span class="lnt">314
</span><span class="lnt">315
</span><span class="lnt">316
</span><span class="lnt">317
</span><span class="lnt">318
</span><span class="lnt">319
</span><span class="lnt">320
</span><span class="lnt">321
</span><span class="lnt">322
</span><span class="lnt">323
</span><span class="lnt">324
</span><span class="lnt">325
</span><span class="lnt">326
</span><span class="lnt">327
</span><span class="lnt">328
</span><span class="lnt">329
</span><span class="lnt">330
</span><span class="lnt">331
</span><span class="lnt">332
</span><span class="lnt">333
</span><span class="lnt">334
</span><span class="lnt">335
</span><span class="lnt">336
</span><span class="lnt">337
</span><span class="lnt">338
</span><span class="lnt">339
</span><span class="lnt">340
</span><span class="lnt">341
</span><span class="lnt">342
</span><span class="lnt">343
</span><span class="lnt">344
</span><span class="lnt">345
</span><span class="lnt">346
</span><span class="lnt">347
</span><span class="lnt">348
</span><span class="lnt">349
</span><span class="lnt">350
</span><span class="lnt">351
</span><span class="lnt">352
</span><span class="lnt">353
</span><span class="lnt">354
</span><span class="lnt">355
</span><span class="lnt">356
</span><span class="lnt">357
</span><span class="lnt">358
</span><span class="lnt">359
</span><span class="lnt">360
</span><span class="lnt">361
</span><span class="lnt">362
</span><span class="lnt">363
</span><span class="lnt">364
</span><span class="lnt">365
</span><span class="lnt">366
</span><span class="lnt">367
</span><span class="lnt">368
</span><span class="lnt">369
</span><span class="lnt">370
</span><span class="lnt">371
</span><span class="lnt">372
</span><span class="lnt">373
</span><span class="lnt">374
</span><span class="lnt">375
</span><span class="lnt">376
</span><span class="lnt">377
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># Each variant has a slightly different set of template lights to turn on/off for day/night mode.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># The c2 and c1 versions of this file are mostly identical except for:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#     - the number of the template lights; the C1 variant only has a left/right partition light instead of 2 or three</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#         left/right partition lights as would be present on the C2 or C3 variants.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#     - the specific led numbers used in each partition are different; all variants have 10 LEDs on each side but</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#         those 10 total must be broken up into 1,2,3 partitions based on the variant.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#     - the number of outputs; the C1 variant only has 1 outputs instead of 2 or 3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Each variant file must define/implement the same scripts though.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># WHAT each script does is slightly different per variant. The C1 variant of `do_nighttime_mode_active` only</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#   adjusts `template_light_1` since there is no template_light_2 or template_light_3 on the C1 variant.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Likewise, the C2 variant of `figure_out_which_partition_to_light` only has case 1 and case 2 defined since</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#   there is no `leds_button_3_right` or `leds_button_3_left` on the C2 variant.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">script</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">do_nighttime_mode_active</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          ESP_LOGD(&#34;script.do_nighttime_mode_active&#34;, &#34;Nighttime mode activated...&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          float red = ${nt_exp_red};
</span></span></span><span class="line"><span class="cl"><span class="sd">          float green = ${nt_exp_green};
</span></span></span><span class="line"><span class="cl"><span class="sd">          float blue = ${nt_exp_blue};
</span></span></span><span class="line"><span class="cl"><span class="sd">          float bright = ${nt_exp_bright};
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          ESP_LOGD(&#34;script.do_nighttime_mode_active&#34;, &#34;Setting TEMPLATE(s) =&gt; R: %f G: %f B: %f BR: %f&#34;, red, green, blue, bright);
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(template_light_1).turn_on().set_rgb( red, green, blue ).set_brightness(bright).set_transition_length(0).perform();
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(template_light_2).turn_on().set_rgb( red, green, blue ).set_brightness(bright).set_transition_length(0).perform();
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(template_light_3).turn_on().set_rgb( red, green, blue ).set_brightness(bright).set_transition_length(0).perform();</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">do_daytime_mode_active</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          ESP_LOGD(&#34;script.do_daytime_mode_active&#34;, &#34;Daytime mode activated...&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          float red = ${dt_exp_red};
</span></span></span><span class="line"><span class="cl"><span class="sd">          float green = ${dt_exp_green};
</span></span></span><span class="line"><span class="cl"><span class="sd">          float blue = ${dt_exp_blue};
</span></span></span><span class="line"><span class="cl"><span class="sd">          float bright = ${dt_exp_bright};
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          ESP_LOGD(&#34;script.do_daytime_mode_active&#34;, &#34;Setting TEMPLATE(s) =&gt; R: %f G: %f B: %f BR: %f&#34;, red, green, blue, bright);
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(template_light_1).turn_on().set_rgb( red, green, blue ).set_brightness(bright).set_transition_length(0).perform();
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(template_light_2).turn_on().set_rgb( red, green, blue ).set_brightness(bright).set_transition_length(0).perform();
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(template_light_3).turn_on().set_rgb( red, green, blue ).set_brightness(bright).set_transition_length(0).perform();</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">figure_out_which_partition_to_light</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">single</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">parameters</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">output_num</span><span class="p">:</span><span class="w"> </span><span class="l">int</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          auto TAG = &#34;script.figure_out_which_partition_to_light&#34;;
</span></span></span><span class="line"><span class="cl"><span class="sd">          // We don&#39;t know WHICH partition light to pull RGB/BR from, but regardless we do need place to store....
</span></span></span><span class="line"><span class="cl"><span class="sd">          float red, green, blue, br;
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          ESP_LOGD(TAG, &#34;Trigger was output %d&#34;, output_num);
</span></span></span><span class="line"><span class="cl"><span class="sd">          switch (output_num) {
</span></span></span><span class="line"><span class="cl"><span class="sd">            case 1:
</span></span></span><span class="line"><span class="cl"><span class="sd">                // Output 1 is top button, so we want to light the top partition
</span></span></span><span class="line"><span class="cl"><span class="sd">                id(template_light_1).current_values_as_rgb(&amp;red, &amp;green, &amp;blue);
</span></span></span><span class="line"><span class="cl"><span class="sd">                id(template_light_1).current_values_as_brightness(&amp;br);
</span></span></span><span class="line"><span class="cl"><span class="sd">                ESP_LOGD(TAG, &#34;Light State =&gt; R: %f, G: %f, B: %f BR: %f&#34;, red, green, blue, br);
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">                // Will be either just .state for entities that have bool on/off properties or something like
</span></span></span><span class="line"><span class="cl"><span class="sd">                //  .current_values.is_on() for entities that don&#39;t.
</span></span></span><span class="line"><span class="cl"><span class="sd">                if(id(out_1).${out_1_state_exp}) {
</span></span></span><span class="line"><span class="cl"><span class="sd">                  ESP_LOGD(TAG, &#34;out_1: ON, setting left side ON&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">                  id(leds_button_1_left).turn_on().set_rgb( red, green, blue ).set_brightness(br).set_transition_length(0).perform();
</span></span></span><span class="line"><span class="cl"><span class="sd">                  id(leds_button_1_right).turn_off().set_rgb( red, green, blue ).set_brightness(br).set_transition_length(0).perform();
</span></span></span><span class="line"><span class="cl"><span class="sd">                } else {
</span></span></span><span class="line"><span class="cl"><span class="sd">                  ESP_LOGD(TAG, &#34;out_1: OFF, setting right side ON&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">                  id(leds_button_1_left).turn_off().set_rgb( red, green, blue ).set_brightness(br).set_transition_length(0).perform();
</span></span></span><span class="line"><span class="cl"><span class="sd">                  id(leds_button_1_right).turn_on().set_rgb( red, green, blue ).set_brightness(br).set_transition_length(0).perform();
</span></span></span><span class="line"><span class="cl"><span class="sd">                }
</span></span></span><span class="line"><span class="cl"><span class="sd">                break;
</span></span></span><span class="line"><span class="cl"><span class="sd">            case 2:
</span></span></span><span class="line"><span class="cl"><span class="sd">                // Output 2 is middle button, so we want to light the second partition
</span></span></span><span class="line"><span class="cl"><span class="sd">                id(template_light_2).current_values_as_rgb(&amp;red, &amp;green, &amp;blue);
</span></span></span><span class="line"><span class="cl"><span class="sd">                id(template_light_2).current_values_as_brightness(&amp;br);
</span></span></span><span class="line"><span class="cl"><span class="sd">                ESP_LOGD(TAG, &#34;Light State =&gt; R: %f, G: %f, B: %f BR: %f&#34;, red, green, blue, br);
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">                // The C++ code we call changes based on which type of output out_2 is
</span></span></span><span class="line"><span class="cl"><span class="sd">                if(id(out_2).${out_2_state_exp}) {
</span></span></span><span class="line"><span class="cl"><span class="sd">                  ESP_LOGD(TAG, &#34;out_2: ON, setting left side ON&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">                  id(leds_button_2_left).turn_on().set_rgb( red, green, blue ).set_brightness(br).set_transition_length(0).perform();
</span></span></span><span class="line"><span class="cl"><span class="sd">                  id(leds_button_2_right).turn_off().set_rgb( red, green, blue ).set_brightness(br).set_transition_length(0).perform();
</span></span></span><span class="line"><span class="cl"><span class="sd">                } else {
</span></span></span><span class="line"><span class="cl"><span class="sd">                  ESP_LOGD(TAG, &#34;out_2: OFF, setting right side ON&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">                  id(leds_button_2_left).turn_off().set_rgb( red, green, blue ).set_brightness(br).set_transition_length(0).perform();
</span></span></span><span class="line"><span class="cl"><span class="sd">                  id(leds_button_2_right).turn_on().set_rgb( red, green, blue ).set_brightness(br).set_transition_length(0).perform();
</span></span></span><span class="line"><span class="cl"><span class="sd">                }
</span></span></span><span class="line"><span class="cl"><span class="sd">                break;
</span></span></span><span class="line"><span class="cl"><span class="sd">            case 3:
</span></span></span><span class="line"><span class="cl"><span class="sd">                // Output 3 is bottom button, so we want to light the third partition
</span></span></span><span class="line"><span class="cl"><span class="sd">                id(template_light_3).current_values_as_rgb(&amp;red, &amp;green, &amp;blue);
</span></span></span><span class="line"><span class="cl"><span class="sd">                id(template_light_3).current_values_as_brightness(&amp;br);
</span></span></span><span class="line"><span class="cl"><span class="sd">                ESP_LOGD(TAG, &#34;Light State =&gt; R: %f, G: %f, B: %f BR: %f&#34;, red, green, blue, br);
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">                if(id(out_3).${out_3_state_exp}) {
</span></span></span><span class="line"><span class="cl"><span class="sd">                  ESP_LOGD(TAG, &#34;out_3: ON, setting left side ON&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">                  id(leds_button_3_left).turn_on().set_rgb( red, green, blue ).set_brightness(br).set_transition_length(0).perform();
</span></span></span><span class="line"><span class="cl"><span class="sd">                  id(leds_button_3_right).turn_off().set_rgb( red, green, blue ).set_brightness(br).set_transition_length(0).perform();
</span></span></span><span class="line"><span class="cl"><span class="sd">                } else {
</span></span></span><span class="line"><span class="cl"><span class="sd">                  ESP_LOGD(TAG, &#34;out_3: OFF, setting right side ON&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">                  id(leds_button_3_left).turn_off().set_rgb( red, green, blue ).set_brightness(br).set_transition_length(0).perform();
</span></span></span><span class="line"><span class="cl"><span class="sd">                  id(leds_button_3_right).turn_on().set_rgb( red, green, blue ).set_brightness(br).set_transition_length(0).perform();
</span></span></span><span class="line"><span class="cl"><span class="sd">                }
</span></span></span><span class="line"><span class="cl"><span class="sd">                break;
</span></span></span><span class="line"><span class="cl"><span class="sd">              default:
</span></span></span><span class="line"><span class="cl"><span class="sd">                ESP_LOGE(TAG, &#34;Unknown output number: %d&#34;, output_num);
</span></span></span><span class="line"><span class="cl"><span class="sd">                return;
</span></span></span><span class="line"><span class="cl"><span class="sd">            }</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Called on boot or any time we&#39;re transitioning from mood-light to a &#34;normal&#34; mode</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">resume_normal_regime_for_leds</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">single</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># When resuming normal regime, figure out which color scheme we should be using and then run the &#34;figure out which partition to light&#34; script for each output</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">script.execute</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">figure_out_normal_regime_mode</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">script.execute</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">figure_out_which_partition_to_light</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">output_num</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">script.execute</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">figure_out_which_partition_to_light</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">output_num</span><span class="p">:</span><span class="w"> </span><span class="m">2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">script.execute</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">figure_out_which_partition_to_light</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">output_num</span><span class="p">:</span><span class="w"> </span><span class="m">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># See the LEDs section of readme.md</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># There are 10 LEDs on each side, we have 3 groups which means we&#39;ll need 4 &#34;buffers&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 10 - 4 = 6 and 6/3 is 2 so we&#39;ll use 2 leds per partition</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">light</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Button TOP Left (internal)&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">partition</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">leds_button_1_left</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">internal</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">segments</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">leds_all</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">from</span><span class="p">:</span><span class="w"> </span><span class="m">22</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">to</span><span class="p">:</span><span class="w"> </span><span class="m">23</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Button TOP Right (internal)&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">partition</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">leds_button_1_right</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">internal</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">segments</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">leds_all</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">from</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">to</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Button MIDDLE Left (internal)&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">partition</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">leds_button_2_left</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">internal</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">segments</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">leds_all</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">from</span><span class="p">:</span><span class="w"> </span><span class="m">19</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">to</span><span class="p">:</span><span class="w"> </span><span class="m">20</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Button MIDDLE Right (internal)&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">partition</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">leds_button_2_right</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">internal</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">segments</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">leds_all</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">from</span><span class="p">:</span><span class="w"> </span><span class="m">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">to</span><span class="p">:</span><span class="w"> </span><span class="m">4</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Button BOTTOM Left (internal)&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">partition</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">leds_button_3_left</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">internal</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">segments</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">leds_all</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">from</span><span class="p">:</span><span class="w"> </span><span class="m">16</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">to</span><span class="p">:</span><span class="w"> </span><span class="m">17</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Button BOTTOM Right (internal)&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">partition</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">leds_button_3_right</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">internal</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">segments</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">leds_all</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">from</span><span class="p">:</span><span class="w"> </span><span class="m">6</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">to</span><span class="p">:</span><span class="w"> </span><span class="m">7</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Expose a &#34;template&#34; light entity to HA.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Use this to &#34;wrap&#34; the partition lights and pass through values to them.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># See readme.md for more info</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">custom</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      // Sign of life
</span></span></span><span class="line"><span class="cl"><span class="sd">      ESP_LOGD(&#34;light.template_light&#34;, &#34;Alive!&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      auto template_light_1 = new TemplateLight();
</span></span></span><span class="line"><span class="cl"><span class="sd">      App.register_component(template_light_1);
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      auto template_light_2 = new TemplateLight();
</span></span></span><span class="line"><span class="cl"><span class="sd">      App.register_component(template_light_2);
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      auto template_light_3 = new TemplateLight();
</span></span></span><span class="line"><span class="cl"><span class="sd">      App.register_component(template_light_3);
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      return {template_light_1, template_light_2, template_light_3};</span><span class="w">      
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lights</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Indicator 1&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">template_light_1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Expose to HA, under config section</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">internal</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="l">config</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Template light should restore to last state / ON at boot</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">restore_mode</span><span class="p">:</span><span class="w"> </span><span class="l">RESTORE_AND_ON</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># We do not bother with gamma correction here, we want to keep the values as unadulterated as possible as this is JUST a pass through</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># The actual light(s) that we pass values to will handle gamma correction (if configured)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">gamma_correct</span><span class="p">:</span><span class="w"> </span><span class="m">0.0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Likewise, we do not want to do any smoothing here, we want to pass the values through as quickly as possible</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">default_transition_length</span><span class="p">:</span><span class="w"> </span><span class="l">0s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># In testing, I can&#39;t get the (gamma corrected...) partition light(s) to turn on at all below ~20%.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Not clear _why_ this is (too dim to see?) but it&#39;s a problem because there&#39;s nothing preventing you from setting a brightness of &lt; 20% in HA.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># HA thinks that the light is on, but it&#39;s not actually on.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Ideally i&#39;d be able to set min_brightness here like I can with other types of light in ESPHome, but I can&#39;t.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># More than likely i&#39;ll need to implement this myself in the template_light.h file.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># We need to link our state to the actual partition lights... which is not as straightforward as expected.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># After a lot of trial/error, this is the least janky method I could come up with.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Because we have a transition length of 0, the on_state hook really shouldn&#39;t be called more than 2x</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Once as soon as any command is received; it&#39;ll print the state we&#39;re about to move away from</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Once as soon as we&#39;ve reached the  commanded state that was just received; it&#39;ll print the state we&#39;re at / should match what HA commanded.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># However, the on_state call is STILL needed because a light that is on full red and then given a command to go to full purple will not pass through</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">#   on/off state.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">on_turn_on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">              // Get user requested RGB values and pass them through to the partition lights
</span></span></span><span class="line"><span class="cl"><span class="sd">              float red, green, blue, br;
</span></span></span><span class="line"><span class="cl"><span class="sd">              id(template_light_1).current_values_as_rgb(&amp;red, &amp;green, &amp;blue);
</span></span></span><span class="line"><span class="cl"><span class="sd">              id(template_light_1).current_values_as_brightness(&amp;br);
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">              // Pass through should happen ONLY in the on_state and on_turn_off hooks so just log here
</span></span></span><span class="line"><span class="cl"><span class="sd">              // Since we have ZERO gamma correction, the values here should _match_ the ones set in HA
</span></span></span><span class="line"><span class="cl"><span class="sd">              // They&#39;ll just be normalized though. So HA sends red: 255, here, we get 1.0
</span></span></span><span class="line"><span class="cl"><span class="sd">              ESP_LOGD(&#34;template_light_1.on_turn_on&#34;, &#34;ON_TURN_ON =&gt; R: %f, G: %f, B: %f BR: %f&#34;, red, green, blue, br);</span><span class="w">              
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">on_turn_off</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">              // Get template RGB values
</span></span></span><span class="line"><span class="cl"><span class="sd">              float red, green, blue, br;
</span></span></span><span class="line"><span class="cl"><span class="sd">              id(template_light_1).current_values_as_rgb(&amp;red, &amp;green, &amp;blue);
</span></span></span><span class="line"><span class="cl"><span class="sd">              id(template_light_1).current_values_as_brightness(&amp;br);
</span></span></span><span class="line"><span class="cl"><span class="sd">              // OFF means OFF so both partitions should be off
</span></span></span><span class="line"><span class="cl"><span class="sd">              ESP_LOGD(&#34;template_light_1.on_turn_off&#34;, &#34;TURN OFF&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">              id(leds_button_1_left).turn_off().set_rgb( red, green, blue ).set_brightness(br).set_transition_length(0).perform();
</span></span></span><span class="line"><span class="cl"><span class="sd">              id(leds_button_1_right).turn_off().set_rgb( red, green, blue ).set_brightness(br).set_transition_length(0).perform();</span><span class="w">              
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">on_state</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">              // Get template RGB values
</span></span></span><span class="line"><span class="cl"><span class="sd">              float red, green, blue, br;
</span></span></span><span class="line"><span class="cl"><span class="sd">              id(template_light_1).current_values_as_rgb(&amp;red, &amp;green, &amp;blue);
</span></span></span><span class="line"><span class="cl"><span class="sd">              id(template_light_1).current_values_as_brightness(&amp;br);
</span></span></span><span class="line"><span class="cl"><span class="sd">              ESP_LOGD(&#34;template_light_1.on_state&#34;, &#34;State =&gt; R: %f, G: %f, B: %f BR: %f&#34;, red, green, blue, br);</span><span class="w">              
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="c"># Figure out which partition light to light up now that we have an updated state</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">script.execute</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">figure_out_which_partition_to_light</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="c"># Output 1 = top</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">output_num</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Indicator 2&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">template_light_2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">internal</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="l">config</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">restore_mode</span><span class="p">:</span><span class="w"> </span><span class="l">RESTORE_AND_ON</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">gamma_correct</span><span class="p">:</span><span class="w"> </span><span class="m">0.0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">default_transition_length</span><span class="p">:</span><span class="w"> </span><span class="l">0s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">on_turn_on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">              // Get user requested RGB values and pass them through to the partition lights
</span></span></span><span class="line"><span class="cl"><span class="sd">              float red, green, blue, br;
</span></span></span><span class="line"><span class="cl"><span class="sd">              id(template_light_2).current_values_as_rgb(&amp;red, &amp;green, &amp;blue);
</span></span></span><span class="line"><span class="cl"><span class="sd">              id(template_light_2).current_values_as_brightness(&amp;br);
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">              // Pass through should happen ONLY in the on_state and on_turn_off hooks so just log here
</span></span></span><span class="line"><span class="cl"><span class="sd">              // Since we have ZERO gamma correction, the values here should _match_ the ones set in HA
</span></span></span><span class="line"><span class="cl"><span class="sd">              // They&#39;ll just be normalized though. So HA sends red: 255, here, we get 1.0
</span></span></span><span class="line"><span class="cl"><span class="sd">              ESP_LOGD(&#34;template_light_2.on_turn_on&#34;, &#34;ON_TURN_ON =&gt; R: %f, G: %f, B: %f BR: %f&#34;, red, green, blue, br);</span><span class="w">              
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">on_turn_off</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">              // Get template RGB values
</span></span></span><span class="line"><span class="cl"><span class="sd">              float red, green, blue, br;
</span></span></span><span class="line"><span class="cl"><span class="sd">              id(template_light_2).current_values_as_rgb(&amp;red, &amp;green, &amp;blue);
</span></span></span><span class="line"><span class="cl"><span class="sd">              id(template_light_2).current_values_as_brightness(&amp;br);
</span></span></span><span class="line"><span class="cl"><span class="sd">              // OFF means OFF so both partitions should be off
</span></span></span><span class="line"><span class="cl"><span class="sd">              ESP_LOGD(&#34;template_light_2.on_turn_off&#34;, &#34;TURN OFF&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">              id(leds_button_2_left).turn_off().set_rgb( red, green, blue ).set_brightness(br).set_transition_length(0).perform();
</span></span></span><span class="line"><span class="cl"><span class="sd">              id(leds_button_2_right).turn_off().set_rgb( red, green, blue ).set_brightness(br).set_transition_length(0).perform();</span><span class="w">              
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">on_state</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">              // Get template RGB values
</span></span></span><span class="line"><span class="cl"><span class="sd">              float red, green, blue, br;
</span></span></span><span class="line"><span class="cl"><span class="sd">              id(template_light_2).current_values_as_rgb(&amp;red, &amp;green, &amp;blue);
</span></span></span><span class="line"><span class="cl"><span class="sd">              id(template_light_2).current_values_as_brightness(&amp;br);
</span></span></span><span class="line"><span class="cl"><span class="sd">              ESP_LOGD(&#34;template_light_2.on_state&#34;, &#34;State =&gt; R: %f, G: %f, B: %f BR: %f&#34;, red, green, blue, br);</span><span class="w">              
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">script.execute</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">figure_out_which_partition_to_light</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="c"># Output 2 = middle on 3c version</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">output_num</span><span class="p">:</span><span class="w"> </span><span class="m">2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Indicator 3&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">template_light_3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">internal</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="l">config</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">restore_mode</span><span class="p">:</span><span class="w"> </span><span class="l">RESTORE_AND_ON</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">gamma_correct</span><span class="p">:</span><span class="w"> </span><span class="m">0.0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">default_transition_length</span><span class="p">:</span><span class="w"> </span><span class="l">0s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">on_turn_on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">              // Get user requested RGB values and pass them through to the partition lights
</span></span></span><span class="line"><span class="cl"><span class="sd">              float red, green, blue, br;
</span></span></span><span class="line"><span class="cl"><span class="sd">              id(template_light_3).current_values_as_rgb(&amp;red, &amp;green, &amp;blue);
</span></span></span><span class="line"><span class="cl"><span class="sd">              id(template_light_3).current_values_as_brightness(&amp;br);
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">              // Pass through should happen ONLY in the on_state and on_turn_off hooks so just log here
</span></span></span><span class="line"><span class="cl"><span class="sd">              // Since we have ZERO gamma correction, the values here should _match_ the ones set in HA
</span></span></span><span class="line"><span class="cl"><span class="sd">              // They&#39;ll just be normalized though. So HA sends red: 255, here, we get 1.0
</span></span></span><span class="line"><span class="cl"><span class="sd">              ESP_LOGD(&#34;template_light_3.on_turn_on&#34;, &#34;ON_TURN_ON =&gt; R: %f, G: %f, B: %f BR: %f&#34;, red, green, blue, br);</span><span class="w">              
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">on_turn_off</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">              // Get template RGB values
</span></span></span><span class="line"><span class="cl"><span class="sd">              float red, green, blue, br;
</span></span></span><span class="line"><span class="cl"><span class="sd">              id(template_light_3).current_values_as_rgb(&amp;red, &amp;green, &amp;blue);
</span></span></span><span class="line"><span class="cl"><span class="sd">              id(template_light_3).current_values_as_brightness(&amp;br);
</span></span></span><span class="line"><span class="cl"><span class="sd">              // OFF means OFF so both partitions should be off
</span></span></span><span class="line"><span class="cl"><span class="sd">              ESP_LOGD(&#34;template_light_3.on_turn_off&#34;, &#34;TURN OFF&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">              id(leds_button_3_left).turn_off().set_rgb( red, green, blue ).set_brightness(br).set_transition_length(0).perform();
</span></span></span><span class="line"><span class="cl"><span class="sd">              id(leds_button_3_right).turn_off().set_rgb( red, green, blue ).set_brightness(br).set_transition_length(0).perform();</span><span class="w">              
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">on_state</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">              // Get template RGB values
</span></span></span><span class="line"><span class="cl"><span class="sd">              float red, green, blue, br;
</span></span></span><span class="line"><span class="cl"><span class="sd">              id(template_light_3).current_values_as_rgb(&amp;red, &amp;green, &amp;blue);
</span></span></span><span class="line"><span class="cl"><span class="sd">              id(template_light_3).current_values_as_brightness(&amp;br);
</span></span></span><span class="line"><span class="cl"><span class="sd">              ESP_LOGD(&#34;template_light_3.on_state&#34;, &#34;State =&gt; R: %f, G: %f, B: %f BR: %f&#34;, red, green, blue, br);</span><span class="w">              
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">script.execute</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">figure_out_which_partition_to_light</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">output_num</span><span class="p">:</span><span class="w"> </span><span class="m">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Set up the gpio outputs for the relays</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">output</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">relay_1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">gpio</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO18</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">relay_2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">gpio</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO17</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">relay_3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">gpio</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO27</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>ESPHome on the Yeelight Monitor Light Bar Pro</title><link>https://karlquinsland.com/yeelight-monitor-lamp-teardown-esphome/</link><pubDate>Mon, 18 Sep 2023 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/yeelight-monitor-lamp-teardown-esphome/</guid><description><![CDATA[<h1 id="yeelight-light-bar-pro-yltd003-teardown">Yeelight Light Bar Pro (YLTD003) Teardown</h1>
<p>Monitor-top light bars are wonderful for reducing eye strain and fatigue and the effect is even better with a bias light behind the monitor.
Enter the <a href="https://www.aliexpress.us/item/3256801709519092.html" target="_blank" rel="noopener noreffer">Yeelight Light Bar Pro (YLTD003)</a>.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        YeeLight marketing photo from AliExpress listing. The background wash light really does help reduce eye strain and fatigue.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>It appears to be a pretty straightforward clone of the Xaomi MJGJD02YL that I&rsquo;ve torn down <a href="/xaomi-s1-monitor-lamp-teardown-and-tasmota/" rel="">previously</a> but with some welcome changes internally.</p>
<h2 id="unbox">Unbox</h2>
<p>Before teardown, quick look at the box.
The shipping damage is just part of the Ali Express experience!</p>
<p><figure >

    
        
    

    

    <figcaption>
        
        <p>
        The box isn&#39;t anything to write home about.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Neatly packed, for what it&#39;s worth.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>

</p>
<p>Not only does it look a lot like the Xaomi lamp, it&rsquo;s dimensionally similar, too.
It&rsquo;s 100% compatible with the mounting bracket that Xaomi shipped with their lamp.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Xaomi desk lamp on top, Yeelight on bottom.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h2 id="teardown">Teardown</h2>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Tip<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>I am going to run through a <em>complete</em> teardown.</p>
<p>You do not need to <strong>completely</strong> disassemble the lamp to replace the ESP8266 with an ESP32.</p>
<p>To access the ESP8266 based module controlling the lamp, you really only need to remove the larger of the two end caps.
From there, you will have a few inches of ribbon cable to work with. If you&rsquo;re careful, you can replace the ESP8266 with an ESP32 without removing the main PCB from the tube but you may find that taking the main PCB out of the tube makes it easier to work with.</p>
</div>
        </div>
    </div>
<p>Just like with the Xaomi lamp, you will start by removing the sticker covering the small metal protrusion that holds the pogo pins and mates with the power supply &ldquo;dock&rdquo;.
The pogo pins are one of the two features that keep the main PCB from sliding out of the tube.</p>
<p>Discard the sicker and put the metal piece and the pogo pin assembly somewhere safe.
This step is not pictured.</p>
<p>Next, note that Yeelight bar has a larger plastic cap on the left relative to the one on the right.
Not only does this cap have a grip feature moulded in, it&rsquo;s also secured to the tube with a lot less glue than the Xaomi lamp; just grip and twist to remove this cap.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The cap is trivial to remove.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>After the end cap is removed, you will be able to see inside the tube.
There&rsquo;s not much room, but the micro controller is on it&rsquo;s own little PCB attached to the main PCB with ~50mm of ribbon cable.
If you&rsquo;re careful, this is all the disassembly you need to do to access the ESP8266 module.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        There&#39;s not much room to work with. Left most is the cw/ww led strip and reflector. Middle is ribbon cable connecting leds to main pcb. Right most is the ESP8266 module.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>As of writing, I could not find any information about which pins on the module are used for programming.
I was under a bit of time pressure and wanted to use a more &ldquo;future proof&rdquo; ESP32 module anyways so I didn&rsquo;t bother trying to program the ESP8266 module.</p>
<p>I opted to replace it with an ESP32 module that I had on hand.</p>
<p><figure >

    
        
    

    

    <figcaption>
        
        <p>
        It&#39;s clearly an ESP8266 module but the pinout/form-factor are unusual.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>

</p>
<p>If you want to extract the main PCB from the tube, you will notice that there&rsquo;s still <em>something</em> holding it in place.
That something is the plastic lens closest to the now removed end cap.</p>
<p>Using a small flat pry tool or razor blade, you can carefully pry the lens out of the tube.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Note the plastic lense that used to cover the RGB LEDs.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>With the plastic lense out of the way, the main PCB and the cw/ww light ribbon and reflector can be slid out of the tube.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        There&#39;s not much to it, really. Tube, big PCB and small ESP8266 module on a ribbon cable.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>That&rsquo;s really all there is to opening up the lamp.</p>
<p>Below a few more photos of the internals.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        A look at the power regulation and LED drive circuitry.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        A closer look at the chips for the remote control puck.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        A closer look at the power regulation circuitry.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        This is what happens when you are impatient and set the hotplate to an aggressive temperature.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h2 id="esp32-retrofit">ESP32 Retrofit</h2>
<p>Fortunately, each wire connecting the ESP8266 module to the main PCB is clearly labeled.</p>
<table>
<thead>
<tr>
<th>Pin</th>
<th>Label</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>GND</code></td>
<td>Ground for the ESP module</td>
</tr>
<tr>
<td>2</td>
<td><code>3v3</code></td>
<td>Power for the ESP module</td>
</tr>
<tr>
<td>3</td>
<td><code>SCL</code></td>
<td>I2C. (probably, see note below)</td>
</tr>
<tr>
<td>4</td>
<td><code>SDA</code></td>
<td>I2C. (probably, see note below)</td>
</tr>
<tr>
<td>5</td>
<td><code>RGB</code></td>
<td>Standard neopixel data bus</td>
</tr>
<tr>
<td>6</td>
<td><code>C</code></td>
<td>PWM signal for cold white channel</td>
</tr>
<tr>
<td>7</td>
<td><code>EN</code></td>
<td>Master enable/disable for all light output</td>
</tr>
<tr>
<td>8</td>
<td><code>W</code></td>
<td>PWM signal for warm white channel</td>
</tr>
</tbody>
</table>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>I2C, probably<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">99% sure this is I2C for communications to the micro controller handing communication with the remote control puck.
There&rsquo;s nothing else on the PCB that would need I2C, but I haven&rsquo;t bothered to verify this&hellip; hence 99% sure.</div>
        </div>
    </div>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        I am eternally grateful for every PCB designer that bothers with clear silkscreen labels.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>To drive the LEDs, we only need 4 GPIOs. Two for PWM channels and another two for master output enable and neopixels.</p>
<p>This makes it <em>trivial</em> to replace the ESP8266 based module with an ESP32.
The only catch is that the ESP32 module has to be <em>narrow</em> (if you want to fit it inside the tube).
If you don&rsquo;t care about that, you can use any ESP32 module you have on hand but you&rsquo;ll need to design/make a new enclosure for it.</p>
<p>I had a few of the incredibly tiny <a href="https://github.com/01Space/ESP32-C3-0.42LCD" target="_blank" rel="noopener noreffer">ESP32-C3-0.42LCD</a> modules on hand, so I used one and it <em>barely</em> fit:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Tube is quite narrow and the ESP32 module takes up almost all of the available space.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>All in all, you want to make sure the module is no more than ~20mm wide and probably not much longer than that either.
To make my life easier in the future, I soldered the ESP32 module to the main PCB with AWS30 wires about ~100mm long. You can see the colored wires in the photo above.</p>
<p>I was barely able to fit everything back into the tube.
You should probably use wires a bit shorter if you can.</p>
<p>In any case, the extra bulk from the wires and the ESP32 module meant that the OEM end cap would not fit back on the tube without some modifications.</p>
<p>Rather than play a game of &ldquo;cut some more plastic away and see if it fits yet&rdquo;, I decided to just model a new end cap in Fusion 360.
This replacement cap specifically does not have any features that extend deep into the tube so there&rsquo;s no risk of it interfering with the ESP32 module.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Suggested print orientation. Choose resolution, material and color to suit your needs.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>You can download <code>endcap.step</code> file <a href="/yeelight-monitor-lamp-teardown-esphome/models/endcap.step" rel="">here</a>.
Print it in whatever material and color you want but be mindful of dimensional accuracy; the end cap is meant to be press-fit into the tube.</p>
<p>If you&rsquo;re confident that you&rsquo;ll never need to access the ESP32 module again, glue the end cap in place.</p>
<h3 id="esphome">ESPHome</h3>
<p>Here&rsquo;s a simple ESPHome config for the device.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">esphome</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Will boot loop w/o this when using the ESP-IDF and the C3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">platformio_options</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">board_build.flash_mode</span><span class="p">:</span><span class="w"> </span><span class="l">dio</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">esp32</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># There is no platform.io board for ESP32-C3-0.42LCD so use generic</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">board</span><span class="p">:</span><span class="w"> </span><span class="l">esp32-c3-devkitm-1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">framework</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">esp-idf</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Enable logging</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">logger</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">level</span><span class="p">:</span><span class="w"> </span><span class="l">INFO</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Requires ESP-IDF</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">hardware_uart</span><span class="p">:</span><span class="w"> </span><span class="l">USB_SERIAL_JTAG</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">light</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Primary&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">cwww</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">leds</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cold_white</span><span class="p">:</span><span class="w"> </span><span class="l">out_pwm_cw</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">warm_white</span><span class="p">:</span><span class="w"> </span><span class="l">out_pwm_ww</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Marketing photos on ali express listing show a range of 2700K to 6500K</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">warm_white_color_temperature</span><span class="p">:</span><span class="w"> </span><span class="l">2700K</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cold_white_color_temperature</span><span class="p">:</span><span class="w"> </span><span class="l">6500K</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># With WW/CW on full, was drawing about 2.6-2.8A.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># The RGB added another .5A or so.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># The cw/ww strip is on a metal reflector which does mate with the aluminum case but</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">#    i&#39;m not sure how much heat transfer there is.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">constant_brightness</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># See: https://esphome.io/components/light/esp32_rmt_led_strip</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Ambient&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">esp32_rmt_led_strip</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">pixels</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO10</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">chipset</span><span class="p">:</span><span class="w"> </span><span class="l">WS2812</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">rmt_channel</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">rgb_order</span><span class="p">:</span><span class="w"> </span><span class="l">GRB</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># There are two banks of 20</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">num_leds</span><span class="p">:</span><span class="w"> </span><span class="m">40</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">output</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">out_pwm_ww</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">ledc</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO08</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Any lower than this and the LEDs don&#39;t turn on until ~ 15% or so</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">min_power</span><span class="p">:</span><span class="w"> </span><span class="m">0.05</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># But when we hit off, we want it to be off</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">zero_means_zero</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">frequency</span><span class="p">:</span><span class="w"> </span><span class="l">2441Hz</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">out_pwm_cw</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">ledc</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO07</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">zero_means_zero</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">min_power</span><span class="p">:</span><span class="w"> </span><span class="m">0.05</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">frequency</span><span class="p">:</span><span class="w"> </span><span class="l">2441Hz</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># PWM and RGB drivers can be enabled/disabled by a master on/off</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">switch</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Master Output Enable&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">sw_out_en</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">gpio</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO06</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="pcbic-markings">PCB/IC markings</h2>
<p>AKA the strings that I wish google had indexed when I was first looking for this info.</p>
<p>The front of the ESP8266 module is marked with:</p>
<ul>
<li><code>YEELIGHT</code></li>
<li><code>ESP8266NV1.0</code></li>
<li><code>LibraPro</code></li>
<li><code>WF-E266-RPY2</code></li>
<li><code>PN: 21500000028</code></li>
<li><code>CMIT ID: 2020DP12740</code></li>
</ul>
<p>The rear of the ESP8266 module is marked with:</p>
<ul>
<li><code>94V-0</code></li>
<li><code>S Y22M02D25</code></li>
<li><code>JU17.820.0767</code></li>
</ul>
<p>The main PCB is populated with:</p>
<ul>
<li><a href="https://wiki.telink-semi.cn/doc/ds/DS_TLSR8368-E_Datasheet%20for%20Telink%202.4GHz%20RF%20System-On-Chip%20Solution%20TLSR8368.pdf" target="_blank" rel="noopener noreffer"><code>TLSR8368EP16</code></a>: 2.4GHz RF System-On-Chip Solution for remote control puck</li>
<li><a href="https://datasheet.lcsc.com/lcsc/1810011020_FUDAN-MICRO-FM24C02C-SO-T-G_C189501.pdf" target="_blank" rel="noopener noreffer"><code>FM24C02C</code></a>: Flash rom for the <code>TLSR83</code>. I didn&rsquo;t bother to desolder and dump this chip.</li>
<li>3x ICs marked with <code>WRFAA</code> in a <code>2x5 SON</code> package. I can&rsquo;t find any info on these chips, but given that there are three LED channels and their proximity to power regulation circuitry, I assume that they are LED drivers.</li>
</ul>
]]></description></item></channel></rss>