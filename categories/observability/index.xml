<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Observability - Category - karl</title><link>https://karlquinsland.com/categories/observability/</link><description>Observability - Category - karl</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 19 Mar 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://karlquinsland.com/categories/observability/" rel="self" type="application/rss+xml"/><item><title>Arris SB8200 Prometheus Exporter</title><link>https://karlquinsland.com/arris-sb8200-prometheus-exporter/</link><pubDate>Tue, 19 Mar 2024 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/arris-sb8200-prometheus-exporter/</guid><description><![CDATA[<!-- markdownlint-disable-file MD002 -->
<p>This is a very short &ldquo;announcement&rdquo; post.</p>
<p>To beef up my home-lab observability stack, I&rsquo;ve been working on a few projects to expose more data to Prometheus.
Getting metrics from my cable modem has been on the &ldquo;todo&rdquo; list for literally years.
There have been various metric exporters written in the past but they have either been archived/deleted off of GitHub or are otherwise inappropriate for my needs.
So, I wrote my own.</p>
<p>The GitHub repo is <a href="https://github.com/kquinsland/sb820_prometheus_exporter/" target="_blank" rel="noopener noreffer">here</a> if you want to dive right in.</p>
<p>When set up, one possible way to visualize the data looks like this:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        blah
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h2 id="a-few-observations">A few observations</h2>
<p>While building out the dashboard / prototyping it, a few things immediately stood out as &ldquo;interesting&rdquo;</p>
<p>After rebooting the modem, the metrics that keep track of error-corrected symbols sent/received over the connection are 0.
This makes sense as the modem has just been rebooted and hasn&rsquo;t had time to accumulate any errors yet.
The first jump in correctable/uncorrectable errors&hellip; happens to corelate directly with a meaningful change in both received/downstream power <em>and</em> transmit/upstream power.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        blah
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>The metric exporter keeps track of how long scraping the modem&rsquo;s web interface takes as well as weather or not the scraped data was complete / well formed.
The time it takes to scrape a particular endpoint increases pretty quickly after power up before leveling off.
I&rsquo;d love to know why the web server on the modem slows down so quickly after booting up&hellip;.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        blah
        
            
        
        </p> 
    </figcaption>
    
</figure>


]]></description></item><item><title>Adding an APC UPS to Home Assistant energy dashboard</title><link>https://karlquinsland.com/apc-ups-energy-in-homeassistant/</link><pubDate>Sun, 05 Sep 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/apc-ups-energy-in-homeassistant/</guid><description><![CDATA[<p><strong>EDIT:</strong> (2021-09-19): After some <a href="https://old.reddit.com/r/homeassistant/comments/pi3pv2/how_to_use_an_apc_ups_as_an_energy_dashboard/hbqudh5/" target="_blank" rel="noopener noreffer">back and forth</a> with <a href="https://old.reddit.com/user/Laxarus" target="_blank" rel="noopener noreffer">/u/Laxarus</a>, there is now a simpler method! The <code>snmp</code> platform still does not support setting <code>device_class</code>, but wrapping the sensor in another template sensor is not required; just do so in your <a href="https://www.home-assistant.io/docs/configuration/customizing-devices/" target="_blank" rel="noopener noreffer"><code>customize.yaml</code></a>. I have called this out <a href="#edit-2021-09-19" rel="">below</a>.</p>
<hr>
<p>This is another quick &ldquo;here&rsquo;s how I did it, hope this help&rdquo; post.</p>
<p>In preparation for the inevitable grid brownouts that summer 2021 would bring, I installed a rather beefy UPS for my home network / lab. After some browsing, I discovered a local eWaste liquidator with a really good deal on some second-hand APC UPSs.</p>
<p>A few hundred dollars and about 150 lbs later, the UPS was installed in the server rack. Despite being a newer generation, the software on the UPS has a <em><strong>TON</strong></em> of similarities to the <a href="/monitoring-ap7900-switched-pdu-prometheus-grafana/" rel="">older style of PDU that I installed in my lab </a> a while back. This made it relatively straightforward to use the same
pattern to start getting UPS metrics into Grafana as well.</p>
<p>After getting the basic monitoring up and running, I started to draft this post to serve as an &lsquo;update&rsquo; to the APC9700 post. Life got in the way and the post sat in the drafts branch where it was completely forgotten about&hellip;. until <a href="https://www.home-assistant.io/blog/2021/08/04/release-20218/" target="_blank" rel="noopener noreffer">Home Assistant released their new Energy dashboard</a>. Now that HA could show the energy consumption of individual devices right next to the cumulative consumption and production data, the post was worth finishing and expanding on.</p>
<p>The configuration that I was <em>going</em> to publish is <a href="#current-and-voltage-independently" rel="">below</a> but after finding <a href="https://old.reddit.com/r/homeassistant/comments/pi3pv2/how_to_use_an_apc_ups_as_an_energy_dashboard/hbpqzr6/" target="_blank" rel="noopener noreffer">this</a> comment by <a href="https://old.reddit.com/user/Laxarus" target="_blank" rel="noopener noreffer">Laxarus</a> on <a href="https://old.reddit.com/user/Navydevildoc" target="_blank" rel="noopener noreffer">Navydevildoc</a>&rsquo;s <a href="https://old.reddit.com/r/homeassistant/comments/pi3pv2/how_to_use_an_apc_ups_as_an_energy_dashboard/" target="_blank" rel="noopener noreffer">reddit post</a>, I&rsquo;ve got a revised and simpler configuration to share!</p>
<h2 id="long-term-statistics-in-home-assistant">Long Term Statistics in Home Assistant</h2>
<p>Before diving into the configuration, a little bit of context. In preparation for the energy sub system, the Home Assistant developers have been working on a &lsquo;<a href="https://developers.home-assistant.io/docs/core/entity/sensor/#long-term-statistics" target="_blank" rel="noopener noreffer">long term statistics</a>&rsquo; (LTS) framework. The LTS framework is meant to give HA some improved speed and capabilities when dealing with a lot of data! The energy subsystem is the first &lsquo;consumer&rsquo; of the LTS framework.</p>
<p>Home Assistant will look for two &lsquo;properties&rsquo; on a given sensor to determine if that sensor will work with the LTS framework.
For a sensor/entity to &lsquo;work&rsquo; with the long term stats system it must:</p>
<ul>
<li>have a property called <code>device_class</code> with a value of <code>energy</code>, <code>gas</code>, or <code>monetary</code></li>
<li>have a property called <code>state_class</code> with a value of either <code>measurement</code> or <code>total_increasing</code></li>
</ul>
<p>In testing, I was <em>not</em> able to get a sensor with <code>state_class: measurement</code> and <code>device_class: energy</code> to &lsquo;work&rsquo; with the energy sub system. Fortunately, this does not apply with the concise configuration <a href="#a-single-oid-for-power-consumption" rel="">below</a>!</p>
<p>As the LTS framework is still new, many platforms - including the SNMP platform - do not support the required properties:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Invalid config for [sensor.snmp]: [state_class] is an invalid option for [sensor.snmp]. Check: sensor.snmp-&gt;state_class.
</span></span><span class="line"><span class="cl">Invalid config for [sensor.snmp]: [device_class] is an invalid option for [sensor.snmp]. Check: sensor.snmp-&gt;device_class.
</span></span></code></pre></td></tr></table>
</div>
</div><p>The <code>template</code> platform <em>has</em> been updated to work with the <code>device_class</code> or <code>state_class</code> properties though.
So that&rsquo;s the technique to use here; a <code>template</code> sensor with the correct <code>{device,state}_class</code> properties set will wrap the snmp sensor.</p>
<p>Hopefully a future release of HA will include <code>{device,state}_class</code> support for the <code>snmp</code> platform; the <code>template</code> sensors in the configuration snips below won&rsquo;t be needed!</p>
<h3 id="edit-2021-09-19">EDIT (2021-09-19)</h3>
<p>You don&rsquo;t need to wrap the snmp sensor in a template sensor. As of home assistant 2021.09, the <code>snmp</code> platform does not allow you to set <code>device_class: energy</code>&hellip; however, you <em>can</em> set the <code>device_class</code> attribute on the snmp sensor through <code>customize.yaml</code>:</p>
<p>Make sure your configuration file loads the customization file:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">‚ùØ cat configuration.yaml <span class="p">|</span> grep customize
</span></span><span class="line"><span class="cl">  customize: !include customize.yaml
</span></span></code></pre></td></tr></table>
</div>
</div><p>If your snmp sensor was called <code>sensor.usp_energy</code>, then you would add an object called <code>sensor.ups_energy</code> like so:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">‚ùØ cat customize.yaml <span class="p">|</span> grep -a2 ups
</span></span><span class="line"><span class="cl">sensor.ups_energy:
</span></span><span class="line"><span class="cl">  state_class: total_increasing
</span></span><span class="line"><span class="cl">  device_class: energy
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="configure-home-assistant">Configure Home Assistant</h2>
<p>I have broken my <code>configuration.yaml</code> up to make things easier to manage. Almost all entity/device/template/sensor..etc configuration is done through files placed in the <code>devices/**/*</code> directory:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">‚ùØ cat configuration.yaml <span class="p">|</span> grep -E <span class="s1">&#39;devices/sensor|template/&#39;</span>
</span></span><span class="line"><span class="cl">sensor: !include_dir_merge_list devices/sensor/
</span></span><span class="line"><span class="cl">template: !include_dir_merge_list devices/template/
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="a-single-oid-for-power-consumption">A single OID for power consumption</h3>
<p>Thanks again to <a href="https://old.reddit.com/user/Laxarus" target="_blank" rel="noopener noreffer">Laxarus</a> for the <a href="https://old.reddit.com/r/homeassistant/comments/pi3pv2/how_to_use_an_apc_ups_as_an_energy_dashboard/hbpqzr6/" target="_blank" rel="noopener noreffer">tip</a> about the <code>upsHighPrecOutputEnergyUsage</code> OID!</p>
<p>First, create the &lsquo;raw&rsquo; sensor using the <code>snmp</code> platform:</p>
<p><code>devices/sensor/snmp.yaml</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl">- <span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">snmp</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;UPS Energy (raw)&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="m">192.168.1.1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># The current in tenths of amperes drawn by the load on the UPS.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Contained in Module(s): PowerNet-MIB</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">baseoid</span><span class="p">:</span><span class="w"> </span><span class="l">.1.3.6.1.4.1.318.1.1.1.4.3.6.0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Determines whether the sensor should start and keep working even if the SNMP host is unreachable or not responding.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># This allows the sensor to be initialized properly even if, for example, your printer is not on when you start Home Assistant.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">accept_errors</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># UPS reports in tens of kWh so we&#39;ll need to divide by 10 to get kWh; HA only accepts kWh or Wh for sensors</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#   that will &#39;work&#39; on the energy dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">unit_of_measurement</span><span class="p">:</span><span class="w"> </span><span class="l">kWh</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">value_template</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;{{ ((value | int) / 10) | float}}&#34;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Then, wrap the <code>snmp</code> sensor with the necessary properties:</p>
<p><code>devices/template/ups_energy.yaml</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl">- <span class="nt">sensor</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;UPS Energy&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Unique ID is required for mgmt through the web UI</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">unique_id</span><span class="p">:</span><span class="w"> </span><span class="l">tmpl-ups-energy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="l">mdi:lightning-bolt</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Required for Energy dashboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">state_class</span><span class="p">:</span><span class="w"> </span><span class="l">total_increasing</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">device_class</span><span class="p">:</span><span class="w"> </span><span class="l">energy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">unit_of_measurement</span><span class="p">:</span><span class="w"> </span><span class="l">kWh</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">state</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;{{ (states(&#39;sensor.ups_energy_raw&#39;) | float) }}&#34;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Restart Home Assistant and you should now be able to add <code>sensor.ups_energy</code> to the list of individual devices on your Energy Dashboard :D.</p>
<h3 id="current-and-voltage-independently">Current and Voltage independently</h3>
<p>After sorting through the <em>massive</em> MIB file that APC publishes; I only found ways to measure the voltage and current via SNMP. I assumed that APC meant for you to calculate the power use on your own from the voltage and current.</p>
<p>As it turns out, APC has a <code>upsHighPrecOutputEnergyUsage</code> field which reports: <code>The output energy usage of the UPS in hundredths of kWh.</code> If your APC device publishes a value on the OID <code>.1.3.6.1.4.1.318.1.1.1.4.3.6.0</code> then you can skip the configuration below; use the more concise configuration <a href="#a-single-oid-for-power-consumption" rel="">above</a>. If your devices <em><strong>does not</strong></em> publish the cumulative energy consumption, it can still be calculated manually.</p>
<p>The manual approach below is a lot like the concise approach above; uses two <code>snmp</code> sensors to collect the voltage and current from the UPS and then wrap everything in a LTS-compatible <code>template</code> sensor to get the data to show up on the energy dashboard.</p>
<p><code>devices/sensor/snmp.yaml</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># Unfortunately, there is no direct &#39;watt&#39; field. We need to calculate this on our own</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># P = IV so if we can get the current and voltage, we can figure out the power</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">snmp</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;UPS Output Current&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="m">192.168.1.1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># The current in tenths of amperes drawn by the load on the UPS.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Contained in Module(s): PowerNet-MIB</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">baseoid</span><span class="p">:</span><span class="w"> </span><span class="l">.1.3.6.1.4.1.318.1.1.1.4.3.4.0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Determines whether the sensor should start and keep working even if the SNMP host is unreachable or not responding.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># This allows the sensor to be initialized properly even if, for example, your printer is not on when you start Home Assistant.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">accept_errors</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># For reasons that I don&#39;t understand... HA does not like it when i specify &#39;device_class&#39; :/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#device_class: current</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">unit_of_measurement</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;A&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Because the number is in 10ths of amps, we need to shift the decimal by 1 place</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#   43 becomes 4.3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">value_template</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;{{((value | int) / 10) | float}}&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">snmp</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;UPS Output Voltage&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="m">192.168.1.1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#The output voltage of the UPS system in tenths of VAC.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Contained in Module(s): PowerNet-MIB</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">baseoid</span><span class="p">:</span><span class="w"> </span><span class="l">.1.3.6.1.4.1.318.1.1.1.4.3.1.0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Determines whether the sensor should start and keep working even if the SNMP host is unreachable or not responding.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># This allows the sensor to be initialized properly even if, for example, your printer is not on when you start Home Assistant.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">accept_errors</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">unit_of_measurement</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;V&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Because the number is in 10ths of volts, we need to shift the decimal by 1 place</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#   1211 becomes 121.1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">value_template</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;{{((value | int) / 10) | float}}&#34;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><code>devices/template/ups_energy.yaml</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># The docs around the long term stats support for a sensor are not super clear and seem to be a bit contradictory.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Both the power and current sensors are &#39;point in time&#39; sensors and DO NOT represent an &#39;always increasing&#39; value.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># The docs seem to imply that HA will do the integration for you if the sensor has `state_class` set to `measurement` or</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#   `total_increasing`. But elsewhere in the docs, you have this:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#         Home Assistant tracks the min, max and mean value during the statistics period.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#         The state_class property must be set to measurement, and the device_class must not be either of `energy`, `gas`, or `monetary`.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># In testing, I was only able to get sensors that had `total_increasing` and `energy` set to show up / work with the energy dashboard. It looks like a `measurement` sensor _could_ be used... but only if the `last_reset` property can be set to 0... and currently this can&#39;t be done via YAML.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># So we lie about the sensor and tell HA that it&#39;s a `total_increasing` sensor and we just hope that the value never drops more than 10% which appears to be the signal to HA that the meter has been reset :/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># https://developers.home-assistant.io/docs/core/entity/sensor/#long-term-statistics</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># https://www.home-assistant.io/integrations/sensor/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">sensor</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;UPS Power&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Unique ID is required for mgmt through the web UI</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">unique_id</span><span class="p">:</span><span class="w"> </span><span class="l">tmpl-UPS-power-use</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="l">mdi:lightning-bolt</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># This sensor records the instantaneous power load on the UPS... it is a measurement at that point in time</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">state_class</span><span class="p">:</span><span class="w"> </span><span class="l">measurement</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">device_class</span><span class="p">:</span><span class="w"> </span><span class="l">power</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">unit_of_measurement</span><span class="p">:</span><span class="w"> </span><span class="l">W</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">state</span><span class="p">:</span><span class="w"> </span><span class="p">&gt;</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">        {% set current = states(&#39;sensor.UPS_output_current&#39;) | float %}
</span></span></span><span class="line"><span class="cl"><span class="sd">        {% set voltage = states(&#39;sensor.UPS_output_voltage&#39;) | float %}
</span></span></span><span class="line"><span class="cl"><span class="sd">        {{ (current * voltage) | round (2) }}</span><span class="w">        
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">sensor</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;UPS Energy&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Unique ID is required for mgmt through the web UI</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">unique_id</span><span class="p">:</span><span class="w"> </span><span class="l">tmpl-UPS-energy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="l">mdi:lightning-bolt</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Lie to HA about the type of sensor so we get values in the dashboard.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">state_class</span><span class="p">:</span><span class="w"> </span><span class="l">total_increasing</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">device_class</span><span class="p">:</span><span class="w"> </span><span class="l">energy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Since we are pretending to integrate over time, we are in Wh now.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Good thing, too... because the energy dashboard WILL NOT use any sensor that does not report in kWh or Wh</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">unit_of_measurement</span><span class="p">:</span><span class="w"> </span><span class="l">Wh</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">state</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;{{ (states(&#39;sensor.UPS_power&#39;) | float) }}&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># or, for kWh</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c">#state: &#34;{{ (states(&#39;sensor.UPS_power&#39;) | float)/1000 }}&#34;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>Monitoring APC AP7900 switched PDU with Prometheus and Grafana</title><link>https://karlquinsland.com/monitoring-ap7900-switched-pdu-prometheus-grafana/</link><pubDate>Sun, 27 Dec 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/monitoring-ap7900-switched-pdu-prometheus-grafana/</guid><description><![CDATA[<p>The APC AP7900 is a 1U single phase PDU with 8 switchable outlets and a network interface. It&rsquo;s been EoL&rsquo;d and can be had for less than 20% of it&rsquo;s original price on <a href="https://www.ebay.com/sch/i.html?_nkw=AP7900" target="_blank" rel="noopener noreffer">eBay</a>. The network interface is so underpowered tha it can&rsquo;t <a href="http://origin-faq.pro-face.com/resources/sites/PROFACE/content/live/FAQS/300000/FA300635/en_US/APC%20AP7000%20Series%20End%20of%20Life%20Notice.pdf" target="_blank" rel="noopener noreffer">support any modern cryptographic ciphers</a>.</p>
<p>So with that, here&rsquo;s a revised copy of my notes from the process of getting the device reset, updated and monitored.</p>
<h2 id="the-hardware">The Hardware</h2>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Unfortunately, there&rsquo;s no &ldquo;reset everything to defaults&rdquo; button or button sequence on the PDU. The unit I purchased had been configured with a manual IP assignment so it wasn&rsquo;t as straightforward as using an unfolded paperclip to press the reboot button at boot and wait for a successful DHCP negotiation. This process has been <a href="https://dan.langille.org/2015/01/13/apc-pdu-ap7900-resetting-the-password/" target="_blank" rel="noopener noreffer">covered before</a>, so I&rsquo;ll omit it here. In short: connect to the local mgmt interface via the <a href="https://pinoutguide.com/UPS/apc_smart_cable_pinout.shtml" target="_blank" rel="noopener noreffer">serial port</a>, adjust the network configuration and other settings as needed.</p>
<p>The firmware can be updated via FTP easily enough. The processor on the network interface is <em>really</em> slow so allow for <em>several minutes</em> between the bin file upload and the flashing to commence/end. I had to repeat this three times for each of the partitions / subsystem OSs.</p>
<h2 id="the-metrics">The Metrics</h2>
<p>Again, because the network interface has an ancient/slow CPU, any method that extracts metrics from the device must be light weight&hellip; enter <a href="https://en.wikipedia.org/wiki/Simple_Network_Management_Protocol" target="_blank" rel="noopener noreffer">SNMP</a>.</p>
<p>SNMP is quite old and cumbersome but there&rsquo;s an <a href="https://github.com/prometheus/snmp_exporter" target="_blank" rel="noopener noreffer">exporter for prometheus</a> which, after some tedious configuration, can interface the complexity that is is legacy SNMP with prometheus.</p>
<h3 id="generating-a-config">Generating a config</h3>
<p>In short, SNMP identifies each setting/entity that can be monitored or set with a unique numerical ID. Each number is separated with a <code>.</code> and represents a specific edge/vertex on the graph of all settings that device supports.</p>
<p>So, a setting known as <code>rPDUIdentDeviceLinetoLineVoltage</code> may be &lsquo;read&rsquo; at the following address: <code>1.3.6.1.4.1.318.1.1.12.1.15.0</code>. So if you have a few hundred parameters to monitor, you&rsquo;ll have a few hundred nondescript numerical paths. Keeping track of them all is a royal pain in the ass, even with <a href="https://en.wikipedia.org/wiki/Management_information_base" target="_blank" rel="noopener noreffer">lookup tables</a>; known as &ldquo;MIB files&rdquo;.</p>
<p>Unfortunately, there&rsquo;s no way around it; a map between the numerical paths and the &lsquo;human friendly&rsquo; names must be built so the prometheus exporter knows what to expose and how to categorize it.</p>
<p>The exporter comes with <a href="https://github.com/prometheus/snmp_exporter/tree/master/generator" target="_blank" rel="noopener noreffer">generator</a> to make this process a bit easier, but the process of obtaining MIB files isn&rsquo;t quite so straightforward.
I hit a few snags and below is an updated <code>Dockerfile</code> that gave me a <em>working</em> generator tool:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Dockerfile" data-lang="Dockerfile"><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">FROM</span><span class="s"> golang:latest</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">##</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># The `mibs` target in the Makefile does not run to completion on OSX.</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># Somewhere, a `sed` command is run against some vendor&#39;s MIB file that&#39;s for hardware that I don&#39;t want to target.</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># I don&#39;t have the patience to resolve those issues and i&#39;d prefer that the _entire_ MIB parse and generate </span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#   process be 100% contained in the container image anyways.</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># There are a _variety_ of errors that cropped up when running `generator parse_errors`:</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># - level=warn ts=2020-12-27T21:40:42.988Z caller=main.go:120 msg=&#34;NetSNMP reported parse error(s)&#34; errors=16924</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># - Cannot find module (SNMPv2-SMI): At line 275 in mibs/apc-powernet-mib</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># - Did not find &#39;enterprises&#39; in module #-1 (mibs/apc-powernet-mib)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># - Did not find &#39;DisplayString&#39; in module #-1 (mibs/apc-powernet-mib)</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># - Unlinked OID in PowerNet-MIB: apc ::= { enterprises 318 }</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># - Undefined identifier: enterprises near line 281 of mibs/apc-powernet-mib</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># - Cannot adopt OID in PowerNet-MIB: atsInputEntry ::= { atsInputTable 1 }</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># -   &lt;and hundreds more `Cannot adopt OID in PowerNet-MIB:` messages</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># - Bad operator (INTEGER): At line 73 in /usr/share/snmp/mibs/ietf/SNMPv2-PDU</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># After some searching, it appears that MIBs can refer to other MIBs and some set of &#39;base&#39; files is not present.</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># Due to licensing, the Debian docker image that the generator is based on does NOT ship w/ them or the </span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#   `snmp-mibs-downloader` tool which is used to fetch the base MIB files. This is easy enough to fix...</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">##</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># First, update the repos we&#39;ll pull packaged from</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> <span class="nb">echo</span> <span class="s2">&#34;deb http://deb.debian.org/debian/ buster main contrib non-free&#34;</span> <span class="p">|</span> tee -a /etc/apt/sources.list <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="nb">echo</span> <span class="s2">&#34;deb http://deb.debian.org/debian/ buster-updates main contrib non-free&#34;</span> <span class="p">|</span> tee -a /etc/apt/sources.list <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="nb">echo</span> <span class="s2">&#34;deb http://security.debian.org/debian-security buster/updates main contrib non-free&#34;</span> <span class="p">|</span> tee -a /etc/apt/sources.list<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># Then we run the &#39;original&#39; set of commands, adding in the `snmp-mibs-downloader` package.</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># As part of the post-install hook, snmp-mibs-downloader will fetch the base MIBs that appear to be</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#   missing.</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">##</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> apt-get update <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    apt-get install -y libsnmp-dev p7zip-full snmp-mibs-downloader <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    go get github.com/prometheus/snmp_exporter/generator <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="nb">cd</span> /go/src/github.com/prometheus/snmp_exporter/generator <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    go get -v . <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    go install<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># To fix _this_ error:</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#   Bad operator (INTEGER): At line 73 in /usr/share/snmp/mibs/ietf/SNMPv2-PDU</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># we install a &#39;patched&#39; version.</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># src: https://serverfault.com/questions/936119/snmp-mibs-on-ubuntu-error-in-mibs</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">##</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> wget http://pastebin.com/raw.php?i<span class="o">=</span>p3QyuXzZ -O /usr/share/snmp/mibs/ietf/SNMPv2-PDU<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">##</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># This command is not needed for generation, but IS needed for manual checking / use of `snmptranslate` within the</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#   container. Add to the above RUN statement if needed.</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#       sed -i &#34;s/^\(mibs *:\).*/#\1/&#34; /etc/snmp/snmp.conf</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># It simply comments out the `mibs:` line in `/etc/snmp/snmp.conf`</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">##</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># The &#39;stock&#39; generator expects the output of `make mibs` to be mounted into /opt/mibs.</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># Since we are no longer relying on the `make` target, we must tell the generator binary</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#   to look in all of the &#39;system default&#39; locations *as well as* /opt/mibs</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">##</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">WORKDIR</span><span class="s"> &#34;/opt&#34;</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ENTRYPOINT</span> <span class="p">[</span><span class="s2">&#34;/go/bin/generator&#34;</span><span class="p">]</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># Rather than do something like this on the CLI every time the container is run</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#   `-e MIBDIRS=&#34;/usr/share/snmp/mibs:/usr/share/snmp/mibs/iana:/usr/share/snmp/mibs/ietf:/opt/mibs&#34;`</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#   we do it here...</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">##</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ENV</span> MIBDIRS /usr/share/snmp/mibs:/usr/share/snmp/mibs/iana:/usr/share/snmp/mibs/ietf:/opt/mibs<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">CMD</span> <span class="p">[</span><span class="s2">&#34;generate&#34;</span><span class="p">]</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>In short, ditch the <code>make mibs</code> step from <a href="https://github.com/prometheus/snmp_exporter/tree/master/generator#docker-users" target="_blank" rel="noopener noreffer">here</a> and move it inside the <code>docker build</code> step; fetch all the MIB files, patching those that need it. Tell the tool where to find them.</p>
<p>For my needs, I only care about the total amount of power being distributed through the PDU so, of the hundreds of different parameters that can be monitored, I&rsquo;m only interested in:</p>
<ul>
<li>Uptime</li>
<li>Input Voltage</li>
<li>Power in Watts and VoltAmps</li>
<li>Percentage of used/remaining capacity</li>
</ul>
<p>This makes for a simple generator config:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># See: https://github.com/prometheus/snmp_exporter/tree/master/generator</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">modules</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># APC/Schneider UPS Network Management Cards</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Note: older management cards only support SNMP v1 (AP9606 and</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># AP9607, possibly others). Older versions of the firmware may only</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># support v1 as well. If you only have newer cards you can switch to</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># version v2c or v3.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># The management cards have relatively slow processors so don&#39;t poll</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># very often and give a generous timeout to prevent spurious</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># errors. Alternatively you can eliminate the interface polling (OIDs</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># beginning with 1.3.6.1.2.1) to reduce the time taken for polling.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># MIB: https://download.schneider-electric.com/files?p_File_Name=powernet426.mib</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Guide: http://www.apc.com/salestools/ASTE-6Z5QEY/ASTE-6Z5QEY_R0_EN.pdf</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Download site: http://www.apc.com/us/en/tools/download/index.cfm</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">apcups</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Not 100% sure why, but APC firmware does not appear to properly authenticate with the</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">#   credentials that i&#39;ve set through the web UI. I&#39;ve disabled write/set via SNMP so </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">#   sticking w/ v2 (no auth) is fine.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="m">2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">walk</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Don&#39;t care about network stats on this guy...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># - interfaces</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Do care about uptime, tho</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">sysUpTime</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># For reasons that I don&#39;t understand, specifying the OID results in errors like this:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c">#   level=error caller=main.go:130 msg=&#34;Error generating config netsnmp&#34; err=&#34;cannot find oid &#39;.1.3.6.1.4.1.318.1.1.12.1.15.0&#39; to walk&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># But the path &#39;.1.3.6.1.4.1.318.1.1.12.1.15.0&#39; maps to rPDUIdentDeviceLinetoLineVoltage.0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># So specify that by name and the error goes away :/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">rPDUIdentDeviceLinetoLineVoltage</span><span class="w"> </span><span class="c"># .1.3.6.1.4.1.318.1.1.12.1.15.0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">rPDUIdentDevicePowerWatts       </span><span class="w"> </span><span class="c"># .1.3.6.1.4.1.318.1.1.12.1.16.0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">rPDUIdentDevicePowerVA          </span><span class="w"> </span><span class="c"># .1.3.6.1.4.1.318.1.1.12.1.18.0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">rPDULoadStatusTable             </span><span class="w"> </span><span class="c"># .1.3.6.1.4.1.318.1.1.12.2.3.1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># From `rPDULoadStatusTable`, I can get `rPDULoadStatusLoad` and `rPDULoadStatusLoadState`</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">#    which represent the percentage capacity as a percentage and a &#34;low, nominal, warn, critical&#34; flag.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">#</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Don&#39;t need to resort to the `lookup` mechanism as the PDU has only one bank and can just extract the values</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">#   by referring to them explicitly below. This would likely change w/ a 2U PDU</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Allows for adjustment to how various SNMP endpoints are parsed (as info about a device vs a moving metric)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># See: https://github.com/prometheus/snmp_exporter/tree/master/generator#enumasinfo-and-enumasstateset</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">overrides</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Should be a percentage of load</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">rPDULoadStatusLoad</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">gauge</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># In addition to a numerical load percentage, also handy to have the characterization _of_ that load, too</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># In this case, the load can be characterized one of 4 ways:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c">#   phaseLoadNormal (1),phaseLoadLow (2),phaseLoadNearOverload (3),phaseLoadOverload (4)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">rPDULoadStatusLoadState</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">EnumAsStateSet</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># There are a few &#39;constants&#39; that come from the table i don&#39;t need to track, so we drop them :)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">rPDULoadStatusBankNumber</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">ignore</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">EnumAsInfo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">rPDULoadStatusIndex</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">ignore</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">EnumAsInfo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">rPDULoadStatusPhaseNumber</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">ignore</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">EnumAsInfo</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>The resulting <code>snmp.yml</code> is quite brief:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># WARNING: This file was auto-generated using snmp_exporter generator, manual changes will be lost.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apcups</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">walk</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="m">1.3.6.1.4.1.318.1.1.12.2.3.1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">get</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="m">1.3.6.1.2.1.1.3.0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="m">1.3.6.1.4.1.318.1.1.12.1.15.0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="m">1.3.6.1.4.1.318.1.1.12.1.16.0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="m">1.3.6.1.4.1.318.1.1.12.1.18.0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">metrics</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">sysUpTime</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">oid</span><span class="p">:</span><span class="w"> </span><span class="m">1.3.6.1.2.1.1.3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">gauge</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">help</span><span class="p">:</span><span class="w"> </span><span class="l">The time (in hundredths of a second) since the network management portion of the system was last re-initialized. - 1.3.6.1.2.1.1.3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">rPDUIdentDeviceLinetoLineVoltage</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">oid</span><span class="p">:</span><span class="w"> </span><span class="m">1.3.6.1.4.1.318.1.1.12.1.15</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">gauge</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">help</span><span class="p">:</span><span class="w"> </span><span class="l">Getting/Setting this OID will return/set the Line to Line Voltage - 1.3.6.1.4.1.318.1.1.12.1.15</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">rPDUIdentDevicePowerWatts</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">oid</span><span class="p">:</span><span class="w"> </span><span class="m">1.3.6.1.4.1.318.1.1.12.1.16</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">gauge</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">help</span><span class="p">:</span><span class="w"> </span><span class="l">Getting this OID will return the Power in Watts. - 1.3.6.1.4.1.318.1.1.12.1.16</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">rPDUIdentDevicePowerVA</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">oid</span><span class="p">:</span><span class="w"> </span><span class="m">1.3.6.1.4.1.318.1.1.12.1.18</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">gauge</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">help</span><span class="p">:</span><span class="w"> </span><span class="l">Getting this OID will return the Power in VA. - 1.3.6.1.4.1.318.1.1.12.1.18</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">rPDULoadStatusLoad</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">oid</span><span class="p">:</span><span class="w"> </span><span class="m">1.3.6.1.4.1.318.1.1.12.2.3.1.1.2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">gauge</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">help</span><span class="p">:</span><span class="w"> </span><span class="l">Getting this OID will return the phase/bank load measured in tenths of Amps. - 1.3.6.1.4.1.318.1.1.12.2.3.1.1.2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">indexes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">labelname</span><span class="p">:</span><span class="w"> </span><span class="l">rPDULoadStatusIndex</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">EnumAsInfo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">rPDULoadStatusLoadState</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">oid</span><span class="p">:</span><span class="w"> </span><span class="m">1.3.6.1.4.1.318.1.1.12.2.3.1.1.3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">EnumAsStateSet</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">help</span><span class="p">:</span><span class="w"> </span><span class="l">Getting this OID will return the phase/bank load state - 1.3.6.1.4.1.318.1.1.12.2.3.1.1.3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">indexes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">labelname</span><span class="p">:</span><span class="w"> </span><span class="l">rPDULoadStatusIndex</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">EnumAsInfo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">enum_values</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">1</span><span class="p">:</span><span class="w"> </span><span class="l">phaseLoadNormal</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">2</span><span class="p">:</span><span class="w"> </span><span class="l">phaseLoadLow</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">3</span><span class="p">:</span><span class="w"> </span><span class="l">phaseLoadNearOverload</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">4</span><span class="p">:</span><span class="w"> </span><span class="l">phaseLoadOverload</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="m">2</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="the-dashboard">The Dashboard</h2>
<p>Once metrics are making their way into prometheus, it&rsquo;s only a bit of work to get a dashboard up and running.</p>
<p>For sanity checking I fired up a load; a crypto-miner. See if you can spot when&hellip; :).</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Simple dashboard in grafana
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>The <code>json</code> file for the dashboard is about 750 lines long, so rather than embed it, I&rsquo;ve <a href="#files" rel="">attached</a> it as a file; the sha1 hash of <code>dashboard.json</code> is <code>400edb0c4064068f12e17c2f1f0d6862d3b8d449</code>.</p>
<h3 id="estimating-costs">estimating costs</h3>
<p>The dashboard just multiplies the average Wattage by the average cost of a kWh and then scales that to fit a 24h window.</p>
<p>The rate I pay for electricity changes based on the hour in which the power is used; about 40% of the week, my power costs a few cents per kWh more. The cost shown in the image above is a rough approximation based on my average power rate of around 12.5 cents per kWh. This rate can be adjusted with the <code>avgkWH_Cost</code> variable, if needed.</p>
<h2 id="files">Files</h2>
<ul>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/monitoring-ap7900-switched-pdu-prometheus-grafana/images/ap7900.png">
                    
                </a>
                
                
            </figure>

        
    </li>
    
    <li>
        
            <a target="_blank" href="https://karlquinsland.com/monitoring-ap7900-switched-pdu-prometheus-grafana/files/dashboard.json">
                <i class="far fa-file-file-code"></i>
                files/dashboard.json:
                
                
                <br>
                <small>sha1(dashboard.json): 400edb0c4064068f12e17c2f1f0d6862d3b8d449</small>
                
            </a>
        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/monitoring-ap7900-switched-pdu-prometheus-grafana/images/grafana.png">
                    
                </a>
                
                <figcaption>
                    <small>Simple dashboard in grafana</small>
                </figcaption>
                
            </figure>

        
    </li>
    
</ul>

]]></description></item><item><title>Adding an airborne particulate mater sensor to WS3 Weather Station</title><link>https://karlquinsland.com/ws3-weather-station-pm25-sensor/</link><pubDate>Thu, 27 Aug 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/ws3-weather-station-pm25-sensor/</guid><description><![CDATA[<p>A while back, I <a href="https://github.com/kquinsland/ws3-to-esphome-bridge/" target="_blank" rel="noopener noreffer">posted a small bit of code</a> that could decode the data from the ubiquitous WS3 Weather Station and make it accessible to the amazing <a href="https://www.home-assistant.io/" target="_blank" rel="noopener noreffer">HomeAssistant</a> via the wonderful <a href="https://esphome.io/" target="_blank" rel="noopener noreffer">ESPHome</a> project. Since then, my weather station has been dutifully collecting data that&rsquo;s been invaluable for augmenting automation that deals with indoor climate.</p>
<p>As the numerous wild fires in California rage on, <a href="https://www.forbes.com/sites/ericmack/2020/08/21/wildfire-smoke-blankets-the-west-as-california-records-worlds-worst-air-quality/" target="_blank" rel="noopener noreffer">the air quality has gone from bad to dangerous</a>. Knowing that outside was warmer, but less humid, was no longer enough to make a smart decision about weather or not to open the windows for some cost-effective cooling. I now need HomeAssistant to be aware of how clean the outside air was before making the decision to pipe in outdoor air.</p>
<p>This post covers two things:</p>
<ul>
<li>A small update to the existing WS3 -&gt; ESPHome -&gt; HomeAssistant bridge code to take advantage of the WS3s&rsquo; support for the ubiquitous <code>PMS5003T</code> sensor.</li>
<li>A simple 3d-printable enclosure for deploying the particulate matter sensor outdoors</li>
</ul>
<p>When deployed, it looks like this:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Excuse the awkward camera angle; sensor is deployed in an awkward to photograph location.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>Please ignore the awkward camera angle as the sensor is deployed in a location where there&rsquo;s not quite enough room for proper camera placement.</p>
<p>And results in graphs that look like this:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Smoke particles are between .4Œºm to .7Œºm in size... which explains the elevated red line relative to other particle sizes.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>A simplified copy of this post appears on <a href="https://www.thingiverse.com/thing:4581351" target="_blank" rel="noopener noreffer">thingiverse</a> and <a href="https://www.prusaprinters.org/prints/39560-outdoor-enclosure-for-pms5003-particulate-matter-s" target="_blank" rel="noopener noreffer">prusaprinters</a>.</p>
<h2 id="the-enclosure">The enclosure</h2>
<p>As of writing, there&rsquo;s <a href="https://www.thingiverse.com/thing:4044492" target="_blank" rel="noopener noreffer">one existing enclosure</a> for the sensor on thingiverse. Unfortunately, the enclosure does not appear to have any design features for mounting to a pole nor does it have any bug-proofing design elements. I took this opportunity to design my own that could be easily mounted, features a slanted &lsquo;roof&rsquo; to prevent standing moisture ingress and could use standard size tobacco pipe filters to keep all but the tiniest of insects/particles out.</p>
<p>The sensor uses a small fan to draw ambient air past an infrared laser. As airborne particles cross the laser beam, they reflect a certain amount of light which can be correlated with the size of the particle. This data can then be turned into fairly accurate counts of how many particles of a given size are in the sampled air. The enclosure is a basic box with two circular air channels pointed downwards to prevent moisture ingress. The intake and exhaust ports are at staggered heights and pointed in opposite directions and to minimize the chance of recirculating the same air.</p>
<p>The lower port is the intake which connects to a few small holes on the front of the sensor and the exhaust port is the raised port which connects directly to the exhaust fan. If you could remove the first few mm from the front, it would look something like this:</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>From the side, you can see the two air channels and the few mm of room in the back for wiring. The sensor sits on a &lsquo;pedestal&rsquo; to keep it elevated away from any moisture that may collect on the bottom of the enclosure.</p>
<p>The base plate/pedestal are secured to the &lsquo;body&rsquo; with two M3 screws. I used <code>10mm</code> as that&rsquo;s what I had on hand, but screws between 6-12mm should work as well. The holes are sized for a M3, but any similar sized screw will work. Use a lighter or similar to heat the screw as you drive it into the plastic to create your own threads if using a larger/longer screw.</p>
<p>Besides the &lsquo;pedestal&rsquo; there are a few contact surfaces that hold on to the sensor with a friction fit. The &lsquo;ceiling&rsquo; is a few mm thick and shouldn&rsquo;t permit much moisture ingress but an optional slanted roof component can be printed as an extra precaution.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Upper and lower chambers for exhaust and intake.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>While designing the enclosure, I used this <a href="https://grabcad.com/library/pms5003-2" target="_blank" rel="noopener noreffer"><code>PMS5003</code> model</a> from Leclercq Gregory. &#x1f64f;</p>
<h3 id="printing">Printing</h3>
<p>This is a functional part with only three small surfaces that require reasonably tight precision to properly hold onto the sensor. The <code>SPEED</code> setting with a <code>.2mm</code> layer height and a reasonable 20% infill gave me part that works and feels water tight. The walls and ceiling need to keep water out so dipping below 15% infill or otherwise using settings that wont give solid layer adhesion is not advised. I printed using ABS for durability, but PLA will probably work if you can deploy into a shaded environment.</p>
<p>The shroud and the base are not optional, the triangle shaped block is intended to turn the flat roof of the shroud into a slanted roof so water can&rsquo;t collect. It is optional but shown below.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        No raft/support when printed in this orientation.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h2 id="assemble">Assemble</h2>
<p>Briefly:</p>
<ul>
<li>collect materials</li>
<li>press-fit the PM2.5 sensor into the enclosure</li>
<li>make a wire that can interface the PM2.5 sensor to the WS3 board via RJ11</li>
<li>seal everything up</li>
<li>glue on mesh screens and angled roof</li>
<li>plug into WS3</li>
<li>flash ESPHome onto</li>
</ul>
<h3 id="bill-of-materials">Bill of Materials</h3>
<p>More or less everything that is needed for assembly is pictured below.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        More or less everything needed to assemble.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>Components:</p>
<ul>
<li>
<p><a href="https://www.aliexpress.com/item/32921725022.html" target="_blank" rel="noopener noreffer">WS3 Weather Station</a> - Essential / Foundational</p>
</li>
<li>
<p><a href="https://rover.ebay.com/rover/1/711-53200-19255-0/1?mpre=https%3A%2F%2Fwww.ebay.com%2Fitm%2FDigital-Universal-Particle-Concentration-Laser-Sensor-PMS5003-PM1-0-PM2-5-PM10%2F254616699639&amp;campid=5338734064&amp;toolid=10001&amp;customid=" target="_blank" rel="noopener noreffer">ST5003T PM2.5 Sensor</a> - Essential / Foundational</p>
</li>
<li>
<p><a href="https://rover.ebay.com/rover/1/711-53200-19255-0/1?mpre=https%3A%2F%2Fwww.ebay.com%2Fitm%2FTTGO-Wemos-MINI-D1-ESP32-WiFi-Bluetooth-Wemos-D1-Mini-ESP8266-ESP-32-Module%2F183413480551&amp;campid=5338734064&amp;toolid=10001&amp;customid=" target="_blank" rel="noopener noreffer">ESP32 Device</a> - A link to the ESP32 based device that I use but any ESP platform with a spare GPIO that can be used as a UART will work.</p>
</li>
<li>
<p><a href="https://rover.ebay.com/rover/1/711-53200-19255-0/1?mpre=https%3A%2F%2Fwww.ebay.com%2Fitm%2F25-Stainless-Steel-Smoking-Pipe-Screens-3-4-19mm-Tobacco-HOOKAH-FILTER-Heavy%2F183969079809&amp;campid=5338734064&amp;toolid=10001&amp;customid=" target="_blank" rel="noopener noreffer">3/4 inch tobacco pipe screens</a> - For bug/critter proofing the enclosure. Strongly suggested for outdoor deployments.</p>
</li>
<li>
<p><a href="https://www.mcmaster.com/91292A113/" target="_blank" rel="noopener noreffer">2x M3 x 10mm screws</a> - Optional. The base can be glued to the shroud or any similar screw will work</p>
</li>
</ul>
<p><strong>Note</strong>: Where possible, I&rsquo;ve used referral links. The links don&rsquo;t raise the price of any item, they simply let the retailer know that I sent you and, in return, I get a small cut of your purchase. If you&rsquo;re not comfortable with that, you can use a URL unwinding service to get the &lsquo;raw&rsquo; product link and drop the attribution/commission part.</p>
<p>General bits:</p>
<ul>
<li>Superglue</li>
<li>Waterproofing caulk/sealant</li>
<li>Drill/Screwdriver</li>
<li>Driver bit for the screws</li>
</ul>
<p>The stepped drill bit in the above picture is not a requirement if you assemble things in the correct oder. The cable egress hole is sized for a &rsquo;typical&rsquo; 3 pair <a href="https://en.wikipedia.org/wiki/Registered_jack#RJ11,_RJ14,_RJ25_wiring" target="_blank" rel="noopener noreffer">RJ11 cable</a> plus a tiny bit of wiggle room. I needed a working cable to test the code while the parts were printing so the hole in the printed base needed to be enlarged slightly to fit the head of the cable.</p>
<h3 id="wiring">Wiring</h3>
<p>There&rsquo;s no ready-made cable out there that&rsquo;ll join the two devices so one must be made. Fortunately, there&rsquo;s only 6 wires to deal with&hellip; 4 of them are distinct.</p>
<p>Sacrifice the cable that comes with the PM2.5 sensor and the RJ11 cable by cutting them in half and solder the correct wires together. The <em>color</em> of the wires that come in both the RJ11 cable and the PM2.5 cable are likely going to differ from the ones I used so I&rsquo;ve left those details out and provided a table showing which pins are to be joined together:</p>
<table>
  <thead>
      <tr>
          <th>Pin #</th>
          <th>PM2.5 Sensor Pin</th>
          <th>WS3 Pin</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>1</td>
          <td>VCC</td>
          <td>5V</td>
      </tr>
      <tr>
          <td>2</td>
          <td>GND</td>
          <td>GND</td>
      </tr>
      <tr>
          <td>3</td>
          <td>SET</td>
          <td>ENABLE</td>
      </tr>
      <tr>
          <td>4</td>
          <td>RX</td>
          <td>RX</td>
      </tr>
      <tr>
          <td>5</td>
          <td>TX</td>
          <td>GND</td>
      </tr>
      <tr>
          <td>6</td>
          <td>RESET</td>
          <td>5V</td>
      </tr>
      <tr>
          <td>7</td>
          <td>NC</td>
          <td></td>
      </tr>
      <tr>
          <td>8</td>
          <td>NC</td>
          <td></td>
      </tr>
  </tbody>
</table>
<p>For reference, Pin 1 on both the WS3 and PM2.5 Sensor:</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>With the wiring done, the sensor just needs to be stuffed into the enclosure. Don&rsquo;t forget to thread the RJ11 cable through the hole in the base plate <em>BEFORE</em> soldering it to the cable for the PM2.5 sensor&hellip; otherwise you&rsquo;ll need that stepped drill bit! üôÉ</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Sensor has been press-fit into the enclosure and wire fed through the base plate.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>To finish, secure the base with screws and a bit of water-proofing caulk for good measure:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        I suggest waiting until the end to glue on the optional roof and waiting until just before that to glue on the optional mesh screens.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h2 id="the-code">The code</h2>
<p>Setting up and using ESPHome is outside the scope of this post but there are several <a href="https://esphome.io/guides/getting_started_hassio.html" target="_blank" rel="noopener noreffer">good guides</a> out there. Once you have that set up, <a href="https://esphome.io/custom/custom_component.html" target="_blank" rel="noopener noreffer">include</a> the <code>ws3.h</code> file and set up your custom sensor as shown below. A working example and more detail is over on the
<a href="https://github.com/kquinsland/ws3-to-esphome-bridge/" target="_blank" rel="noopener noreffer">github repo</a>.</p>
<p>It&rsquo;ll look like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">uart</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">uart_bus</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># At this time, ESP does not Transmit anything to the WS3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">tx_pin</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO16</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">rx_pin</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO17</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">baud_rate</span><span class="p">:</span><span class="w"> </span><span class="m">2400</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">sensor</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">custom</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      auto ws3 = new WS3(id(uart_bus));
</span></span></span><span class="line"><span class="cl"><span class="sd">      App.register_component(ws3);
</span></span></span><span class="line"><span class="cl"><span class="sd">      return {
</span></span></span><span class="line"><span class="cl"><span class="sd">        ws3-&gt;temperature_sensor, 
</span></span></span><span class="line"><span class="cl"><span class="sd">        ws3-&gt;pressure_sensor, 
</span></span></span><span class="line"><span class="cl"><span class="sd">        ws3-&gt;humidity_sensor, 
</span></span></span><span class="line"><span class="cl"><span class="sd">        ws3-&gt;wind_speed_current_sensor,
</span></span></span><span class="line"><span class="cl"><span class="sd">        ws3-&gt;wind_speed_peak_5m_sensor,
</span></span></span><span class="line"><span class="cl"><span class="sd">        ws3-&gt;wind_direction_sensor,
</span></span></span><span class="line"><span class="cl"><span class="sd">        ws3-&gt;rain_fall_1h_sensor, 
</span></span></span><span class="line"><span class="cl"><span class="sd">        ws3-&gt;rain_fall_24h_sensor,
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">        ws3-&gt;particles_03um,
</span></span></span><span class="line"><span class="cl"><span class="sd">        ws3-&gt;particles_05um,
</span></span></span><span class="line"><span class="cl"><span class="sd">        ws3-&gt;particles_10um,
</span></span></span><span class="line"><span class="cl"><span class="sd">        ws3-&gt;particles_25um,
</span></span></span><span class="line"><span class="cl"><span class="sd">        ws3-&gt;particles_50um,
</span></span></span><span class="line"><span class="cl"><span class="sd">        ws3-&gt;particles_100um,
</span></span></span><span class="line"><span class="cl"><span class="sd">      };</span><span class="w">      
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>With that, check the logs from your instance of ESPHome and you should see something like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[D][ws3:157]: pkt_read_ok!
</span></span><span class="line"><span class="cl">[D][WS3:410]: VALID! Packet: [c000s000g000t093r000p000h35b09880,050,080,088,502,056,065,*18
</span></span><span class="line"><span class="cl">], Checksum: [18] chksum: [18]
</span></span><span class="line"><span class="cl">[E][WS3:342]: Validating: [c000s000g000t093r000p000h35b09880,050,080,088,502,056,065]
</span></span></code></pre></td></tr></table>
</div>
</div><p>indicating that the WS3 has detected the PM2.5 sensor and is reporting it&rsquo;s readings in addition to the temperature/wind data. Then just check your HomeAssistant install for the data.</p>
<h2 id="files">Files</h2>
<p>For archive / posterity, all source files are included here. All files are licensed as <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="noopener noreffer">Creative Commons Attribution-NonCommercial-ShareAlike</a> (CC BY-NC-SA).</p>
<ul>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/ws3-weather-station-pm25-sensor/images/02.assemble.jpg">
                    
                </a>
                
                <figcaption>
                    <small>Sensor has been press-fit into the enclosure and wire fed through the base plate.</small>
                </figcaption>
                
            </figure>

        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/ws3-weather-station-pm25-sensor/images/03.glue.jpg">
                    
                </a>
                
                <figcaption>
                    <small>I suggest waiting until the end to glue on the optional roof and waiting until just before that to glue on the optional mesh screens.</small>
                </figcaption>
                
            </figure>

        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/ws3-weather-station-pm25-sensor/images/example_dashboard.jpg">
                    
                </a>
                
                <figcaption>
                    <small>Smoke particles are between .4Œºm to .7Œºm in size... which explains the elevated red line relative to other particle sizes.</small>
                </figcaption>
                
            </figure>

        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/ws3-weather-station-pm25-sensor/images/04.installed.jpg">
                    
                </a>
                
                <figcaption>
                    <small>Excuse the awkward camera angle; sensor is deployed in an awkward to photograph location.</small>
                </figcaption>
                
            </figure>

        
    </li>
    
    <li>
        
            <a target="_blank" href="https://karlquinsland.com/ws3-weather-station-pm25-sensor/models/BASE.step">
                <i class="far fa-file-code"></i>
                models/BASE.step:
                
                <small style="font-family:'Lucida Console', monospace">step</small> <small>file</small>
                
                
            </a>
        
    </li>
    
    <li>
        
            <a target="_blank" href="https://karlquinsland.com/ws3-weather-station-pm25-sensor/models/BODY.step">
                <i class="far fa-file-code"></i>
                models/BODY.step:
                
                <small style="font-family:'Lucida Console', monospace">step</small> <small>file</small>
                
                
            </a>
        
    </li>
    
    <li>
        
            <a target="_blank" href="https://karlquinsland.com/ws3-weather-station-pm25-sensor/models/LID.step">
                <i class="far fa-file-code"></i>
                models/LID.step:
                
                <small style="font-family:'Lucida Console', monospace">step</small> <small>file</small>
                
                
            </a>
        
    </li>
    
    <li>
        
            <a target="_blank" href="https://karlquinsland.com/ws3-weather-station-pm25-sensor/models/base.stl">
                <i class="far fa-file-code"></i>
                models/base.stl:
                
                <small style="font-family:'Lucida Console', monospace">stl</small> <small>file</small>
                
                
            </a>
        
    </li>
    
    <li>
        
            <a target="_blank" href="https://karlquinsland.com/ws3-weather-station-pm25-sensor/models/body.stl">
                <i class="far fa-file-code"></i>
                models/body.stl:
                
                <small style="font-family:'Lucida Console', monospace">stl</small> <small>file</small>
                
                
            </a>
        
    </li>
    
    <li>
        
            <a target="_blank" href="https://karlquinsland.com/ws3-weather-station-pm25-sensor/models/combined.3mf">
                <i class="far fa-file-archive"></i>
                models/combined.3mf:
                
                <small style="font-family:'Lucida Console', monospace">3mf</small> <small>file</small>
                
                
            </a>
        
    </li>
    
    <li>
        
            <a target="_blank" href="https://karlquinsland.com/ws3-weather-station-pm25-sensor/models/lid.stl">
                <i class="far fa-file-code"></i>
                models/lid.stl:
                
                <small style="font-family:'Lucida Console', monospace">stl</small> <small>file</small>
                
                
            </a>
        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/ws3-weather-station-pm25-sensor/images/pin_out/PM2.5_Pins.jpg">
                    
                </a>
                
                
            </figure>

        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/ws3-weather-station-pm25-sensor/images/pin_out/WS3_Pins.jpg">
                    
                </a>
                
                
            </figure>

        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/ws3-weather-station-pm25-sensor/images/01.collect.jpg">
                    
                </a>
                
                <figcaption>
                    <small>More or less everything needed to assemble.</small>
                </figcaption>
                
            </figure>

        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/ws3-weather-station-pm25-sensor/images/suggested_print_orientation.jpg">
                    
                </a>
                
                <figcaption>
                    <small>No raft/support when printed in this orientation.</small>
                </figcaption>
                
            </figure>

        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/ws3-weather-station-pm25-sensor/images/f360_air_channels.jpg">
                    
                </a>
                
                
            </figure>

        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/ws3-weather-station-pm25-sensor/images/f360_side_profile.jpg">
                    
                </a>
                
                <figcaption>
                    <small>Upper and lower chambers for exhaust and intake.</small>
                </figcaption>
                
            </figure>

        
    </li>
    
</ul>

]]></description></item></channel></rss>