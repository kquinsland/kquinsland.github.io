<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>IMadeAThing - Category - karl</title><link>https://karlquinsland.com/categories/imadeathing/</link><description>IMadeAThing - Category - karl</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 14 Sep 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://karlquinsland.com/categories/imadeathing/" rel="self" type="application/rss+xml"/><item><title>Watch Band RFID fob</title><link>https://karlquinsland.com/watch-band-rfid/</link><pubDate>Sat, 14 Sep 2024 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/watch-band-rfid/</guid><description><![CDATA[<h1 id="watch-band-rfid-fob">Watch Band RFID fob</h1>
<p>This is a quick project to create a wearable RFID fob that can be easily attached to a watch band.
The idea is to have a small RFID tag that can be used for various purposes, such as access control or identification that is - more or less - as convenient as a surgically implanted tag, but without the need for embedding anything in your body.</p>
<p>I was inspired by both the <a href="https://en.wikipedia.org/wiki/Microchip_implant_%28human%29" target="_blank" rel="noopener noreffer">bio-hacking community</a> and the medical-alert &lsquo;accessory bands&rsquo; for Android Wear devices.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The inspiration for this project
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>Don&rsquo;t mind the few small print imperfections; <em>this was a prototype</em> printed with a .6mm nozzle.
A final version of this would be printed with a smaller nozzle, a finer layer height and probably a different color/material.</p>
<p>The point is to have a small, unobtrusive design that can be easily attached to a watch band.
Because of the wide variety of watch bands available, I have <a href="#files" rel="">included</a> the raw Fusion360 file for you to modify as needed.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Installed on a watch band.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        A single watch band pin is used to secure the plastic part to the band.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Hopefully this gives you an idea of how the parts come together.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h2 id="bill-of-materials">Bill of Materials</h2>
<p>The core component of this project is the <a href="#sourcing-the-rfid-tag" rel="">RFID tag</a> which needs to be small and reprogrammable.</p>
<p>Other than that, you will need to design or print your own enclosure and secure it to the watch band with a standard pin.
Sourcing these is quite easy; a local watch shop or jeweler should have them available or you can buy a watch-band kit online.
A kit is advisable if you need to prototype multiple designs / play with different pin diameters/lengths.</p>
<p>Printing the tag enclosure is straightforward but due to it&rsquo;s small size, the more precise your printer is, the better the results will be.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Suggested print orientation for best results
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h2 id="sourcing-the-rfid-tag">Sourcing the RFID tag</h2>
<p>This application is severely space constrained, so you need the smallest possible tag that is also reprogrammable.
If you search for tags meant to be embedded under the skin of animals, you will find many options&hellip; but they are not reprogrammable.</p>
<p>There are also tags meant for <a href="https://dangerousthings.com/category/implants/x-series/" target="_blank" rel="noopener noreffer">humans</a> but they&rsquo;re not cheap!
I did eventually find a suitable tag on eBay:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        eBay listing for the RFID tag
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>eBay being what it is, there&rsquo;s no guarantee that <a href="https://www.ebay.com/itm/254607033331" target="_blank" rel="noopener noreffer">the same listing I purchased from</a> will still be active in the future so I am including a copy of the listing description that you can use for reference when searching for a suitable tag:</p>
<blockquote>
<p>New 2pcs T5577 125KHz E/H Rewrite Writable R/W Proximity Bio Glass Tag 2.12x12mm</p>
</blockquote>
<p>A portion of the listing text:</p>
<blockquote>
<p>Specifications:</p>
<p>This is the 125KHZ T5577 Glass RFID Writeable tags Proximity Induction For animal identification or other 125KHz RFID Access controller.</p>
<p>FEATURES:</p>
<ul>
<li>
<p>This tag very small so difficult to read or write,please use the better device or sensor strong device.</p>
</li>
<li>
<p>Operation frequency: 125Khz</p>
</li>
<li>
<p>Chip:T5577,Rewrite Writable EM4100 &amp; HID Chip(This Chip better and factory cost high than EM4305)</p>
</li>
<li>
<p>Compatible with 125KHz EM4100 or 125KHz HID reader to gain access controller and the animal identification.</p>
</li>
<li>
<p>Detecting distance: 0-5cm(if the Reader sensor Different so the Read Distance will Different ).</p>
</li>
<li>
<p>Glass Housing Material:Bio-glass.</p>
</li>
<li>
<p>Size:2.12 x12mm</p>
</li>
<li>
<p>Page included: 2pcs 125KHz T5577 Writeable Glass RFID TAGS</p>
</li>
</ul>
</blockquote>
<h2 id="files">Files</h2>
<ul>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/watch-band-rfid/images/eBay-listing.png">
                    
                </a>
                
                <figcaption>
                    <small>eBay listing for the RFID tag</small>
                </figcaption>
                
            </figure>

        
    </li>
    
    <li>
        
            <a target="_blank" href="https://karlquinsland.com/watch-band-rfid/files/fusion-export.step">
                <i class="far fa-file-"></i>
                files/fusion-export.step:
                
                
            </a>
        
    </li>
    
    <li>
        
            <a target="_blank" href="https://karlquinsland.com/watch-band-rfid/files/main.f3z">
                <i class="far fa-file-"></i>
                files/main.f3z:
                
                
            </a>
        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/watch-band-rfid/images/official-medical-band-render.webp">
                    
                </a>
                
                <figcaption>
                    <small>The inspiration for this project</small>
                </figcaption>
                
            </figure>

        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/watch-band-rfid/images/suggested-print-orientation.png">
                    
                </a>
                
                <figcaption>
                    <small>Suggested print orientation for best results</small>
                </figcaption>
                
            </figure>

        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/watch-band-rfid/images/prototype01.jpg">
                    
                </a>
                
                <figcaption>
                    <small>Hopefully this gives you an idea of how the parts come together.</small>
                </figcaption>
                
            </figure>

        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/watch-band-rfid/images/prototype02.jpg">
                    
                </a>
                
                <figcaption>
                    <small>A single watch band pin is used to secure the plastic part to the band.</small>
                </figcaption>
                
            </figure>

        
    </li>
    
    <li>
        

            
            
        
            <figure>
                <a target="_blank" href="https://karlquinsland.com/watch-band-rfid/images/prototype03.jpg">
                    
                </a>
                
                <figcaption>
                    <small>Installed on a watch band.</small>
                </figcaption>
                
            </figure>

        
    </li>
    
</ul>

]]></description></item><item><title>Integrating ESPHome with a cheap Geiger Counter</title><link>https://karlquinsland.com/esphome-geiger-counter/</link><pubDate>Wed, 09 Nov 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/esphome-geiger-counter/</guid><description><![CDATA[<p>Yes, there have <a href="https://community.home-assistant.io/t/geiger-counter-with-ha-integration/107660/12" target="_blank" rel="noopener noreffer">been</a> <em>loads</em> of <a href="https://www.rhelectronics.store/radiation-detector-geiger-counter-diy-kit-second-edition" target="_blank" rel="noopener noreffer">people</a> doing <a href="https://www.connectix.nl/connecting-a-geiger-counter-to-home-assistant/" target="_blank" rel="noopener noreffer">similar</a> <a href="https://old.reddit.com/r/homeassistant/comments/l92fbf/doomsday_sensor_v10/" target="_blank" rel="noopener noreffer">things</a>! ESPHome already has a tutorial <a href="https://esphome.io/cookbook/geiger-counter.html" target="_blank" rel="noopener noreffer">covering <em>exactly</em> this</a>!</p>
<p>I&rsquo;m writing this up because the approach that I ended up taking was <em>not</em> the intended/planned approach.</p>
<!-- markdownlint-disable-file MD002 -->
<h2 id="the-geiger-counter">The Geiger Counter</h2>
<p>I originally pulled the trigger on this particular version because it had a built in screen attached to a micro controller.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>I naïvely thought that I&rsquo;d be able to get a simple UART from the 4 pins next to the microcontroller or maybe even get data directly off of the micro USB port.</p>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>Info<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">As of 2022.11, the geiger counter pictured above can be found <a href="https://www.aliexpress.us/item/3256804497523971.html" target="_blank" rel="noopener noreffer">here</a>.
The listing title is <code>DIY Geiger Counter Kit Assembled Module Nuclear Radiation Detector X γ β rays Iodine 131 Detecting OLED Display Radiation Tester</code></div>
        </div>
    </div>
<h3 id="the-usb--uart-port">The USB / UART port</h3>
<p>After receiving and unpacking it, I probed around and determined that the micro USB port did have the data lines going to the <code>U5</code> micro and that the 4 pins <em>also</em> went to the micro.</p>
<p>Unfortunately both seemed dead; the pins didn&rsquo;t have any signal on them and the software on the micro implementing the USB stack didn&rsquo;t seem to be fully implemented.
Using <code>dmesg</code> I could see <em>a device</em> being plugged in but the device failed to respond to any probes.</p>
<p>So much for the easy way out.</p>
<h2 id="plan-b">Plan B</h2>
<p>With the identifying markings sanded off of the chip, attempting to dump / reverse / re-program the firmware wasn&rsquo;t the most appealing option.</p>
<p>After some quick testing, I determined that the micro controller toggles the beeper and the LED via <em>distinct</em> GPIO pins and that the LED is pulsed to 3.3v for 5ms.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>For reference, here are the points that I chose to inject power and observe the LED.
I am injecting 5V into the geiger counter from the ESP module so I can program and power the entire assembly with a single cable.
If you choose to use separate power supplies for both, make sure that the ESP and geiger counter share a ground!</p>
<p>Removing <code>R1</code> is optional; keep it if you want the beeper to click as well.
I have some thoughts on being able to toggle this behavior <a href="#beeper" rel="">below</a></p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        I left R1 in place so it&#39;s easier to reverse the mod.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>And with a bit of hot glue, we&rsquo;re done with the hardware assembly.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        There&#39;s no good place for the ESP module so I chose to strategically obfuscate the portion of the screen that does not display the actual measurements.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>Warning<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">There&rsquo;s no <em>good</em> place to put the ESP module such that the screen is unobstructed and such that the ESP is not near the geiger tube.
As the tube is charged up to ~400v, it putting the ESP module directly over it seems like a potential problem.</div>
        </div>
    </div>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        I wouldn&#39;t put the ESP right here because a) the tube is partially obstructed and b) the tube is charged to a few hundred volts and putting any delicate electronics that close seems like a bad idea.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h2 id="esphome">ESPHome</h2>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Ignore that 12 hour gap in the data... I forgot to plug the assembly back in after doing some tests.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>The firmware is pretty simple.
The configuration below is an abridged version of what I am currently using.
I&rsquo;ve stripped out unnecessary things but left some comments in to serve as basic documentation.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># To convert from particles per unit time, there&#39;s supposed to be some conversion factor.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># This conversion factor depends on the tube and the cheap Ali Express tubes all seem to be J321 style.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Not a ton of documentation out there, but I did find one source that says J321 is basically J305.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># See: https://www.radmon.org/index.php/forum/geiger-muller-tubes/1245-information-on-j321-gm-tube</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># But even then, the conversion factor is derived from some known isotope. They expose the tube to some</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#   known isotope and then measure the counts. Because they also know the proper dosing info for the</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#   isotope, the tube then gets a conversion factor.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Additionally, the micro controller sits between the raw data from the tube and the LED that I am tapping into.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Each time there is _any_ radiation detected, the micro controller pluses the LED for 5ms. In theory, multiple</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#   radioactive particles could strike the tube in the 5ms window and the microcontroller would know ... but I wouldn&#39;t.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># At 5ms per pulse, the maximum number of particles per second that I can detect is 200. Even if the TRUE count</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#   is 3x that... 200 is still way more than enough to know that _something_ isn&#39;t right and that&#39;s really what I&#39;m after here.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># So for now, just stick with basic counts per min w/ the understanding that the signal that I&#39;m observing might not</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#   be with the full resolution that the tube is capable of.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">esphome</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Note: this will be the hostname that device request during the DHCP dance...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;geiger-counter&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">esp32</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">board</span><span class="p">:</span><span class="w"> </span><span class="l">mhetesp32minikit</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Enable logging</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">logger</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">level</span><span class="p">:</span><span class="w"> </span><span class="l">INFO</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">sensor</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># See: https://esphome.io/components/sensor/pulse_counter.html</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Particle Count</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">pulse_counter</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">sense_p_cnt</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Does not really matter which pin for ESP32</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO32</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">use_pcnt</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Measured with oScope: pulse is 5ms _exactly_.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Docs say to use falling edge detection with the hardware pulse counter</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">count_mode</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">rising_edge</span><span class="p">:</span><span class="w"> </span><span class="l">DISABLE</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">falling_edge</span><span class="p">:</span><span class="w"> </span><span class="l">INCREMENT</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Docs ALSO say that you can&#39;t configure a filter of more than 13us when using the</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">#   internal pulse counter. 5ms is ... 5000 us and that&#39;s more than 13us so I guess we&#39;ll</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">#   stick with the defaults?</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">internal_filter</span><span class="p">:</span><span class="w"> </span><span class="l">13us</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># As best I can tell, pulses trigger an ISR which just increases some counter somewhere.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Every update_interval, esphome checks the value in the storage and computes the count</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">#   per min.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">update_interval</span><span class="p">:</span><span class="w"> </span><span class="l">60s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">unit_of_measurement</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;cpm&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">state_class</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;measurement&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:radioactive-circle-outline&#34;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="beeper">Beeper</h3>
<p>I can&rsquo;t confirm it, but I suspect that the beeper is driven independently of the LED because the original designer wanted to implement a software toggle for the sound.</p>
<p>I don&rsquo;t need the sound functionality but I also don&rsquo;t want to <em>permanently</em> disable it. It would be nice to be able to toggle it on/off as needed.
There are a few ways to get similar functionality:</p>
<ul>
<li>
<p>Hack the hardware&hellip; more. The TO92 driving the beeper (via <code>R1</code>) is a <code>SS9014 NPN</code>. I could add <em>another</em> transistor in series with <code>R1</code> and then control the current flow via another GPIO on the ESP.</p>
</li>
<li>
<p>Inspired by this <a href="https://old.reddit.com/r/Esphome/comments/uhu3uy/trying_to_detect_falling_edge_on_input_where_also/" target="_blank" rel="noopener noreffer">reddit thread</a>, I could try to get the ESP to toggle a beeper directly when a pulse is detected.
There are some issues with this approach, though.</p>
</li>
</ul>
<p>It is not possible to get <em>direct</em> access to the ISR via ESPHome.
I&rsquo;d have to create my own custom component to pull this off.
Not the end of the world but also more time than I wanted to spend so I went with a different approach that <em>appears to work</em>.</p>
<p>Basically, create <em>two</em> instances of the <a href="https://esphome.io/components/sensor/pulse_counter.html" target="_blank" rel="noopener noreffer"><code>pulse_counter</code></a> sensor using the same GPIO pin.
One of them will remain external and will publish data to Home Assistant at 60s intervals.
The other will be internal and will be updated every <code>loop()</code>.
By attaching a <a href="https://esphome.io/guides/automations.html#lambda-action" target="_blank" rel="noopener noreffer"><code>lambda</code> function</a> to the sensor evaluation loop, we can compare the number of recorded pulses many times per second.
The number of cycles that the internal pulse counter will sum pulses over is 1 so any time the current value does not match the previous value &hellip; should indicate that a pulse was fired off.</p>
<p>Here&rsquo;s what I came up with:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">sensor</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># See: https://esphome.io/components/sensor/pulse_counter.html</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Particle Count</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># &lt;...&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">INTERNAL Particle Count</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">internal</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">pulse_counter</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># &lt;... literally the exact same config as the external pulse counter ...&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 0ms means every loop()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">update_interval</span><span class="p">:</span><span class="w"> </span><span class="l">0ms</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">filters</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># LogE because we want it to stand out on the console while testing</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          static int num_zeros = 0;
</span></span></span><span class="line"><span class="cl"><span class="sd">          if (x &gt; 0) {
</span></span></span><span class="line"><span class="cl"><span class="sd">            // reset
</span></span></span><span class="line"><span class="cl"><span class="sd">            num_zeros = 0;
</span></span></span><span class="line"><span class="cl"><span class="sd">            // Indicate that a non 0 measurement was taken and dump to console
</span></span></span><span class="line"><span class="cl"><span class="sd">            // This is where a beeper would be fired off if desired...
</span></span></span><span class="line"><span class="cl"><span class="sd">            ESP_LOGE(&#34;filterLambda&#34;, &#34;raw is %f&#34;, x );
</span></span></span><span class="line"><span class="cl"><span class="sd">          } else {
</span></span></span><span class="line"><span class="cl"><span class="sd">            num_zeros++;
</span></span></span><span class="line"><span class="cl"><span class="sd">          }
</span></span></span><span class="line"><span class="cl"><span class="sd">          // Dont spam console
</span></span></span><span class="line"><span class="cl"><span class="sd">          if (num_zeros % 1000 == 0) {
</span></span></span><span class="line"><span class="cl"><span class="sd">            ESP_LOGI(&#34;filterLambda&#34;, &#34;num_zeros is %d&#34;, num_zeros );
</span></span></span><span class="line"><span class="cl"><span class="sd">          }
</span></span></span><span class="line"><span class="cl"><span class="sd">          return x;</span><span class="w">          
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>In testing, I would get logs like:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">[17:34:18][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:34:18][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:34:19][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:34:19][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:34:19][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:34:19][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:34:20][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:34:20][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:34:22][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:34:22][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:34:24][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:34:24][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:34:24][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:34:24][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:34:25][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:34:25][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:34:26][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:34:26][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:34:32][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:34:32][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:34:33][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:34:33][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:34:35][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:34:35][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:34:40][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:34:40][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:34:42][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:34:42][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:34:43][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:34:43][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:34:44][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:34:44][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:34:45][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:34:45][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:34:46][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:34:46][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:34:47][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:34:47][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:34:50][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:34:50][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:34:52][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:34:52][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:34:54][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:34:54][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:34:58][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:34:58][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:35:00][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:35:00][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:35:02][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:35:02][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:35:05][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:35:05][I][filterLambda:170]: num_zeros is 0
</span></span><span class="line"><span class="cl">[17:35:11][I][filterLambda:170]: num_zeros is 1000
</span></span><span class="line"><span class="cl">[17:35:17][E][filterLambda:165]: raw is 10000.000000
</span></span><span class="line"><span class="cl">[17:35:17][I][filterLambda:170]: num_zeros is 0
</span></span></code></pre></td></tr></table>
</div>
</div><p>The period between <code>17:34:18</code> and <code>17:35:17</code> is basically 60 seconds long and the number of times that <code>num_zeros is 0</code> is printed is 27.
Coincidentally, the external facing sensor published a value of 27 to Home Assistant.</p>
<p>This is not a <em>conclusive</em> test but - at least at <strong>background</strong> radiation levels - using two instances of the same sensor type on the same GPIO might work.</p>
<p>I don&rsquo;t have any easy way to induce higher counts on the geiger tube so I can&rsquo;t test how well this holds up &ldquo;under load&rdquo; nor can I confirm that this works reliably across all ESP chips/modules and versions of ESPHome/PlatformIO&hellip;etc.</p>
<p>Doing this with a custom component probably is the better way to do it but I wasn&rsquo;t going to pull that off in the time I had allotted.</p>
]]></description></item><item><title>ESPHome for Sinilink PC remotes</title><link>https://karlquinsland.com/esphome-sinilink-pc-remotes/</link><pubDate>Sat, 22 Oct 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/esphome-sinilink-pc-remotes/</guid><description><![CDATA[<h1 id="pc-power-remote-control">PC (power) remote control</h1>
<p>While doing research for a potential project, I stumbled onto a device that fit&rsquo;s so squarely into that &ldquo;it&rsquo;s so simple and obvious, why didn&rsquo;t I think tof that?!&rdquo; category that I immediately placed an order for a few.</p>
<p>That device?</p>
<p>A simple WiFi equipped micro controller that gets wired between the power button on a PC and the motherboard.
This makes it possible to remotely control and monitor the power state of any PC!</p>
<p>I am using these devices in conjunction with my <a href="/hdmi-kvm-teardown-and-esphome/" rel="">previously integrated KVM switch</a> to automate turning hosts on/off as they are activated/deactivated on the KVM switch.</p>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>Note<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>There are <em>several</em> different types of device on Ali Express.
Most appear to use TuYa MCUs so it&rsquo;s not immediately clear if/how those devices can be converted to use ESPHome or not; buy those at your own risk.</p>
<p>The two Sinilink devices liked below are trivial to get working with ESPHome/Tasmota though!</p>
</div>
        </div>
    </div>
<ul>
<li><a href="https://templates.blakadder.com/sinilink_XY-WPCE.html" target="_blank" rel="noopener noreffer">Sinilink PCIe Computer Remote (XY-WPCE)</a></li>
<li><a href="https://templates.blakadder.com/sinilink_XY-WPCL.html" target="_blank" rel="noopener noreffer">Sinilink USB Computer Remote (XY-WPCL)</a></li>
</ul>
<p><figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>

</p>
<p>The PCI Express version is simpler to integrate with a PC as it uses the 3.3v power rails to determine when the PC is on.
The USB version does not have this luxury so power must be supplied via the DC barrel jack.
Additionally, the USB version is also wired series with the power LED(s) on the computer so the module can discern the PCs power state.</p>
<div class="details admonition question open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-question-circle fa-fw"></i>Why not just use Wake On Lan?<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>Yes, Home Assistant does have support for <a href="https://www.home-assistant.io/integrations/wake_on_lan/" target="_blank" rel="noopener noreffer">Wake On Lan</a> but I chose not to use it for a few reasons:</p>
<ul>
<li>
<p>Does not work across subnets. WoL uses a broadcast packet and routers tend to frown on forwarding those between subnets. As my HA instance runs inside of Kubernetes, it&rsquo;s going to be more than a little difficult to get the WoL packets out of the cluster!</p>
</li>
<li>
<p>Does not do status checking. The Sinilink modules have direct feedback about the state of the PC power.</p>
</li>
<li>
<p>Does not do shutdown. There is no WoL packet that can send a PC back to sleep!</p>
</li>
</ul>
</div>
        </div>
    </div>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Tip<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>If you use the PCI Express version and find that the module does not stay powered up while the PC is asleep/off, check your PC BIOS for <a href="https://superuser.com/questions/1074074/disadvantages-of-enabling-erp-in-bios" target="_blank" rel="noopener noreffer"><code>ErP</code> settings</a>.</p>
<p>I had to explicitly turn off ErP <em>and</em> permit the PC to wake from PCI-E devices before the 3.3v standby rail was activated.</p>
</div>
        </div>
    </div>
<h2 id="a-quick-detour-about-write_flash-errors">A quick detour about <code>write_flash</code> errors</h2>
<p>I don&rsquo;t see this error <em>often</em> but I do see it enough to warrant talking about.</p>
<p>I ordered 3 of the PCI Express <em>and</em> the USB version of the devices above.
Of the 6 devices I received, 3 didn&rsquo;t &ldquo;take&rdquo; the custom firmware.</p>
<p>Devices that have defects with the onboard flash will appear to be function when probed with <code>esptool.py</code> but will exhibit some sort of error when doing any <code>write_flash</code> operations.</p>
<p>The symptoms present like this</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># Note the baud rate; it&#39;s considerably slower than the default baud rate.</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Trying lower baud rates is a suggested &#39;fix&#39;.</span>
</span></span><span class="line"><span class="cl">❯ esptool.py -b <span class="m">19200</span> --port /dev/ttyUSB0 write_flash -fs 1MB -fm dout 0x0 ~/Downloads/tasmota-lite.bin
</span></span><span class="line"><span class="cl">esptool.py v3.3.1
</span></span><span class="line"><span class="cl">Serial port /dev/ttyUSB0
</span></span><span class="line"><span class="cl">Connecting...................
</span></span><span class="line"><span class="cl">Detecting chip type... Unsupported detection protocol, switching and trying again...
</span></span><span class="line"><span class="cl">Connecting...
</span></span><span class="line"><span class="cl">Detecting chip type... ESP8266
</span></span><span class="line"><span class="cl">Chip is ESP8285H16
</span></span><span class="line"><span class="cl">Features: WiFi, Embedded Flash
</span></span><span class="line"><span class="cl">Crystal is 26MHz
</span></span><span class="line"><span class="cl">MAC: e8:aa:bb:cc:dd:ee
</span></span><span class="line"><span class="cl">Uploading stub...
</span></span><span class="line"><span class="cl">Running stub...
</span></span><span class="line"><span class="cl">Stub running...
</span></span><span class="line"><span class="cl">Configuring flash size...
</span></span><span class="line"><span class="cl">Flash will be erased from 0x00000000 to 0x0007afff...
</span></span><span class="line"><span class="cl">Compressed <span class="m">501328</span> bytes to 358200...
</span></span><span class="line"><span class="cl">Wrote <span class="m">501328</span> bytes <span class="o">(</span><span class="m">358200</span> compressed<span class="o">)</span> at 0x00000000 in 188.8 seconds <span class="o">(</span>effective 21.2 kbit/s<span class="o">)</span>...
</span></span><span class="line"><span class="cl">File  md5: 693ff98fbada203ab23ced0650e45ab7
</span></span><span class="line"><span class="cl">Flash md5: 2a3e7abaf93800f4193d03a9da8c52fa
</span></span><span class="line"><span class="cl">MD5 of 0xFF is 36d49993e146cee00d35f8793084f71c
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">A fatal error occurred: MD5 of file does not match data in flash!
</span></span></code></pre></td></tr></table>
</div>
</div><p>and</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ esptool.py --port /dev/ttyUSB0 write_flash -fs 1MB -fm dout 0x0 ~/Downloads/tasmota-lite.bin
</span></span><span class="line"><span class="cl">esptool.py v3.3.1
</span></span><span class="line"><span class="cl">Serial port /dev/ttyUSB0
</span></span><span class="line"><span class="cl">Connecting...
</span></span><span class="line"><span class="cl">Detecting chip type... Unsupported detection protocol, switching and trying again...
</span></span><span class="line"><span class="cl">Connecting...
</span></span><span class="line"><span class="cl">Detecting chip type... ESP8266
</span></span><span class="line"><span class="cl">Chip is ESP8285H16
</span></span><span class="line"><span class="cl">Features: WiFi, Embedded Flash
</span></span><span class="line"><span class="cl">Crystal is 26MHz
</span></span><span class="line"><span class="cl">MAC: e8:aa:bb:cc:dd:ee
</span></span><span class="line"><span class="cl">Stub is already running. No upload is necessary.
</span></span><span class="line"><span class="cl">Configuring flash size...
</span></span><span class="line"><span class="cl">Flash will be erased from 0x00000000 to 0x0007afff...
</span></span><span class="line"><span class="cl">Compressed <span class="m">501328</span> bytes to 358200...
</span></span><span class="line"><span class="cl">Writing at 0x00075960... <span class="o">(</span><span class="m">100</span> %<span class="o">)</span>
</span></span><span class="line"><span class="cl">A fatal error occurred: Serial data stream stopped: Possible serial noise or corruption.
</span></span></code></pre></td></tr></table>
</div>
</div><p>There are a few &ldquo;fixes&rdquo; for this issue but none worked for me:</p>
<ul>
<li>Check for loose or fault connections.</li>
<li>Use a robust power supply</li>
<li>Try <code>write_flash_status</code> with <code>--non-volatile 0</code></li>
<li>Try a different USB &lt;-&gt; 232/TTL adapter</li>
</ul>
<p>I tried <em>all</em> of the above and nothing worked.</p>
<ul>
<li>I soldered wires directly to the modules instead of just inserting pins into the programming header.</li>
<li>I tried a <a href="/electronics-lab-enhanced-bench-psu/" rel="">power supply that can supply <em>considerably more</em> than</a> the ~200 ma needed to power/flash the chip.</li>
<li>I tried a few different USB ports and a few different USB &lt;-&gt; TTL adapters with both counterfeit and authentic FTDI chips.</li>
<li>I used <code>read_flash_status</code> and saw that the <code>--non-volatile</code> settings were already <code>0x0000</code>.</li>
</ul>
<p>None of the above worked for me.</p>
<p>While disappointing and frustrating, there&rsquo;s only one probable conclusion: there&rsquo;s a subtle defect in the flash memory that either wasn&rsquo;t noticed or checked for at the factory when the OEM firmware was flashed onto the devices.</p>
<p>I cut my losses and moved on.</p>
<h2 id="esphome-configurations">ESPHome configurations</h2>
<p>For SEO/Archival purposes, I have also uploaded a copy of the config to the <a href="https://github.com/esphome-devices/esphome-devices/pull/294" target="_blank" rel="noopener noreffer">esphome-devices.com</a> site.
<del>As of publishing <em>this</em> article, the PR is pending review.
If/When the page goes live, I&rsquo;ll update the link here.</del></p>
<div class="details admonition success open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-check-circle fa-fw"></i>Success<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">The pr is <a href="https://www.esphome-devices.com/devices/Sinilink-XY-WPCE" target="_blank" rel="noopener noreffer">LIVE</a>. Thanks to the super quick work of <a href="https://github.com/tekmaven" target="_blank" rel="noopener noreffer"><code>@tekmaven</code></a>!</div>
        </div>
    </div>
<p>The configurations there are bare-bones and cover <em>just</em> the basics required to get the GPIO working with ESPhome.</p>
<p>The configuration below is a bit more featured and is a lot closer to the versions that I use in production.
It features a &ldquo;pc power button lockout&rdquo; feature and more.</p>
<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>Warning<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">The code below will not compile &ldquo;as is&rdquo;.
All of the entities under the <code>packages:</code> heading are &ldquo;standard&rdquo; across all of my ESPHome configurations and are not included here.
Either remove them or substitute as needed to get something that works for <em>you</em>.</div>
        </div>
    </div>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span><span class="lnt">160
</span><span class="lnt">161
</span><span class="lnt">162
</span><span class="lnt">163
</span><span class="lnt">164
</span><span class="lnt">165
</span><span class="lnt">166
</span><span class="lnt">167
</span><span class="lnt">168
</span><span class="lnt">169
</span><span class="lnt">170
</span><span class="lnt">171
</span><span class="lnt">172
</span><span class="lnt">173
</span><span class="lnt">174
</span><span class="lnt">175
</span><span class="lnt">176
</span><span class="lnt">177
</span><span class="lnt">178
</span><span class="lnt">179
</span><span class="lnt">180
</span><span class="lnt">181
</span><span class="lnt">182
</span><span class="lnt">183
</span><span class="lnt">184
</span><span class="lnt">185
</span><span class="lnt">186
</span><span class="lnt">187
</span><span class="lnt">188
</span><span class="lnt">189
</span><span class="lnt">190
</span><span class="lnt">191
</span><span class="lnt">192
</span><span class="lnt">193
</span><span class="lnt">194
</span><span class="lnt">195
</span><span class="lnt">196
</span><span class="lnt">197
</span><span class="lnt">198
</span><span class="lnt">199
</span><span class="lnt">200
</span><span class="lnt">201
</span><span class="lnt">202
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">substitutions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Displayed in HA frontend</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">friendly_name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Desktop Power Control&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">friendly_name_short</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Desktop&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">hostname</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;desktop-power-control&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">esphome</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">${hostname}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Shows up in UI</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">comment</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Remote power button for ${friendly_name_short}.&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">esp8266</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Specifically a &#39;ESP8285H16&#39; with 2MB built in flash</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># See: https://docs.platformio.org/en/stable/boards/espressif8266/esp8285.html</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">board</span><span class="p">:</span><span class="w"> </span><span class="l">esp8285</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">logger</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">level</span><span class="p">:</span><span class="w"> </span><span class="l">INFO</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># See: https://esphome.io/guides/configuration-types.html#packages</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">packages</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># General</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">wifi</span><span class="p">:</span><span class="w"> </span>!<span class="l">include ../../packages/wifi.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">mqtt</span><span class="p">:</span><span class="w"> </span>!<span class="l">include ../../packages/mqtt.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">time</span><span class="p">:</span><span class="w"> </span>!<span class="l">include ../../packages/ntp.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ota</span><span class="p">:</span><span class="w"> </span>!<span class="l">include ../../packages/ota.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">web_server</span><span class="p">:</span><span class="w"> </span>!<span class="l">include ../../packages/web_server.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">status_led</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">pin</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO02</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">inverted</span><span class="p">:</span><span class="w"> </span><span class="kc">True</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Keep track of weather or not case button press should be forwarded to the motherboard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">globals</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_relay_latched</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">bool</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_value</span><span class="p">:</span><span class="w"> </span><span class="kc">no</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">initial_value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;true&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">script</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">regular_press</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">single</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">output.turn_on</span><span class="p">:</span><span class="w"> </span><span class="l">out_relay</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">delay</span><span class="p">:</span><span class="w"> </span><span class="l">.5s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">output.turn_off</span><span class="p">:</span><span class="w"> </span><span class="l">out_relay</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">long_press</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">single</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">output.turn_on</span><span class="p">:</span><span class="w"> </span><span class="l">out_relay</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># MB seems to respond to 5s, add 2 just to be safe</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">delay</span><span class="p">:</span><span class="w"> </span><span class="l">7s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">output.turn_off</span><span class="p">:</span><span class="w"> </span><span class="l">out_relay</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">button</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># We expose a button to the HA web UI that mimics the &#34;forceful&#34; power down sequence</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;${friendly_name_short} Long Press&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">btn_forceful_down</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_press</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          // If the power state is off, we&#39;ll emit a WARN level message before running the script
</span></span></span><span class="line"><span class="cl"><span class="sd">          if( !id(inp_power_status).state ){
</span></span></span><span class="line"><span class="cl"><span class="sd">            ESP_LOGW(&#34;forcefulShutdown&#34;, &#34;Power state is OFF but forceful shutdown requested...&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">          } else {
</span></span></span><span class="line"><span class="cl"><span class="sd">            ESP_LOGW(&#34;forcefulShutdown&#34;, &#34;Power state is ON. Forceful shutdown requested...&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">          }
</span></span></span><span class="line"><span class="cl"><span class="sd">          id(long_press).execute();</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">binary_sensor</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># React to connection status, if needed</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">&lt;&lt;</span><span class="p">:</span><span class="w"> </span>!<span class="l">include ../../packages/binary_sensor/connection_status.config.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;${friendly_name_short} WiFi Config Button&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">gpio</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">inp_wifi_cfg_btn</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;diagnostic&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:radiobox-marked&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO04</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">INPUT_PULLUP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">inverted</span><span class="p">:</span><span class="w"> </span><span class="kc">True</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;${friendly_name_short} Case Button&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">gpio</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">inp_pc_case_btn_status</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;diagnostic&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:power-standby&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO10</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">INPUT_PULLUP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">inverted</span><span class="p">:</span><span class="w"> </span><span class="kc">True</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_press</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">if</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">condition</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;return id(glbl_relay_latched);&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">output.turn_on</span><span class="p">:</span><span class="w"> </span><span class="l">out_relay</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">else</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">logger.log</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;PC Case button press but disarmed!&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_release</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">if</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">condition</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;return id(glbl_relay_latched);&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">output.turn_off</span><span class="p">:</span><span class="w"> </span><span class="l">out_relay</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">else</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">logger.log</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;PC Case button release but disarmed!&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Press is momentary quick</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_click</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">            // If relay isn&#39;t latched, do nothing
</span></span></span><span class="line"><span class="cl"><span class="sd">            if( !id(glbl_relay_latched) ){
</span></span></span><span class="line"><span class="cl"><span class="sd">              ESP_LOGD(&#34;caseBtnPress&#34;, &#34;button pressed, not latched so doing nothing.&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">              return;
</span></span></span><span class="line"><span class="cl"><span class="sd">            }
</span></span></span><span class="line"><span class="cl"><span class="sd">            ESP_LOGD(&#34;caseBtnPress&#34;, &#34;button pressed, latched. Toggling power now...&#34;);
</span></span></span><span class="line"><span class="cl"><span class="sd">            id(sw_pc_power).toggle();</span><span class="w">            
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_multi_click</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">timing</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="kc">ON</span><span class="w"> </span><span class="l">for at most 1s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="kc">OFF</span><span class="w"> </span><span class="l">for at most 2s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="kc">ON</span><span class="w"> </span><span class="l">for at most 1s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="kc">OFF</span><span class="w"> </span><span class="l">for at most 2s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="kc">ON</span><span class="w"> </span><span class="l">for at most 1s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="kc">OFF</span><span class="w"> </span><span class="l">for at most 2s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># We&#39;d want to press a virtual / template button for hard power down</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># That template button would run a script that just raised the output hight for 10s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">logger.log</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Triple clicked!&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">button.press</span><span class="p">:</span><span class="w"> </span><span class="l">btn_forceful_down</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;${friendly_name_short} Power Status&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">gpio</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">inp_power_status</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">device_class</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;power&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;diagnostic&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:power-settings&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO12</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">INPUT_PULLUP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">inverted</span><span class="p">:</span><span class="w"> </span><span class="kc">True</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">switch</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;${friendly_name_short} Relay Latch&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">sw_relay_mode</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">device_class</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;switch&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:link-variant&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entity_category</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;config&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      if (id(glbl_relay_latched)) {
</span></span></span><span class="line"><span class="cl"><span class="sd">        return true;
</span></span></span><span class="line"><span class="cl"><span class="sd">      } else {
</span></span></span><span class="line"><span class="cl"><span class="sd">        return false;
</span></span></span><span class="line"><span class="cl"><span class="sd">      }</span><span class="w">      
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">turn_on_action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">globals.set</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_relay_latched</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;true&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">turn_off_action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">globals.set</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">glbl_relay_latched</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;false&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;${friendly_name_short} Power&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">sw_pc_power</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">template</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:power-plug&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">device_class</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;switch&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">lambda</span><span class="p">:</span><span class="w"> </span><span class="p">|-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      if (id(inp_power_status).state) {
</span></span></span><span class="line"><span class="cl"><span class="sd">        return true;
</span></span></span><span class="line"><span class="cl"><span class="sd">      } else {
</span></span></span><span class="line"><span class="cl"><span class="sd">        return false;
</span></span></span><span class="line"><span class="cl"><span class="sd">      }</span><span class="w">      
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Mimic the user pressing the button</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">turn_on_action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">script.execute</span><span class="p">:</span><span class="w"> </span><span class="l">regular_press</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">turn_off_action</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">script.execute</span><span class="p">:</span><span class="w"> </span><span class="l">regular_press</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">output</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">gpio</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">out_relay</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO5</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>I made a thing: GPS/PPS clock source for ntpd</title><link>https://karlquinsland.com/yet-another-gps-pps-opnsense/</link><pubDate>Sat, 15 Oct 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/yet-another-gps-pps-opnsense/</guid><description><![CDATA[<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Tip<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>This is just a &lsquo;pointer&rsquo; post.</p>
<p>All the details are in the <a href="https://github.com/kquinsland/yet-another-gps-pps-opnsense" target="_blank" rel="noopener noreffer"><code>kquinsland/yet-another-gps-pps-opnsense</code> repo</a> on github.</p>
</div>
        </div>
    </div>
<hr>
<p>For the longest time, I had a dedicated raspberry pi with a GPS module acting as the <code>ntp</code> server for my home network. I chose to use a dedicated host for this because my router - at the time - did not have a serial port that I could leverage.</p>
<p>Recently, the miroSD card on the ntp pi died and I decided to leverage the serial port in my  current router rather than re-build the operating system on the ntp host.</p>
<p>It didn&rsquo;t take that much time to but together a bare-bones schematic in KiCad.
One LCSC order, one mouser order and about a week later, I had a basic RS232 &lt;-&gt; TTL converter for use with a cheap GPS module</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>After a bit more testing, I was convinced I hadn&rsquo;t made any egregious mistakes and the new module didn&rsquo;t pose a significant threat/risk to my production router.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


]]></description></item><item><title>I made a thing: Yet another 3d printed speaker</title><link>https://karlquinsland.com/3d-printed-subwoofer-and-arylic-amp-enclosure/</link><pubDate>Wed, 31 Aug 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/3d-printed-subwoofer-and-arylic-amp-enclosure/</guid><description><![CDATA[<!-- markdownlint-disable-file MD002 -->
<h1 id="background">Background</h1>
<p>Long story made <strong><em>very</em></strong> short: the amplifier inside my ancient 2.1 desktop speakers died and I couldn&rsquo;t find anything &ldquo;off the shelf&rdquo; that would serve as a suitable replacement <em>and</em> integrate well with Home Assistant.</p>
<p>So if you can&rsquo;t buy it, you have to build it!
And as it turns out, there&rsquo;s a whole community of audiophiles that have published designs on all the usual places you&rsquo;d find free designs for makers.
Similarly, there&rsquo;s a few companies that seems to specialize in audio electronics aimed <em>specifically at</em> people that are building their own speaker systems and just want someone else to handle the electronics and software.</p>
<p>This post will cover the design tweaks I made to an existing subwoofer assembly and an original amplifier electronics/enclosure design.</p>
<h2 id="the-components">The components</h2>
<p>There are two assemblies in this build: the subwoofer and the receiver/power-electronics enclosure.</p>
<p>The subwoofer is a remix of the amazing <a href="https://www.printables.com/model/84521-skeleton-waveguide-subwoofer-speaker-fusion-360-ar" target="_blank" rel="noopener noreffer"><code>Skeleton Waveguide Subwoofer Speaker</code></a> by <a href="https://www.printables.com/social/107245-zx82net/about" target="_blank" rel="noopener noreffer"><code>zx82net</code></a> which is a remix of <a href="https://www.printables.com/model/190762-hexibox-series-tang-band-w3-1876s-microsub" target="_blank" rel="noopener noreffer"><code>&quot;HexiBox&quot; Tang Band W3-1876S Subwoofer Enclosure</code></a>
by <a href="https://www.printables.com/social/264072-hexibase/about" target="_blank" rel="noopener noreffer"><code>hexibase</code></a>.</p>
<p>As for the drive electronics, I elected to use an <a href="https://www.arylic.com/products/up2stream-amp-2-1-amp-board" target="_blank" rel="noopener noreffer">Up2Stream Amp 2.1 - Multiroom Wireless 2.1 Amplifier Board</a>.
This appears to be based on a MediaTek based module module from <a href="https://www.linkplay.com/" target="_blank" rel="noopener noreffer"><code>LinkPlay</code></a>.</p>
<p>I could do a whole <em>series</em> of posts based on the firmware alone but for now I&rsquo;ll just say that it is 1) trivial to root and 2) <strong>should not be exposed directly to the internet for any reason whatsoever.</strong></p>
<p>I&rsquo;m not equipped to verify any of the claims made by the original subwoofer designer so I can only offer my subjective take; this subwoofer offers more wubz at greater distances and that&rsquo;s <em>before</em> I add +10db to the bass via the equalizer on the amp!</p>
<h2 id="tweaks">Tweaks</h2>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The green elements are meant to be printed in TPU or another gasket like material. The cable channel runs from the RCA jack enclosure in the rear (pink color), under the gasket material to the main speaker cavity.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h3 id="wiring">Wiring</h3>
<ul>
<li>There is now an integrated channel for standard 16 AWG speaker wire that runs from the main cavity, through each baffle, to the exterior.
<ul>
<li>This cable channel also increases rigidity which aids in printing and assembly.</li>
</ul>
</li>
<li>The rear of the subwoofer body features some attachment points for a simple enclosure for speaker hookups.
<ul>
<li>I am using RCA jacks but the enclosure could be easily modified to work with any similar connector.</li>
<li>The enclosure mounts directly over the cable channel so all wires are protected/hidden.</li>
</ul>
</li>
</ul>
<h3 id="assembly">Assembly</h3>
<p>You no longer need to use goopy adhesives to seal the panels to the body! The sub body and panels have been modified to accommodate a thin 3d printed sheet of TPU or similar material to act as a gasket.</p>
<p>There is also a subtle channel cut into the sub body which is meant for gasket cord as a fall back.</p>
<p><figure >

    
        
    

    

    <figcaption>
        
        <p>
        The dark blue represents the path that gasket cord material should be laid down.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        When properly joined, there will be a slight interference between the panel and the gasket material; this ensures a fantastic seal.
        
            
        
        </p> 
    </figcaption>
    
</figure>

</p>
<h3 id="mounting">Mounting</h3>
<ul>
<li>The sides of the subwoofer feature a 100x100mm <a href="https://en.wikipedia.org/wiki/Flat_Display_Mounting_Interface" target="_blank" rel="noopener noreffer">VESA/FDMI</a> mounting pattern.
<ul>
<li>When printing with the holes facing the print bed, support material all but entirely obscures their existence.</li>
</ul>
</li>
</ul>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The support material hides the hole almost perfectly. If the image brightness wasn&#39;t turned up, you&#39;d never notice :D
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h1 id="build">Build</h1>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>Info<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">This is an abridged assembly guide and Bill of Materials. I have included only what&rsquo;s different/new/specific to this build. Consult the various build guides and BOMs for the original subwoofer so you understand what <em>else</em> is required.</div>
        </div>
    </div>
<h2 id="bom">BOM</h2>
<h3 id="subwoofer">Subwoofer</h3>
<p>Very little about the subwoofer BOM has changed from the original design.</p>
<ul>
<li>
<p><strong>Optional</strong>: <a href="https://www.amazon.com/gp/product/B00QVB6QPU/" target="_blank" rel="noopener noreffer">(1 mm) Buna-N O-Ring Cord Stock, 70A Durometer</a></p>
<ul>
<li>You will not need this if you&rsquo;re printing TPU gaskets or using some glue / caulk.</li>
<li>You will want some superglue or similar to help secure the gasket cord as you insert it into the channels.</li>
</ul>
</li>
<li>
<p>16-Gauge Speaker Wire Cable, ~18 inches/40 cm.</p>
<ul>
<li>The cable channel was specifically designed for 16 AWG speaker wire with the dimensions 6mm x 3mm. Any wire can work but if there&rsquo;s a gap between the wire jacket and the channel walls, you&rsquo;ll need to fill the gap / seal the channel.</li>
<li>18 inches will allow for some relative comfort during assembly. You can get away with less but it will make some things a bit harder than needed.</li>
</ul>
</li>
<li>
<p>28+ <code>M4x 12mm</code> screws.</p>
<ul>
<li>The original design didn&rsquo;t include any specific screws so I explicitly chose <a href="https://www.mcmaster.com/90666A115/" target="_blank" rel="noopener noreffer">McMaster # 90666A115</a>.</li>
<li>You will need at least 6 screws to secure the speaker to the sub and 11 to properly secure each panel to the subwoofer body.</li>
<li>If you choose to install the electronics enclosure at the rear of the sub, an additional 4 screws will be needed.</li>
</ul>
</li>
<li>
<p>RCA jack: there many different types out there but the parts are meant to be used with <a href="https://www.aliexpress.com/item/2255799906959194.html" target="_blank" rel="noopener noreffer">these jacks</a>.</p>
</li>
</ul>
<h3 id="amplifier-enclosure">Amplifier enclosure</h3>
<ul>
<li>The heart of the build is the <a href="https://www.aliexpress.com/item/2255801111428335.html" target="_blank" rel="noopener noreffer">Up2stream Amp 2.1</a> module.
<ul>
<li>The AliExpress listing has a few versions. I was not planning on using the IR remote and I didn&rsquo;t want an external PSU so I chose to order <em>just</em> the board.</li>
</ul>
</li>
</ul>
<p>Power Supply:</p>
<ul>
<li>The amplifier enclosure has room for a 24V 4.5A MeanWell <a href="https://www.aliexpress.com/item/3256803302407060.html" target="_blank" rel="noopener noreffer">LRS-100</a></li>
<li>To connect the DC output of the LRS-100, you&rsquo;ll need a <a href="https://www.amazon.com/gp/product/B0B37H6R56/" target="_blank" rel="noopener noreffer">female 3.96MM 2 pin</a> connector to mate with the DC in on the amplifier.</li>
</ul>
<p>Panel mount connectors:</p>
<ul>
<li>
<p>RCA jacks: I used the same part number from above, just ordered a few different colors for the R/L/S channels.</p>
</li>
<li>
<p>Powercon True. Rather than a traditional IEC style or simple DC barrel jack + external PSU, I opted for a <a href="https://en.wikipedia.org/wiki/Skookum" target="_blank" rel="noopener noreffer">Skookum</a> power connector. Like with the RCA jacks, there are many different parts from several manufacturers that will probably work but I specifically used <a href="https://www.aliexpress.com/item/2251832762646533.html" target="_blank" rel="noopener noreffer">this set from Ali Express</a>.</p>
</li>
<li>
<p>RJ45: There are likely several that will work, but I explicitly used <a href="https://www.aliexpress.com/item/2255799916665398.html" target="_blank" rel="noopener noreffer">this part from Ali Express</a>.</p>
</li>
<li>
<p>USB2.0: There are likely several that will work, but I explicitly used <a href="https://www.aliexpress.com/item/2255799916028028.html" target="_blank" rel="noopener noreffer">this part from Ali Express</a>.</p>
</li>
<li>
<p>USB extension cable: You can find all sorts of adapters in every conceivable orientation on Ali Express from stores like <a href="https://www.aliexpress.com/item/2255801102773472.html" target="_blank" rel="noopener noreffer">this</a>. For this particular project, you will need a 15 cm flat flex cable (<code>FFC</code>) and 2x of the &ldquo;straight&rdquo; USB male connectors.</p>
</li>
</ul>
<p>Screws:</p>
<ul>
<li>
<p>The amp enclosure uses 4x of the same McMaster #90666A115 for external mounting but any M4 screw could work here.</p>
</li>
<li>
<p>6x <code>M3x8mm</code> screws to hold the amplifier PCB to the internal midplate and PSU to the case. Specifically <a href="https://www.mcmaster.com/91290A113/" target="_blank" rel="noopener noreffer">McMaster #91290A113</a>.</p>
</li>
<li>
<p>4x <code>M4x50</code> screws to secure the lid. Specifically <a href="https://www.mcmaster.com/91292A140/" target="_blank" rel="noopener noreffer">McMaster #91292A140</a>.</p>
</li>
</ul>
<p>And it all fits together inside an enclosure like so:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The amp enclosure as seen from the front corner.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The amp enclosure as seen from the rear corner.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h2 id="procedure">Procedure</h2>
<p>To give you an idea of how things go together:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Viewed from the rear corner, the PCB (purple) sits on top of a midplate (green, highlighted) which sits on top of the power supply (also purple, bottom).
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        To make printing easier, the midplate is actually two components joined together by the two screws furthest from the knobs.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h3 id="print">Print</h3>
<p>Just a few things to note:</p>
<ul>
<li>The suggested/ideal print orientation should be fairly obvious.</li>
<li>Tolerances are reasonably tight, you&rsquo;ll need ~ .15mm tolerance.
<ul>
<li>Layer height, material, speed settings are up to you. All that matters is that you can achieve the ~.15mm tolerance.</li>
</ul>
</li>
</ul>
<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>This will take a while!<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>With respect to the subwoofer skeleton and panels, at least.</p>
<p>Essentially, the more mass in the parts, the more energy will be required to make them rattle/flex/vibrate.
The less this happens, the less &ldquo;extra&rdquo; noise will be emitted by your subwoofer.
Following along with the original instructions for printing, I chose about 35% infill and 3 perimeters for the subwoofer skeleton. Using a .6mm nozzle and some other well tuned slicing settings, I was able to print the entire skeleton in about 40 hours using just over 1 kg of filament. I would plan on at least 80 if using a smaller nozzle with a finer layer height!</p>
</div>
        </div>
    </div>
<h4 id="prep-screw-holes--flashing">Prep screw holes &amp; flashing</h4>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>Intentionally undersized holes<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Almost all screw holes on this build are intentionally undersized.
As a general preparation step, <strong><em>carefully</em></strong> drive the appropriate screw into each hole and then let it sit!</div>
        </div>
    </div>
<p>In the CAD model, almost all holes meant to receive a screw are intentionally undersized by about .3mm.
besides the general &lsquo;it&rsquo;s easier to expand the hole to the correct size than it is to shrink it&rsquo; reason, this is done for one key reason; it <strong>eliminates the need for dedicated screw thread hardware</strong>.</p>
<p>By intentionally undersigning the hole, you can guarantee there will be a ton of friction generated when inserting the screws for the first time.
The excess friction <em>will</em> soften the plastic in the vicinity of the screw threads which allows the plastic to form threads around the screw.</p>
<p>This is not without drawbacks, though <strong>so proper procedure is <em>critical</em> for making this work properly!</strong></p>
<p>You must take every precaution to ensure that:</p>
<ul>
<li>The screw is driven into the hole in a directly perpendicular direction.
<ul>
<li>As the plastic heats up, it becomes easier to knock the screw out of alignment and begin driving it at an angle.</li>
</ul>
</li>
<li>A constant (slow!) velocity should be used to drive the screw.
<ul>
<li>This can be done with hand tools but will result in a pretty tough arm workout! Consider using a power drill with a low speed / constant torque option!</li>
</ul>
</li>
<li>The threads of the screw will displace some plastic. The excess molten plastic is called <a href="https://en.wikipedia.org/wiki/Flash_%28manufacturing%29" target="_blank" rel="noopener noreffer">flashing</a> and it it almost guarantees that you&rsquo;ll need to do some post processing / cleanup of the screw holes.</li>
<li>The molten plastic forms screw threads more or less instantly&hellip; but they won&rsquo;t <em>stay formed</em> until the excess heat has dissipated and the material has solidified.
<ul>
<li>Do not remove any screws from the body until they are cool to the touch! This can take <em>several minutes</em>!</li>
</ul>
</li>
</ul>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        All 11(!) of the m4 screws driven into the sub body waiting for the plastic to set
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>After all 11 screws had cooled and the threads had formed, the screws were removed.
Nearly every one of the holes had some (small) build up of material:</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Use a straight edge blade or scrape tool to remove the flashing bits.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>In some cases, there may be some additional material that builds up on the screw threads themselves.
Simply use a different screw for final assembly or use scrape tool or flame to remove the excess material from the threads:</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>After the flashing is removed from around screw holes you should still be able to see threads within the hole but shouldn&rsquo;t be able to see/feel any protrusions <em>from</em> the hole:</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Where possible, I have made the screw holes much deeper than strictly necessary.
As the screw drives deeper, the tip will push molten plastic into this &ldquo;well&rdquo;.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The extra depth on the screw hole gives the molten plastic somewhere to go.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h3 id="subwoofer-skeleton">Subwoofer Skeleton</h3>
<h4 id="gaskets">Gaskets</h4>
<p>Begin by driving the screws into the side panels and speaker driver then attach the gaskets.</p>
<p><figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>

</p>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>Info<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">You do not need to press the gasket all the way up against the component; it will be compressed between the two components during final assembly.</div>
        </div>
    </div>
<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>Secure the gasketed components to the body carefully<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Rotate each screw a few turns before moving to the next one. Do this <a href="https://www.tyreplex.com/news/how-to-tighten-lug-nuts-on-a-car-the-criss-cross-pattern/" target="_blank" rel="noopener noreffer">in an alternating pattern similar to how you would tighten Lug Nuts on a car</a>. Failure to do so will likely result in the gasket being rotated out of place internally!</div>
        </div>
    </div>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Be mindful of the gasket as you secure the panel to the subwoofer body. Too much torque/clamping force can cause the gasket to distort.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h4 id="speaker-wire">Speaker wire</h4>
<p>Solder ~14 inches speaker wire to the RCA jack then install in the housing.
Don&rsquo;t forget to use heat shrink tubing or similar to insulate/protect the electrical connections!</p>
<p>Pass the housing assembly through the speaker hole and the attach the driver and then housing to the back of the subwoofer.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Firmly press the speaker wire into the the cable channel and push any slack wire into the RCA jack housing.</p>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>Info<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">There should be - at most - a few inches / 15cm of slack wire. Any more than this and you&rsquo;ll run out of room inside the small housing!</div>
        </div>
    </div>
<p>Once the speaker and jack housing are attached to the subwoofer body, simply line up and then attach the panels with the gaskets.</p>
<p>Now is a good time to test that your soldering / connections are working!</p>
<p>If you elected to use the gasket cord material, you would need to spend a non-trivial amount of time carefully cutting and routing segments of the material to fit inside the channel.
You will almost certainly want to use superglue or similar to help you hold the material into the channel!</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The speaker wire should press-fit into the cable channel more or less sealing it completely.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h3 id="amp">Amp</h3>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Tip<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Just like with the subwoofer components, you&rsquo;ll want to <a href="#prep-screw-holes--flashing" rel="">&ldquo;pre-thread&rdquo;</a> the various holes.</div>
        </div>
    </div>
<h4 id="prep">Prep</h4>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Notice the holes on the left that have been &#34;rightsized&#34; during threading and the holes on the top right that are relatively deformed still.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>For the various panel mounted jacks, there are small interior cavities designed to capture the nut.
This cavity is actually <em>oversized</em> in the CAD model but due to various printer/slicing factors it is almost certainly going to be a <strong>tight fit</strong>!</p>
<p>Align the nut with the cavity and then use the screw to pull the nut into the hole then tighten the screw all the way to pull the nuts into place:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        After the screw has pulled the nut into place, it should stay put.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>After the various holes have been prepared and the nuts have been fitted, you are ready for final assembly</p>
<h4 id="assemble">Assemble</h4>
<p>First, combine both parts of the midplate with the amp board. Set aside.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Pro tip: print the MAC addresses of a network device somewhere on the device... Also, don&#39;t put unique device IDs onto the internet!
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h5 id="power">Power</h5>
<p>Solder mains wires to the Powercon receptacle and terminate with crimp connectors.
Secure the Powercon receptacle to the rear of the enclosure and then attach to the screw terminals on the PSU.</p>
<p>Lower the PSU into the enclosure and secure it with the two screws in opposite corners.
Start with the screw closest to the Powercon connector:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Room inside the enclosure is intentionally tight so do as much wiring/connecting as possible before you start securing things to the enclosure.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>Then add the seconds screw in the opposite corner:</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Take this opportunity to power up and confirm that the polarity and voltage is correct!</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<h5 id="amp-pcb">Amp PCB</h5>
<p>Push the three rotary encoders through the holes in the enclosure and then lower the midplate/PCB on top of the PSU.
Route the DC wires up and around to the DC plug on the PCB.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Install the RCA jacks and route wires as needed to the PCB.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Then connect both the USB and RJ54 jacks on the amp module to their respective panel mount jacks.
I forgot to get a picture of the USB cable but it works more or less the exact same way the ethernet cable does:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        A 6 inch patch cable was quicker but a custom length cable would almost certainly look better. Good thing this will soon be hidden away!
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>Either remove the BT/WiFi antenna or secure it to the inside of the enclosure just above the LEDs (not pictured here).</p>
<p>And before attaching the lid, attach the knobs:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Don&#39;t forget the washer/nut!
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>And just like that, the complete sub and amp.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Subwoofer and amp enclosure mounted to the leg of my desk. Please ignore the mess of wires in the background!
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h1 id="files-and-licenses">Files and licenses</h1>
<p>All the 3d printable files associated with this post are available from my <a href="https://www.printables.com/social/8405-rainb0w_wheez3/about" target="_blank" rel="noopener noreffer">printables.com</a> page:</p>
<ul>
<li>
<p><a href="https://www.printables.com/model/273285-modified-skeleton-waveguide-subwoofer-speaker" target="_blank" rel="noopener noreffer">Modified Skeleton Waveguide Subwoofer Speaker</a></p>
</li>
<li>
<p><a href="https://www.printables.com/model/273302-arylic-up2stream-amp-21-enclosure" target="_blank" rel="noopener noreffer">Arylic Up2Stream Amp 2.1 enclosure</a></p>
</li>
</ul>
<p>On that page, you will find a list of files like:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ tree
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── amp-enclosure
</span></span><span class="line"><span class="cl">│   ├── amp-box-lid.step
</span></span><span class="line"><span class="cl">│   ├── amp-midplate-1.step
</span></span><span class="line"><span class="cl">│   ├── amp-midplate-2.step
</span></span><span class="line"><span class="cl">│   ├── amp-pcb.step
</span></span><span class="line"><span class="cl">│   └── amp-shell.step
</span></span><span class="line"><span class="cl">└── sub
</span></span><span class="line"><span class="cl">    ├── gasket-bottom.step
</span></span><span class="line"><span class="cl">    ├── gasket-speaker.step
</span></span><span class="line"><span class="cl">    ├── gasket-top.step
</span></span><span class="line"><span class="cl">    ├── main-body.step
</span></span><span class="line"><span class="cl">    ├── panel-bottom.step
</span></span><span class="line"><span class="cl">    ├── panel-top.step
</span></span><span class="line"><span class="cl">    ├── rca-enclosure.step
</span></span><span class="line"><span class="cl">    └── sub-components v28.f3z
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>All photos used in this post are mine and are licensed under <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="noopener noreffer">CC BY-NC-SA 4.0</a>.</p>
</li>
<li>
<p>Everything within the <code>amp-enclosure</code> is my original work. These files are licensed under <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="noopener noreffer">CC BY-NC-SA 4.0</a>.</p>
</li>
<li>
<p>Everything in the <code>sub</code> directory is based off of the fusion360 file from <a href="https://www.printables.com/social/107245-zx82net/about" target="_blank" rel="noopener noreffer">zx82net</a> which  is licensed under <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="noopener noreffer">CC BY-NC-SA 4.0</a>. Likewise, my modifications fall under the same license.</p>
<ul>
<li>My modifications in &lsquo;source&rsquo; formate are contained in the <code>sub-components v28.f3z</code> archive but to make printing easier, individual components are exported as STEP files.</li>
</ul>
</li>
</ul>
<h2 id="supporting-files">Supporting files</h2>
<p>In building the various parts in the <code>amp-enclosure</code> directory, I relied on the following additional models:</p>
<ul>
<li>
<p><a href="https://grabcad.com/library/tang-band-w3-1876s-3-subwoofer-1" target="_blank" rel="noopener noreffer">Tang Band W3-1876S 3&quot; Subwoofer</a> by <a href="https://grabcad.com/george.todd-1" target="_blank" rel="noopener noreffer">George Todd</a></p>
</li>
<li>
<p><a href="https://grabcad.com/library/fonte-chaveada-bivolt-24vcc-4a-100w-1" target="_blank" rel="noopener noreffer">Fonte Chaveada Bivolt 24Vcc 4A 100W</a> by <a href="https://grabcad.com/eliandro.baseggio--1" target="_blank" rel="noopener noreffer">Eliandro Baseggio </a></p>
</li>
</ul>
]]></description></item></channel></rss>