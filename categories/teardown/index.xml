<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>teardown - Category - karl</title><link>https://karlquinsland.com/categories/teardown/</link><description>teardown - Category - karl</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 15 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://karlquinsland.com/categories/teardown/" rel="self" type="application/rss+xml"/><item><title>Teardown and Home Assistant integration with two generic Chinese 'smart' power strips.</title><link>https://karlquinsland.com/esphome-power-strips/</link><pubDate>Sun, 15 Jan 2023 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/esphome-power-strips/</guid><description><![CDATA[<!-- markdownlint-disable-file MD002 -->
<p>I love the Sonoff-S31 smart plugs.
They&rsquo;re cheap, well made and - most importantly - trivial to flash with ESPHome and integrate into Home Assistant.
They do have one obvious draw back, though; optimized for a &ldquo;traditional&rdquo; US style outlet.
When you try to deploy them to a power strip, you end up loosing about 50% of the outlets on the strip!</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        This is how you loose about 50% of the outlets on your power strip.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>I figured that there must be a power strip out there that had the WiFi radio, power supply and relays built in.</p>
<p>Looking through the <a href="https://templates.blakadder.com/us.html#Power%20Strip" target="_blank" rel="noopener noreffer"><code>Power Strip</code></a> listing of the excellent Tasmota device/template repository, there are more than a few options out there.
Upon closer inspection, almost <em>all</em> of them are from super generic/no-name Chinese brands and lack any ETL or UL certifications üò¨.</p>
<p>Searching for smart power strips on Amazon returns several results&hellip; and only a few from name brands.
The few name brand power strips out there that I could find are using their own microcontrollers internally and are immediately disqualified as they&rsquo;ll be - at best - difficult ot integrate with Home Assistant.</p>
<p>I&rsquo;m not quite so concerned about any power conditioning/surge suppression as I am not plugging in any valuable or delectate electronics.
I am concerned with a more integrated / space efficient solution that allows me to retain my ESPHome/Home Assistant integration.</p>
<p>After cross referencing the Tasmota templates listing with the Amazon search listings, it became clear that there&rsquo;s really only a few designs that get sold under several different brands and that virtually all of the devices that were known to be powered by an ESP micro are no longer for sale on Amazon.</p>
<p>I eventually took a gamble on two:</p>
<ul>
<li><a href="https://www.amazon.com/gp/product/B097NHBPN9" target="_blank" rel="noopener noreffer"><code>BN-LINK U158WT</code></a></li>
<li><a href="https://www.amazon.com/gp/product/B0B5G6MDQ6" target="_blank" rel="noopener noreffer"><code>POWSAV AHR-083</code></a></li>
</ul>
<h2 id="bn-link">BN-Link</h2>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Marketing photo for the BN-Link power strip
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>This opens up with a standard philips screw driver and you only need one bit size for all screws - nice touch!</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>The screws are hiding under the anti-slip pads but instead of those being glued down, the pads use a friction fit on the <code>+</code> shaped locating pegs.
I really like this design feature as the glued pads never stick quite as well when replaced.
In addition to the 4 screws, there are several plastic clip/tabs around the permitter that take some work to carefully undo.
If you have a thin metal pry tool / spudger, it will come in handy!</p>
<p>Overall, the physical construction is solid enough and - pleasantly - serviceable.</p>
<p><figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        I&#39;m not loving the sloppy wiring connecting the USB power supply to the mains rails.
        
            
        
        </p> 
    </figcaption>
    
</figure>

</p>
<p>Like the USB power supply, the WiFi module is also separate from the main PCB.</p>
<p><figure >

    
        
    

    

    <figcaption>
        
        <p>
        You know what&#39;s cheaper than pin headers? PCB fingers in slots.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>

</p>
<p>Bad news: this module is NOT an ESP powered device.</p>
<p>Good news: there a Tasmota-like firmware for it: <a href="https://github.com/openshwprojects/OpenBK7231T_App" target="_blank" rel="noopener noreffer">OpenBK7231T</a>!</p>
<p>I&rsquo;ll go ahead and flash the OpenBK firmware and have a go to at least give it a try.</p>
<p>The relay switching electronics look reasonable enough:</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>The relays themselves are nothing special to write home about:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Note the links. I&#39;d bet that it&#39;s simpler to scale a design by copy/pasting a self-contained footprint and adjust the number of links on the BOM as needed.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>There&rsquo;s nothing remarkable about the USB Power supply; standard switch mode power supply topology.
The power conversion is done by the chip under the metal heat sink; I didn&rsquo;t bother to get an ID on it as the ports don&rsquo;t support any quick charge or power delivery protocols.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Before putting the strip back together, I secured the USB power supply wires with a bit of electrical tape to lessen the probability of a short due to insulation wearing off.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<h3 id="flashing-openbk">Flashing OpenBK</h3>
<p>I don&rsquo;t have a ton of notes about the flashing process as it was pretty straight forward.
Two small things to note:</p>
<ul>
<li>The <a href="https://github.com/OpenBekenIOT/hid_download_py" target="_blank" rel="noopener noreffer"><code>hid_download_py/uartprogram</code></a> tool needs a <a href="https://github.com/OpenBekenIOT/hid_download_py/pull/13/files" target="_blank" rel="noopener noreffer">requirements.txt</a>.</li>
<li>You can get away with only 4 wires (power, gnd, rx, tx) to program the chip but you must move very fast! It took me more than a few attempts to get the tool to connect to the bootloader on the chip; you have a very limited window for the tool to connect to the chip. I had to run connect power to the chip within about 200ms of starting the <code>uartprogram</code>. If i waited much longer, I would get <code>Cannot get bus.</code></li>
</ul>
<p>Eventually I was able to program the chip:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">‚ùØ python3 uartprogram ../OpenBK7231T_UA_1.15.308.bin -d /dev/ttyUSB0 -w
</span></span><span class="line"><span class="cl">UartDownloader....
</span></span><span class="line"><span class="cl">programm....
</span></span><span class="line"><span class="cl">Cannot get bus. : <span class="p">|</span>                                                  <span class="p">|</span><span class="o">[</span>    ?k/s<span class="o">]</span>
</span></span><span class="line"><span class="cl">‚ùØ python3 uartprogram ../OpenBK7231T_UA_1.15.308.bin -d /dev/ttyUSB0 -w
</span></span><span class="line"><span class="cl">UartDownloader....
</span></span><span class="line"><span class="cl">programm....
</span></span><span class="line"><span class="cl">Gotten Bus...   : <span class="p">|</span>                                                  <span class="p">|</span><span class="o">[</span>    ?k/s<span class="o">]</span>caution: ignoring unexpected reply in SetBaudRate
</span></span><span class="line"><span class="cl">Write Successful: <span class="p">|</span><span class="c1">##################################################|[ 13.2k/s]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>The <code>caution: ignoring unexpected reply</code> came as soon as I connected the power to the programmer.</p>
<p>After figuring out the <a href="#bn-gpio-notes" rel="">GPIO assignments</a>, I did manage to get the Home Assistant / MQTT auto discovery working but - like with Tasmota - wasn&rsquo;t impressed with the lack of customization in the mqtt payloads.
I <strong>highly value</strong> having the correct device/entity class, icon, name &hellip; etc all populating in home assistant automatically; ESPHome lets me do this.</p>
<p>I&rsquo;ll keep an eye on the project and may find another use for this power strip in the future.
If ESPHome ever adds support for the <code>BK7231T</code> chips then this is <em>perfect</em>.</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Tip<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>While drafting this post, I <a href="https://old.reddit.com/r/esp8266/comments/qfg3yc/replaced_tuya_plug_controller_with_esp8266/" target="_blank" rel="noopener noreffer">came across</a> an ESP based drop in replacement for the <code>WB2S</code> module: the <a href="https://www.lcsc.com/product-detail/WiFi-Modules_Wireless-tag-WT-01N_C477823.html" target="_blank" rel="noopener noreffer"><code>WT-01N</code></a>.
Had I known, I would have just done the module swap, flashed ESPHome and stopped there.</p>
<p>While looking for the <code>WT-01N</code>, on Ali Express, I found that there&rsquo;s already a small supply of <a href="https://www.aliexpress.com/w/wholesale--ESP%2525252d02S.html?catId=0&amp;initiative_id=SB_20230114112241&amp;SearchText=%2BESP-02S&amp;spm=a2g0o.home.1000002.0&amp;dida=y" target="_blank" rel="noopener noreffer"><code>ESP-02S</code> modules that should be drop in replacements</a>!</p>
<p>Next time!</p>
</div>
        </div>
    </div>
<h4 id="wt-01n-swap">WT-01N swap</h4>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>Note<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">On a rainy afternoon in late 2023.03, I got around to doing the module swap.
Below you&rsquo;ll find the appropriate Tasmota configuration for GPIO pins.</div>
        </div>
    </div>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        And here&#39;s the Tasmota configuration for the BN-Link.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h3 id="bn-gpio-notes">BN GPIO notes</h3>
<p>The project needs some basic &ldquo;here&rsquo;s how to figure out which GPIOs do what&rdquo; docs similar to <a href="https://Tasmota.github.io/docs/Configuration-Procedure-for-New-Devices/#step-1" target="_blank" rel="noopener noreffer">these</a> but I eventually figured out the following GPIO assignments.</p>
<table>
<thead>
<tr>
<th>PIN</th>
<th>Label</th>
<th>Purpose</th>
<th>Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td>6</td>
<td>PWM0</td>
<td><code>Rel</code> 1</td>
<td>Outlet closest to the power cord.</td>
</tr>
<tr>
<td>7</td>
<td>PWM1</td>
<td>NC</td>
<td>This is not connected to the main PCB.</td>
</tr>
<tr>
<td>8</td>
<td>PWM2</td>
<td><code>Rel</code> 4</td>
<td>Outlet closest to the USB.</td>
</tr>
<tr>
<td>10</td>
<td>RXD1</td>
<td><code>Btn</code></td>
<td>This is the user button.</td>
</tr>
<tr>
<td>11</td>
<td>TXD1</td>
<td><code>WiFiLED_n</code></td>
<td>WiFi status LED.</td>
</tr>
<tr>
<td>23</td>
<td>ADC3</td>
<td>NC</td>
<td>This is not connected to the main PCB.</td>
</tr>
<tr>
<td>24</td>
<td>PWM4</td>
<td><code>Rel</code> 2</td>
<td>Second outlet from power cord.</td>
</tr>
<tr>
<td>26</td>
<td>PWM5</td>
<td><code>Rel</code> 3</td>
<td>Third outlet from power cord.</td>
</tr>
</tbody>
</table>
<h2 id="powsav">POWSAV</h2>
<p>Happy that I was able to get open firmware on the first but disappointed with the lack of customization, I moved onto the second candidate.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Marketing photo for the POWSAV power strip
        
            
        
        </p> 
    </figcaption>
    
</figure>


<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>Note<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>At one point in time, this <em>exact same device</em> was sold under the <code>ahrise</code> branding and was <a href="https://templates.blakadder.com/ahrise_AHR-083.html" target="_blank" rel="noopener noreffer">Tasmota compatible</a>.</p>
<p>The model number is the same, the templates repo picture is identical, the GPIO pinout is identical&hellip; but the linked Amazon listing is no longer available.
The PCB silk screen also include the old <code>AHR</code> markings so I&rsquo;m guessing that this was just a re-brand with the new <code>POWSAV</code> branding after switching to TuYa?</p>
</div>
        </div>
    </div>
<p>To open this one, you&rsquo;ll need a 2.2mm triangle bit.
There are 6 screws. four hidden under the anti-slip pads.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Why are the screw mounting slots not centered :/.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>The USB, WiFI and mains switching are all on a single PCB but the main power cut off and protection features are all on a separate PCB.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Nothing of concern to see on the bottom, everything looks pretty boring... which is good when it comes to mains handling!
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        About what you&#39;d expect for a PCB layout. Plenty of distance between the HV and LV sides!
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>It&rsquo;s nice to see that the surge suppression circuitry is on it&rsquo;s own PCB. Repairs there should be easier to pull off - in theory.</p>
<p>Here&rsquo;s a few more shots of the primary components/assemblies:</p>
<p><figure >

    
        
    

    

    <figcaption>
        
        <p>
        Note the silk screen: this protection PCB is common to the AHR-053 model as well.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        WB3S is a TuYa branded module that is pin compatible with the ubiquitous ESP-8266 modules.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Note the black insulating material separating the USB ports from the mains side of things.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Relatively painless extraction, only partially lifted the pad in the bottom left.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Not even 5 min later, the TuYa modules has been replaced with one running a firmware powered by ESPHome.
        
            
        
        </p> 
    </figcaption>
    
</figure>

</p>
<h3 id="powsav-gpio-notes">POWSAV GPIO notes</h3>
<p>Thanks to <a href="https://Tasmota.github.io/docs/Configuration-Procedure-for-New-Devices/#step-1" target="_blank" rel="noopener noreffer">excellent</a> Tasmota docs, it was pretty easy to figure out the mappings.</p>
<p>For reference:</p>
<table>
<thead>
<tr>
<th>PIN</th>
<th>Type</th>
<th>Number</th>
</tr>
</thead>
<tbody>
<tr>
<td>GPIO2</td>
<td><code>Led_i</code></td>
<td>1</td>
</tr>
<tr>
<td>GPIO5</td>
<td><code>Button_n</code></td>
<td>1</td>
</tr>
<tr>
<td>GPIO 12</td>
<td><code>Relay</code></td>
<td>3</td>
</tr>
<tr>
<td>GPIO 13</td>
<td><code>Relay</code></td>
<td>4</td>
</tr>
<tr>
<td>GPIO 14</td>
<td><code>Relay</code></td>
<td>2</td>
</tr>
<tr>
<td>GPIO 15</td>
<td><code>Relay</code></td>
<td>1</td>
</tr>
</tbody>
</table>
<p>And the corresponding template:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span><span class="nt">&#34;NAME&#34;</span><span class="p">:</span><span class="s2">&#34;POWSAV_AHR-083&#34;</span><span class="p">,</span><span class="nt">&#34;GPIO&#34;</span><span class="p">:[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">320</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">64</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">226</span><span class="p">,</span><span class="mi">227</span><span class="p">,</span><span class="mi">225</span><span class="p">,</span><span class="mi">224</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span><span class="nt">&#34;FLAG&#34;</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="nt">&#34;BASE&#34;</span><span class="p">:</span><span class="mi">18</span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="esphome">Esphome</h3>
<p>And here&rsquo;s a super basic ESPHome configuration using the mappings from above.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">substitutions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">friendly_name_short</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Power Strip&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">esphome</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;power-strip&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">esp8266</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">board</span><span class="p">:</span><span class="w"> </span><span class="l">esp01_1m</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Disable writing the switch mode / restore_from_flash</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">restore_from_flash</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">status_led</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">pin</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO02</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">inverted</span><span class="p">:</span><span class="w"> </span><span class="kc">True</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">binary_sensor</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># I don&#39;t know what the stock behavior was. For now, only basic control</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;${friendly_name_short} Button&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">gpio</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">internal</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO05</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">INPUT_PULLUP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">inverted</span><span class="p">:</span><span class="w"> </span><span class="kc">False</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Press is momentary quick</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">on_press</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">then</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">switch.toggle</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">sw_relay1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Not doing anything fancy so we can go with basic GPIO switches</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># See: https://esphome.io/components/switch/gpio.html</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">switch</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Outlet 1&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">sw_relay1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">gpio</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO15</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:numeric-1&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Don&#39;t want to wear down flash storing state, easiest to just not bother remembering</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_mode</span><span class="p">:</span><span class="w"> </span><span class="l">ALWAYS_OFF</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># See: https://developers.home-assistant.io/docs/core/entity/switch/#available-device-classes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">device_class</span><span class="p">:</span><span class="w"> </span><span class="l">OUTLET</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Outlet 2&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">sw_relay2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">gpio</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO14</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:numeric-2&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_mode</span><span class="p">:</span><span class="w"> </span><span class="l">ALWAYS_OFF</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">device_class</span><span class="p">:</span><span class="w"> </span><span class="l">OUTLET</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Outlet 3&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">sw_relay3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">gpio</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO12</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:numeric-3&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_mode</span><span class="p">:</span><span class="w"> </span><span class="l">ALWAYS_OFF</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">device_class</span><span class="p">:</span><span class="w"> </span><span class="l">OUTLET</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Outlet 4&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">sw_relay4</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">platform</span><span class="p">:</span><span class="w"> </span><span class="l">gpio</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pin</span><span class="p">:</span><span class="w"> </span><span class="l">GPIO13</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;mdi:numeric-4&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restore_mode</span><span class="p">:</span><span class="w"> </span><span class="l">ALWAYS_OFF</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">device_class</span><span class="p">:</span><span class="w"> </span><span class="l">OUTLET</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>Quick look inside two Ali Express mmWave presence detection sensors</title><link>https://karlquinsland.com/two-mmwave-sensors/</link><pubDate>Tue, 01 Nov 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/two-mmwave-sensors/</guid><description><![CDATA[<p>Millimeter Wave technology has recently hit &ldquo;mass consumer product adoption&rdquo; price points.
A casual search for &ldquo;human presence sensor&rdquo; on Ali Express will turn up a seemingly endless number of sub $40 devices that can detect movement far more accurately than any old PIR sensor.</p>
<p>Each listing is fairly generic; there&rsquo;s no explicit manufacturer details but they all use the same marketing images:</p>
<p><figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>

</p>
<p>As the photos below will show, neither device is super well marked with a model number so I&rsquo;ll just refer to each by either the color of the enclosure or by the radar sensor inside.</p>
<p>Before getting into the specific modules, a brief look at the packaging for both.</p>
<h2 id="packaging">Packaging</h2>
<p>The packaging isn&rsquo;t anything special but I am including pictures here in the off chance that some of the Mandarin markings is useful for somebody.</p>
<p><figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>

</p>
<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>Micro USB in 2022?!<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Both devices featured here have <em>micro</em> USB leads.
It&rsquo;s 2022 and we&rsquo;re still using MICRO USB for power?
I know that USB-C connectors are slightly more expensive but it just seems lazy and dated to put a micro USB port on any new design in 2022!</div>
        </div>
    </div>
<div class="details admonition question open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-question-circle fa-fw"></i>uart?<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">I did probe both of the 4 pin connectors on the PCB but didn&rsquo;t see any signs of life.
If those headers are for a UART, the MCU isn&rsquo;t responding to any inputs nor is it putting anything out over it :(.</div>
        </div>
    </div>
<!-- markdownlint-disable-file MD002 -->
<h2 id="zy-m100-s"><code>ZY-M100-S</code></h2>
<p>AKA &ldquo;the white one&rdquo;. Box content is bare-bones; the USB lead is comically short for almost any &ldquo;mid height on the wall&rdquo; or ceiling installs so i&rsquo;m not really sure what the point was.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>I&rsquo;m not sure why they went with 3 screws here instead of 4. If you&rsquo;re going to omit <em>a</em> screw for cost-cutting reasons, why not just use clips or a single screw in the middle?</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        No, it&#39;s not the camera or the lighting, the text really is that blurry in real life.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>The interior is more or less as expected; two highly integrated modules with a small MCU gluing them together.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>There is some evidence that the Zigbee version of the white sensor supports ambient brightness.
Based on the two small holes in the enclosure and the PCB markings, I suspect that <code>d2</code> is being used as a light sensor:
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>

</p>
<p>Nothing of interest on the bottom of the PCB:
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>

</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Close up of the sensor MCU
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h3 id="unique-markings">Unique Markings</h3>
<ul>
<li>PCB: <code>ZY-M100</code> and <code>V4.20</code></li>
<li>TuYa radio: <a href="https://developer.tuya.com/en/docs/iot/wbr3-module-datasheet?id=K9dujs2k5nriy" target="_blank" rel="noopener noreffer"><code>WBR3</code></a></li>
<li>TuYa mcu: <a href="https://www.gigadevice.com/products/microcontrollers/gd32/arm-cortex-m23/value-line/gd32e230-series/" target="_blank" rel="noopener noreffer"><code>GD32E230</code></a></li>
<li>Radar sensor: <code>JYSJ_5807_A01</code> with an IC marked <code>SJ 501</code>. <del>No results on this one. Please do <a href="/contact/" rel="">get in touch</a> if you do know anything about it. I&rsquo;d love to re-use the sensor in something else!</del></li>
</ul>
<div class="details admonition update open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>We have an ID!<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>Thanks to the prolific <a href="https://blakadder.com/zy-m100/" target="_blank" rel="noopener noreffer">blakadder.com for bringing it to my attention</a> and <a href="https://community.home-assistant.io/u/crlogic" target="_blank" rel="noopener noreffer">@crlogic</a> from the Home Assistant community forums <a href="https://community.home-assistant.io/t/mmwave-wars-one-sensor-module-to-rule-them-all/453260/73" target="_blank" rel="noopener noreffer">for identifying the module <em>and</em> linking to a datasheet</a>!</p>
<p>The module is <a href="http://docs.leapmmw.com/%E4%BC%A0%E6%84%9F%E5%99%A8%E4%BA%A7%E5%93%81/%E6%A8%A1%E5%9D%97/module.html" target="_blank" rel="noopener noreffer"><code>Leapmmw 5.8GHz Motion Detection: MD5G20</code></a></p>
</div>
        </div>
    </div>
<h2 id="the-micradar-rd24d">The <code>MicRadar RD24D</code></h2>
<p>AKA &ldquo;the black one&rdquo;.</p>
<p>Like the M100, there&rsquo;s not a ton in the box.</p>
<p>The rear enclosure has a simple key-hole slot for mounting to a wall or ceiling and the USB power lead is considerably longer than the M100. Somebody did consider that a celling-mounted device might need a long power lead&hellip;</p>
<p><figure >

    
        
    

    

    <figcaption>
        
        <p>
        Yes, that is a neo-pixel LEDin the center of the opaque plastic panel.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>

</p>
<p>Same story here: WiFi module and radar sensor both talk to a MCU over UART.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Nothing remarkable on the bottom of the PCB:
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        They only soldered in one half of the pins connecting the radar sensor to the main PCB. I wonder how much time/money that saved...
        
            
        
        </p> 
    </figcaption>
    
</figure>

</p>
<p>Here&rsquo;s a close up of the business end of the sensor. This one is considerably more sophisticated and complex relative to the white one.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>And a close up of the coordinating MCU</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<!-- markdownlint-disable-file MD024 -->
<h3 id="unique-markings-1">Unique Markings</h3>
<ul>
<li>PCB: <code>V1.01</code></li>
<li>TuYa radio: <a href="https://developer.tuya.com/en/docs/iot/cb3s?id=Kai94mec0s076" target="_blank" rel="noopener noreffer"><code>CB3S</code></a></li>
<li>TuYa mcu: <a href="https://www.stcmicro.com/stc/stc8g1k08.html" target="_blank" rel="noopener noreffer">STC 8G1K17</a></li>
<li>Radar sensor: <code>MicRadar R24D</code>. I can&rsquo;t find a datasheet for the specific module, but it does seem to be part of <a href="https://www.iflabel.com/product/28.html" target="_blank" rel="noopener noreffer">this product family</a>.
<ul>
<li>IC1: <code>MicRadar / T15BT / DAT2230</code></li>
<li>IC2: This above picture isn&rsquo;t the best but the chip is marked with <code>S3KM11L / N46Y80D1 / 2123H</code>. The <a href="https://www.ic37.com/news/2022-3_293564/" target="_blank" rel="noopener noreffer"><em>only</em> google result</a> does not really indicate <em>who</em> makes the chip.</li>
</ul>
</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>Neither are going to be quick/easy to convert or otherwise get working with the likes of ESPHome or Tasmota:</p>
<ul>
<li>Neither wifi module is an espressif module. At least some re-flow work would be required to replace the modules with an Espressif module.</li>
<li>There&rsquo;s a MCU sitting between the WiFi module and the actual sensor. Reverse engineering how the TuYa radio talks to the MCU and how the MCU talks to the radar module just isn&rsquo;t worth the time!</li>
</ul>
<p>The sensors cost about as much as the bare radar modules themselves so - if you&rsquo;re willing to spend the time to desolder the radar modules - you get an enclosure for &ldquo;free&rdquo;.</p>
]]></description></item><item><title>Quick look inside the OMRON Evolv BP7000 Blood Pressure cuff</title><link>https://karlquinsland.com/omron-bp7000-evolv-teardown/</link><pubDate>Sat, 14 May 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/omron-bp7000-evolv-teardown/</guid><description><![CDATA[<p>A friend recently asked for my help with some reverse engineering.
They wanted to know how difficult it would be to re-use some components from a lot of refurbished blood pressure cuffs they had recently acquired.</p>
<p>Sounds easy, right?
At a high level, there&rsquo;s going to be:</p>
<ul>
<li>a pump and a pressure sensor and a valve</li>
<li>a micro controller to run the show</li>
<li>a way to communicate the readings back to the user</li>
</ul>
<p>In the interest of expediting things, I asked for the FCC IDs from the devices so I could have a look inside&hellip; and was surprized to find out that there was no FCC listing for this particular model from the lot.</p>
<p>üòï</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Here&#39;s what it looks like on the outside
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>So with that out of the way, here&rsquo;s what the <code>Omron BP7000</code> looks like on the inside.</p>
<h1 id="teardown">Teardown</h1>
<p>There are a total of 7 philips screws holding the unit together. Two of the six are much smaller so two different sized bits might be a good idea.</p>
<p>After removing all the screws and carefully prying back the plastic clips, the front panel comes off of the body giving us the first look at the PCB stackup and mechanical internals.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>The OLED screen is not held in place with anything so be exceedingly careful when opening!</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Here&rsquo;s a closeup of the &lsquo;front&rsquo; of the main PCB.
There&rsquo;s a ton more passives than I thought there would be but a single large controller next to a pressure sensor is about what I figured.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Details on the ICs are <a href="#pcb-markings" rel="">below</a>.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>I am not quite sure what this little IC is for. Calibration or firmware?</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>The BTLE module is connected through a 8 wire FFC.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Several of the square pads are accessible from the exterior before the pressure cuff is attached. Almost certainly for programming at the factory.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>With the main PCB removed, you can see the actual mechanical components that build up and release the air pressure.
The two blue wires are for the solenoid that vents air pressure out of the system.
The port to the right and just above the BTLE module is where air pressure is measured.
The white box attached tot the motor is the air pump.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<h2 id="btle-module">BTLE module</h2>
<p>For some additional photos of the module w/o a shield, check the amazing <a href="https://fccid.io/Q6ZHHXMD05T/Internal-Photos/Short-Term-Confidential-Internal-Photo-3042585" target="_blank" rel="noopener noreffer">fccid.io page</a>.</p>
<p>This module appears to be used in <em>several</em> similar blood pressure monitors.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<h2 id="pcb-markings">PCB Markings</h2>
<p>AKA SEO optimization üòâ</p>
<p>Main PCB is marked:</p>
<blockquote>
<p>HEM-7600T
MEIKO
5662769-8A
20M
MDK332V-0W</p>
</blockquote>
<p>And on the rear:</p>
<blockquote>
<p>F02Z1B
F15Z1B</p>
</blockquote>
<p>The main CPU is - apparently - from Toshiba and marked with:</p>
<blockquote>
<p>2127 HAL
T5DE1FG
369440</p>
</blockquote>
<p>I can&rsquo;t find anything specific. The only result in google is <a href="https://www.fomalhaut.co.jp/0000-List_Schedule_Master.xls" target="_blank" rel="noopener noreffer">this spreadsheet</a>. If you look closely, you&rsquo;ll find the string <code>T5DE1FG (TOSHIBA)</code> in column <code>L</code> on rows <code>1254</code> and <code>1255</code>.</p>
<p>The pressure sensor is labeled:</p>
<ul>
<li><a href="https://www.mouser.com/c/i/sensors/pressure-sensors/?q=PP-02" target="_blank" rel="noopener noreffer"><code>PP02 L8HW</code></a> which appears to be an Omron made sensor.</li>
</ul>
<p>The small 8 pin IC adjacent to the main processor is labeled:</p>
<blockquote>
<p>4G64
12953</p>
</blockquote>
<p>BTLE PCB is marked:</p>
<ul>
<li><code>MODEL: HHX-MD05T</code></li>
<li><a href="https://fccid.io/Q6ZHHXMD05T" target="_blank" rel="noopener noreffer"><code>FCC ID: Q6ZHHXMD05T</code></a></li>
<li><code>IC: 10623A-HHXMD05T</code></li>
<li><code>Anatel 13257-20-10304</code></li>
<li><code>007-AE0102</code></li>
<li><code>9545448-2A</code></li>
</ul>
]]></description></item><item><title>Quick look inside Venstar T7850 - One of the only 'no-cloud' WiFi Thermostats that plays nice with Home Assistant</title><link>https://karlquinsland.com/venstar-t7850-teardown-review/</link><pubDate>Sat, 23 Apr 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/venstar-t7850-teardown-review/</guid><description><![CDATA[<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>Info<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">As of 2022-05-11, there is an update on my experience with the thermostat <a href="#an-update-on-wifi-connectivity" rel="">below</a>!</div>
        </div>
    </div>
<p>This is another one of those posts from my never ending quest to integrate Home Assistant with All The Things!</p>
<p>The thermostat that was installed when I moved in was an early Nest thermostat. These thermostats are - for the most part - well reviewed and liked. I had no complaints&hellip; except one.</p>
<p>Google only permits programmatic interaction with Nest devices through their <a href="https://developers.google.com/nest/device-access/api" target="_blank" rel="noopener noreffer">Smart Device Management API</a>.
This API is essentially cloud hosted MQTT and requires a small fee to access.
There is no way to control a supported Nest device without an Internet connection&hellip; even if the Home Assistant server and the Nest device are on the same subnet! üëé</p>
<p>This policy makes it needlessly complicated to integrate the thermostat with Home Assistant and that cripples my climate control automations beyond a tolerable level.</p>
<p>With summer approaching, I started looking for a thermostat that would play nice with Home Assistant.
My criteria:</p>
<ul>
<li>Work with existing HVAC system and wiring.</li>
<li>Play nice with Home Assistant, preferably with a <em><strong>local</strong></em> API.</li>
<li>Cost no more than the Nest thermostat.</li>
<li>Use TCP/IP over WiFi instead of Zigbee or Zwave.</li>
</ul>
<p>As it turns out, I am not the only one on a similar hunt:</p>
<ul>
<li>
<p><a href="https://community.home-assistant.io/t/which-of-these-thermostats-have-the-best-experience-with-ha/207520" target="_blank" rel="noopener noreffer">Which of these thermostats have the best experience with HA?</a></p>
</li>
<li>
<p><a href="https://community.home-assistant.io/t/smart-thermostat-recommendations-for-2021/359434" target="_blank" rel="noopener noreffer">Smart Thermostat Recommendations for 2021</a></p>
</li>
<li>
<p><a href="https://community.home-assistant.io/t/best-easiest-and-of-course-lowest-cost-smart-thermostat-for-home-assistant/384927" target="_blank" rel="noopener noreffer">Best, easiest and of course lowest cost smart thermostat for Home Assistant</a></p>
</li>
<li>
<p><a href="https://www.reddit.com/r/homeassistant/comments/kzavi9/what_is_the_best_thermostats_to_use_with_home/" target="_blank" rel="noopener noreffer">What is the best thermostats to use with Home Automation</a></p>
</li>
</ul>
<p>The &ldquo;TL;DR:&rdquo; of most of those threads is: <em>&ldquo;Any thermostat with zwave of zigbee will work&rdquo;</em>.</p>
<p>As most people don&rsquo;t particularly care about the network protocol(s) used to link Home Assistant to the thermostat, that&rsquo;s fine advice.</p>
<p>For whatever reason, you have to dig much deeper to find people discussing <strong>WiFi</strong> based thermostats that play nice with Home Assistant w/o an internet connection but there are a few out there. I settled on the Venstar T7850.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<h1 id="initial-impressions">Initial Impressions:</h1>
<p>Below is a super concise review that is based mostly on my initial impressions / install experience.
I have only recently acquired and installed the T7850 so I can&rsquo;t comment on any of the finer points or drawbacks that could only be known after several months experience with the thermostat.</p>
<p>TL;DR: I wish I had more insight into Google&rsquo;s disappointing decision to not implement a local API for the Nest; I&rsquo;ll uninstall the Venstar and put it up on eBay the nanosecond the Nest gets a local API!</p>
<h2 id="an-update-on-wifi-connectivity">An Update on WiFi connectivity</h2>
<p>Less than 48 hours after installing the thermostat, I noticed that Home Assistant was no longer able to control it.
Every entity on the device showed <code>Unavailable</code>. Apparently, the thermostat had fallen off the network and was struggling to get back on.</p>
<p>I went through all the usual troubleshooting steps and was able to confirm a few interesting things:</p>
<ul>
<li>Changing the network name and password didn&rsquo;t help.</li>
<li>I disabled the SSID on my access point and created an identical SSID/network key on an old raspberry pi. The thermostat was <em>usually</em> able to connect to the AP. If I powered down the raspberry pi AP and re-enabled the same network name/key on my AP, the thermostat would not connect. If left on the raspberry pi AP, the thermostat would eventually eventually &ldquo;fall off&rdquo;.</li>
</ul>
<p>I initially suspected that the initial firmware update I didn&rsquo;t consent to may have broken something and started to look for a way to downgrade the firmware to the previous version that <em>did</em> manage to connect to my AP quickly.</p>
<p>No such luck.</p>
<p>While the thermostat does have an A/B partition scheme, I couldn&rsquo;t find any way to force a downgrade or even get older firmware files from the manufacturer.</p>
<p>After a few factory resets and additional troubleshooting, I started to look around&hellip; and apparently this is not a new problem.</p>
<p>Here are two &lsquo;relatively new&rsquo; reddit threads that mention similar connection issues with similar models in the same product family:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Source: /r/homeassistant post:
        <a href="https://www.reddit.com/r/homeassistant/comments/nge04w/all_local_control_thermostat_with_mqtt_and_home/hvxxpwy/?context=3"> 
            ALL Local Control Thermostat with MQTT and Home Assistant - Venstar T7900
        </a> 
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Source: /r/thermostats post:
        <a href="https://www.reddit.com/r/thermostats/comments/og9bae/comment/hgzqdmj/?context=3"> 
            Venstar T7900 - problem with WIFI
        </a> 
        </p> 
    </figcaption>
    
</figure>


<p>And an Amazon question from years ago indicating that this might not be a &rsquo;new&rsquo; issue:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Source: Amazon question: 
        <a href="https://www.amazon.com/ask/questions/Tx2N92LOB3XBR7U"> 
            My venstar phone app says thermostat is offline. How do I reconnect it ?
        </a> 
        </p> 
    </figcaption>
    
</figure>


<p>A Home Assistant community/support form poster seems to have a similar issue and even offers a fix&hellip; which did not work.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Source: Home Assistant community forums: 
        <a href="https://community.home-assistant.io/t/venstar-t7900-trane-air-conditioning-amana-forced-air-furnace/314969"> 
            Venstar T7900 &amp; Trane Air Conditioning / Amana Forced Air Furnace
        </a> 
        </p> 
    </figcaption>
    
</figure>


<p>My access point is also a Unifi AP so of course there are a few threads on the unifi support forums:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Source: Ubiquity community forums: 
        <a href="https://community.ui.com/questions/Trouble-associating-Venstar-Wifi-thermostats-with-one-particular-UAP-AC-PRO/ad597f22-b8ff-4b7c-8e01-1676e92cc318"> 
            Trouble associating Venstar Wifi thermostats with one particular UAP-AC-PRO
        </a> 
        </p> 
    </figcaption>
    
</figure>


<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>Note<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Note: <a href="https://fccid.io/MUH-SKYPORT2/Attestation-Statements/Models-Covered-2531030" target="_blank" rel="noopener noreffer">The FCC documents indicate</a> that Venstar did re-brand the thermostat for <code>First Alert</code> and <code>Bionaire</code>. It is likely that they also did this for <code>Carrier</code> as well judging by <a href="https://images.google.com/search?q=carrier&#43;infinity&#43;touch&#43;control&amp;tbm=isch" target="_blank" rel="noopener noreffer">pictures</a> of a <code>Carrier Infinity Touch Control</code> thermostat.</div>
        </div>
    </div>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Source: Ubiquity community forums: 
        <a href="https://community.ui.com/questions/Cant-connect-to-Carrier-Infinity-Thermostat/e95531ef-ac18-452a-be4d-7ac0157258fe"> 
            Cant connect to Carrier Infinity Thermostat
        </a> 
        </p> 
    </figcaption>
    
</figure>


<p>The user name seems familiar; probably the same user from one of the above reddit threads:
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Source: Ubiquity community forums: 
        <a href="https://community.ui.com/questions/Venstar-T7900-Thermostat-Wont-Connect-to-WiFi/48eff0a3-5b27-4cdd-9c2f-80bcdb5e0bc3"> 
            Venstar T7900 Thermostat Won&#39;t Connect to WiFi
        </a> 
        </p> 
    </figcaption>
    
</figure>

</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Source: Ubiquity community forums: 
        <a href="https://community.ui.com/questions/Venstar-ColorTouch-Thermostat-Unable-to-Connect-to-AC-LR/77e08c30-246d-4a39-923c-c912c259fca9"> 
            Venstar ColorTouch Thermostat Unable to Connect to AC-LR
        </a> 
        </p> 
    </figcaption>
    
</figure>


<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>TL;DR:<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>Ubiquity&rsquo;s Unifi line of wireless access points has a pretty solid reputation for a reason; by and large they just work. I have installed dozens of them over the years and have supported installs with <em>thousands</em> of them and had far fewer issues with those customers/sites than with your typical &lsquo;soho&rsquo; routers and other consumer-grade access points.</p>
<p>As of <strong>right now</strong>, I have a little more than a hundred wireless devices hanging off of the same AP that the thermostat failed to reliably connect to. Over the past several years, I have acquired many more devices and - with the exception of <strong>one other device</strong> - I have never had issues connecting anything to my wireless network.</p>
<p>Even if only some users experience issues with Venstar thermostats connecting to WiFi, I have to wonder why the issue exists at all. It&rsquo;s 2022 and there&rsquo;s no excuse for basic WiFi network compatibility issues like the kind that were more common in the bad old days of early WiFi circa <em>2005</em>. Somehow, the hundred+ other devices got their WiFi right&hellip; what is Venstar missing?</p>
<p>While I didn&rsquo;t want to introduce <em>yet another</em> wireless&rsquo;s networking standard to my home, I am <em>considerably</em> happier with the Honeywell TH6320ZW2003 that has replaced the T7850.</p>
</div>
        </div>
    </div>
<h2 id="the-good">The Good</h2>
<ul>
<li>It has <em>optional</em> cloud connectivity! It&rsquo;s trivial to turn this off and - as far as I can tell - it is <strong>mostly</strong> disabled. More on that <a href="#network" rel="">below</a>.</li>
<li>API is <a href="https://developer.venstar.com/documentation/" target="_blank" rel="noopener noreffer">documented</a>!</li>
<li>API accessible over HTTP or HTTPS and can be put behind <a href="https://en.wikipedia.org/wiki/Basic_access_authentication" target="_blank" rel="noopener noreffer">BasicAuth</a>! üëè</li>
<li>Thermostat has <em>lots</em> of tweaks and options meant for &lsquo;power users&rsquo;. These settings ship with reasonably sane default values. I suspect that most of these options are included in the &ldquo;residential&rdquo; devices only because they&rsquo;re already baked into the firmware for &ldquo;commercial&rdquo; customers that legitimately do need lots of knobs to adjust.</li>
<li>It&rsquo;s a reasonably good looking LCD screen; viewing angles are decent and the screen is plenty readable in direct sunlight when the brightness is turned all the way up.</li>
<li>The piezoelectric beeper can be disabled in software! üîá</li>
</ul>
<h2 id="the-bad">The Bad</h2>
<ul>
<li>The API is <a href="#api-limitations" rel="">pretty limited</a>.</li>
<li>The screen has an integrated <em>resistive</em> touch panel. This was a poor choice for for a product design in 2014/2015 and is inexcusable for in 2022! üëé</li>
<li>There is no way to use your own TLS certificate. You have to use the certificate generated by the device. üôÅ</li>
<li>There is no way to disable automatic firmware updates or view release notes on device. If there&rsquo;s an update found, the thermostat will download it and restart&hellip; even if the user is <em>actively using the device</em>. üò° Even <a href="https://support.microsoft.com/en-us/windows/defer-feature-updates-in-windows-10-770c0ea8-eee5-ae25-f695-8e33f541e04d" target="_blank" rel="noopener noreffer">windows (finally) let you push the update to <em>after</em> you&rsquo;re done using the device</a>!</li>
<li>There is no ambient brightness sensor or presence detection sensor so the screen is always on at one brightness level.</li>
<li>The device has WiFI and communicates with the mothership using TLS1.2&hellip; but somehow it does not have <a href="https://en.wikipedia.org/wiki/Network_Time_Protocol" target="_blank" rel="noopener noreffer">NTP</a> support! Yep! This is literally the <strong>only</strong> internet enabled <em>thing</em> that I own that <strong>still requires me to manually set the date/time</strong> üò°. What a glaring oversight!</li>
</ul>
<h3 id="api-limitations">API limitations</h3>
<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>Warning<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>The only <em>documented</em> portions of the API <a href="https://developer.venstar.com/documentation/#query" target="_blank" rel="noopener noreffer">cover interrogating the device for state about sensors and mode</a>.
Keep these limitations in mind when considering exactly what you want to be able to control via the API.</p>
<p>E.G.: It was <em>very</em> disappointing to find out that I can&rsquo;t adjust the screen on/off/brightness state via the API! So much for automatically turning the screen at night and waking it only when nearby motion was detected!</p>
</div>
        </div>
    </div>
<p>There is no <em>documented</em> way to control most of the other device settings that can be manipulated through the screen.
Things you can do via the screen but not via the (documented) API:</p>
<ul>
<li>Adjust the date / time</li>
<li>Adjust the screen brightness</li>
<li>Adjust any program/schedule settings or adjust vacation mode settings</li>
<li>Adjust setpoint limits (e.g.: don&rsquo;t let the user try to cool below 25¬∞C or heat above 35¬∞C)</li>
<li>Set/Disable Screen lock (requires a PIN code to access controls)</li>
<li>Set &lsquo;screensaver&rsquo; functionality. You can&rsquo;t toggle this via the API nor can you set the &ldquo;idle timeout&rdquo; setting or upload custom photos. You have to resort to a desktop / electron app to do so!</li>
</ul>
<p>I have not bothered with the &ldquo;skyport&rdquo; remote control functionality that Venstar offers but their marketing literature implies that some of the above points <em>can</em> be manipulated via their remote service. This leads me to believe that there is more to the API that what is documented publicly.</p>
<p>Given that the thermostat seems to have it&rsquo;s own CA created by Venstar engineering, I would bet that simple TLS proxy will not be enough to discover any undocumented API endpoints in the unit that could allow for more control.</p>
<p>If anybody does know of a local API endpoint that allows for controlling the screen brightness&hellip;<a href="https://karlquinsland.com/contact/" rel="">please do get in touch</a>!</p>
<h1 id="teardown">Teardown</h1>
<p>It&rsquo;s not a particularly complicated device: everything is on one side of a multi-layer PCB.
A ton of electronics for directly interfacing with thermostat wires and a few ICs for all the fun stuff!</p>
<p>The photos are mine, taken right before installing the unit.
There are more / similar photos at the <a href="https://fccid.io/MUH-SKYPORT2/Internal-Photos/Internal-Photos-Revised-2531033" target="_blank" rel="noopener noreffer">FCC filing</a> if you&rsquo;re curious.</p>
<p>I am including mine for some additional detail and as a &lsquo;mirror&rsquo; of the FCC photos. Shoutout to the <em>amazing</em> <code>fccid.io</code> ‚ù§Ô∏è!</p>
<p>The main PCB is readily accessed - just remove the rear panel / wall mount bracket.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        I don&#39;t see any (mechanical) relays
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>Lots of passives and misc ICs and a few unpopulated footprints. This is consistent with <a href="https://fccid.io/MUH-SKYPORT2/Attestation-Statements/Models-Covered-2531030" target="_blank" rel="noopener noreffer">some of the documentation on file with the FCC</a>: there is 1 PCB for all 6 products in the family and the only significant difference is the software and the humidity sensor.
If i had to guess, I&rsquo;d be that <code>U13</code> is the humidity sensor.</p>
<p>Only one obvious pin header but the silkscreen <code>JP2</code> implies that there&rsquo;s another one somewhere (<code>JP1</code>).
The pins are suspiciously close to the full sized SD card and don&rsquo;t match the pinout for an obvious UART but 6 pins could be JTAG.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>There&rsquo;s nothing remarkable on the other side; just a connection for the LCD and a beeper. At least the beeper module is trivial to &ldquo;factory delete&rdquo; if the software option to disable it ever stops working!</p>
<p>The full sized SD card is for users to store photos and firmware upgrades.
Photo parsing is notoriously tricky so there&rsquo;s a decent chance that a malicious photo could be crafted to attack the thermostat. ü§î</p>
<p>All the business logic lives under the big metal shield. I didn&rsquo;t probe the two test points but they certainly look like they could be UART or similar interface to the app processor.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Highly integrated ARM with external flash and ram. Almost a given these days!
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>Here&rsquo;s a partial shot of the LCD panel barcode.
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>

</p>
<p>And a quick bonus picture! I took this just a few moments after the thermostat had been installed and powered up.
I had connected it to the WiFi network just 45 seconds before and was exploring the system settings when the unit locked up for a second and then kicked me to this screen:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        No way to cancel or defer. No explanation of &#39;why&#39;!
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>There was no explanation for the abrupt reboot but after the device came back, the system settings indicated the device was running the latest firmware.</p>
<p><strong>Note:</strong> Look at the date/time! The device <em>obviously</em> has been able to phone home and download the latest firmware file&hellip; but does nothing with the NTP server it asked for (and received!)</p>
<h1 id="other-technical-details">Other technical details</h1>
<h2 id="firmware">Firmware</h2>
<p>The firmware updates can be obtained through the desktop app. They are written out to a SD card with this directory structure:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">‚ùØ tree
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">‚îú‚îÄ‚îÄ FOUND.000
</span></span><span class="line"><span class="cl">‚îÇ¬†¬† ‚îî‚îÄ‚îÄ FILE0000.CHK
</span></span><span class="line"><span class="cl">‚îú‚îÄ‚îÄ System Volume Information
</span></span><span class="line"><span class="cl">‚îÇ¬†¬† ‚îú‚îÄ‚îÄ IndexerVolumeGuid
</span></span><span class="line"><span class="cl">‚îÇ¬†¬† ‚îî‚îÄ‚îÄ WPSettings.dat
</span></span><span class="line"><span class="cl">‚îú‚îÄ‚îÄ VC
</span></span><span class="line"><span class="cl">‚îÇ¬†¬† ‚îî‚îÄ‚îÄ firmware
</span></span><span class="line"><span class="cl">‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ Update.bin
</span></span><span class="line"><span class="cl">‚îú‚îÄ‚îÄ VH
</span></span><span class="line"><span class="cl">‚îÇ¬†¬† ‚îú‚îÄ‚îÄ dealer.bin
</span></span><span class="line"><span class="cl">‚îÇ¬†¬† ‚îú‚îÄ‚îÄ dealerlogo.bin
</span></span><span class="line"><span class="cl">‚îÇ¬†¬† ‚îú‚îÄ‚îÄ dealerlogo - Copy.jpg
</span></span><span class="line"><span class="cl">‚îÇ¬†¬† ‚îú‚îÄ‚îÄ firmware1a
</span></span><span class="line"><span class="cl">‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ update.bin
</span></span><span class="line"><span class="cl">‚îÇ¬†¬† ‚îú‚îÄ‚îÄ gallery
</span></span><span class="line"><span class="cl">‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ 0.bin
</span></span><span class="line"><span class="cl">‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ gallery.bin
</span></span><span class="line"><span class="cl">‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ thumbs
</span></span><span class="line"><span class="cl">‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ 0.bin
</span></span><span class="line"><span class="cl">‚îÇ¬†¬† ‚îú‚îÄ‚îÄ name.bin
</span></span><span class="line"><span class="cl">‚îÇ¬†¬† ‚îú‚îÄ‚îÄ schedule.bin
</span></span><span class="line"><span class="cl">‚îÇ¬†¬† ‚îî‚îÄ‚îÄ settings.bin
</span></span><span class="line"><span class="cl">‚îú‚îÄ‚îÄ VR
</span></span><span class="line"><span class="cl">‚îÇ¬†¬† ‚îî‚îÄ‚îÄ firmware
</span></span><span class="line"><span class="cl">‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ Update.bin
</span></span><span class="line"><span class="cl">‚îî‚îÄ‚îÄ VW
</span></span><span class="line"><span class="cl">    ‚îî‚îÄ‚îÄ firmware1a
</span></span><span class="line"><span class="cl">        ‚îî‚îÄ‚îÄ update.bin
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">12</span> directories, <span class="m">16</span> files
</span></span></code></pre></td></tr></table>
</div>
</div><p>The <code>dealerlogo - Copy.jpg</code> was me testing something related to the &ldquo;user photos&rdquo; function of the desktop app. The <code>gallery/*.bin</code> files are just re-sized jpeg files.
There is a mechanism for backing up / importing settings using <code>bin</code> files which are just <code>json</code> files store in the root directory for the device model; <code>VH</code> in this case. Those files are not pictured above as I discovered the export function after I drafted this section of the post.</p>
<p>I could do a whole <em>series</em> of posts on reverse engineering the firmware but that&rsquo;s going to have to wait for another day / more time. In the interim, here&rsquo;s some of my findings:</p>
<ul>
<li>The user interface is javascript. Yep! The entire interface is a single page web app that seems to be hosted by a binary called <code>maestero2</code>. Not much comes up on google, but <a href="https://github.com/grassroot72/Maestro2" target="_blank" rel="noopener noreffer">this repo</a> does seem like it could be related.
<ul>
<li>I can <em>see</em> in the source code where the javascript controls the LCD backlight&hellip; so there is <strong>absolutely no good reason</strong> why I can&rsquo;t do the same via the &ldquo;local API&rdquo;.</li>
</ul>
</li>
<li>The device appears to use mutual TLS when talking to the remote endpoints. Try to make a request to <code>https://ctupdate.skyport.io/feed</code> and you&rsquo;ll see the server ask you for a certificate :D.
<ul>
<li>I don&rsquo;t know if the certificates are <em>per device</em> or not. The certificates are stored in a separate <code>jffs2</code> partition which is <em>not</em> distributed in the firmware updates (as best I can tell).</li>
<li>There are a few strings that mention code signing certificates but I have not probed the firmware update routines in depth to know how it all works.</li>
</ul>
</li>
<li>It appears that the TTY is disabled and there are no telnet/ssh services started on boot so it&rsquo;s unclear how the <code>root</code> user can be used remotely&hellip; but I did find this in <code>/etc/shadow</code>: <code>root:$1$JEstzl9y$Ed7nAJIsY/0irewnqZoqn1:10933:0:99999:7:::</code>.</li>
</ul>
<h2 id="network">network</h2>
<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>Warning<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Even though the <code>skyport</code> functionality has been switched off, <a href="#dns" rel="">I still see the thermostat phoning home to <code>ctupdate.skyport.io</code> on startup</a>. In addition to the usual &ldquo;write firewall rules preventing WAN access&rdquo;, I would suggest sinkholing the <code>skyport.io</code> domain.</div>
        </div>
    </div>
<p>Like with all new devices, I ran <code>tcpdump</code> while setting it up. Almost all of the traffic was TLS1.2 protected but I did notice a few interesting things from the packet capture.</p>
<p>Immediately after booting / joining the network, the device sends out a DHCP request:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Dynamic Host Configuration Protocol (Discover)
</span></span><span class="line"><span class="cl">    Message type: Boot Request (1)
</span></span><span class="line"><span class="cl">    Hardware type: Ethernet (0x01)
</span></span><span class="line"><span class="cl">    Hardware address length: 6
</span></span><span class="line"><span class="cl">    Hops: 0
</span></span><span class="line"><span class="cl">    Transaction ID: 0x1308ee40
</span></span><span class="line"><span class="cl">    Seconds elapsed: 0
</span></span><span class="line"><span class="cl">    Bootp flags: 0x0000 (Unicast)
</span></span><span class="line"><span class="cl">    Client IP address: 0.0.0.0
</span></span><span class="line"><span class="cl">    Your (client) IP address: 0.0.0.0
</span></span><span class="line"><span class="cl">    Next server IP address: 0.0.0.0
</span></span><span class="line"><span class="cl">    Relay agent IP address: 0.0.0.0
</span></span><span class="line"><span class="cl">    Client MAC address: MurataMa_de:ad:bf (10:98:c3üá©üá™ad:bf)
</span></span><span class="line"><span class="cl">    Client hardware address padding: 00000000000000000000
</span></span><span class="line"><span class="cl">    Server host name not given
</span></span><span class="line"><span class="cl">    Boot file name not given
</span></span><span class="line"><span class="cl">    Magic cookie: DHCP
</span></span><span class="line"><span class="cl">    Option: (53) DHCP Message Type (Discover)
</span></span><span class="line"><span class="cl">        Length: 1
</span></span><span class="line"><span class="cl">        DHCP: Discover (1)
</span></span><span class="line"><span class="cl">    Option: (61) Client identifier
</span></span><span class="line"><span class="cl">        Length: 7
</span></span><span class="line"><span class="cl">        Hardware type: Ethernet (0x01)
</span></span><span class="line"><span class="cl">        Client MAC address: MurataMa_de:ad:bf (10:98:c3üá©üá™ad:bf)
</span></span><span class="line"><span class="cl">    Option: (57) Maximum DHCP Message Size
</span></span><span class="line"><span class="cl">        Length: 2
</span></span><span class="line"><span class="cl">        Maximum DHCP Message Size: 576
</span></span><span class="line"><span class="cl">    Option: (55) Parameter Request List
</span></span><span class="line"><span class="cl">        Length: 7
</span></span><span class="line"><span class="cl">        Parameter Request List Item: (1) Subnet Mask
</span></span><span class="line"><span class="cl">        Parameter Request List Item: (3) Router
</span></span><span class="line"><span class="cl">        Parameter Request List Item: (6) Domain Name Server
</span></span><span class="line"><span class="cl">        Parameter Request List Item: (12) Host Name
</span></span><span class="line"><span class="cl">        Parameter Request List Item: (15) Domain Name
</span></span><span class="line"><span class="cl">        Parameter Request List Item: (28) Broadcast Address
</span></span><span class="line"><span class="cl">        Parameter Request List Item: (42) Network Time Protocol Servers
</span></span><span class="line"><span class="cl">    Option: (60) Vendor class identifier
</span></span><span class="line"><span class="cl">        Length: 12
</span></span><span class="line"><span class="cl">        Vendor class identifier: udhcp 1.29.2
</span></span><span class="line"><span class="cl">    Option: (255) End
</span></span><span class="line"><span class="cl">        Option End: 255
</span></span><span class="line"><span class="cl">    Padding: 0000000000000000000000000000000000000000
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Note:</strong> <code>de:ad:bf </code> is replacing the <em>actual</em> octets of my thermostat MAC :).</p>
<p>Interesting! The DHCP server <em>explicitly asks for a NTP server</em> and then the thermostat &hellip; does not use it!</p>
<p>The <code>udhcp 1.29.2</code> string implies a relatively recent build of - possibly - busybox running the show&hellip;</p>
<p>The next packets after that are basic SSDP and IGMP:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">NOTIFY ALIVE SDDP/1.0
</span></span><span class="line"><span class="cl">From: &#34;123.456.789.012:1902&#34;
</span></span><span class="line"><span class="cl">Host: &#34;10:98:c3üá©üá™ad:bf&#34;
</span></span><span class="line"><span class="cl">Max-Age: 300
</span></span><span class="line"><span class="cl">Type: &#34;venstar:control4_thermostat_proxy:colortouch&#34;
</span></span><span class="line"><span class="cl">Primary-Proxy: &#34;thermostatV2&#34;
</span></span><span class="line"><span class="cl">Proxies: &#34;thermostatV2&#34;
</span></span><span class="line"><span class="cl">Manufacturer: &#34;Venstar&#34;
</span></span><span class="line"><span class="cl">Model: &#34;ColorTouch&#34;
</span></span><span class="line"><span class="cl">Driver: &#34;venstar_ip_colortouch_hvac.c4z&#34;
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Internet Group Management Protocol
</span></span><span class="line"><span class="cl">    [IGMP Version: 3]
</span></span><span class="line"><span class="cl">    Type: Membership Report (0x22)
</span></span><span class="line"><span class="cl">    Reserved: 00
</span></span><span class="line"><span class="cl">    Checksum: 0xea03 [correct]
</span></span><span class="line"><span class="cl">    [Checksum Status: Good]
</span></span><span class="line"><span class="cl">    Reserved: 0000
</span></span><span class="line"><span class="cl">    Num Group Records: 1
</span></span><span class="line"><span class="cl">    Group Record : 239.255.255.250  Change To Exclude Mode
</span></span><span class="line"><span class="cl">        Record Type: Change To Exclude Mode (4)
</span></span><span class="line"><span class="cl">        Aux Data Len: 0
</span></span><span class="line"><span class="cl">        Num Src: 0
</span></span><span class="line"><span class="cl">        Multicast Address: 239.255.255.250
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="dns">DNS</h3>
<p>And <em>just before</em> the TLS traffic, there is a single DNS query:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Queries
</span></span><span class="line"><span class="cl">    ctupdate.skyport.io: type A, class IN
</span></span><span class="line"><span class="cl">        Name: ctupdate.skyport.io
</span></span><span class="line"><span class="cl">        [Name Length: 19]
</span></span><span class="line"><span class="cl">        [Label Count: 3]
</span></span><span class="line"><span class="cl">        Type: A (Host Address) (1)
</span></span><span class="line"><span class="cl">        Class: IN (0x0001)
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="web-server">Web server</h3>
<p>After setting a user/password and selecting the <code>https</code> option for the local API, here&rsquo;s what I see:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">‚ùØ openssl s_client -connect 123.456.789.012:443
</span></span><span class="line"><span class="cl">CONNECTED<span class="o">(</span>00000003<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">depth</span><span class="o">=</span><span class="m">0</span> <span class="nv">C</span> <span class="o">=</span> US, <span class="nv">ST</span> <span class="o">=</span> California, <span class="nv">L</span> <span class="o">=</span> Chatsworth, <span class="nv">O</span> <span class="o">=</span> Venstar Inc., <span class="nv">OU</span> <span class="o">=</span> Engineering, <span class="nv">CN</span> <span class="o">=</span> CT1A_100163664
</span></span><span class="line"><span class="cl">verify error:num<span class="o">=</span>20:unable to get <span class="nb">local</span> issuer certificate
</span></span><span class="line"><span class="cl">verify <span class="k">return</span>:1
</span></span><span class="line"><span class="cl"><span class="nv">depth</span><span class="o">=</span><span class="m">0</span> <span class="nv">C</span> <span class="o">=</span> US, <span class="nv">ST</span> <span class="o">=</span> California, <span class="nv">L</span> <span class="o">=</span> Chatsworth, <span class="nv">O</span> <span class="o">=</span> Venstar Inc., <span class="nv">OU</span> <span class="o">=</span> Engineering, <span class="nv">CN</span> <span class="o">=</span> CT1A_100163664
</span></span><span class="line"><span class="cl">verify error:num<span class="o">=</span>21:unable to verify the first certificate
</span></span><span class="line"><span class="cl">verify <span class="k">return</span>:1
</span></span><span class="line"><span class="cl"><span class="nv">depth</span><span class="o">=</span><span class="m">0</span> <span class="nv">C</span> <span class="o">=</span> US, <span class="nv">ST</span> <span class="o">=</span> California, <span class="nv">L</span> <span class="o">=</span> Chatsworth, <span class="nv">O</span> <span class="o">=</span> Venstar Inc., <span class="nv">OU</span> <span class="o">=</span> Engineering, <span class="nv">CN</span> <span class="o">=</span> CT1A_100163664
</span></span><span class="line"><span class="cl">verify <span class="k">return</span>:1
</span></span><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">Certificate chain
</span></span><span class="line"><span class="cl"> <span class="m">0</span> s:C <span class="o">=</span> US, <span class="nv">ST</span> <span class="o">=</span> California, <span class="nv">L</span> <span class="o">=</span> Chatsworth, <span class="nv">O</span> <span class="o">=</span> Venstar Inc., <span class="nv">OU</span> <span class="o">=</span> Engineering, <span class="nv">CN</span> <span class="o">=</span> CT1A_100163664
</span></span><span class="line"><span class="cl">   i:C <span class="o">=</span> US, <span class="nv">ST</span> <span class="o">=</span> California, <span class="nv">O</span> <span class="o">=</span> Venstar Inc., <span class="nv">OU</span> <span class="o">=</span> Engineering, <span class="nv">CN</span> <span class="o">=</span> Skyport Root CA
</span></span><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">Server certificate
</span></span><span class="line"><span class="cl">-----BEGIN CERTIFICATE-----
</span></span><span class="line"><span class="cl">MIIGAzCCA+ugAwIBAgIJAIMdu2UK2QoqMA0GCSqGSIb3DQEBDQUAMGkxCzAJBgNV
</span></span><span class="line"><span class="cl">BAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRUwEwYDVQQKDAxWZW5zdGFyIElu
</span></span><span class="line"><span class="cl">Yy4xFDASBgNVBAsMC0VuZ2luZWVyaW5nMRgwFgYDVQQDDA9Ta3lwb3J0IFJvb3Qg
</span></span><span class="line"><span class="cl">Q0EwHhcNMTkxMTA4MDUxOTM2WhcNMzcwNTE3MjM1OTU5WjB9MQswCQYDVQQGEwJV
</span></span><span class="line"><span class="cl">UzETMBEGA1UECAwKQ2FsaWZvcm5pYTETMBEGA1UEBwwKQ2hhdHN3b3J0aDEVMBMG
</span></span><span class="line"><span class="cl">A1UECgwMVmVuc3RhciBJbmMuMRQwEgYDVQQLDAtFbmdpbmVlcmluZzEXMBUGA1UE
</span></span><span class="line"><span class="cl">AwwOQ1QxQV8xMDAxNjM2NjQwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoIC
</span></span><span class="line"><span class="cl">AQDIYpgYtd/+KVEwVKTAHjFzp3FZXJx+RFQjUwdCGMOOWqrztokmNF5I/qXbWqA7
</span></span><span class="line"><span class="cl">okUmO7FKUdW3hAKq358tjcPZytEr1RtRQVtc4/fg35IwtNWf1g/UACazkFOgmOLd
</span></span><span class="line"><span class="cl">yQ4AwMWvfgDFLxREGH3WfPCHJS7v1ddO02WZMEpligK8g7iSEsqw1ZD4gD2xIbwf
</span></span><span class="line"><span class="cl">OxgbIdWJyakNbOebVMul5HUoqtVOLawaOefgh65gf4x0gBgMJ95E32cXZxjUB016
</span></span><span class="line"><span class="cl">r2sAanTkeK7gJhYjVuwFkepEgiLEfj+VY23Qv6CnhR2Kg4g1hv0ZxacHvNw1HCYU
</span></span><span class="line"><span class="cl">5o38tyQQWNHFw4+CadUPLzSnjhK/8TaaIdVcXDgxpQTdwr3l4Q8Dyz4SX+VihdGT
</span></span><span class="line"><span class="cl">Zb2s4K7emuJFlQv9ZlSYpltC7o44sLnQbETBdDwoS8EjOb/T1QyfEvNoqLvWSPOD
</span></span><span class="line"><span class="cl">V1VPPAHp68q9DOgnXa8PJj9nlz0btITmYWhGPobtGeD25Qxl/FulAZLaHWVDfkXb
</span></span><span class="line"><span class="cl">VbWquGMxm5xkYqcsI7UM4r0O8W94x9QZcobQ1sgZ6rs1vDsMGCZBmdexvqZgGN/t
</span></span><span class="line"><span class="cl">oPEIA8MaI4R1UfkqJx3haxYS4AOYt2IEE12kiPeAZlER4PIKbcGny7BgJPi72JSb
</span></span><span class="line"><span class="cl">eacDm7djJBqTP/G/O6Pdny9aWh2WVh0Kom5pLCHm3qydawIDAQABo4GZMIGWMAkG
</span></span><span class="line"><span class="cl">A1UdEwQCMAAwSQYJYIZIAYb4QgENBDwWOklmIHlvdSBrZXB0IHRoZSBzbWFsbCBy
</span></span><span class="line"><span class="cl">dWxlcywgeW91IGNvdWxkIGJyZWFrIHRoZSBiaWcgb25lcy4wHQYDVR0OBBYEFNwF
</span></span><span class="line"><span class="cl">Q5GfrnSlRDSGT/QZ6f283vPMMB8GA1UdIwQYMBaAFLEAWEXFwN/oc5doNhyOE47D
</span></span><span class="line"><span class="cl">w/qxMA0GCSqGSIb3DQEBDQUAA4ICAQA6sUR9fZ0CiwWFnYOKQ5CTzy2rDsXGtP9t
</span></span><span class="line"><span class="cl">DJcN/Ga396Pd2CwxDxp1fXXsbrcLELsuupYnLtsm6VzAaix+fgTtxeFTaQR4vqPf
</span></span><span class="line"><span class="cl">wMXfRzLe0Bk6m+BpWSslD7FTCyDVCnGtuHGCfesOFVvqR897vgU4mGG0qsI8OoD9
</span></span><span class="line"><span class="cl">0EEeX2HVG8QYvKSbJF3FhmKiCDemG9TVfITHKSody/iHpUNo0uHHGjsPfVXq4iWe
</span></span><span class="line"><span class="cl">bkQ3dqRXZmjcGPwzQK4CjlKcmXBDWyEhR25/U+dDItaTQet0GGaYK+KrpjDLH56d
</span></span><span class="line"><span class="cl">XWm7YDP5/EMbfRR7en7L6Ca3TFhpyNF5PxDfmz1fywqr85wdAb/ACJztew9f9hqG
</span></span><span class="line"><span class="cl">35rOH+OqucGeHqfYk6UW46fjXSnybBMJG8+HcVUMpYn7myfFK0tnwQZb477dV7Fs
</span></span><span class="line"><span class="cl">G+rYViPjPmfgxi5/kvXpn0FvTzNg73vkgSBCRxuFIPtMkHrpQdSTr1umAXhKCd7d
</span></span><span class="line"><span class="cl">3mragcL61lhKhh17vOBG73C4bhlAGBFsuACYrmnJFghlfv2X5PbLksc3h8P0DEn3
</span></span><span class="line"><span class="cl">36x/fGTVRvq14/9hxeKmOhL5KFQXrja5YJpoLRs/pgBl2zXQGF3+dLdbcAdaDVjy
</span></span><span class="line"><span class="cl">LyDkRMOfhugXmRh7TuWaqGrpcyXVeL4Kn6nWpq51PEval1HKoUMIkahRJu2WK0BT
</span></span><span class="line"><span class="cl"><span class="nv">kVBzZrkbvA</span><span class="o">==</span>
</span></span><span class="line"><span class="cl">-----END CERTIFICATE-----
</span></span><span class="line"><span class="cl"><span class="nv">subject</span><span class="o">=</span><span class="nv">C</span> <span class="o">=</span> US, <span class="nv">ST</span> <span class="o">=</span> California, <span class="nv">L</span> <span class="o">=</span> Chatsworth, <span class="nv">O</span> <span class="o">=</span> Venstar Inc., <span class="nv">OU</span> <span class="o">=</span> Engineering, <span class="nv">CN</span> <span class="o">=</span> CT1A_100163664
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">issuer</span><span class="o">=</span><span class="nv">C</span> <span class="o">=</span> US, <span class="nv">ST</span> <span class="o">=</span> California, <span class="nv">O</span> <span class="o">=</span> Venstar Inc., <span class="nv">OU</span> <span class="o">=</span> Engineering, <span class="nv">CN</span> <span class="o">=</span> Skyport Root CA
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">No client certificate CA names sent
</span></span><span class="line"><span class="cl">Peer signing digest: SHA256
</span></span><span class="line"><span class="cl">Peer signature type: RSA-PSS
</span></span><span class="line"><span class="cl">Server Temp Key: X25519, <span class="m">253</span> bits
</span></span><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">SSL handshake has <span class="nb">read</span> <span class="m">2277</span> bytes and written <span class="m">430</span> bytes
</span></span><span class="line"><span class="cl">Verification error: unable to verify the first certificate
</span></span><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">New, TLSv1.2, Cipher is ECDHE-RSA-AES128-GCM-SHA256
</span></span><span class="line"><span class="cl">Server public key is <span class="m">4096</span> bit
</span></span><span class="line"><span class="cl">Secure Renegotiation IS supported
</span></span><span class="line"><span class="cl">Compression: NONE
</span></span><span class="line"><span class="cl">Expansion: NONE
</span></span><span class="line"><span class="cl">No ALPN negotiated
</span></span><span class="line"><span class="cl">SSL-Session:
</span></span><span class="line"><span class="cl">    Protocol  : TLSv1.2
</span></span><span class="line"><span class="cl">    Cipher    : ECDHE-RSA-AES128-GCM-SHA256
</span></span><span class="line"><span class="cl">    Session-ID: 1391DF607DB2888CA81220E321CB06CA6B5CBDE2031483A3E4AC075AD95A6A5D
</span></span><span class="line"><span class="cl">    Session-ID-ctx:
</span></span><span class="line"><span class="cl">    Master-Key: 7A37EEBC584574EBA6B114E85CCD685B30F640D17D38A9B2E90AC8739BC76EB4A15E38A8F3B74F3D428328F874C9807C
</span></span><span class="line"><span class="cl">    PSK identity: None
</span></span><span class="line"><span class="cl">    PSK identity hint: None
</span></span><span class="line"><span class="cl">    SRP username: None
</span></span><span class="line"><span class="cl">    Start Time: <span class="m">1650744968</span>
</span></span><span class="line"><span class="cl">    Timeout   : <span class="m">7200</span> <span class="o">(</span>sec<span class="o">)</span>
</span></span><span class="line"><span class="cl">    Verify <span class="k">return</span> code: <span class="m">21</span> <span class="o">(</span>unable to verify the first certificate<span class="o">)</span>
</span></span><span class="line"><span class="cl">    Extended master secret: yes
</span></span></code></pre></td></tr></table>
</div>
</div><p>The thermostat was pretty well closed off. <code>nmap</code> came back with port 53 and 443 open. Taking a closer lok at 443:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">PORT    STATE SERVICE  VERSION
</span></span><span class="line"><span class="cl">443/tcp open  ssl/http Neato Botvac Connected
</span></span><span class="line"><span class="cl"><span class="p">|</span> ssl-cert: Subject: <span class="nv">commonName</span><span class="o">=</span>CT1A_100163664/organizationName<span class="o">=</span>Venstar Inc./stateOrProvinceName<span class="o">=</span>California/countryName<span class="o">=</span>US
</span></span><span class="line"><span class="cl"><span class="p">|</span> Issuer: <span class="nv">commonName</span><span class="o">=</span>Skyport Root CA/organizationName<span class="o">=</span>Venstar Inc./stateOrProvinceName<span class="o">=</span>California/countryName<span class="o">=</span>US
</span></span><span class="line"><span class="cl"><span class="p">|</span> Public Key type: rsa
</span></span><span class="line"><span class="cl"><span class="p">|</span> Public Key bits: <span class="m">4096</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span> Signature Algorithm: sha512WithRSAEncryption
</span></span><span class="line"><span class="cl"><span class="p">|</span> Not valid before: 2019-11-08T05:19:36
</span></span><span class="line"><span class="cl"><span class="p">|</span> Not valid after:  2037-05-17T23:59:59
</span></span><span class="line"><span class="cl"><span class="p">|</span> MD5:   3efc 609c bbf3 cfb6 ddfb 4cbe bb54 1c63
</span></span><span class="line"><span class="cl"><span class="p">|</span>_SHA-1: 1e65 43f9 <span class="m">8404</span> 9bf6 acf4 0be8 <span class="m">5116</span> 78ff bc02 f024
</span></span><span class="line"><span class="cl">Service Info: Device: specialized
</span></span></code></pre></td></tr></table>
</div>
</div><p>And taking a closer look @ the web server:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">‚ùØ curl -vvv --insecure -L &#39;https://123.456.789.012/&#39; -H &#39;Authorization: Digest username=&#34;SomeUserNameHere&#34;, realm=&#34;thermostat&#34;, nonce=&#34;1234567890&#34;, uri=&#34;/&#34;, response=&#34;some_64_char_string_here&#34;, qop=auth, nc=00000003, cnonce=&#34;some16CharStrHere&#34;&#39;
</span></span><span class="line"><span class="cl">*   Trying 123.456.789.012:443...
</span></span><span class="line"><span class="cl">* Connected to 123.456.789.012 (123.456.789.012) port 443 (#0)
</span></span><span class="line"><span class="cl">* ALPN, offering h2
</span></span><span class="line"><span class="cl">* ALPN, offering http/1.1
</span></span><span class="line"><span class="cl">* TLSv1.3 (OUT), TLS handshake, Client hello (1):
</span></span><span class="line"><span class="cl">* TLSv1.3 (IN), TLS handshake, Server hello (2):
</span></span><span class="line"><span class="cl">* TLSv1.2 (IN), TLS handshake, Certificate (11):
</span></span><span class="line"><span class="cl">* TLSv1.2 (IN), TLS handshake, Server key exchange (12):
</span></span><span class="line"><span class="cl">* TLSv1.2 (IN), TLS handshake, Server finished (14):
</span></span><span class="line"><span class="cl">* TLSv1.2 (OUT), TLS handshake, Client key exchange (16):
</span></span><span class="line"><span class="cl">* TLSv1.2 (OUT), TLS change cipher, Change cipher spec (1):
</span></span><span class="line"><span class="cl">* TLSv1.2 (OUT), TLS handshake, Finished (20):
</span></span><span class="line"><span class="cl">* TLSv1.2 (IN), TLS handshake, Finished (20):
</span></span><span class="line"><span class="cl">* SSL connection using TLSv1.2 / ECDHE-RSA-AES128-GCM-SHA256
</span></span><span class="line"><span class="cl">* ALPN, server did not agree to a protocol
</span></span><span class="line"><span class="cl">* Server certificate:
</span></span><span class="line"><span class="cl">*  subject: C=US; ST=California; L=Chatsworth; O=Venstar Inc.; OU=Engineering; CN=CT1A_100163664
</span></span><span class="line"><span class="cl">*  start date: Nov  8 05:19:36 2019 GMT
</span></span><span class="line"><span class="cl">*  expire date: May 17 23:59:59 2037 GMT
</span></span><span class="line"><span class="cl">*  issuer: C=US; ST=California; O=Venstar Inc.; OU=Engineering; CN=Skyport Root CA
</span></span><span class="line"><span class="cl">*  SSL certificate verify result: unable to get local issuer certificate (20), continuing anyway.
</span></span><span class="line"><span class="cl">&gt; GET / HTTP/1.1
</span></span><span class="line"><span class="cl">&gt; Host: 123.456.789.012
</span></span><span class="line"><span class="cl">&gt; User-Agent: curl/7.82.0
</span></span><span class="line"><span class="cl">&gt; Accept: */*
</span></span><span class="line"><span class="cl">&gt; Authorization: Digest username=&#34;SomeUserNameHere&#34;, realm=&#34;thermostat&#34;, nonce=&#34;1234567890&#34;, uri=&#34;/&#34;, response=&#34;some_64_char_string_here&#34;, qop=auth, nc=00000003, cnonce=&#34;some16CharStrHere&#34;
</span></span><span class="line"><span class="cl">&gt;
</span></span><span class="line"><span class="cl">* Mark bundle as not supporting multiuse
</span></span><span class="line"><span class="cl">&lt; HTTP/1.1 200 OK
</span></span><span class="line"><span class="cl">&lt; Transfer-Encoding: chunked
</span></span><span class="line"><span class="cl">&lt;
</span></span><span class="line"><span class="cl">* Connection #0 to host 123.456.789.012 left intact
</span></span><span class="line"><span class="cl">{&#34;api_ver&#34;:9,&#34;type&#34;:&#34;residential&#34;,&#34;model&#34;:&#34;COLORTOUCH&#34;,&#34;firmware&#34;:&#34;6.91&#34;}%
</span></span></code></pre></td></tr></table>
</div>
</div><p>Unfortunately no headers that leak details about the web server implementation. üòí</p>
<h2 id="ics-and-distinguishing-markings">ICs and distinguishing markings</h2>
<p>As noted above, the WiFi module was covered with a soldered on shield. Fortunately, the FCC filings give a good look!
The chip is a <code>muRata Type ZX WiFi Module</code> which is the <a href="https://learn.sparkfun.com/tutorials/nest-protect-teardown/sensor-scavenger-hunt" target="_blank" rel="noopener noreffer"><em>same</em> WiFi radio thats inside the Nest Protect</a>!</p>
<p>The larger of the two metal shields on the PCB can be removed giving a look at the main application processor:</p>
<ul>
<li>
<p><code>W971GG</code> (probably <a href="https://www.alldatasheet.com/datasheet-pdf/pdf/555599/WINBOND/W971GG6JB-25.html" target="_blank" rel="noopener noreffer"><code>W971GG6JB</code></a>) - DRAM.</p>
</li>
<li>
<p><a href="https://www.digikey.com/en/products/detail/winbond-electronics/W29N01HVBINA/5804021" target="_blank" rel="noopener noreffer"><code>W29N01HVBINA</code></a>: 1gigabit flash.</p>
</li>
<li>
<p><a href="https://www.microchip.com/en-us/product/AT91SAM9G15" target="_blank" rel="noopener noreffer"><code>AT91SAM9G15</code></a> - ARM926 with the peripherals needed for driving a LCD and reading from the resistive (ü§Æ) touchscreen</p>
</li>
</ul>
<p>The LCD is marked with (partially visible):</p>
<pre><code>AT043HS40D07R2
30671T051KD
190805527 (0000000) L101661
</code></pre>
]]></description></item><item><title>Inside a generic/white-label HDMI KVM Switch</title><link>https://karlquinsland.com/hdmi-kvm-teardown-and-esphome/</link><pubDate>Sat, 16 Apr 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/hdmi-kvm-teardown-and-esphome/</guid><description><![CDATA[<p>If you&rsquo;re here just for &ldquo;how do I get it working with ESPHome&rdquo; bit, skip to the <a href="#esphome-component" rel="">ESPHome Component</a> section below.</p>
<hr>
<div class="details admonition important open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>Update 2022.05.14<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">I have just uploaded a basic PCB and enclosure to the  <a href="#esphome-component" rel="">ESPHome Component Repository</a>.</div>
        </div>
    </div>
<p>For the last few months, I have been looking for a KVM switch to simplify switching between work and personal computers.
Initially, I didn&rsquo;t think my criteria were that unreasonable, but for whatever reason there is no KVM switch that:</p>
<ul>
<li>Supports at least 4 hosts. Preferably dual monitors per host to ensure relevancy for years. Converting between HDMI and Display Port isn&rsquo;t that difficult so no strong preference as long as the KVM uses HDMI2.0+ or Display Port 1.4+ as my primary monitor is 4k.</li>
<li>USB 3 support. At least 5 gbps and Ideally using a USBC jack.</li>
<li>Some sort of programmatic control over which host is &lsquo;active&rsquo;. Ideally this interface would be bi-directional (RS232/RS485 or IP) but I&rsquo;d settle for having to record the IR remote codes and re-broadcast those with my own microcontroller if needed.</li>
<li>Works with the <a href="https://drop.com/buy/drop-shift-mechanical-keyboard" target="_blank" rel="noopener noreffer">DROP: SHIFT keyboard</a>; internally this keyboard presents as it&rsquo;s own USB Hub and requires more than the standard 500ma to operate. Some KVM switches don&rsquo;t supply enough current and others results in the number of USB hubs between the root and the keyboard being &gt; 5 which the USB spec does not support.</li>
<li>Costs less than $75 per host/port.</li>
</ul>
<p>Try as I might, I was not able to find anything that could satisfy all the requirements. If you know of any, <a href="https://karlquinsland.com/contact/" rel="">please do get in touch</a>!</p>
<p>I spent a decent chunk of time searching through the usual consumer/IT electronics sites and they all had similar offerings&hellip; none of which were sufficient.
I had some close contenders, but they are victims of the current chip shortage or otherwise very expensive unobtanium.</p>
<p>I recently read <a href="https://overengineer.dev/blog/2021/04/25/usb-c-hub-madness.html" target="_blank" rel="noopener noreffer">USB-C hubs and my slow descent into madness - Dennis Schubert</a> which prompted me to broaden my search horizons to include the marketplaces closer to where all the KVM switches I was seeing in my searches were actually designed.
After a bit of searching, I found the <a href="https://www.aliexpress.com/item/1005003927404402.html" target="_blank" rel="noopener noreffer"><code>PX-UHDKVM801-2.0</code></a>:</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>A single video channel isn&rsquo;t a deal breaker; ultra wide screens can render more pixels off of one HDMI port than 2 screens from a few years ago could. Assuming this continues, by the time my current monitor dies dual video might not matter at all.
Likewise, speedy USB is a &ldquo;nice to have&rdquo;. My keyboard, mouse and web cam <strong>must</strong> work with the KVM. If the webcam streams in SD over USB2 but full HD over a USB3 link that&rsquo;s a <em>nice</em> benefit but not a deal breaker. For the occasional times where I need to transfer a file and can&rsquo;t do it over the network, I can either plug directly into the host computers&rsquo; USB3.2 port or settle for slow USB2 file transfer speeds. Not the end of the world!</p>
<p>Of all the KVMs that I considered, this one came with the least compromises and came with explicit documentation about how to integrate/control the switch via TCP or RS232. Buoyed by the thought of not having to reverse engineer any IR remote codes or otherwise resort to some hackery, I pulled the trigger.</p>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>A quick note about the &#39;generic&#39; switch<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>I say &ldquo;generic&rdquo; because there are a few different brands / names on this thing and it&rsquo;s not clear who the actual manufacturer is.</p>
<p>I got it from a seller by the name of <a href="https://www.pourxuan.com/Product/9867345045.html" target="_blank" rel="noopener noreffer"><code>PourXuan</code></a> which does seem to be the OEM behind it.
However, there are a few other <a href="#ics-and-distinguishing-markings" rel="">interesting markings</a> that could indicate other companies contributing to / designing some internal components.</p>
</div>
        </div>
    </div>
<p>Anyways, lets look inside.</p>
<h1 id="teardown">Teardown</h1>
<p>TL;DR: It&rsquo;s been built down to a cost&hellip; but not <em>the lowest possible cost</em>.
The construction isn&rsquo;t flimsy and I didn&rsquo;t find any glaringly obvious safety issues / construction shortcuts.
None of the ICs have their markings scraped off and the internal architecture is simple and scalable.
I did not check, but I suspect that each of the primary functions / PCBs communicates over a simple serial bus so this switch is likely pretty hackable/serviceable, too.</p>
<h2 id="packaging--shipping">Packaging / shipping</h2>
<p>The switch came well packed in some nondescript packaging.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>The small white box containing the power supply and some accessory hardware crumpled up the single page user manual.</p>
<p>I have uploaded a copy of this paper and the other software/documentation provided by the seller to the same git repository hosting the <a href="#esphome-component" rel="">ESPHome Component</a>.</p>
<p><figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        An overview of everything that came in the box
        
            
        
        </p> 
    </figcaption>
    
</figure>

</p>
<p><figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Rack Mount ears, two extra screws and the proper connector block needed to interface with the UART.
        
            
        
        </p> 
    </figcaption>
    
</figure>

</p>
<p>I have not opened up the power supply to check its construction but it doesn&rsquo;t feel incredibly cheap.
It&rsquo;s rated for 2 Amps @ 12v but the switch only drew about 3.75 Watt when measured from the wall.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Nothing special. It doesn&#39;t feel cheap.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h2 id="the-switch">The switch</h2>
<p>The metal shell is generic; there are holes on the side for ventilation fans that are not populated.
Other than not-so-well hidden screw, the case is easy to open.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Don&#39;t forget the screw behind the sticker
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>With all screws out, the two halves slide apart easily to give us the first look at the internals!</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>It looks like this is a pretty modular design:</p>
<ul>
<li>A standalone front panel input and network control.</li>
<li>A dedicated PCB for each type of data; a HDMI/video plane and a HID/USB plane.</li>
<li>Each plane uses dedicated ASICs to route the signals.</li>
<li>A minimal number of microprocessors / wires coordinating between the PCBs.</li>
</ul>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The small cable from the IR jack on the back is all that holds the two halves of the case together.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>The LAN module plugs into the HDMI PCB very close to where the RS232 port is and the protocol specific documentation from the seller indicates that the payloads to control the switch are the same irrespective of the transport.</p>
<p>Each group of 4 HDMI &lsquo;inputs&rsquo; is routed to an identical looking IC and the differential signal pairs from <em>those</em> ICs are routed to the big one next to the output and RS232 and LAN circuitry.</p>
<p>The little micro next to the buzzer and grey ribbon cable is likely the main controller for the entire switch.
The small IC <em>on</em> the front panel is probably watching for IR signals, scanning the physical buttons, driving the LED display and communicating with the rest of the system over some serial bus.</p>
<p>This architecture would be pretty scalable; for a 16 port model, just add another HDMI and USB PCB and tweak the firmware on the main controller.</p>
<h3 id="front-pcb">Front PCB</h3>
<p>Nothing particularly interesting here. The single IC (<code>STM8S003F3</code>) is a cheap 8 bit microcontroller that - based on the PCB traces - is driving the LED display and handling the button matrix scanning and IR codes.</p>
<p>Most of the lines from the grey ribbon cable are not actually connected to the pcb so I&rsquo;d bet that this micro communicates with the &lsquo;main&rsquo; PCBs over some serial bus.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Sorry for the glare. There&#39;s a lot of flux residue on this PCB.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Notice how at least 4 of the pins from the ribbon cable connector are note soldered to the PCB...
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        This PCB is means to be used in other SKUs that come with two extra buttons that are unpopulated here.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h3 id="the-lan-module">The LAN module</h3>
<p>Very simple / standalone module. There&rsquo;s a dedicated PHY (<code>CH395Q</code>) and the same <code>STM8S003F3</code> micro controller again. The documentation that I received from the seller indicated that the LAN module did NOT use DHCP and there didn&rsquo;t seem to be a way to change the IP address configuration so I didn&rsquo;t bother with trying to automate via LAN.</p>
<p>Only after I made it most of the way through the ESPHome integration development did the seller provide <em>additional</em> documentation that indicates the IP address <em>can</em> be changed&hellip; but only if you use a Windows program.
I opted to keep going with the ESPHome &lt;-&gt; RS232 integration as that would be the most flexible and accessible approach.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The small LAN pcb is attached directly to the front panel with screws mating with some 90 degree flanges soldered to the PCB
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h2 id="hdmi">HDMI</h2>
<p>In addition to the HDMI switching duties, the HDMI PCB hosts the UART electronics:</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>TTL to RS232 handled by the <code>SIPEX SP3223EEX</code>:</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>The main application processor appears to be a STM32 clone known as the <code>CHIPSEA F031C8T6</code>.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Switching / routing the HDMI is done with two <code>IT66341TE</code> chips reducing the 4 HDMI inputs down to a single output and a <code>IT66321E</code> to switch between those two streams.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        2 to 1 HDMI mux to switch between the two outputs from the 4 -&gt; 1 muxes on board.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        4 to 1 HDMI mux; one of two on the board
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>I would bet that the unpopulated connector in the bottom right is the bus connection to a second HDMI PCB in the 16 port model but I don&rsquo;t see where the differential pairs for the HDMI signal would come from so who knows ü§∑.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        4 to 1 HDMI mux; one of two on the board
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<h2 id="usb">USB</h2>
<p>Like the HDMI PCB, the USB PCB uses a series of ASICs and a microprocessor to coordinate them all.
Near the 4 &lsquo;output&rsquo; USB ports, you can see the <code>CH559L</code> which runs the show. This IC is monitoring the USB bus for key codes from the keyboard for display switching purposes; press some key combination to switch inputs.</p>
<p>This is usually <code>PrtScrn</code> a few times quickly followed by the number of the input bank you wish to switch to.
I have not tested / verified this functionality but the seller does advertise that there is similar functionality</p>
<p><figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>

</p>
<p>Each &lsquo;input&rsquo; USB port is the same: unpopulated headphone jack footprint for audio input and a <code>FE1.1s USB 2.0 HUB</code> ASIC and an unknown IC that looks like it&rsquo;s related to the unpopulated headphone jack.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Each &#39;input&#39; USB port is managed with the same IC. Note the unpopulated Headphone jack footprint on the PCB
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        I can&#39;t make out the markings, but the 16 pin square IC is almost certainly an audio ID for the unpopulated headphone jack.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>There&rsquo;s some generic 8:1 GPIO mux chips in the form of <code>3251QE</code>.
They are simple IO expanders that would allow a microcontroller to read/write 8 GPIO pins using just 3 GPIO.
I don&rsquo;t know why they&rsquo;re here or why an 8 port switch needs 2 of them&hellip; both on the USB PCB.</p>
<p><figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>

</p>
<p>That&rsquo;s it for teardown!</p>
<h3 id="dmesg"><code>dmesg</code></h3>
<p>Just for completeness, here is how the KVM presents to the computer via USB.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">[</span>183000.909155<span class="o">]</span> usb 1-6: new high-speed USB device number <span class="m">63</span> using xhci_hcd
</span></span><span class="line"><span class="cl"><span class="o">[</span>183001.050545<span class="o">]</span> usb 1-6: New USB device found, <span class="nv">idVendor</span><span class="o">=</span>1a40, <span class="nv">idProduct</span><span class="o">=</span>0101, <span class="nv">bcdDevice</span><span class="o">=</span> 1.11
</span></span><span class="line"><span class="cl"><span class="o">[</span>183001.050550<span class="o">]</span> usb 1-6: New USB device strings: <span class="nv">Mfr</span><span class="o">=</span>0, <span class="nv">Product</span><span class="o">=</span>1, <span class="nv">SerialNumber</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>183001.050551<span class="o">]</span> usb 1-6: Product: USB 2.0 Hub
</span></span><span class="line"><span class="cl"><span class="o">[</span>183001.112333<span class="o">]</span> hub 1-6:1.0: USB hub found
</span></span><span class="line"><span class="cl"><span class="o">[</span>183001.112549<span class="o">]</span> hub 1-6:1.0: <span class="m">4</span> ports detected
</span></span><span class="line"><span class="cl"><span class="o">[</span>183001.495837<span class="o">]</span> usb 1-6.1: new high-speed USB device number <span class="m">64</span> using xhci_hcd
</span></span><span class="line"><span class="cl"><span class="o">[</span>183001.687327<span class="o">]</span> usb 1-6.1: New USB device found, <span class="nv">idVendor</span><span class="o">=</span>1a40, <span class="nv">idProduct</span><span class="o">=</span>0101, <span class="nv">bcdDevice</span><span class="o">=</span> 1.11
</span></span><span class="line"><span class="cl"><span class="o">[</span>183001.687332<span class="o">]</span> usb 1-6.1: New USB device strings: <span class="nv">Mfr</span><span class="o">=</span>0, <span class="nv">Product</span><span class="o">=</span>1, <span class="nv">SerialNumber</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>183001.687333<span class="o">]</span> usb 1-6.1: Product: USB 2.0 Hub
</span></span><span class="line"><span class="cl"><span class="o">[</span>183001.720379<span class="o">]</span> hub 1-6.1:1.0: USB hub found
</span></span><span class="line"><span class="cl"><span class="o">[</span>183001.720579<span class="o">]</span> hub 1-6.1:1.0: <span class="m">4</span> ports detected
</span></span><span class="line"><span class="cl"><span class="o">[</span>183001.912509<span class="o">]</span> usb 1-6.2: new low-speed USB device number <span class="m">65</span> using xhci_hcd
</span></span><span class="line"><span class="cl"><span class="o">[</span>183002.137295<span class="o">]</span> usb 1-6.2: New USB device found, <span class="nv">idVendor</span><span class="o">=</span>0c45, <span class="nv">idProduct</span><span class="o">=</span>7403, <span class="nv">bcdDevice</span><span class="o">=</span> 0.01
</span></span><span class="line"><span class="cl"><span class="o">[</span>183002.137300<span class="o">]</span> usb 1-6.2: New USB device strings: <span class="nv">Mfr</span><span class="o">=</span>1, <span class="nv">Product</span><span class="o">=</span>2, <span class="nv">SerialNumber</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>183002.137301<span class="o">]</span> usb 1-6.2: Product: USB Device
</span></span><span class="line"><span class="cl"><span class="o">[</span>183002.137303<span class="o">]</span> usb 1-6.2: Manufacturer: SONiX
</span></span><span class="line"><span class="cl"><span class="o">[</span>183002.239461<span class="o">]</span> input: SONiX USB Device as /devices/pci0000:00/0000:00:01.2/0000:02:00.0/0000:03:08.0/0000:05:00.1/usb1/1-6/1-6.2/1-6.2:1.0/0003:0C45:7403.00E4/input/input288
</span></span><span class="line"><span class="cl"><span class="o">[</span>183002.296065<span class="o">]</span> hid-generic 0003:0C45:7403.00E4: input,hidraw9: USB HID v1.00 Keyboard <span class="o">[</span>SONiX USB Device<span class="o">]</span> on usb-0000:05:00.1-6.2/input0
</span></span><span class="line"><span class="cl"><span class="o">[</span>183002.302457<span class="o">]</span> input: SONiX USB Device Mouse as /devices/pci0000:00/0000:00:01.2/0000:02:00.0/0000:03:08.0/0000:05:00.1/usb1/1-6/1-6.2/1-6.2:1.1/0003:0C45:7403.00E5/input/input289
</span></span><span class="line"><span class="cl"><span class="o">[</span>183002.302535<span class="o">]</span> input: SONiX USB Device System Control as /devices/pci0000:00/0000:00:01.2/0000:02:00.0/0000:03:08.0/0000:05:00.1/usb1/1-6/1-6.2/1-6.2:1.1/0003:0C45:7403.00E5/input/input290
</span></span><span class="line"><span class="cl"><span class="o">[</span>183002.359252<span class="o">]</span> hid-generic 0003:0C45:7403.00E5: input,hidraw10: USB HID v1.00 Mouse <span class="o">[</span>SONiX USB Device<span class="o">]</span> on usb-0000:05:00.1-6.2/input1
</span></span></code></pre></td></tr></table>
</div>
</div><p>And <code>lsusb</code> shows:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="p">|</span>__ Port 6: Dev 63, If 0, <span class="nv">Class</span><span class="o">=</span>Hub, <span class="nv">Driver</span><span class="o">=</span>hub/4p, 480M
</span></span><span class="line"><span class="cl">    ID 1a40:0101 Terminus Technology Inc. Hub
</span></span><span class="line"><span class="cl">    /sys/bus/usb/devices/1-6  /dev/bus/usb/001/063
</span></span><span class="line"><span class="cl">    <span class="p">|</span>__ Port 2: Dev 65, If 0, <span class="nv">Class</span><span class="o">=</span>Human Interface Device, <span class="nv">Driver</span><span class="o">=</span>usbhid, 1.5M
</span></span><span class="line"><span class="cl">        ID 0c45:7403 Microdia Foot Switch
</span></span><span class="line"><span class="cl">        /sys/bus/usb/devices/1-6.2  /dev/bus/usb/001/065
</span></span><span class="line"><span class="cl">    <span class="p">|</span>__ Port 2: Dev 65, If 1, <span class="nv">Class</span><span class="o">=</span>Human Interface Device, <span class="nv">Driver</span><span class="o">=</span>usbhid, 1.5M
</span></span><span class="line"><span class="cl">        ID 0c45:7403 Microdia Foot Switch
</span></span><span class="line"><span class="cl">        /sys/bus/usb/devices/1-6.2  /dev/bus/usb/001/065
</span></span><span class="line"><span class="cl">    <span class="p">|</span>__ Port 1: Dev 64, If 0, <span class="nv">Class</span><span class="o">=</span>Hub, <span class="nv">Driver</span><span class="o">=</span>hub/4p, 480M
</span></span><span class="line"><span class="cl">        ID 1a40:0101 Terminus Technology Inc. Hub
</span></span><span class="line"><span class="cl">        /sys/bus/usb/devices/1-6.1  /dev/bus/usb/001/064
</span></span></code></pre></td></tr></table>
</div>
</div><p>The <a href="http://blog.ssokolow.com/archives/2017/04/10/getting-your-cheap-chinese-usb-foot-pedal-doing-useful-things-on-linux/" target="_blank" rel="noopener noreffer"><code>Microdia Foot Switch</code> bit</a> is odd.
Could that have something to do with the <code>3251QE</code> muxes?
Perhaps this device indicates to the computer weather or not it is the activated one? ü§î But why would you need two?</p>
<p>I did not dump <a href="https://en.wikipedia.org/wiki/Extended_Display_Identification_Data" target="_blank" rel="noopener noreffer"><code>EDID</code></a> information for the HDMI but I suspect that the switch is smart enough to just copy exactly what the display provides so the computers don&rsquo;t &lsquo;see&rsquo; the loss/change of a display which might re-arrange windows or adjust scaling.</p>
<h2 id="esphome-component">ESPHome component</h2>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>Info<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">The ESPHome component and some additional documentation/software/details are over at <a href="https://github.com/kquinsland/hdmi-kvm-esphome" target="_blank" rel="noopener noreffer"><code>kquinsland/hdmi-kvm-esphome</code></a>.</div>
        </div>
    </div>
<p>Yes, I wanted to be able to control this KVM from my Home Assistant install.
Some sort of API was a strong desire/requirement for KVM switches for a reason!</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>I am still working on a complementary ESPHome component to automate my standing desk (to be published soon!) but to give you an idea of the automations this KVM will be used in:</p>
<ul>
<li>
<p>Push a single button to:</p>
<ul>
<li>Turn on the VR computer</li>
<li>Switch KVM to the VR computer</li>
<li>Adjust the lighting as needed; turn most lights off as they&rsquo;re not needed with a VR headset on but turn on ambient lighting so the room isn&rsquo;t pitch dark when the headset is removed.</li>
</ul>
</li>
<li>
<p>When personal/work computer are not in use, switch to a host running Grafana dashboards on rotation</p>
</li>
<li>
<p>Allow me to track how much time per week is spent with each host</p>
</li>
</ul>
<h2 id="ics-and-distinguishing-markings">ICs and distinguishing markings</h2>
<p>The front panel PCB is labeled: <code>20170622</code> and features:</p>
<ul>
<li><a href="https://github.com/kquinsland/hdmi-kvm-esphome/blob/main/docs/datasheets/stm8s003f3.pdf" target="_blank" rel="noopener noreffer"><code>8S003F3P6</code></a> - A cheapish 8 bit micro controller.</li>
</ul>
<p>The LAN module PCB is marked with <code>20151030</code> and features:\</p>
<ul>
<li><a href="https://github.com/kquinsland/hdmi-kvm-esphome/blob/main/docs/datasheets/stm8s003f3.pdf" target="_blank" rel="noopener noreffer"><code>8S003F3P6</code></a> - The same micro used on the front panel</li>
<li><a href="https://github.com/kquinsland/hdmi-kvm-esphome/blob/main/docs/datasheets/2009031206_WCH-Jiangsu-Qin-Heng-CH395Q_C87390.pdf" target="_blank" rel="noopener noreffer"><code>CH395Q</code></a> - A dedicated ethernet interface.</li>
</ul>
<p>The HDMI PCB is populated with:</p>
<ul>
<li>
<p><a href="https://www.google.com/search?q=CHIPSEA&#43;F031C8T6" target="_blank" rel="noopener noreffer"><code>CHIPSEA F031C8T6</code></a> - STM32 clone; likely the main applications processor. I can&rsquo;t find a datasheet on this specific on the english speaking web but the naming is oddly similar to how some STM32 processors are named.</p>
</li>
<li>
<p><a href="https://github.com/kquinsland/hdmi-kvm-esphome/blob/main/docs/datasheets/sp3222_3232e.pdf" target="_blank" rel="noopener noreffer"><code>SIPEX SP3223EEX</code></a> - Basic TTL &lt;-&gt; RS232 chip, similar to MAX232.</p>
</li>
<li>
<p><a href="https://www.ite.com.tw/en/product/view?mid=100" target="_blank" rel="noopener noreffer"><code>IT66321E</code></a> - 2 IN to 1 OUT HDMI2.0 18Gb/s Switch with Audio In/Out</p>
</li>
<li>
<p><a href="https://www.ite.com.tw/en/product/view?mid=99" target="_blank" rel="noopener noreffer"><code>IT66341TE</code></a> - 4 IN to 1 OUT HDMI2.0 18Gb/s Switch with Audio In/Out</p>
</li>
<li>
<p>A sticker with the markings:</p>
<blockquote>
<p>XUFUNG
33.01.0072
2012020074</p>
</blockquote>
</li>
<li>
<p>The PCB is marked with:</p>
<blockquote>
<p>HK20801AU
32.02.0119
BJ</p>
</blockquote>
</li>
</ul>
<p>The USB PCB is marked with <code>HK20801A30-KVM</code> and is populated with:</p>
<ul>
<li><a href="https://github.com/kquinsland/hdmi-kvm-esphome/blob/main/docs/datasheets/PI5C3251QE-datasheetz.pdf" target="_blank" rel="noopener noreffer"><code>PI5C 3251QE</code></a> - 8:1 Mux/DeMux BusSwitch</li>
<li><a href="https://github.com/kquinsland/hdmi-kvm-esphome/blob/main/docs/datasheets//2008191807_WCH-Jiangsu-Qin-Heng-CH559L_C150548" target="_blank" rel="noopener noreffer"><code>CH559L</code></a> - 8 bit enhanced USB MCU CH559</li>
<li><a href="https://github.com/kquinsland/hdmi-kvm-esphome/blob/main/docs/datasheets/FE1.1s%2BData%2BSheet%2B%28Rev.%2B1.0%29.pdf" target="_blank" rel="noopener noreffer"><code>FE1.1s</code></a> - FE1.1S USB 2.0 HIGH SPEED 4-PORT HUB CONTROLLER</li>
</ul>
]]></description></item><item><title>Installing Tasmota on the Xiaomi Desk Lamp</title><link>https://karlquinsland.com/xaomi-s1-monitor-lamp-teardown-and-tasmota/</link><pubDate>Sat, 22 Jan 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/xaomi-s1-monitor-lamp-teardown-and-tasmota/</guid><description><![CDATA[<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>MJGJD02YL vs MUGJD01YL<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">There are <em>at least two</em> versions of this lamp. Thanks to <code>@htvekov</code> for confirming that the <code>MUGJD01YL</code> variant <strong>does <em>not</em> contain an ESP32</strong>. It contains a <code>TLSR8368</code>.
Some photos of the <code>MUGJD01YL</code> internals are provided <a href="#mugjd01yl" rel="">below</a>.</div>
        </div>
    </div>
<p>If you&rsquo;re here just for &ldquo;how do I flash tasmota&rdquo; bit, skip to the <a href="#tasmota" rel="">Tasmota</a> section below.</p>
<hr>
<p>I was looking for a way to light my desk my desk without screen glare.
The easiest way to prevent glare on a screen is to change the orientation of the light relative to the screen either from under or behind the screen.
This is not practical for ceiling mounted lights or for any floor lamps.</p>
<p>You can get a nearly glare free light if you mount the light to the top of the screen and direct the light away from the screen at a <em>slight</em> angle.
Light hitting the screen and bouncing into eyes is minimized and the majority of the light ends up directed down onto the desk where it&rsquo;s needed.</p>
<p>This isn&rsquo;t a new problem; a quick search of any online retailor will reveal that there are <em>many</em> different options out there at all sorts of price points.
As this light source would be heavily used for all sorts of work, the <em>quality</em> of the light is incredibly important; a high General CRI (Ra) and adjustable color temperature are <em>requirements</em>.</p>
<p>I also wanted one that had some basic remote control functions so I don&rsquo;t have to reach to the top of my monitor and risk destabilizing whatever I am working on or getting finger prints on the panel.
A wired remote would be simpler and thus cheaper but my desk is already too crowded with wires and cords; if the cost difference between a wired and wireless remote was marginal, opt for wireless.</p>
<p>After a bit of searching, I found the <code>2021 Xiaomi Mijia Lite Desk Lamp 1S</code> which fit the bill exactly.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Beyond the basic puck shaped wireless remote, the listing indicated that the &rsquo;new 1s version&rsquo; could be controlled with the <code>Xiaomi</code> app.</p>
<p>ü§î</p>
<p>Instead of some very basic 433Mhz radio, the lamp/remote probably used BTLE.
In some ways, that&rsquo;s even better; the lamp only has a few simple functions and those shouldn&rsquo;t be that hard to reverse engineer from the Android app.</p>
<p>Once I know what data to send for on/off/dim/bright/ww/cw selection, I can use an ESP chip as a MQTT &lt;-&gt; BTLE gateway for relatively easy integration into my home automation system.
Worst case, the fall back plan of using a microcontroller to emulate interacting with the remote and then integrating that microcontroller with my home automation system would work.</p>
<p>Once the lamp showed up, I of course opened up the remote to see what type of wireless system I was going to be dealing with.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>Note<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">More photos of the remote are <a href="#teardown" rel="">below</a></div>
        </div>
    </div>
<p>Giving the model number <code>MHCB07P</code> a quick google didn&rsquo;t reveal much information other than confirm that it was using BTLE.
This almost certainly means that the phone app will <em>also</em> use BTLE to control the lamp!
If I&rsquo;m lucky, I can capture the entire discovery/pair/command packets using a rooted android device and then I won&rsquo;t have to bother with the puck at all.</p>
<h1 id="lamp---phone">Lamp &lt;-&gt; Phone</h1>
<p>After getting the app setup, it did discover the lamp and began to walk me through the setup flow.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>WiFi!? Really!? But why? This must be some generic screen shown for all devices, right?</p>
<p><strong>Nope</strong>.</p>
<p>There really is a simple access point inside this lamp!</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Well now I&rsquo;m curious.</p>
<p>What could this lamp <em>possibly need</em> WiFi credentials for? The remote used BTLE and every conceivable phone that will also control the lamp supports BTLE&hellip; so why spend the extra money for a WiFi enabled microcontroller at all!?</p>
<h1 id="et-lamp-phone-home"><del>ET</del> Lamp Phone Home:</h1>
<p>I threw the lamp behind an isolated access point and it sure is <em>chatty</em>&hellip;
After getting an IP address, the lamp looks up the <code>A</code> record for <code>dk.io.mi.com</code> and then attempts to open a TCP connection and send some bytes:</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Now I&rsquo;m more than a little bit curious.</p>
<p>Why send raw bytes to TCP/80 without at least the typical HTTP request headers?
Why even use WiFi at all for a <em>lamp</em>? Is there no way to use my phone to control the lamp over BTLE?</p>
<h2 id="dumping-the-fw">Dumping the FW</h2>
<p>Fortunately, this was pretty easy. After a cursory analysis, the dumped firmware did not appear to be encrypted or otherwise protected.
I did a quick search for a few things that I hoped would show up in the dumped OEM firmware and was not disappointed:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">‚ùØ cat lamp.bin.strings <span class="p">|</span> grep --ignore-case -E <span class="s1">&#39;certificate|encrypt|tls|agent|http|post|get|verify|remote|{&#34;&#39;</span> &gt; interesting_strings.txt
</span></span><span class="line"><span class="cl">‚ùØ cat interesting_strings.txt<span class="p">|</span> wc -l
</span></span><span class="line"><span class="cl"><span class="m">710</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>ü§®</p>
<p>Here are some of the highlights:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">[I] bluetooth_remote_double_click
</span></span><span class="line"><span class="cl">[E] %s: verify root cert is not valid! (%s,%d)
</span></span><span class="line"><span class="cl">[W] %s: Fail to get gatt db from connection %04x, ret = %d  (%s,%d)
</span></span><span class="line"><span class="cl">[E] %s: mbedtls_ecdh_calc_secret error %d (%s,%d)
</span></span><span class="line"><span class="cl">miio_signature_verify
</span></span><span class="line"><span class="cl">[E] %s: --&gt;login verify send failed. (%s,%d)
</span></span><span class="line"><span class="cl">-----BEGIN CERTIFICATE-----
</span></span><span class="line"><span class="cl">[E] %s: https need root cert. (%s,%d)
</span></span><span class="line"><span class="cl">User-Agent: MIoT
</span></span><span class="line"><span class="cl">http://dlg.io.mi.com/v1/ot/upload
</span></span><span class="line"><span class="cl">[W] %s: httpdns new resolve start failed, %d (%s,%d)
</span></span></code></pre></td></tr></table>
</div>
</div><p>There&rsquo;s a lot more interesting things in the dump but they&rsquo;ll have to wait for another day as
immediately after getting eyes on the PCB, I saw an ESP32 chip!</p>
<h2 id="a-change-of-plans">A change of plans</h2>
<p>Reverse engineering the firmware to figure out how/why the phone method of remote control was different from the remotes&rsquo; method no longer really mattered.
An ESP based chip means Tasmota or ESPHome should be possible.</p>
<p>If I could get either of those alternative firmwares running on the lamp, then cluttering up the desk with yet another remote and/or hacking MQTT support into the lamp via the remote was no longer necessary!</p>
<h1 id="teardown">Teardown</h1>
<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>Warning<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">The plastic end caps on either end of the lamp tube are <em>glued in</em>.
You will need some force to break the glue.
Even with all possible precautions, getting access to the lamp PCB <em>is a <strong>destructive</strong> process</em>.
If you are <em>careful</em> you can keep the destruction and cosmetic damage to a minimum.</div>
        </div>
    </div>
<p>I did this teardown the hard way and damaged more of the lamp than necessary.
Some of the photos below reflect this.</p>
<p>Now that I know how it all is <em>meant</em> to come apart, you will hopefully have an easier time and incur less damage!</p>
<h2 id="the-lamp">The lamp</h2>
<p>A closer look at the marked device information before we move <em>into</em> the lamp.
The ESP that we will soon flash with Tasmota is just behind this product information.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Product info and regulatory markings
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>Locate the small rectangle shaped protrusion from the lamp tube that mates with the magnetic mount. The protrusion has two small pogo pins on it.
You can see the protrusion in the middle of the tube facing the coiled USB power cable:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Everything that came in the box
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>With the protrusion facing you, locate the plastic cap closest to the product information.
This should be plastic cap on the <em>left</em> side of the tube.</p>
<p>Use non-marring pliers or similar to grip the plastic cap and twist with enough force to break the glue.
Do not twist more than a few degrees!
The plastic cap has some features that will come into contact with and could damage the PCB if rotated too far!</p>
<p>Use a razor blade or similar to peel back the grip-tape sticker on the protrusion.
If you&rsquo;re careful and manage to remove the sticker in one piece you might be able to re-apply it during reassembly.
The lamp functions fine without the sticker, though.</p>
<p>Underneath the sticker will be two small philips screws.
Remove them and the metal protrusion and small plastic part containing the two pogo pins should come free.
Set these aside.</p>
<p>Gently remove the clear plastic diffuser from the lamp tube and set aside.</p>
<p>The matte finish on the interior side of the diffuser is a fingerprint magnet.
Consider using gloves for this step.</p>
<p>Carefully slide the PCB out of the aluminum tube.
Be mindful of the two spring like contacts on the back of the PCB that mated with the pogo pins!</p>
<p>You can see the small black plastic bracket holding the pogo pins and the protrusion bit with some of the grip-tape still attached:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        If it feels like you&#39;re using too much force to open the lamp... you probably are!
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>If you try to remove the PCB without first detaching the pogo pins, you&rsquo;ll damage one or both of the spring contacts that mate the PCB to the pogo pins!</p>
<p>You <em>don&rsquo;t</em> want your <code>GND</code> spring to look like mine!</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Before realizing that the pogo pins could be removed from the lamp, I removed <em>both</em> caps and tried push/pull the PCB out.</p>
<p>The PCB is supported inside the tube with a few black plastic &lsquo;sleds&rsquo; which are heat-staked on to the PCB.</p>
<p>The &lsquo;sled&rsquo; closest to the ESP partially covers the <code>3V3</code> test point.
Rather than use a dedicated 3V power supply during flashing, I found it easiest to use this pin to bring the <code>EN</code> pin up high.</p>
<p>If you&rsquo;re going to use the <code>3V3</code> test pin instead of a dedicated external power supply, you will probably want to remove the &lsquo;sled&rsquo; to get easy access to the test point.</p>
<p>You can do this with some flush-cut snips.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Be careful to not scratch the solder mask / PCB with the sharp edges of the snips
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>The sled isn&rsquo;t technically required for re-assembly but it&rsquo;s pretty easy to re-attach to the PCB with some hotglue. Discard it at your peril!</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Here&rsquo;s a closeup of the PCB with most of the test points labeled.
You can see the <code>3V3</code> test point immediately to the left of <code>R6</code> in the shadow of the &lsquo;sled&rsquo;.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Repeat these steps in reverse order to re-assemble the lamp.</p>
<h3 id="the-puck">The puck</h3>
<p>Fortunately, opening up the remote is not difficult.</p>
<p>Remove the two philips screws under the bottom cap.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>The main body / rotary knob lifts away from the midframe.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Like with the lamp PCB, there are a few test points:</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<h1 id="tasmota">Tasmota</h1>
<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>Warning<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>It is likely that both the WW and CW LEDs <em>will</em> briefly light up during the flashing process. When this happens, you <em>will</em> draw more current than a typical USB &lt;-&gt; Serial adapter can provide. At <em>best</em> you&rsquo;ll cause a brownout and the flash will be interrupted.</p>
<p><strong>Use a dedicated 5V supply that can provide <em>at least</em> 10W of power</strong> while flashing the lamp! Make sure that the <code>GND</code> wire from your serial programmer <em>and</em> the <code>GND</code> wire for your dedicated 5V@2A/10W supply are tied together or you will likely destroy some of the electronics on both the lamp, your serial adapter <em>and</em> possibly your computer!</p>
</div>
        </div>
    </div>
<p>Having said all that, it&rsquo;s totally worth it:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        When all is said and done, the lamp is easily integrated and controlled with Home Assistant
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h2 id="flashing">Flashing</h2>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>Info<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">The ESP32 chip on this PCB is a <em>single core</em> version.
Follow the <a href="https://tasmota.github.io/docs/ESP32/#flashing" target="_blank" rel="noopener noreffer">instructions for flashing the ESP32 version of Tasmota</a>, specifically the <code>tasmota32solo1</code> version!</div>
        </div>
    </div>
<p>Solder wires to the usual <code>RX</code>, <code>TX</code>, <code>GPIO0</code> and <code>GND</code> test points.
The <code>GPIO0</code> test point is the test point nearest to the ESP32 chip; directly off the bottom right corner.
I used some solid-core cable from a length of cat5 cable but any similarly high gauge wire will work.</p>
<p>Solder a jumper between the <code>EN</code> and <code>3V3</code> test point. I used a small yellow wire for this.
The solid blue wire attached to <code>GPIO0</code> and the blue/white wire attached to <code>GND</code> are joined together just out of frame.
The ESP will not boot into programming mode unless <code>GPIO0</code> is tied to ground.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Leads from a dedicated 5V power supply are attached to the main contacts with reg/green alligator clips</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>After confirming that each point is soldered sufficiently and wired to the correct pin on your USB &lt;-&gt; Serial programmer, turn the dedicated power supply on and you should be able to flash.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">‚ùØ esptool.py --chip esp32 --port /dev/ttyUSB0 --baud <span class="m">921600</span> --before default_reset --after hard_reset write_flash -z --flash_mode dout --flash_freq 40m --flash_size detect 0x1000 bootloader_dout_40m.bin 0x8000 partitions.bin 0xe000 boot_app0.bin 0x10000 tasmota32solo1.bin
</span></span><span class="line"><span class="cl">esptool.py v3.2
</span></span><span class="line"><span class="cl">Serial port /dev/ttyUSB0
</span></span><span class="line"><span class="cl">Connecting.....
</span></span><span class="line"><span class="cl">&lt;...&gt;
</span></span><span class="line"><span class="cl">Stub running...
</span></span><span class="line"><span class="cl">Changing baud rate to <span class="m">921600</span>
</span></span><span class="line"><span class="cl">Changed.
</span></span><span class="line"><span class="cl">Configuring flash size...
</span></span><span class="line"><span class="cl">Auto-detected Flash size: 4MB
</span></span><span class="line"><span class="cl">Flash will be erased from 0x00001000 to 0x00004fff...
</span></span><span class="line"><span class="cl">Flash will be erased from 0x00008000 to 0x00008fff...
</span></span><span class="line"><span class="cl">Flash will be erased from 0x0000e000 to 0x0000ffff...
</span></span><span class="line"><span class="cl">Flash will be erased from 0x00010000 to 0x00157fff...
</span></span><span class="line"><span class="cl">Compressed <span class="m">15536</span> bytes to 10862...
</span></span><span class="line"><span class="cl">Wrote <span class="m">15536</span> bytes <span class="o">(</span><span class="m">10862</span> compressed<span class="o">)</span> at 0x00001000 in 0.4 seconds <span class="o">(</span>effective 353.8 kbit/s<span class="o">)</span>...
</span></span><span class="line"><span class="cl">&lt;...&gt;
</span></span><span class="line"><span class="cl">Hash of data verified.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Leaving...
</span></span><span class="line"><span class="cl">Hard resetting via RTS pin...
</span></span></code></pre></td></tr></table>
</div>
</div><p>Turn off the dedicated 5V supply and desolder the <code>GPIO0</code> wire and the <code>3V3</code> &lt;-&gt; <code>EN</code> jumper.
Leave the <code>RX</code>, <code>TX</code>, and <code>GND</code> wires in place so you can easily check the boot logs to confirm Tasmota flashed OK:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">‚ùØ screen /dev/ttyUSB0 <span class="m">115200</span>
</span></span><span class="line"><span class="cl">ets Jun  <span class="m">8</span> <span class="m">2016</span> 00:22:57
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">rst:0x1 <span class="o">(</span>POWERON_RESET<span class="o">)</span>,boot:0x13 <span class="o">(</span>SPI_FAST_FLASH_BOOT<span class="o">)</span>
</span></span><span class="line"><span class="cl">configsip: 0, SPIWP:0xee
</span></span><span class="line"><span class="cl">clk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x00
</span></span><span class="line"><span class="cl">mode:DOUT, clock div:2
</span></span><span class="line"><span class="cl">load:0x3fff0030,len:184
</span></span><span class="line"><span class="cl">load:0x40078000,len:12352
</span></span><span class="line"><span class="cl">load:0x40080400,len:2912
</span></span><span class="line"><span class="cl">entry 0x400805c4
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">00:00:00.002-228/73 HDW: ESP32-S0WD-OEM 
</span></span><span class="line"><span class="cl">./components/esp_littlefs/src/littlefs/lfs.c:1071:error: Corrupted dir pair at <span class="o">{</span>0x0, 0x1<span class="o">}</span>
</span></span><span class="line"><span class="cl">00:00:00.777-231/73 UFS: FlashFS mounted with <span class="m">312</span> kB free
</span></span><span class="line"><span class="cl">00:00:00.782-231/73 CFG: Use defaults
</span></span><span class="line"><span class="cl">00:00:00.893 QPC: Reset
</span></span><span class="line"><span class="cl">00:00:00.941 BRY: Berry initialized, RAM <span class="nv">used</span><span class="o">=</span><span class="m">3849</span>
</span></span><span class="line"><span class="cl">00:00:00.950 BRY: no <span class="s1">&#39;preinit.be&#39;</span>
</span></span><span class="line"><span class="cl">00:00:00.963 Project tasmota - Tasmota Version 10.1.0<span class="o">(</span>tasmota<span class="o">)</span>-2_0_1_1<span class="o">(</span>2021-12-08T14:50:34<span class="o">)</span>
</span></span><span class="line"><span class="cl">00:00:00.984 BRY: no <span class="s1">&#39;autoexec.be&#39;</span>
</span></span><span class="line"><span class="cl">00:00:00.243 WIF: WifiManager active <span class="k">for</span> <span class="m">3</span> minutes
</span></span><span class="line"><span class="cl">00:00:01.200 HTP: Web server active on tasmota-197907-6407 with IP address 192.168.4.1
</span></span></code></pre></td></tr></table>
</div>
</div><p>After confirming a successful flash/boot, you can continue to configure Tasmota via the serial console or just power off and de-solder all wires and finish configuration after you re-assemble.</p>
<h2 id="templates">Templates</h2>
<p>The ESP32 controls the lamp via 3 GPIO pins:</p>
<ul>
<li><code>GPIO04</code>: Global light enable/disable.</li>
<li><code>GPIO19</code>: Cold White channel</li>
<li><code>GPIO21</code>: Warm White channel</li>
</ul>
<p>Irrespective of what the WW or CW channel are doing, there will be no light if <code>GPIO4</code> is not high.
This means you have two choices for how to configure the GPIO.</p>
<p>Tasmota will disable both <code>GPIO19</code> and <code>GPIO21</code> when the light is switched off so there really is no need for independent control via <code>GPIO4</code>.
This template keeps <code>GPIO4</code> high and relies on Tasmota setting  to fully off to shut the light off.</p>
<p>Most people should use this template.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span><span class="nt">&#34;NAME&#34;</span><span class="p">:</span><span class="s2">&#34;Mijia Desk Lamp 1S (MJGJD02YL)&#34;</span><span class="p">,</span><span class="nt">&#34;GPIO&#34;</span><span class="p">:[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">3840</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">416</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">417</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span><span class="nt">&#34;FLAG&#34;</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="nt">&#34;BASE&#34;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="nt">&#34;CMND&#34;</span><span class="p">:</span><span class="s2">&#34;DimmerRange 45,255&#34;</span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>If, for some reason, you want to control the global on/off (<code>GPIO04</code>) independently of the WW/CW channels, use this template:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span><span class="nt">&#34;NAME&#34;</span><span class="p">:</span><span class="s2">&#34;Mijia Desk Lamp 1S (MJGJD02YL)&#34;</span><span class="p">,</span><span class="nt">&#34;GPIO&#34;</span><span class="p">:[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">224</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">416</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">417</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span><span class="nt">&#34;FLAG&#34;</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="nt">&#34;BASE&#34;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="nt">&#34;CMND&#34;</span><span class="p">:</span><span class="s2">&#34;DimmerRange 45,255&#34;</span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>If you do not need dimmer control and only need full on/off control, you can adjust the module so <code>GPIO{04,19,21}</code> are always high, low or simple on/off outputs by configuring them to be of type <code>Relay</code> instead of <code>PWM</code> outputs.</p>
<h3 id="dimmer-range">Dimmer Range</h3>
<p>In testing, extremely low brightness values for both the WW and CW channel had some undesirable behavior:</p>
<ul>
<li>Values lower than ~30 didn&rsquo;t light at all</li>
<li>Values between 30-35 caused unpleasant flicker</li>
<li>Values lower than ~40 would also cause flicker when attempting to light the WW <em>and</em> CW channels together</li>
</ul>
<p>For this reason, a <code>DimmerRange</code> of 45-255 is suggested.
Tasmota will let you dim the light as low as possible without flicker.</p>
<p>Your lamp, eyes and needs will differ so feel free to see if a lower <code>dimmer</code> value will work for you by unlocking the full dimmer range with <code>DimmerRange 0,255</code> and then playing with the <code>ct</code> and <code>dimmer</code> commands to find the lowest tolerable brightness for your needs.</p>
<p>That is why you see the <code>DimmerRange 45,255</code> command in the above templates.</p>
<h3 id="pcbic-markings">PCB/IC Markings</h3>
<p>Some of the interesting ICs and PCB markings</p>
<h4 id="lamp">Lamp</h4>
<ul>
<li>PCB is labeled <code>Yeelight Spider 1S V06</code>, <code>20210714 by XJD</code>, <code>94V-0</code>,  <code>Y Y21M09D13</code>, <code>JUl 7.820.0874-1</code></li>
<li>PCB has a QR code / sticker with <code>WF-E32-RWY1</code>, <code>Spider1S</code>, and the device mac address</li>
<li><code>SGM4065</code>: <a href="https://www.sg-micro.de/show-product-611.html" target="_blank" rel="noopener noreffer">Over-Voltage Protection IC and Li+ Charger Front-End Protection IC with LDO Mode</a></li>
<li>Some DFN-10 package that is marked with either <code>WRDPA</code> or <code>WRQPA</code> or <code>WR0PA</code>. It&rsquo;s a little hard to tell as the markings are super faint and I can&rsquo;t get them super clear even with high contrast / inverted color image filters. There are several of them with identical circuitry through the length of the board so this IC is some sort of pwm dimmable constant current LED driver.</li>
<li><code>ESP32-D0WD</code>: the star of the show</li>
<li><code>GD25Q32(B)</code>: a 4096 kB SPI flash chip</li>
<li>The lamp body is marked with <code>CMIT ID: 2021DP11423</code></li>
</ul>
<h4 id="remote">Remote</h4>
<ul>
<li>PCB labeled with <code>100-P806D1-1B-A1</code>, <code>Yeelight Spider 1S RC Board V02</code>, <code>20210716 by XJD</code></li>
<li><code>MHCB07P</code>. This is marked on the tiny BTLE module inside the remote. Not too many search <a href="https://twitter.com/simransingh931/status/1418120923568246786" target="_blank" rel="noopener noreffer">results</a> show <a href="https://www.ec.ust.hk/hackathon/2021/document/xiaomi_0319_eng.pdf" target="_blank" rel="noopener noreffer">up</a>.</li>
<li><code>CMIT ID: 2020DP3172(M)</code></li>
</ul>
<h2 id="mugjd01yl">MUGJD01YL</h2>
<p><figure >

    
        
    

    

    <figcaption>
        
        <p>
        Product details for the lamp that can&#39;t be converted to run Tasmota.
        
            Courtesy of @htvekov
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The PCB is held in the tube with similar plastic &#39;sleds&#39;. They are secured with screws rather than heatstake so they are easier to remove. The move to heatstake in the revised edition was likely to reduce costs.
        
            Courtesy of @htvekov
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        
        
            Courtesy of @htvekov
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        
        
            Courtesy of @htvekov
        
        </p> 
    </figcaption>
    
</figure>

</p>
]]></description></item><item><title>Using Home Assistant to dynamically layout openHasp widgets</title><link>https://karlquinsland.com/lanbon-l8-tuya-lcd-switch-openhasp/</link><pubDate>Tue, 18 Jan 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/lanbon-l8-tuya-lcd-switch-openhasp/</guid><description><![CDATA[<h1 id="background">Background</h1>
<p>This is one of those posts that sat in the <code>Drafts</code> folder for <em>way</em> too long.
Just before release, I&rsquo;d discover something new that would warrant substantial rewrites.
After several delays, false starts and re-writes, I finally have something that is mostly new <em>and</em> worth sharing with the world.</p>
<p>Like with the past few <a href="https://karlquinsland.com/categories/teardown/" rel="">teardown</a> posts, this one also started off as a &lsquo;cart-stuffer&rsquo; item so I could unlock a more generous discount on the total purchase. The listing that caught my eye had the generic title:</p>
<pre><code>EU US Wifi LCD Smart Wall Light Touch Switch Tuya Smart Life App Remote Control ON OFF Timer Voice Control For Google Home Alexa
</code></pre>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Naturally, a cursory check for existing writeups / teardowns didn&rsquo;t yield much.</p>
<p>I did have some hope that the <code>Tuya</code> compatibility meant an easily hacked ESP module running the show and not a proprietary module.
It was unlikely that the device would be Android powered at that price-point and an ESP8266 series would be woefully under powered for direct LCD control so &hellip; fingers crossed for an ESP32 module!
Or, at the very least there might be a way to retrofit in an ESP module like with the recent Mi-Boxer LED controller that <a href="https://github.com/arendst/Tasmota/issues/7385#issuecomment-991848762" target="_blank" rel="noopener noreffer">I helped to integrate with Tasmota</a>.</p>
<p>The <em>plan</em> was to do a teardown and dump as much technical data as I could possibly gather in an evening or two and conclude with a feasibility assessment of hacking the device for use with Home Assistant.</p>
<h2 id="generic-becomes-lanbon">Generic becomes Lanbon</h2>
<p>Immediately after opening the shipping box and getting eyes on the actual product packaging, it was clear that this was a Lanbon L8 series module.</p>
<p>A quick google later and it turns out that the venerable blakadder.com has <a href="https://blakadder.com/lanbon-L8/" target="_blank" rel="noopener noreffer">already covered this device</a>&hellip; <em>and</em> documented <a href="https://blakadder.com/lanbon-L8-custom-firmware/" target="_blank" rel="noopener noreffer">it&rsquo;s Tasmota compatibility</a>!</p>
<p>So much for publishing a teardown and trying to figure out if Home Assistant integration was feasible üòï.</p>
<p>Funny how once you have the &lsquo;magic query string&rsquo;, google starts to yield <em>a ton</em> of relevant results!
Just after finding the aforementioned blakadder.com posts on the L8 device, I found two <em>very</em> helpful sources of more information:</p>
<ul>
<li>Somebody by the name of Jan Newmarch has published a <a href="https://jan.newmarch.name/IoT/Home/Lanbon/" target="_blank" rel="noopener noreffer">comprehensive dive</a> into the protocol(s) used by the stock firmware / other devices in the Lanbon family.</li>
<li>This <a href="https://haswitchplate.github.io/openHASP-docs/latest/devices/lanbon-l8/" target="_blank" rel="noopener noreffer">page dedicated to the Lanbon L8</a> from a project called openHasp.</li>
</ul>
<p>I thought that second link seemed familiar&hellip;ü§î.</p>
<p>Turns out, the <a href="https://haswitchplate.github.io/openHASP-docs/latest/" target="_blank" rel="noopener noreffer">openHASP project</a> is a <em>substantial</em> rewrite of the initial software that powered my <a href="https://karlquinsland.com/enhanced-homeassistantswitchplate/" rel="">Enhanced HomeAssistant Switch Plate (eHasp)</a> project.</p>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>Info<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">While digging through the above links, I realized that the model I had opened up had a different PCB layout.
In the interest of adding to the collective internet KB, photos and some other technical details from the model I tore apart are <a href="#teardown" rel="">below</a>.</div>
        </div>
    </div>
<h1 id="openhasp">openHasp</h1>
<p>As opposed to the <a href="https://github.com/aderusha/HASwitchPlate" target="_blank" rel="noopener noreffer">old HASP project</a>, openHasp leverages more powerful processors that can drive the LCD directly; graphical assets no longer need to be compiled down to a LCD-specific firmware before use and the content of the <em>entire</em> display <strong>can be arbitrarily manipulated at runtime</strong>!</p>
<p>openHasp <a href="https://haswitchplate.github.io/openHASP-docs/0.6/design/pages/" target="_blank" rel="noopener noreffer">uses <code>json</code> like files</a> to store the UI/widgets layout and configuration.
On boot, the content of the <code>jsonl</code> is parsed and turned into the actual UI widgets that are displayed on screen.
For example, <a href="https://haswitchplate.github.io/openHASP-docs/0.6/design/objects/#button" target="_blank" rel="noopener noreffer">here is the example <code>jsonl</code></a> that renders two buttons:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span><span class="nt">&#34;page&#34;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="nt">&#34;id&#34;</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span><span class="nt">&#34;obj&#34;</span><span class="p">:</span><span class="s2">&#34;btn&#34;</span><span class="p">,</span><span class="nt">&#34;x&#34;</span><span class="p">:</span><span class="mi">10</span><span class="p">,</span><span class="nt">&#34;y&#34;</span><span class="p">:</span><span class="mi">40</span><span class="p">,</span><span class="nt">&#34;w&#34;</span><span class="p">:</span><span class="mi">105</span><span class="p">,</span><span class="nt">&#34;h&#34;</span><span class="p">:</span><span class="mi">90</span><span class="p">,</span><span class="nt">&#34;toggle&#34;</span><span class="p">:</span><span class="kc">false</span><span class="p">,</span><span class="nt">&#34;text&#34;</span><span class="p">:</span><span class="s2">&#34;Button&#34;</span><span class="p">,</span><span class="nt">&#34;mode&#34;</span><span class="p">:</span><span class="s2">&#34;break&#34;</span><span class="p">,</span><span class="nt">&#34;align&#34;</span><span class="p">:</span><span class="s2">&#34;center&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span><span class="nt">&#34;page&#34;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="nt">&#34;id&#34;</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span><span class="nt">&#34;obj&#34;</span><span class="p">:</span><span class="s2">&#34;btn&#34;</span><span class="p">,</span><span class="nt">&#34;x&#34;</span><span class="p">:</span><span class="mi">125</span><span class="p">,</span><span class="nt">&#34;y&#34;</span><span class="p">:</span><span class="mi">40</span><span class="p">,</span><span class="nt">&#34;w&#34;</span><span class="p">:</span><span class="mi">105</span><span class="p">,</span><span class="nt">&#34;h&#34;</span><span class="p">:</span><span class="mi">90</span><span class="p">,</span><span class="nt">&#34;toggle&#34;</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span><span class="nt">&#34;text&#34;</span><span class="p">:</span><span class="s2">&#34;#FFD700 Toggle# Button&#34;</span><span class="p">,</span><span class="nt">&#34;mode&#34;</span><span class="p">:</span><span class="s2">&#34;break&#34;</span><span class="p">,</span><span class="nt">&#34;align&#34;</span><span class="p">:</span><span class="s2">&#34;center&#34;</span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><figure >

    
        
    

    

    <figcaption>
        
        <p>
        Image credit/source:
        <a href="https://haswitchplate.github.io/openHASP-docs/0.6/design/objects/#button"> 
            openHasp Docs
        </a> 
        </p> 
    </figcaption>
    
</figure>


<p>Notice how the absolute coordinates on screen (<code>x</code> and <code>y</code>) and and absolute width (<code>w</code>) and height (<code>w</code>) properties are explicitly declared.
The only reason the buttons look appropriately sized/positioned in the above screenshot is because someone took the time to calculate the appropriate values for the particular screen resolution and orientation.</p>
<p>The above <code>jsonl</code> example would look different on any openHasp device with a different screen orientation or resolution!
Manually calculating the exact size and position of every widget for <em>each</em> class of device isn&rsquo;t so bad if you&rsquo;re planning on deploying the same file to several instances of the same device&hellip; but it starts be become a real headache if you want to deploy the same layout to 2+ different types of device.</p>
<p>The L8 devices are designed to be installed into a wall electrical box; they don&rsquo;t sit well on my desk so prototyping various interface files on a L8 device isn&rsquo;t the easiest.
Instead, I am using a <a href="https://haswitchplate.github.io/openHASP-docs/latest/devices/wt32-sc01/" target="_blank" rel="noopener noreffer">device with a higher resolution</a> and bigger screen that <em>does</em> work well on a desk to prototype the various <code>jsonl</code> files.</p>
<p>If you&rsquo;re thinking that calculating the appropriate location for various UI widgets on one device and then having to re-do the math for the intended deploy targets sounds like a task better suited to a computer&hellip; you&rsquo;re right!</p>
<h2 id="dynamic-layouts-with-home-assistant">Dynamic Layouts with Home Assistant</h2>
<p>Fortunately, the properties of <em>every</em> UI widget can be modified over the network even <em>after</em> the <code>jsonl</code> file has been parsed and the initial display has been painted!</p>
<p>My C++ skills are pretty weak so contributing new code to enable dynamic layouts directly to the openHasp codebase is not immediately practical.
There is, however, a robust <a href="https://haswitchplate.github.io/openHASP-docs/latest/integrations/home-assistant/howto/" target="_blank" rel="noopener noreffer">Home Assistant integration</a> published in the form of a <a href="https://github.com/HASwitchPlate/openHASP-custom-component" target="_blank" rel="noopener noreffer">custom component</a>.
Home Assistant means Python and some Python code to calculate the appropriate position/size for a given element <em>is</em> immediately within my means.</p>
<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>Warning<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">A few <a href="https://github.com/HASwitchPlate/openHASP/issues/278" target="_blank" rel="noopener noreffer">(small) changes to the openHasp firmware</a> were required to make this work.
Any <em>recent</em> build of <code>0.7</code> should work.
As of 2022-01, there is no release of the custom component that works with <code>0.7</code> out of the box so if installing through <a href="https://hacs.xyz/" target="_blank" rel="noopener noreffer">HACS</a>, <a href="https://github.com/HASwitchPlate/openHASP-custom-component/issues/87" target="_blank" rel="noopener noreffer">you will need to patch the custom component</a> so devices running <code>.0.7</code> can be controlled via Home Assistant.</div>
        </div>
    </div>
<p>Please see the <a href="https://haswitchplate.github.io/openHASP-docs/latest/integrations/home-assistant/sampl_conf/" target="_blank" rel="noopener noreffer">openHasp &lt;-&gt; Home Assistant docs</a> for background information, examples and a lot more detail on how Home Assistant and openHasp work together or if any of the <code>jsonl</code> and <code>yaml</code> below does not make sense.</p>
<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>Warning<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Please make sure that your openHasp device can connect to your MQTT broker and that the openHasp custom integration can discover and &lsquo;register&rsquo; your device with Home Assistant before proceeding!</div>
        </div>
    </div>
<h3 id="two-devices-one-pagesjsonl">Two devices, one <code>pages.jsonl</code></h3>
<p>The <code>pages.jsonl</code> file used for this post and the screenshots below is a (lightly) modified versions of the <a href="https://haswitchplate.github.io/openHASP-docs/latest/integrations/home-assistant/sampl_conf/#display-clock-and-temperature" target="_blank" rel="noopener noreffer">clock and temperature example</a> and the
<a href="https://haswitchplate.github.io/openHASP-docs/latest/integrations/examples/example-pagination/" target="_blank" rel="noopener noreffer">simple page navigation</a> examples with a room specific set of ui widgets.</p>
<p>That <em>singular</em> <code>pages.jsonl</code> file was uploaded it to two devices:</p>
<ul>
<li>Lanbon L8 with a 240x320 resolution</li>
<li>WT32-SC01 module with a 320x480 resolution</li>
</ul>
<p>Each screenshot was taken with the device display configured to 0¬∫ and 90¬∫ of rotation.
A reboot was required for the configuration change to take effect but I made <em>zero</em> changes to the <code>pages.jsonl</code> file on the device between changing the screen orientation.</p>
<p><figure >

    
        
    

    

    <figcaption>
        
        <p>
        Lanbon L8 in it&#39;s rotated &#39;landscape&#39; orientation
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Lanbon L8 in it&#39;s default &#39;portrait&#39; orientation
        
            
        
        </p> 
    </figcaption>
    
</figure>

</p>
<p><figure >

    
        
    

    

    <figcaption>
        
        <p>
        wt32-sc01 in &#39;landscape&#39; orientation.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        wt32-sc01 in &#39;portrait&#39; orientation.
        
            
        
        </p> 
    </figcaption>
    
</figure>

</p>
<h3 id="building-a-pagesjsonl">building a <code>pages.jsonl</code></h3>
<p>You don&rsquo;t need to use this <em>exact</em> technique to build the <code>pages.jsonl</code> file; it works well for my needs / development flow.
All that matters is that you get every UI element for every page into a single <code>pages.jsonl</code> file and then get that file uploaded to the device(s) in question.
The page/id values declared in your <code>jsonl</code> file <em>must match</em> the object IDs that you will use to configure the Home Assistant integration.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">‚ùØ cat header.frag.jsonl footer.frag.jsonl room.frag.jsonl &gt; pages.jsonl
</span></span><span class="line"><span class="cl">‚ùØ curl http://roomPlateIpv4Here/edit --form <span class="nv">name</span><span class="o">=</span>data --form <span class="nv">data</span><span class="o">=</span>@pages.jsonl
</span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>Info<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>I store the combined files in <code>pages.jsonl</code> because this is the default page that an openHasp device will render.
You can change this setting via the web UI: <code>http://roomPlateIpv4Here/config/hasp</code> or via telnet:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">‚ùØ telnet roomPlateIpv4Here
</span></span><span class="line"><span class="cl">&lt;...&gt;
</span></span><span class="line"><span class="cl">prompt&gt; config/hasp <span class="o">{</span><span class="s2">&#34;pages&#34;</span>:<span class="s2">&#34;/foo.jsonl&#34;</span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></div>
        </div>
    </div>
<h4 id="headerfragjsonl"><code>header.frag.jsonl</code></h4>
<p>This contains the three text labels that I wish to have at the top of <em>every</em> openHasp device I deploy.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;page&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;comment&#34;</span><span class="p">:</span> <span class="s2">&#34;Default to page0 as the header and page/layout&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;comment&#34;</span><span class="p">:</span> <span class="s2">&#34;Time in the top left&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;obj&#34;</span><span class="p">:</span> <span class="s2">&#34;label&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;text&#34;</span><span class="p">:</span> <span class="s2">&#34;00:00&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;align&#34;</span><span class="p">:</span> <span class="s2">&#34;center&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;bg_color&#34;</span><span class="p">:</span> <span class="s2">&#34;#2C3E50&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;comment&#34;</span><span class="p">:</span> <span class="s2">&#34;Temp in the middle&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;obj&#34;</span><span class="p">:</span> <span class="s2">&#34;label&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;text&#34;</span><span class="p">:</span> <span class="s2">&#34;00.0¬∞C&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;align&#34;</span><span class="p">:</span> <span class="s2">&#34;center&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;bg_color&#34;</span><span class="p">:</span> <span class="s2">&#34;#2C3E50&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;comment&#34;</span><span class="p">:</span> <span class="s2">&#34;Humidity in the top right&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;obj&#34;</span><span class="p">:</span> <span class="s2">&#34;label&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;text&#34;</span><span class="p">:</span> <span class="s2">&#34;00.0%&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;align&#34;</span><span class="p">:</span> <span class="s2">&#34;right&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;bg_color&#34;</span><span class="p">:</span> <span class="s2">&#34;#2C3E50&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="footerfragjsonl"><code>footer.frag.jsonl</code></h4>
<p>This contains the three page navigation buttons that I wish to have at the bottom of <em>every</em> openHasp device that I deploy.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;comment&#34;</span><span class="p">:</span> <span class="s2">&#34;tab nav on the bottom, prev&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;obj&#34;</span><span class="p">:</span> <span class="s2">&#34;btn&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;action&#34;</span><span class="p">:</span> <span class="s2">&#34;prev&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;bg_color&#34;</span><span class="p">:</span> <span class="s2">&#34;#2C3E50&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;text&#34;</span><span class="p">:</span> <span class="s2">&#34;\uE141&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;text_color&#34;</span><span class="p">:</span> <span class="s2">&#34;#FFFFFF&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;radius&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;border_side&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;text_font&#34;</span><span class="p">:</span> <span class="mi">28</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;obj&#34;</span><span class="p">:</span> <span class="s2">&#34;btn&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;action&#34;</span><span class="p">:</span> <span class="s2">&#34;back&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;bg_color&#34;</span><span class="p">:</span> <span class="s2">&#34;#2C3E50&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;text&#34;</span><span class="p">:</span> <span class="s2">&#34;\uE2DC&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;text_color&#34;</span><span class="p">:</span> <span class="s2">&#34;#FFFFFF&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;radius&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;border_side&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;text_font&#34;</span><span class="p">:</span> <span class="mi">22</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;obj&#34;</span><span class="p">:</span> <span class="s2">&#34;btn&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;action&#34;</span><span class="p">:</span> <span class="s2">&#34;next&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;bg_color&#34;</span><span class="p">:</span> <span class="s2">&#34;#2C3E50&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;text&#34;</span><span class="p">:</span> <span class="s2">&#34;\uE142&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;text_color&#34;</span><span class="p">:</span> <span class="s2">&#34;#FFFFFF&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;radius&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;border_side&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;text_font&#34;</span><span class="p">:</span> <span class="mi">28</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="roomfragjson"><code>room.frag.json</code></h4>
<p>This file should contain all the page(s) and UI widgets that are unique to the openHasp device deployed into the room that I will call <code>room</code> for the purposes of this post.
As a <strong>demonstration</strong>, I have set up three buttons that control each of the three relays on a L8 device; you will almost certainly want to add multiple pages / other UI widgets as needed.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;page&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;comment&#34;</span><span class="p">:</span> <span class="s2">&#34;primary controls for the 3 relays&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">101</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;comment&#34;</span><span class="p">:</span> <span class="s2">&#34;relay1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;obj&#34;</span><span class="p">:</span> <span class="s2">&#34;btn&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;toggle&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;text&#34;</span><span class="p">:</span> <span class="s2">&#34;relay1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;mode&#34;</span><span class="p">:</span> <span class="s2">&#34;break&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;align&#34;</span><span class="p">:</span> <span class="s2">&#34;center&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;groupid&#34;</span><span class="p">:</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">102</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;comment&#34;</span><span class="p">:</span> <span class="s2">&#34;relay2&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;obj&#34;</span><span class="p">:</span> <span class="s2">&#34;btn&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;toggle&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;text&#34;</span><span class="p">:</span> <span class="s2">&#34;relay2&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;mode&#34;</span><span class="p">:</span> <span class="s2">&#34;break&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;align&#34;</span><span class="p">:</span> <span class="s2">&#34;center&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;groupid&#34;</span><span class="p">:</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">103</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;comment&#34;</span><span class="p">:</span> <span class="s2">&#34;relay3&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;obj&#34;</span><span class="p">:</span> <span class="s2">&#34;btn&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;toggle&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;text&#34;</span><span class="p">:</span> <span class="s2">&#34;relay3&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;mode&#34;</span><span class="p">:</span> <span class="s2">&#34;break&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;align&#34;</span><span class="p">:</span> <span class="s2">&#34;center&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;groupid&#34;</span><span class="p">:</span> <span class="mi">3</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="configure-home-assistant">Configure Home Assistant</h3>
<p>After the <code>pages.jsonl</code> is deployed to <em>each</em> of the openHasp devices, you will need to create a configuration file for Home Assistant.
For the above screenshots, I created two <em>identical</em> ‚É∞ copies of the yaml below</p>
<p>‚É∞  Other than the device name; in one file, the name was changed from <code>plate00</code> to <code>plate01</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span><span class="lnt">160
</span><span class="lnt">161
</span><span class="lnt">162
</span><span class="lnt">163
</span><span class="lnt">164
</span><span class="lnt">165
</span><span class="lnt">166
</span><span class="lnt">167
</span><span class="lnt">168
</span><span class="lnt">169
</span><span class="lnt">170
</span><span class="lnt">171
</span><span class="lnt">172
</span><span class="lnt">173
</span><span class="lnt">174
</span><span class="lnt">175
</span><span class="lnt">176
</span><span class="lnt">177
</span><span class="lnt">178
</span><span class="lnt">179
</span><span class="lnt">180
</span><span class="lnt">181
</span><span class="lnt">182
</span><span class="lnt">183
</span><span class="lnt">184
</span><span class="lnt">185
</span><span class="lnt">186
</span><span class="lnt">187
</span><span class="lnt">188
</span><span class="lnt">189
</span><span class="lnt">190
</span><span class="lnt">191
</span><span class="lnt">192
</span><span class="lnt">193
</span><span class="lnt">194
</span><span class="lnt">195
</span><span class="lnt">196
</span><span class="lnt">197
</span><span class="lnt">198
</span><span class="lnt">199
</span><span class="lnt">200
</span><span class="lnt">201
</span><span class="lnt">202
</span><span class="lnt">203
</span><span class="lnt">204
</span><span class="lnt">205
</span><span class="lnt">206
</span><span class="lnt">207
</span><span class="lnt">208
</span><span class="lnt">209
</span><span class="lnt">210
</span><span class="lnt">211
</span><span class="lnt">212
</span><span class="lnt">213
</span><span class="lnt">214
</span><span class="lnt">215
</span><span class="lnt">216
</span><span class="lnt">217
</span><span class="lnt">218
</span><span class="lnt">219
</span><span class="lnt">220
</span><span class="lnt">221
</span><span class="lnt">222
</span><span class="lnt">223
</span><span class="lnt">224
</span><span class="lnt">225
</span><span class="lnt">226
</span><span class="lnt">227
</span><span class="lnt">228
</span><span class="lnt">229
</span><span class="lnt">230
</span><span class="lnt">231
</span><span class="lnt">232
</span><span class="lnt">233
</span><span class="lnt">234
</span><span class="lnt">235
</span><span class="lnt">236
</span><span class="lnt">237
</span><span class="lnt">238
</span><span class="lnt">239
</span><span class="lnt">240
</span><span class="lnt">241
</span><span class="lnt">242
</span><span class="lnt">243
</span><span class="lnt">244
</span><span class="lnt">245
</span><span class="lnt">246
</span><span class="lnt">247
</span><span class="lnt">248
</span><span class="lnt">249
</span><span class="lnt">250
</span><span class="lnt">251
</span><span class="lnt">252
</span><span class="lnt">253
</span><span class="lnt">254
</span><span class="lnt">255
</span><span class="lnt">256
</span><span class="lnt">257
</span><span class="lnt">258
</span><span class="lnt">259
</span><span class="lnt">260
</span><span class="lnt">261
</span><span class="lnt">262
</span><span class="lnt">263
</span><span class="lnt">264
</span><span class="lnt">265
</span><span class="lnt">266
</span><span class="lnt">267
</span><span class="lnt">268
</span><span class="lnt">269
</span><span class="lnt">270
</span><span class="lnt">271
</span><span class="lnt">272
</span><span class="lnt">273
</span><span class="lnt">274
</span><span class="lnt">275
</span><span class="lnt">276
</span><span class="lnt">277
</span><span class="lnt">278
</span><span class="lnt">279
</span><span class="lnt">280
</span><span class="lnt">281
</span><span class="lnt">282
</span><span class="lnt">283
</span><span class="lnt">284
</span><span class="lnt">285
</span><span class="lnt">286
</span><span class="lnt">287
</span><span class="lnt">288
</span><span class="lnt">289
</span><span class="lnt">290
</span><span class="lnt">291
</span><span class="lnt">292
</span><span class="lnt">293
</span><span class="lnt">294
</span><span class="lnt">295
</span><span class="lnt">296
</span><span class="lnt">297
</span><span class="lnt">298
</span><span class="lnt">299
</span><span class="lnt">300
</span><span class="lnt">301
</span><span class="lnt">302
</span><span class="lnt">303
</span><span class="lnt">304
</span><span class="lnt">305
</span><span class="lnt">306
</span><span class="lnt">307
</span><span class="lnt">308
</span><span class="lnt">309
</span><span class="lnt">310
</span><span class="lnt">311
</span><span class="lnt">312
</span><span class="lnt">313
</span><span class="lnt">314
</span><span class="lnt">315
</span><span class="lnt">316
</span><span class="lnt">317
</span><span class="lnt">318
</span><span class="lnt">319
</span><span class="lnt">320
</span><span class="lnt">321
</span><span class="lnt">322
</span><span class="lnt">323
</span><span class="lnt">324
</span><span class="lnt">325
</span><span class="lnt">326
</span><span class="lnt">327
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># plate00 is a test L8 module</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Has a resolution of 240x320</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># The top left corner is 0,0, X grows positive to the right and Y grows positive down</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">plate00</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">## TODO: is there a way to fix this? Maybe a HA feature request or openHasp/CC change...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Would be really nice if HA had some way to save templates and load them</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#   that way I don&#39;t have to declare the same variables over and over...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">objects</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">###</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># COMMON</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">###</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Header: Time</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">obj</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;p0b1&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Align left most, If we do go over our permitted length, loop</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;align&#34;: </span><span class="s2">&#34;left&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;text&#34;: </span><span class="s2">&#34;{{ states(&#39;sensor.time&#39;) }}&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;mode&#34;: </span><span class="s2">&#34;loop&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Draw the labels with a 1% margin from the top and sides</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;x&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrHorMargin}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;y&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrVrtMargin}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Width is 1/3 of the screen width after subtracting margins</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;w&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set numObj = 3 %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set usableHdrWd = scnWd-(2*hdrHorMargin) %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrLblWd = (usableHdrWd/numObj) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrLblWd}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Height is 10% of the screen, after margin</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;h&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrLblHt = hdrHt-hdrVrtMargin %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrLblHt}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Header: Temp</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">obj</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;p0b2&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Align center, If we do go over our permitted length, loop</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;align&#34;: </span><span class="s2">&#34;center&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;text&#34;: </span><span class="s2">&#34;{{ states(&#39;sensor.room_temperature&#39;) }}¬∞C&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;mode&#34;: </span><span class="s2">&#34;loop&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Draw the labels with a 1% margin from the top and sides</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;x&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set numObj = 3 %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set usableHdrWd = scnWd-(2*hdrHorMargin) %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrLblWd = (usableHdrWd/numObj) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrHorMargin+hdrLblWd}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;y&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrVrtMargin}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Width is 1/3 of the screen width after subtracting margins</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;w&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set numObj = 3 %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set usableHdrWd = scnWd-(2*hdrHorMargin) %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrLblWd = (usableHdrWd/numObj) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrLblWd}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Height is 10% of the screen, after margin</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;h&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrLblHt = hdrHt-hdrVrtMargin %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrLblHt}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Header: Humidity</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">obj</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;p0b3&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Align right most, If we do go over our permitted length, loop</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;align&#34;: </span><span class="s2">&#34;right&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;text&#34;: </span><span class="s2">&#34;{{ states(&#39;sensor.room_humidity&#39;) }}%&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;mode&#34;: </span><span class="s2">&#34;loop&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Draw the labels with a 1% margin from the top and sides</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;x&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set numObj = 3 %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set usableHdrWd = scnWd-(2*hdrHorMargin) %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrLblWd = (usableHdrWd/numObj) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrHorMargin+(2*hdrLblWd)}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;y&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrVrtMargin}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Width is 1/3 of the screen width after subtracting margins</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;w&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set numObj = 3 %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set usableHdrWd = scnWd-(2*hdrHorMargin) %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrLblWd = (usableHdrWd/numObj) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrLblWd}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Height is 10% of the screen, after margin</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;h&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrLblHt = hdrHt-hdrVrtMargin %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrLblHt}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># bottom nav: previous</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">obj</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;p0b6&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Left most button sits all the way up against the left side of the screen</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;x&#34;: </span><span class="m">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Start drawing the button from the bottom most pixel</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;y&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{scnHt-hdrHt}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># And since we have 3 buttons, 1/3 of the width</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;w&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set numObj = 3 %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set ftrBtnWd = (scnWd/numObj) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{ftrBtnWd-1}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># We want the bottom nav buttons to consume the bottom 10% of the screen</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;h&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set ftrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{ftrHt}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># bottom nav: home</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">obj</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;p0b7&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Start drawing exactly the next pixel over from where the first button stopped</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;x&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set numObj = 3 %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set ftrBtnWd = (scnWd/numObj) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{ftrBtnWd}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Start drawing the button from the bottom most pixel</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;y&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{scnHt-hdrHt}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># And since we have 3 buttons, 1/3 of the width</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;w&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set numObj = 3 %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set ftrBtnWd = (scnWd/numObj) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{ftrBtnWd-1}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># We want the bottom nav buttons to consume the bottom 10% of the screen</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;h&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set ftrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{ftrHt}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># bottom nav: next</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">obj</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;p0b8&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Start drawing exactly the next pixel over from where the first button stopped</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;x&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set numObj = 3 %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set ftrBtnWd = (scnWd/numObj) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{ftrBtnWd*2}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Start drawing the button from the bottom most pixel</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;y&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{scnHt-hdrHt}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># And since we have 3 buttons, 1/3 of the width</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;w&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set numObj = 3 %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set ftrBtnWd = (scnWd/numObj) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{ftrBtnWd}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># We want the bottom nav buttons to consume the bottom 10% of the screen</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;h&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set ftrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{ftrHt}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># ###</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># # Room Specific</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># ###</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># relay toggle 1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">obj</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;p1b101&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;x&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrHorMargin}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Figure out how tall the display is, subtract out the height of the header/footer and that&#39;s the usable</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">#   space. Within that usable space, we will want small margins.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;y&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrHt+hdrVrtMargin}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;w&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set usableHdrWd = scnWd-(2*hdrHorMargin) %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyWd = usableHdrWd %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{bdyWd}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># We want the bottom nav buttons to consume the bottom 10% of the screen</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;h&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set numObj = 3 %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set ftrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyHt = (scnHt - (hdrHt+ftrHt) - (2*hdrVrtMargin)) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyBtnVrtMargin = (bdyHt * 0.02) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyBtnHt = ((bdyHt-((numObj-1)*bdyBtnVrtMargin))/numObj) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{bdyBtnHt}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># relay toggle 2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">obj</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;p1b102&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;x&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrHorMargin}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Figure out how tall the display is, subtract out the height of the header/footer and that&#39;s the usable</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">#   space. Within that usable space, we will want small margins.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;y&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set numObj = 3 %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set ftrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyHt = (scnHt - (hdrHt+ftrHt) - (2*hdrVrtMargin)) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyBtnVrtMargin = (bdyHt * 0.02) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyBtnHt = ((bdyHt-((numObj-1)*bdyBtnVrtMargin))/numObj) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrHt+hdrVrtMargin+(1*bdyBtnHt+bdyBtnVrtMargin)}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;w&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set usableHdrWd = scnWd-(2*hdrHorMargin) %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyWd = usableHdrWd %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{bdyWd}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># We want the bottom nav buttons to consume the bottom 10% of the screen</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;h&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set numObj = 3 %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set ftrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyHt = (scnHt - (hdrHt+ftrHt) - (2*hdrVrtMargin)) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyBtnVrtMargin = (bdyHt * 0.02) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyBtnHt = ((bdyHt-((numObj-1)*bdyBtnVrtMargin))/numObj) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{bdyBtnHt}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># relay toggle 3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">obj</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;p1b103&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;x&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrHorMargin}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Figure out how tall the display is, subtract out the height of the header/footer and that&#39;s the usable</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">#   space. Within that usable space, we will want small margins.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;y&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set numObj = 3 %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set ftrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyHt = (scnHt - (hdrHt+ftrHt) - (2*hdrVrtMargin)) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyBtnVrtMargin = (bdyHt * 0.02) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyBtnHt = ((bdyHt-((numObj-1)*bdyBtnVrtMargin))/numObj) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{hdrHt+hdrVrtMargin+(2*(bdyBtnHt+bdyBtnVrtMargin))}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;w&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnWd = state_attr(&#39;openhasp.plate00&#39;, &#39;tftWidth&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHorMargin = (scnWd*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set usableHdrWd = scnWd-(2*hdrHorMargin) %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyWd = usableHdrWd %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{bdyWd}}</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># We want the bottom nav buttons to consume the bottom 10% of the screen</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">&#34;h&#34;: </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set numObj = 3 %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set scnHt = state_attr(&#39;openhasp.plate00&#39;, &#39;tftHeight&#39;) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set ftrHt = (scnHt*0.1) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set hdrVrtMargin = (scnHt*0.01) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyHt = (scnHt - (hdrHt+ftrHt) - (2*hdrVrtMargin)) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyBtnVrtMargin = (bdyHt * 0.02) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {% set bdyBtnHt = ((bdyHt-((numObj-1)*bdyBtnVrtMargin))/numObj) | int %}
</span></span></span><span class="line"><span class="cl"><span class="sd">          {{bdyBtnHt}}</span><span class="w">          
</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Tip<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>This technique <em>could</em> be considered overkill. Each template incurs some additional memory/cpu overhead on the Home Assistant instance.</p>
<p>While this technique is pretty helpful during rapid prototyping, at some point the additional resource usage is hard to justify for layouts that do not change often.</p>
<p>A reasonable compromise would be to leverage the template evaluation functionality via the Home Assistant Developer tools to calculate the positions and locations for each UI elements while building out your interface(s) and then copy the computed values into your <code>pages.jsonl</code> file once the layout has been more or less finalized.</p>
</div>
        </div>
    </div>
<p>And you&rsquo;re done!
You might need to restart Home Assistant or reload the openHasp component/configuration so your update YAML is picked up.
Assuming everything works, you should see a flurry of activity on your MQTT broker or the plate telnet console as the openHasp component renders each template and commands the plate to re-draw each UI element.</p>
<p>You can then re-configure your device with a new display orientation and then reboot it. As it connects back to your MQTT broker, Home Assistant will re-evaluate the templates with the inverted screen height/width and each UI widget should get re-painted.</p>
<p>If I had a way to reliably capture the content of the framebuffer as a video rather than a screenshot, I&rsquo;d include it here.
You&rsquo;ll just have to trust me when I say that It&rsquo;s kinda neat to watch this happen in real time.</p>
<h2 id="teardown">Teardown</h2>
<h3 id="product-packaging">Product packaging</h3>
<p>Since it&rsquo;s all but impossible to find any photos of the product packaging online, here&rsquo;s a few of those:</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Minimal instructions and wasteful packaging. Other than the small foam insert, this entire package can be recycled!
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The provided screws are NOT the US standard #6 32 thread-per-inch. They are slightly larger and will strip out any screw holes in an electrical box!
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h3 id="internals">Internals</h3>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        This particular model is the 3 relay version. Packaging claims 200W power. It&#39;s not clear if that is per channel or total. My money is on total.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>You can clearly see the revised PCB that is substantially different from the one featured on <a href="https://blakadder.com/lanbon-L8-custom-firmware/#disassembly" target="_blank" rel="noopener noreffer">this blakadder post</a>.
My PCB has a parasitic TuYa module also attached.
Almost none of the pins are connected to the PCB so the TuYa module is 100% self contained and commands the main ESP module via UART.</p>
<p>Removing the TuYa module is pretty painless with some hot air.
It can also be left alone and the openHasp binaries will just ignore it.
You can also place an order directly with Lanbon for units that do not have the TuYa module populated but this will require a minimum order quantity.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Generic relays, generic caps, generic transformers... don&#39;t switch any critical loads with this!
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        A closer look at what appears to be a dedicated power monitoring IC. It appears to monitor the aggregate of all three channels, not each individually. Very likely to make sure no more than 200W is switched at one time...
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<h3 id="pcbic-markings">PCB/IC Markings</h3>
<p>Some of the interesting ICs and PCB markings:</p>
<ul>
<li>
<p><code>CB3S</code>: TuYa <a href="https://developer.tuya.com/en/docs/iot/cb3s?id=Kai94mec0s076" target="_blank" rel="noopener noreffer">wifi module</a></p>
</li>
<li>
<p><code>HLW8012</code>: Single phase energy monitor chip</p>
</li>
<li>
<p><code>ESP32-WROVER-IB</code>: the primary ESP32 module that runs the show</p>
</li>
<li>
<p>Primary PCB is marked: <code>L8-HS_CB_V1.17(20210805)</code></p>
</li>
<li>
<p>Daughter / &lsquo;power&rsquo; board <code>L8-HS MB V1,14</code></p>
</li>
</ul>
]]></description></item><item><title>Generic RGB Wall Switch teardown</title><link>https://karlquinsland.com/rgb-wall-switch-teardown/</link><pubDate>Sat, 01 Jan 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/rgb-wall-switch-teardown/</guid><description><![CDATA[<p>Yep! Another teardown post! This one was also a cheap &ldquo;because i&rsquo;m curious&rdquo; post.</p>
<hr>
<h1 id="what">What</h1>
<p>It&rsquo;s a &lsquo;decora&rsquo; style wall switch with WiFI and an RGB color changing paddle.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>The product listing was very non specific:</p>
<blockquote>
<p>EU US WiFi Smart Wall Switch Push Button Timer Relay Switch Voice Remote Control RGB LED Night Light Lamp TUYA Alexa Google Home</p>
</blockquote>
<p>I saw <code>TuYa</code> in the item description and hoped that it would be based on an ESP8266 module or at least use a pin-compatible module. After all, there are a few such devices on the <a href="https://templates.blakadder.com/switch.html" target="_blank" rel="noopener noreffer">Wall Switches and Dimmers section</a> of the tasmota templates repository.</p>
<h2 id="teardown">Teardown</h2>
<p>Almost immediately after opening it became clear: the item is a variant of the <a href="https://templates.blakadder.com/moko_SSMS118-01AI.html" target="_blank" rel="noopener noreffer"><code>SSMS118-01AI</code></a> switch.</p>
<p>Other than that, the internals are pretty predictable / standard.</p>
<p>From the side you can see plastic clips holding the paddle to the Aluminum substrate.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>No screws on the back, so we probably open it from the front.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Not sure about how code compliant those wire terminal/lugs are.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>If the paddle was removed, the philips screws would be unobstructed.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>RGB leds on a thin PCB with a reflective sticker attached. The sticker probably makes the LEDs appear brighter.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Philips screws removed and the switch immediately splits in half. I wish everything was this easy to get into!</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Almost textbook design at this point; keep the mains voltage on it&rsquo;s own PCB and only send back low voltage / signal to the controller PCB.</p>
<p>The mains PCB attaches to the controller PCB via 3 sets of three male/female pin headers along the top and bottom of the left edge and one side of the right edge.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Sparsely populated and a generic no-name relay. But at least there&rsquo;s a fuse!</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Mains PCB is marked <code>HYS-00-004-MAIN_V1.1</code> with a datecode of <code>2019-5-7</code>.</p>
<p>Equally sparse controller PCB. Aside from the <em>massive</em> mechanical switch and the three transistors for the RGB leds, everything lives on the ESP module.
At first glance, the module looks like a standard ESP-12&hellip; but it isn&rsquo;t! There are 6 pins on each of the three edges, not the 8 that would be present on an ESP-12 module.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Controller PCB is marked <code>HYS-00-004-WIFI_V1.1</code> with a datecode of <code>2019-4-11</code>.</p>
<p>After a bit of reverse image searching, the ESP based module appears to be a WT8266-S1s. The datasheet can be found <a href="https://www.seeedstudio.com/document/word/WT8266-S1%20DataSheet%20V1.0.pdf" target="_blank" rel="noopener noreffer">here</a>.</p>
<p>To save you a click, here&rsquo;s the useful bit:</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>I checked a few of the pins listed on the  <a href="https://templates.blakadder.com/moko_SSMS118-01AI.html" target="_blank" rel="noopener noreffer"><code>SSMS118-01AI template</code></a> switch and they appeared to match the PCB shown above.</p>
<p>Thats all for this one!</p>
]]></description></item><item><title>Shelly Pro 4PM teardown</title><link>https://karlquinsland.com/shelly-pro-4pm-teardown/</link><pubDate>Sat, 01 Jan 2022 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/shelly-pro-4pm-teardown/</guid><description><![CDATA[<p>Yet another teardown post!</p>
<p>Curiosity got the better of me while putting together a BOM for a project and I decided to add one of the new Shelly devices to my order to bump the total over the threshold for a nice discount.</p>
<p>I have not seen a ton of discussion about what&rsquo;s inside of a any of the new Shelly Pro devices.
These &rsquo;next generation&rsquo; devices appear to all use a <a href="https://shelly-api-docs.shelly.cloud/gen2/" target="_blank" rel="noopener noreffer">common and more <em>uniform</em> API</a> which, apparently, is too demanding of the ESP8266 based hardware so it won&rsquo;t be backported.</p>
<p>A cursory google only reveals some light technical details from a <a href="https://www.shelly-support.eu/forum/index.php?thread/10795-shelly-pro-4pm-teardown/" target="_blank" rel="noopener noreffer">teardown post on a german site</a>. All of the pictures attached ot that post require a login üôÅ.</p>
<p>So here is <em>my</em> teardown. No login required!</p>
<hr>
<h1 id="what">What</h1>
<p>The Shelly Pro 4 PM is a rather compact DIN mounted relay/power monitoring module with some connectivity. The <code>4</code> is for the number of channels that can be independently switches and monitored.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>As for connectivity, the <a href="https://shelly.cloud/knowledge-base/devices/shelly-pro-4pm/" target="_blank" rel="noopener noreffer">official product page</a> sums it up nicely:</p>
<blockquote>
<p>Professional 4 channels relay with Wi-Fi, LAN, and Bluetooth connection, suitable for home and facility automation with remote control and precise power management. DIN rail mountable inside a breaker box. Enhanced safety features and compatible with most used home automation platforms.</p>
</blockquote>
<h2 id="teardown">Teardown</h2>
<p>This Shelly 4PM feels like a step backwards in terms of build quality. The prior generation of devices were very dense little pucks and this feels pretty hollow; the plastic DIN case creaks and squeaks.</p>
<p>The internal layout isn&rsquo;t my favorite and it made both disassembly and reassembly a bit tenuous at a few points.
The layout may be inevitable, though, as DIN case is more or less a standard shape and size.
Layouts are almost always a bit weird when the electronics have to be designed to fit the case rather than the other way around.</p>
<p>Other than the layout quirks, the Shelly team continues to go with what they know: the <a href="https://www.espressif.com/" target="_blank" rel="noopener noreffer">espressif</a> line of chips. This time the ESP826x series is out and the much more capable ESP32 series is in&hellip; which allows for both the color LCD and the ethernet interface.</p>
<p>As is common with these types of devices, the ESP runs the show&hellip; but it has a few deputies: dedicated power monitoring ICs and an ethernet PHY.</p>
<p>And with that, let&rsquo;s get into it:</p>
<p>The main body of the shelly is clipped to the rear &lsquo;plate&rsquo; which houses the DIN rail attachment mechanism. You can see the clips on the very top and bottom along the left edge:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        40A at 240V is a _lot_ of power to fit into a fairly compact device!
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>Viewed from the rear, the clips are easier to see in the four corners:</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>The rear plate lifts off to reveal the largest PCB. There are 4 copies of the same circuit. Very nice to see big traces with extra solder and some beefy current shunts!</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>Just behind the &lsquo;input trigger&rsquo; terminals on the main PCB is a <code>2x10 @ 2.54mm pitch</code> female header. Into which slides the &lsquo;smarts&rsquo; PCB which hosts the main ESP32 MCU as well as the ethernet jack.</p>
<p>On this smaller PCB and next to the ethernet jack is a very small <code>1x6 @ 1mm pitch</code> female header block. It is cleverly hidden next to the jack but could probably be accessed with the case on if you&rsquo;re careful.</p>
<p>If I had to guess, this is a debug/programming header for at least the main MCU.</p>
<p>It&rsquo;s not pictured until later, but there is a <code>2x2 @ 2.54mm pitch</code> male header block on the other side of the smarts PCB. This is where a small daughterboard containing only the 3 buttons connects.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        How much do you want to bet that the pins on the debug header are the usual &#43;3.3, GND, IO0, RX, TX for ESP flashing?
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>On the main PCB, behind the &lsquo;smarts&rsquo; PCB is a set of two ICs marked with <code>ADE7953ACPZ</code>. As expected, these are <a href="https://www.digikey.com/en/products/detail/analog-devices-inc/ADE7953ACPZ/2700176" target="_blank" rel="noopener noreffer">the energy management / monitoring ICs</a>.</p>
<p>Why two crystals, though?</p>
<p>The IC marked <code>MCP23S17</code> is a simple SPI based IO expander&hellip; almost certainly used to drive the relays and possibly command the power management ICs.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>On the rear of the &lsquo;smarts&rsquo; PCB is the star of the show: <a href="https://www.mouser.com/ProductDetail/Espressif-Systems/ESP32-D0WDQ6?qs=chTDxNqvsykWgzfXx0gR%252BQ%3D%3D" target="_blank" rel="noopener noreffer">ESP32-D0WDQ6</a>.</p>
<p>In addition to the passives and the flat flex socket for the LCD, we have:</p>
<ul>
<li>cFeon QH64-104HIP 64 Megabit flash chip</li>
<li>SMSC8720A: 10/100 Megabit ethernet PHY</li>
</ul>
<p>There is also <em>another</em> daughterboard covered in kapton tape. This is soldered to the main PCB and just has a few electrolytic caps. I guess this arrangement was easier than trying to clear some room on the back of the main PCB so the heavy current traces could be kept simple ü§î?</p>
<p>In the top right corner you can see the 4 pin header where the button daughter board attaches&hellip; just next to the ethernet phy.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>From this angle, still in the top right corner, you can see the button daughter board attached to the 4 pin header.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Just a few very tiny passives!
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>Electrically, nothing unusual or bizarre. Layout was a bit &lsquo;inventive&rsquo; but the unusual but standard shape of the case probably drove at least some of the decision to have 4 different PCBs that all have to be tediously connected by hand during manufacture!</p>
<p>Thats all for this one!</p>
<h2 id="pcbic-markings">PCB/IC Markings</h2>
<p>AKA SEO optimization üòâ</p>
<ul>
<li>
<p><code>ADE7953ACPZ</code>: Power monitoring</p>
</li>
<li>
<p><code>MCP23S17</code>: IO expansion</p>
</li>
<li>
<p><code>ESP32-D0WDQ6</code>: main CPU</p>
</li>
<li>
<p><code>EN25QH64</code>: 8 MB flash chip</p>
</li>
<li>
<p>Primary PCB is marked: <code>Shelly4ProPM_Relays_v0.1.2</code></p>
</li>
<li>
<p>Daughter boards not really marked with anything other than the usual component IDs and the date code of <code>211015</code></p>
</li>
</ul>
]]></description></item><item><title>Tuya Smart Curtain Driver Robot Teardown</title><link>https://karlquinsland.com/tuya-smart-curtain-driver-robot-teardown/</link><pubDate>Sat, 11 Dec 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/tuya-smart-curtain-driver-robot-teardown/</guid><description><![CDATA[<p>I am trying something new out with this post; some mix of hardware teardown and a brief product review.</p>
<hr>
<h1 id="why">Why</h1>
<p>I was looking for a way to actuate some heavy blackout curtains.</p>
<p>There have been <em>several</em> DIY projects out there that manipulate curtains but they all appear to be relatively involved as they are often designed for a very specific type of curtain; servos that fit on the &rsquo;tilt rod&rsquo; or motors that can manipulate the pull chain&hellip; etc.</p>
<p>The specific curtains that I wanted to power-actuate  are curtains that do not have a pull string or a set of wheels/track to facilitate their movement. Just folds of fabric hanging directly from a telescopic metal rod.</p>
<p>After a quick review of hte existing commercial solutions for my application/style of curtains, it became clear that they all work in about the same way: some battery powered motor mechanically couples to the curtain rod and moves along the rod dragging / pushing the curtain as it does so.</p>
<p>Since they all more or less use the same design, I figured that most of the differentiation between products would be in the software side of things. No product immediately stood out as having <strong>local</strong> Home Assistant integration so it didn&rsquo;t matter which product I selected; I will inevitably have to do some reverse engineering / hacking to get <strong>local</strong> Home Assistant integration.</p>
<p>I selected the <code>Tuya Smart Curtain Driver Robot</code> because:</p>
<ol>
<li>Cheap</li>
<li>Appeared to use USB-C for charging</li>
<li>I was vaguely aware that <a href="https://github.com/ct-Open-Source/tuya-convert" target="_blank" rel="noopener noreffer">TuYa was pumping out a <em>ton</em> of ESP8266 based hardware</a> and hoped that I&rsquo;d find the familiar microcontroller inside.</li>
</ol>
<p>Below is a collection of photos and some thoughts that are - roughly - what I wish I had been able to find when doing the product research.
If I had found the equivalent of this post while doing my research, I would have been able to save myself a purchase!</p>
<h1 id="what">What</h1>
<p>Searching for rod-based curtain actuators will turn up a <em>ton</em> of results. A fair number of them use product images very similar to these:</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Official marketing photo
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>How well the robot performs will depend on how well the little white wheel is held against the bottom of the curtain rod.
The arms that the upper sled attaches to are spring loaded for additional clamping force.</p>
<p>The case seems to be fairly generic and used across multiple brands so it&rsquo;s safe to say that depending on the version / hardware variant, you may or may not have all of the featured inputs/sensors.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Only one of the two units in a pair comes equipped with the light sensor.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>The light sensor is a nice touch. I will absolutely be borrowing that idea when designing my own solution üí°ü§î!</p>
<h2 id="teardown">Teardown</h2>
<p>I&rsquo;m not a huge fan of unboxing videos. The box is rather unremarkable; it sustained some damage in transit, but that&rsquo;s what it&rsquo;s supposed to do.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Relatively well packaged. The seller that I purchased from had explicit listings for different curtain rod styles so I am not sure why I received hardware for all styles. There does not appear to be any easy way to install this hardware.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>The upper sled is coupled to the main body through two spring-loaded arms with a ratchet and paw setup. The arms can be easily removed from the main body if needed.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        I am getting some vague Portal2 Turret vibes...
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>Since the entire weight of the robot will be hanging from the upper sled, the springs are the only thing that will pull the actuator wheel into the curtain rod. I don&rsquo;t know how the springs will last over time, but I absolutely can forsee needing to re-tension things as the springs inevitably stretch out.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The ratchet/paws seem to indicate compatibility with some comically large diameter curtain rods!
        
            
        
        </p> 
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Obligatory &#39;i void warranties&#39; reference.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>Use a Philips style <code>J00</code> or <code>J000</code> screwdriver to remove the four screws holding the thing together. Use any flat pry tool to crack the two halves apart.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Screw hiding under warranty void sticker and obvious mechanical/snap seam make it pretty obvious how this will come apart.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>And with that, our first real look at the electronics inside!</p>
<p>I expected a simple PCB that contained a charge controller circuit for the battery and a simple motor driver with over current protection&hellip; and nothing else. I was sure that <em>everything</em> else would be handled directly by a the radio-on-module.</p>
<p>I <em>absolutely</em> did not expect the PCB to have provisions for &hellip; <strong>two</strong> radio modules!</p>
<p>A few other quick observations:</p>
<ul>
<li>The unpopulated radio module footprint does not match any ESP-8266 modules that I am familiar with.</li>
<li>The populated radio module <em>does</em> look like a common ESP-12E module footprint&hellip; but the module is <em>clearly</em> not an ESP.</li>
<li>The markings have been erased from all the interesting ICs ü§¨.</li>
<li>The 20 pin chip closest to the unpopulated module footprint could be anything but is likely the &lsquo;housekeeping&rsquo; CPU. The populated radio module likely communicates with this chip to command the motor and check the sensors</li>
<li>The product marketing photos indicated that there would be a light sensor. The PCB appears to have a foot print for an LDR&hellip; but it&rsquo;s not populated&hellip;
only a few passive components besides some radio-on-module</li>
<li>The USB-C port does not have any active electronics connected to it. The port likely does not speak any power delivery protocols and certainly does not have a hidden UART for talking to either of the microcontrollers.</li>
<li>No motor is visible so that means that it must be embedded in the comically small drive wheel&hellip;</li>
</ul>
<p>Some more technical details are discussed <a href="#technical-details" rel="">below</a>.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Huh. Was not expecting the PCB to be quite so big or complex!
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>Lifting up the PCB reveals the battery pack. I did not slice the pack open to see which brand of cells went into the pack.
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Grateful that they didn&#39;t solder the battery directly to the PCB.
        
            
        
        </p> 
    </figcaption>
    
</figure>

</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        I have not tested the battery to see accurate the labeled capacity is.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>I was still looking for that elusive light sensor so I opened up the second unit&hellip; and found it!</p>
<p>Other than the populated second radio module, <code>R20</code> and the LDR, the PCBs appear identical.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        Something tells me that the PCB with two radio modules is the &#39;leader&#39; out of the two.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>On the rear we can see an obvious programming / debug port and a PCB/product designator: <code>ZNCL_TY_V1.5</code>.</p>
<p>Giving that a quick google returns almost nothing.
I did find <a href="https://old.reddit.com/r/esp32/comments/q3omwh/can_somebody_tell_me_what_were_looking_at_here/hft52t1/" target="_blank" rel="noopener noreffer">this</a> post from <a href="https://old.reddit.com/user/coned_miro" target="_blank" rel="noopener noreffer">/u/coned_miro</a> asking about a very similar PCB revision:</p>
<pre><code>    ...The main board says 'ZNCL_TY_V1.3' on the back
</code></pre>
<p>Nothing new to be learned about the tuya device from that thread, sadly.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        No, I didn&#39;t hook a scope up or trace out the obvious programming/debug header.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h2 id="the-app">The App</h2>
<p>I never intended to use the manufacturer provided app for anything other than the initial setup so this will be a very brief section. The robot was quickly discovered and provisioned through the app.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        BTLE Pair/Provisioning was straightforward
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>The device calibration process is pretty rudimentary and does not have an easy &ldquo;undo&rdquo; process.</p>
<p>If you make a mistake in configuring the direction/distance that the robot needs to travel for curtain open/close, you have to factory reset the device. Fortunately this is easy to do in app and discovering/re-provisioning the device takes only a few seconds.</p>
<p>The <em>two</em> firmware version strings strongly hints at a &ldquo;two processors for two domains&rdquo; architecture: the anonymous 20pin chip runs everything on the PCB and the <code>BT7L</code> module deals with external communications and is only abstractly aware of the PCB/motor/sensor/battery state.</p>
<figure >

    
        
    

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<figure >

    
        
    

    

    <figcaption>
        
        <p>
        I have only skimmed the TuYa developer documentation but I think that the VirtualID is common to _all_ of the curtain robots.
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h1 id="verdict">Verdict</h1>
<p>While disappointing that there was no easily hackable ESP microcontroller running the show, it doesn&rsquo;t matter.
I can&rsquo;t use this product as is for my intended application; the motor is just too puny for the task.</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        The brains(?)
        
            
        
        </p> 
    </figcaption>
    
</figure>


<p>My curtains are rather thick and heavy. A tiny motor can&rsquo;t <em>possibly</em> have enough power to do this on it&rsquo;s own&hellip; especially with a sub-optimal coupling mechanism!</p>
<p>To give the motor a fighting chance, the engineers went with a TON of reduction-gearing.
The gearbox allows a wimpy but fast motor to become a more grunty motor at the expense of speed.
Almost anything small that rotates at high speed will come with some unpleasant sounds. This is ESPECIALLY true for cheaply made gearbox full of small gears.</p>
<p>This means that any invocation of the robot will be noisy.
You can expect the noisy little device to <em>slowly</em> move across the curtain rod. üôÑ</p>
<p>The robot struggled to push the curtains together towards the end of an opening cycle&hellip; it would often skip in place as the drive wheel struggled to keep enough traction on the curtin rod.</p>
<p>Likewise, asking the robot to pull the bucked up curtains closed was out of the question without some sort of an assist.</p>
<p>Because the robot has no fixed position sensor, it can&rsquo;t really measure where on the curtain rod it is.
Every time the drive wheel skips, the difference between where the robot thinks it is and where it <em>actually</em> is will grow.</p>
<p>If you can stand the whiny/slow movement, expect frequent re-calibrations üëé.</p>
<br>
<p><strong>TL;DR</strong>: Looks like there&rsquo;s a reason why the hobbyist/DIY community has produced such a <em>wide variety</em> of bespoke curtain/drape actuators&hellip; most of the commercial ones have sacrificed too much in order to be widely usable.
The solution that I end up implementing will be designed with my heavy drapes in mind and will use an appropriately sized and quiet motor!</p>
<figure >

    
        
    

    

    <figcaption>
        
        <p>
        A simple brushed DC motor with no position encoder and what is probably a cheaply made gearbox. What could go wrong?
        
            
        
        </p> 
    </figcaption>
    
</figure>


<h1 id="technical-details">Technical Details</h1>
<p>A highly condensed version of my initial notes from setup/teardown:</p>
<ul>
<li>
<p>Was not expecting multiple radio units. The blue radio-module that both PCBs have in common appears to be a <code>JDY-25M</code>.</p>
</li>
<li>
<p>There is a SDK for the <code>JDY-25M</code> available <a href="https://github.com/Edragon/JDY-MESH/tree/main/JDY-25M/SDK" target="_blank" rel="noopener noreffer">here</a>. It contains some english documentation.</p>
</li>
<li>
<p>The <code>JDY-25M</code> SDK does not appear to contain any information about how to program the chip or build a custom firmware. You are meant to interface with the &lsquo;stock&rsquo; firmware via <code>AT+</code> commands. The firmware appears to support multiple modes&hellip; including a bi-directional communication link. I suspect that the unique radio module is the connection to the outside world and the the two identical radio modules are used to coordinate movement between the two pods</p>
</li>
<li>
<p>I was never able to get the &lsquo;follower&rsquo; unit to pair or otherwise command the second unit.</p>
</li>
<li>
<p>The unique radio module is a module made specifically by/for TuYa: <a href="https://developer.tuya.com/en/docs/iot/bt7l?id=K96gqp1dp6iiw" target="_blank" rel="noopener noreffer">https://developer.tuya.com/en/docs/iot/bt7l?id=K96gqp1dp6iiw</a></p>
</li>
</ul>
<h2 id="pcb-markings">PCB Markings</h2>
<p>AKA SEO optimization üòâ</p>
<ul>
<li>PCB is marked: <code>ZNCL_TY_V1.5</code></li>
<li>&ldquo;primary&rdquo; radio: <a href="https://developer.tuya.com/en/docs/iot/bt7l?id=K96gqp1dp6iiw" target="_blank" rel="noopener noreffer"><code>BT7L</code></a></li>
<li>&ldquo;secondary&rdquo; radio <a href="https://github.com/Edragon/JDY-MESH/tree/main/JDY-25M/SDK" target="_blank" rel="noopener noreffer"><code>JDY-25M</code></a></li>
</ul>
]]></description></item></channel></rss>