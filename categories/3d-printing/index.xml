<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>3D Printing - Category - karl</title><link>https://karlquinsland.com/categories/3d-printing/</link><description>3D Printing - Category - karl</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 25 Dec 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://karlquinsland.com/categories/3d-printing/" rel="self" type="application/rss+xml"/><item><title>Multi-Material Printing Hack for Prusa XL</title><link>https://karlquinsland.com/multi-material-printing-hack/</link><pubDate>Wed, 25 Dec 2024 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/multi-material-printing-hack/</guid><description><![CDATA[<!-- markdownlint-disable-file MD002 -->
<p>In the same spirit as <a href="/extending-the-mk3s-print-area/" rel="">an earlier post</a>, here is a quick hack I used to get my <strong>dual</strong>-headed Prusa XL printer to print with <strong>three</strong> materials at once.</p>
<p>While the technique worked, it may not be the best method, so proceed with caution.</p>
<h2 id="the-problem">The problem</h2>
<p>I am trying to print a part that requires two different materials at the same time: ABS and TPU.</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            The shaded blue area is meant to be TPU/FLEX material. The shaded yellow area is meant to be ABS material.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>The first complication comes from the &ldquo;unfriendly&rdquo; shape; the part is spherical and has no ideal orientation for printing without any supports.</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Grey is TPU, Green is ABS, and the Blue/Grey mix is the support material composed of interleaved PLA and TPU layers.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>To make matters slightly more complicated, TPU is one of those filaments that likes to stick to pretty much everything; I have few good options for support material.
The <a href="https://www.youtube.com/watch?v=5VV2fbJ0apg" target="_blank" rel="noopener noreffer"><em>least</em> sticky material</a> is PLA.</p>
<p>So now I have a single job that requires three materials: ABS, TPU, and PLA&hellip;. but still only two print heads to work with.</p>
<p>What to do?</p>
<p>Usually when faced with the &ldquo;more materials than heads&rdquo; problem, the solution is to use the <a href="https://marlinfw.org/docs/gcode/M600.html" target="_blank" rel="noopener noreffer"><code>M600</code></a> gCode command to have the printer pause, eject the current material and wait for the user to load the new material.</p>
<p>This technique is not new; it&rsquo;s widely supported and works perfectly <strong>if</strong> the materials are similar enough that the extrusion settings can be shared between them.</p>
<p>For my part, the tool head will have to transition from <code>PLA</code> to <code>ABS</code> which means virtually every instruction in the gCode will have to change as well.</p>
<h2 id="the-loophole">The loophole</h2>
<p>Fortunately, the geometry for this part has a &ldquo;gap&rdquo; between the initial section where supports are needed and the internal section where the ABS material is needed.</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            This is the &#39;per-layer&#39; view from the slicer with a &#39;bottom-up&#39; perspective. As before, Grey is TPU, Green is ABS, and the thin blue circle represents the topmost layer of the support material.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>Notice that the <em>last</em> support layer (blue circle) is still a few layers away from the first ABS layer (the green section).</p>
<p>Essentially, I do need three materials, <strong>but only two at a time</strong>.
What a coincidence that I have a printer with two heads!</p>
<h2 id="the-solution-hack">The <del>solution</del> hack</h2>
<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>Warning<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>This is a hack and may not work for all printers or all slicers.
Think of this more as a &ldquo;proof of concept&rdquo; than a reliable technique.
You can likely adapt this technique to other printers but you will need to understand the gCode generated by your slicer and the firmware running on your printer.</p>
<p>Ideally, this serves as a demonstration and inspires the development of a more robust solution; conceivably, the prusa slicer/firmware could be modified to support this use case directly with not much effort.</p>
</div>
        </div>
    </div>
<p>The solution is to lie to the slicer and tell it that I have three tool heads.
This way, I can use correct profiles for each material and the slicer will generate the correct gCode for each material.</p>
<p>All I have to do is post-process the gCode to pause for a manual material swap at the correct time and then replace all references to the third tool head with the second tool head after the swap.</p>
<p>Simple, right?</p>
<p>(yes, but not as simple as I thought)</p>
<p>This particular part has a little over 400K lines of gCode so I&rsquo;m not going to do this by hand!
Here&rsquo;s a quick and dirty Python script that rewrote the gCode for me:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/env -S uv run</span>
</span></span><span class="line"><span class="cl"><span class="c1"># /// script</span>
</span></span><span class="line"><span class="cl"><span class="c1"># requires-python = &#34;&gt;=3.13&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># dependencies = [</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   &#34;structlog&#34;,</span>
</span></span><span class="line"><span class="cl"><span class="c1"># ]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># ///</span>
</span></span><span class="line"><span class="cl"><span class="c1">##</span>
</span></span><span class="line"><span class="cl"><span class="c1"># See: https://github.com/prusa3d/Prusa-Firmware-Buddy/blob/master/lib/Marlin/Marlin/src/gcode/control/T.cpp</span>
</span></span><span class="line"><span class="cl"><span class="c1"># See: https://help.prusa3d.com/article/buddy-firmware-specific-g-code-commands_633112</span>
</span></span><span class="line"><span class="cl"><span class="c1"># See: https://old.reddit.com/r/prusa3d/comments/15djlgu/change_filament_settings_mid_print_not_just_colour/ju2c37f/</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">re</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">structlog</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">log</span> <span class="o">=</span> <span class="n">structlog</span><span class="o">.</span><span class="n">get_logger</span><span class="p">(</span><span class="vm">__name__</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">replace_t2_with_t1_after_m600</span><span class="p">(</span><span class="n">input_file</span><span class="p">,</span> <span class="n">output_file</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    Modifies a GCode file based on the following rules:
</span></span></span><span class="line"><span class="cl"><span class="s2">    1. Before the `M600` line, comment out any lines mentioning `T2` by adding `; HACK ;`.
</span></span></span><span class="line"><span class="cl"><span class="s2">    2. After the `M600` line, replace all instances of `T2` with `T1` if surrounded by whitespace.
</span></span></span><span class="line"><span class="cl"><span class="s2">    3. Lines beginning with `;` are always ignored.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s2">    - input_file: Path to the input GCode file.
</span></span></span><span class="line"><span class="cl"><span class="s2">    - output_file: Path to the output GCode file.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">m600_found</span> <span class="o">=</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">    <span class="n">line_number</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">&#34;Starting...&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">input_file</span><span class="p">,</span> <span class="s2">&#34;r&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">infile</span><span class="p">,</span> <span class="nb">open</span><span class="p">(</span><span class="n">output_file</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">outfile</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">infile</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># For debugging / status</span>
</span></span><span class="line"><span class="cl">            <span class="n">line_number</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1"># Skip lines starting with a semicolon</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s2">&#34;;&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                <span class="n">outfile</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">continue</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1"># For all intents and purposes, tool head 3 (T2) does not exist.</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># AT the time of the &#34;color swap&#34;, The second tool head stops being a PLA and starts being an ABS tool.</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># This means that we need to comment out all mentions of T2 before the swap and</span>
</span></span><span class="line"><span class="cl">            <span class="c1">#   after the swap, re-write everything.</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># In all cases, we should never refer to T2.</span>
</span></span><span class="line"><span class="cl">            <span class="c1">##</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="ow">not</span> <span class="n">m600_found</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># Check for M600 line</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">re</span><span class="o">.</span><span class="k">match</span><span class="p">(</span><span class="sa">r</span><span class="s2">&#34;^M600$&#34;</span><span class="p">,</span> <span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">()):</span>
</span></span><span class="line"><span class="cl">                    <span class="n">m600_found</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">                    <span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">&#34;&#39;M600&#39; found!&#34;</span><span class="p">,</span> <span class="n">line_number</span><span class="o">=</span><span class="n">line_number</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="n">outfile</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="k">continue</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="c1"># Comment out lines mentioning T2 before M600</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="sa">r</span><span class="s2">&#34;\bT2\b&#34;</span><span class="p">,</span> <span class="n">line</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                    <span class="n">line</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&#34;; HACK ;</span><span class="si">{</span><span class="n">line</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">                    <span class="n">log</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                        <span class="s2">&#34;Removing mention of Tool Head 3 (t2)&#34;</span><span class="p">,</span> <span class="n">line_number</span><span class="o">=</span><span class="n">line_number</span>
</span></span><span class="line"><span class="cl">                    <span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">outfile</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">continue</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1"># Replace &#39;T2&#39; with &#39;T1&#39; only if surrounded by whitespace after M600</span>
</span></span><span class="line"><span class="cl">            <span class="n">modified_line</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="sa">r</span><span class="s2">&#34;\bT2\b&#34;</span><span class="p">,</span> <span class="s2">&#34;T1&#34;</span><span class="p">,</span> <span class="n">line</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">outfile</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">modified_line</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">input_file</span> <span class="o">=</span> <span class="s2">&#34;your_gcode_file_here.gcode&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">output_file</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&#34;MOD.</span><span class="si">{</span><span class="n">input_file</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">replace_t2_with_t1_after_m600</span><span class="p">(</span><span class="n">input_file</span><span class="p">,</span> <span class="n">output_file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">&#34;Done!&#34;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>I ran that script, loaded the modified gCode into the printer, and&hellip;was not able to fool the printer.</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Prusa XL refusing to start the print because it knows I&#39;m trying to cheat.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>The printer was - somehow - aware that the gCode wanted three heads with three distinct materials and refused to start the print until I added a third head.</p>
<p>As it turns out, that python script isn&rsquo;t quite enough to fool the printer.
I&rsquo;ll spare you from the many iterative attempts to get this working and say that the following additional optimizations/deletions were necessary:</p>
<h3 id="manual-fix-1-remove-all-routines-for-the-third-tool-head">Manual fix 1: Remove all routines for the third tool head</h3>
<p>Somewhere early on in the gCode is a section that looks like this</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">;</span> <span class="n">purge</span> <span class="n">third</span> <span class="k">tool</span>
</span></span><span class="line"><span class="cl"><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">G1</span> <span class="n">F24000</span>
</span></span><span class="line"><span class="cl"><span class="n">P0</span> <span class="n">S1</span> <span class="n">L2</span> <span class="n">D0</span><span class="p">;</span> <span class="n">park</span> <span class="n">the</span> <span class="k">tool</span>
</span></span><span class="line"><span class="cl"><span class="n">M109</span> <span class="n">T2</span> <span class="n">S255</span>
</span></span><span class="line"><span class="cl"><span class="n">T2</span> <span class="n">S1</span> <span class="n">L0</span> <span class="n">D0</span><span class="p">;</span> <span class="n">pick</span> <span class="n">the</span> <span class="k">tool</span>
</span></span><span class="line"><span class="cl"><span class="n">G92</span> <span class="n">E0</span> <span class="p">;</span> <span class="n">reset</span> <span class="n">extruder</span> <span class="n">position</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">M104</span><span class="o">.</span><span class="mi">1</span> <span class="n">T0</span> <span class="n">P13</span> <span class="n">Q13</span> <span class="n">S230</span>
</span></span><span class="line"><span class="cl"><span class="n">G0</span> <span class="n">X210</span> <span class="n">Y</span><span class="o">-</span><span class="mi">7</span> <span class="n">Z10</span> <span class="n">F24000</span> <span class="p">;</span> <span class="n">move</span> <span class="n">close</span> <span class="n">to</span> <span class="n">the</span> <span class="n">sheet</span><span class="s1">&#39;s edge</span>
</span></span><span class="line"><span class="cl"><span class="n">G0</span> <span class="n">E30</span> <span class="n">X220</span> <span class="n">Z0</span><span class="o">.</span><span class="mi">2</span> <span class="n">F170</span> <span class="p">;</span> <span class="n">purge</span> <span class="k">while</span> <span class="n">moving</span> <span class="n">towards</span> <span class="n">the</span> <span class="n">sheet</span>
</span></span><span class="line"><span class="cl"><span class="n">G0</span> <span class="n">X250</span> <span class="n">E9</span> <span class="n">F800</span> <span class="p">;</span> <span class="k">continue</span> <span class="n">purging</span> <span class="ow">and</span> <span class="n">wipe</span> <span class="n">the</span> <span class="n">nozzle</span>
</span></span><span class="line"><span class="cl"><span class="n">G0</span> <span class="n">X253</span> <span class="n">Z0</span><span class="o">.</span><span class="mi">05</span> <span class="n">F8000</span> <span class="p">;</span> <span class="n">wipe</span><span class="p">,</span> <span class="n">move</span> <span class="n">close</span> <span class="n">to</span> <span class="n">the</span> <span class="n">bed</span>
</span></span><span class="line"><span class="cl"><span class="n">G0</span> <span class="n">X256</span> <span class="n">Z0</span><span class="o">.</span><span class="mi">2</span> <span class="n">F8000</span> <span class="p">;</span> <span class="n">wipe</span><span class="p">,</span> <span class="n">move</span> <span class="n">quickly</span> <span class="n">away</span> <span class="n">from</span> <span class="n">the</span> <span class="n">bed</span>
</span></span><span class="line"><span class="cl"><span class="n">G1</span> <span class="n">E</span><span class="o">-</span><span class="mf">1.05</span> <span class="n">F2400</span> <span class="p">;</span> <span class="n">retract</span>
</span></span><span class="line"><span class="cl"> <span class="p">;</span> <span class="n">update</span> <span class="n">slicer</span> <span class="n">internal</span> <span class="n">retract</span> <span class="n">variable</span>
</span></span><span class="line"><span class="cl"><span class="n">G92</span> <span class="n">E0</span> <span class="p">;</span> <span class="n">reset</span> <span class="n">extruder</span> <span class="n">position</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">M104</span> <span class="n">S100</span> <span class="n">T2</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>This can be removed from the gCode as there is no physical 3rd head to purge or park, heat up, probe&hellip;etc.</p>
<p>If the python script naïvely replaced <em>all</em> instances of <code>T2</code> with <code>T1</code>, this section would be left in the gCode and would waste time running the second print head through the same routine twice.</p>
<h3 id="manual-fix-2-remove-all-metadata">Manual fix 2: Remove all metadata</h3>
<p>This one took quite a few trial/error attempts to figure out.
At the tail end of the unmodified gCode there are some &ldquo;shutdown&rdquo; commands and then a ton of metadata:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">&lt;... many many lines omitted ...&gt;
</span></span><span class="line"><span class="cl">; turn off extruder heaters
</span></span><span class="line"><span class="cl"> M104 T0 S0 
</span></span><span class="line"><span class="cl"> M104 T1 S0 
</span></span><span class="line"><span class="cl"> M104 T2 S0 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&lt;...&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">; objects_info = {&#34;objects&#34;:&lt;...&gt;}
</span></span><span class="line"><span class="cl">; filament used [mm] = 24022.62, 2012.80, 3975.01
</span></span><span class="line"><span class="cl">; filament used [cm3] = 57.78, 4.84, 9.56
</span></span><span class="line"><span class="cl">&lt;...&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">; prusaslicer_config = begin
</span></span><span class="line"><span class="cl">&lt;...&gt;
</span></span><span class="line"><span class="cl">; filament_type = FLEX;PLA;ABS
</span></span><span class="line"><span class="cl">&lt;...&gt;
</span></span><span class="line"><span class="cl">; filament_colour = #408080;#FF8000;#FFF2EC
</span></span><span class="line"><span class="cl">&lt;...&gt;
</span></span><span class="line"><span class="cl">; prusaslicer_config = end
</span></span></code></pre></td></tr></table>
</div>
</div><p>As best as I can tell, there&rsquo;s a few hundred lines that encode some basic metadata about the part(s) and the filament(s) used / print times and the slicer specific configuration information.
If you look closely, you can see that a fair number of properties have three values: one for each tool head:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">&lt;...&gt;
</span></span><span class="line"><span class="cl">; filament_type = FLEX;PLA;ABS
</span></span><span class="line"><span class="cl">&lt;...&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>I spent a few iterations trying to identify what each property did and if it was safe to drop the third value but wasn&rsquo;t making a ton of progress.
Eventually I just decided to drop <em>all</em> of the metadata&hellip; and that worked!</p>
<p>Initially I didn&rsquo;t think that the printer firmware would be reading <em>ANY</em> of the <strong>commented out</strong> sections of the file but I guess this makes sense for metadata and anything else that&rsquo;s not a gCode instruction.</p>
<p>As best as I can tell, nothing contained in the metadata sections changes how the actual print is executed.
All of the values are for the slicer UI and - in some cases - for the printer firmware to sanity check the gCode before starting the print.</p>
<p>I could be wrong about this but I don&rsquo;t have the time/patience/resources to properly test this. The gCode works well enough for my needs without the metadata so I&rsquo;m content to move on to the next steps on this project.</p>
<p>If I am wrong about what the metadata sections do and it turns out that they do help refine/improve how the printer firmware processes instructions&hellip;please do let me know!</p>
<h2 id="tldr">TL;DR</h2>
<p>If you have a need to print with more materials than you have tool heads, you <strong>might</strong> be able to trick the slicer/printer into re-configuring a print head mid-print.</p>
<p>To do this, get the slicer to generate valid and correct gCode for each material/tool head combination as if you had an appropriately configured printer.
After the gCode has been generated, map every &ldquo;virtual&rdquo; too head to a real tool head and remove any additional references to the virtual tool heads.</p>
]]></description></item><item><title>Quick and dirty hack to extend the MK3S print area.</title><link>https://karlquinsland.com/extending-the-mk3s-print-area/</link><pubDate>Sun, 04 Feb 2024 00:00:00 +0000</pubDate><author>Author</author><guid>https://karlquinsland.com/extending-the-mk3s-print-area/</guid><description><![CDATA[<!-- markdownlint-disable-file MD002 -->
<p>This isn&rsquo;t going to be a long post. I&rsquo;m working on a larger project but hit a snag and I didn&rsquo;t find any easy/obvious solutions online so I thought I&rsquo;d share what I came up with.</p>
<p>Details will come later when the bigger project is ready to be released so you&rsquo;ll have to forgive me for the lack of context.
Essentially I have a large / multi-hour print that <strong>almost</strong> fits on my MK3s print bed but is too large to slice as is.</p>
<p>Here&rsquo;s the short version:</p>
<ul>
<li>The MK3S has a print area of 250mm x 210mm x 210mm (X, Y, Z).</li>
<li>The part in question is circular and has a circumference of ~215mm so I need to extend the Y axis by ~5mm.</li>
<li>I can&rsquo;t scale it down to fit as it&rsquo;s a functional part with specific dimensions.</li>
</ul>
<h2 id="the-problem">The problem</h2>
<p>PrusaSlicer refuses to slice the part and gives the following error message:</p>
<blockquote>
<p>&ldquo;An object outside the print area was detected. Resolve the current problem to continue slicing.</p>
</blockquote>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            The part JUST BARELY fits on the print bed. This whole trick only works because the dark blue portion is so small.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>Since the part is circular, there&rsquo;s no way to &ldquo;rotate&rdquo; it to fit within the print area.</p>
<h2 id="the-idea">The &ldquo;idea&rdquo;</h2>
<p>In the image above, the dark blue portion of the part is &ldquo;outside&rdquo; the print area; some portion of the object is below the <code>0,0</code> origin of the print bed.</p>
<p>But the pre-print priming line is done further &ldquo;south&rdquo; on the build plate so we know the printer can physically print in the area; it&rsquo;s only a software limitation preventing it from doing so.</p>
<p>This can be confirmed by looking at &ldquo;stock&rdquo; <code>gcode</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">&lt;...&gt;
</span></span><span class="line"><span class="cl">; Prime line routine
</span></span><span class="line"><span class="cl">G0 Z0.15 ; Restore nozzle position - (thanks tim.m30)
</span></span><span class="line"><span class="cl">M900 K0; Disable Linear Advance for prime line
</span></span><span class="line"><span class="cl">G92 E0.0 ; reset extrusion distance
</span></span><span class="line"><span class="cl">G1 Y-3.0 F1000.0 ; go outside print area
</span></span><span class="line"><span class="cl">&lt;...&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>The <code>G1</code> line shown above moves the print head to <code>-3.0</code> mm on the Y axis.</p>
<p>Since I only need a few mm of extra space an the printer clearly has a few mm of extra space&hellip; 🤔.</p>
<p>Can I &ldquo;trick&rdquo; the slicer into generating valid <code>gcode</code> and then modify the <code>gcode</code> to shift the part down by 5mm?
Yep.</p>
<p>It works 😅.</p>
<h2 id="the-fix">The &ldquo;fix&rdquo;</h2>
<p>Convince the slicer to generate valid gcode and then modify the gcode to shift the part down by 5mm.
To do this:</p>
<ul>
<li>Modify the print bed dimensions in PrusaSlicer so the part will fit the print bed w/o any warnings. Don&rsquo;t make the print bed any larger than needed and do not make it any larger than the printer is physically capable of.</li>
<li>Slice as usual, save the <code>gcode</code> to a file.</li>
<li>Run the script below which will shift every print instruction by 5mm in the Y direction.</li>
<li>Send the modified <code>gcode</code> to the printer and hope for the best 🤞.</li>
</ul>
<p>Graphically, it looks like this:</p>
<figure >

    
        
        

    

    <figcaption>
        
        
    </figcaption>
    
</figure>


<p>After saving the adjusted print bed dimensions, the part should fit and slice without any warnings.</p>
<h2 id="the-code">The code</h2>
<p>It&rsquo;s not pretty but it works.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python3" data-lang="python3"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">adjust_gcode_y_position</span><span class="p">(</span><span class="n">input_file</span><span class="p">,</span> <span class="n">output_file</span><span class="p">,</span> <span class="n">adjustment</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">input_file</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">infile</span><span class="p">,</span> <span class="nb">open</span><span class="p">(</span><span class="n">output_file</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">outfile</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">infile</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="s1">&#39;Y&#39;</span> <span class="ow">in</span> <span class="n">line</span> <span class="ow">and</span> <span class="p">(</span><span class="s1">&#39;G0&#39;</span> <span class="ow">in</span> <span class="n">line</span> <span class="ow">or</span> <span class="s1">&#39;G1&#39;</span> <span class="ow">in</span> <span class="n">line</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># Split the line into components to find the Y component</span>
</span></span><span class="line"><span class="cl">                <span class="n">parts</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                <span class="n">new_parts</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">                <span class="k">for</span> <span class="n">part</span> <span class="ow">in</span> <span class="n">parts</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="k">if</span> <span class="n">part</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s1">&#39;Y&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                        <span class="c1"># Extract current Y value and adjust</span>
</span></span><span class="line"><span class="cl">                        <span class="n">y_value</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">part</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span> <span class="o">-</span> <span class="n">adjustment</span>
</span></span><span class="line"><span class="cl">                        <span class="n">new_parts</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;Y</span><span class="si">{:.3f}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">y_value</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                        <span class="n">new_parts</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">part</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># Write the adjusted line</span>
</span></span><span class="line"><span class="cl">                <span class="n">outfile</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">new_parts</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># Write unmodified line</span>
</span></span><span class="line"><span class="cl">                <span class="n">outfile</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Usage</span>
</span></span><span class="line"><span class="cl"><span class="n">input_gcode_path</span> <span class="o">=</span> <span class="s1">&#39;your_original_gcode_file_here.gcode&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">output_gcode_path</span> <span class="o">=</span> <span class="s1">&#39;ADJ.your_original_gcode_file_here.gcode&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">y_adjustment</span> <span class="o">=</span> <span class="mf">5.0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">adjust_gcode_y_position</span><span class="p">(</span><span class="n">input_gcode_path</span><span class="p">,</span> <span class="n">output_gcode_path</span><span class="p">,</span> <span class="n">y_adjustment</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="the-result">The result</h2>
<p>See for yourself:</p>
<figure >

    
        
        

    

    <figcaption>
        
        <p>
            Ignore the wrinkles just to the right of the PINDA probe; it&#39;s a separate issue.
            
                
                
        </p> 
    </figcaption>
    
</figure>


<p>Note that the edge of the circle just barely touches the edge of the print bed on the right and &ldquo;sits&rdquo; a few mm below the &ldquo;usable&rdquo; print bed area on the left.</p>
<p>Hopefully that&rsquo;s helpful to someone else out there.
If anybody knows why Prusa &ldquo;reserves&rdquo; this space, I&rsquo;d love to know.</p>
]]></description></item></channel></rss>