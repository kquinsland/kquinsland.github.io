[{"categories":["teardown"],"content":"But now it runs Tasmota","date":"2022-01-22","objectID":"/xaomi-s1-monitor-lamp-teardown-and-tasmota/","tags":["tasmota","home assistant"],"title":"Installing Tasmota on the Xiaomi Desk Lamp","uri":"/xaomi-s1-monitor-lamp-teardown-and-tasmota/"},{"categories":["teardown"],"content":"If you‚Äôre here just for ‚Äúhow do I flash tasmota‚Äù bit, skip to the Tasmota section below. I was looking for a way to light my desk my desk without screen glare. The easiest way to prevent glare on a screen is to change the orientation of the light relative to the screen either from under or behind the screen. This is not practical for ceiling mounted lights or for any floor lamps. You can get a nearly glare free light if you mount the light to the top of the screen and direct the light away from the screen at a slight angle. Light hitting the screen and bouncing into eyes is minimized and the majority of the light ends up directed down onto the desk where it‚Äôs needed. This isn‚Äôt a new problem; a quick search of any online retailor will reveal that there are many different options out there at all sorts of price points. As this light source would be heavily used for all sorts of work, the quality of the light is incredibly important; a high General CRI (Ra) and adjustable color temperature are requirements. I also wanted one that had some basic remote control functions so I don‚Äôt have to reach to the top of my monitor and risk destabilizing whatever I am working on or getting finger prints on the panel. A wired remote would be simpler and thus cheaper but my desk is already too crowded with wires and cords; if the cost difference between a wired and wireless remote was marginal, opt for wireless. After a bit of searching, I found the 2021 Xiaomi Mijia Lite Desk Lamp 1S which fit the bill exactly. Beyond the basic puck shaped wireless remote, the listing indicated that the ‚Äònew 1s version‚Äô could be controlled with the Xiaomi app. ü§î Instead of some very basic 433Mhz radio, the lamp/remote probably used BTLE. In some ways, that‚Äôs even better; the lamp only has a few simple functions and those shouldn‚Äôt be that hard to reverse engineer from the Android app. Once I know what data to send for on/off/dim/bright/ww/cw selection, I can use an ESP chip as a MQTT \u003c-\u003e BTLE gateway for relatively easy integration into my home automation system. Worst case, the fall back plan of using a microcontroller to emulate interacting with the remote and then integrating that microcontroller with my home automation system would work. Once the lamp showed up, I of course opened up the remote to see what type of wireless system I was going to be dealing with. Note More photos of the remote are below Giving the model number MHCB07P a quick google didn‚Äôt reveal much information other than confirm that it was using BTLE. This almost certainly means that the phone app will also use BTLE to control the lamp! If I‚Äôm lucky, I can capture the entire discovery/pair/command packets using a rooted android device and then I won‚Äôt have to bother with the puck at all. Lamp \u003c-\u003e Phone After getting the app setup, it did discover the lamp and began to walk me through the setup flow. WiFi!? Really!? But why? This must be some generic screen shown for all devices, right? Nope. There really is a simple access point inside this lamp! Well now I‚Äôm curious. What could this lamp possibly need WiFi credentials for? The remote used BTLE and every conceivable phone that will also control the lamp supports BTLE‚Ä¶ so why spend the extra money for a WiFi enabled microcontroller at all!? ET Lamp Phone Home: I threw the lamp behind an isolated access point and it sure is chatty‚Ä¶ After getting an IP address, the lamp looks up the A record for dk.io.mi.com and then attempts to open a TCP connection and send some bytes: Now I‚Äôm more than a little bit curious. Why send raw bytes to TCP/80 without at least the typical HTTP request headers? Why even use WiFi at all for a lamp? Is there no way to use my phone to control the lamp over BTLE? ","date":"2022-01-22","objectID":"/xaomi-s1-monitor-lamp-teardown-and-tasmota/:0:0","tags":["tasmota","home assistant"],"title":"Installing Tasmota on the Xiaomi Desk Lamp","uri":"/xaomi-s1-monitor-lamp-teardown-and-tasmota/"},{"categories":["teardown"],"content":"Dumping the FW Fortunately, this was pretty easy. After a cursory analysis, the dumped firmware did not appear to be encrypted or otherwise protected. I did a quick search for a few things that I hoped would show up in the dumped OEM firmware and was not disappointed: ‚ùØ cat lamp.bin.strings | grep --ignore-case -E 'certificate|encrypt|tls|agent|http|post|get|verify|remote|{\"' \u003e interesting_strings.txt ‚ùØ cat interesting_strings.txt| wc -l 710 ü§® Here are some of the highlights: [I] bluetooth_remote_double_click [E] %s: verify root cert is not valid! (%s,%d) [W] %s: Fail to get gatt db from connection %04x, ret = %d (%s,%d) [E] %s: mbedtls_ecdh_calc_secret error %d (%s,%d) miio_signature_verify [E] %s: --\u003elogin verify send failed. (%s,%d) -----BEGIN CERTIFICATE----- [E] %s: https need root cert. (%s,%d) User-Agent: MIoT http://dlg.io.mi.com/v1/ot/upload [W] %s: httpdns new resolve start failed, %d (%s,%d) There‚Äôs a lot more interesting things in the dump but they‚Äôll have to wait for another day as immediately after getting eyes on the PCB, I saw an ESP32 chip! ","date":"2022-01-22","objectID":"/xaomi-s1-monitor-lamp-teardown-and-tasmota/:1:0","tags":["tasmota","home assistant"],"title":"Installing Tasmota on the Xiaomi Desk Lamp","uri":"/xaomi-s1-monitor-lamp-teardown-and-tasmota/"},{"categories":["teardown"],"content":"A change of plans Reverse engineering the firmware to figure out how/why the phone method of remote control was different from the remotes' method no longer really mattered. An ESP based chip means Tasmota or ESPHome should be possible. If I could get either of those alternative firmwares running on the lamp, then cluttering up the desk with yet another remote and/or hacking MQTT support into the lamp via the remote was no longer necessary! Teardown Warning The plastic end caps on either end of the lamp tube are glued in. You will need some force to break the glue. Even with all possible precautions, getting access to the lamp PCB is a destructive process. If you are careful you can keep the destruction and cosmetic damage to a minimum. I did this teardown the hard way and damaged more of the lamp than necessary. Some of the photos below reflect this. Now that I know how it all is meant to come apart, you will hopefully have an easier time and incur less damage! ","date":"2022-01-22","objectID":"/xaomi-s1-monitor-lamp-teardown-and-tasmota/:2:0","tags":["tasmota","home assistant"],"title":"Installing Tasmota on the Xiaomi Desk Lamp","uri":"/xaomi-s1-monitor-lamp-teardown-and-tasmota/"},{"categories":["teardown"],"content":"The lamp A closer look at the marked device information before we move into the lamp. The ESP that we will soon flash with Tasmota is just behind this product information. Product info and regulatory markings Locate the small rectangle shaped protrusion from the lamp tube that mates with the magnetic mount. The protrusion has two small pogo pins on it. You can see the protrusion in the middle of the tube facing the coiled USB power cable: Everything that came in the box With the protrusion facing you, locate the plastic cap closest to the product information. This should be plastic cap on the left side of the tube. Use non-marring pliers or similar to grip the plastic cap and twist with enough force to break the glue. Do not twist more than a few degrees! The plastic cap has some features that will come into contact with and could damage the PCB if rotated too far! Use a razor blade or similar to peel back the grip-tape sticker on the protrusion. If you‚Äôre careful and manage to remove the sticker in one piece you might be able to re-apply it during reassembly. The lamp functions fine without the sticker, though. Underneath the sticker will be two small philips screws. Remove them and the metal protrusion and small plastic part containing the two pogo pins should come free. Set these aside. Gently remove the clear plastic diffuser from the lamp tube and set aside. The matte finish on the interior side of the diffuser is a fingerprint magnet. Consider using gloves for this step. Carefully slide the PCB out of the aluminum tube. Be mindful of the two spring like contacts on the back of the PCB that mated with the pogo pins! You can see the small black plastic bracket holding the pogo pins and the protrusion bit with some of the grip-tape still attached: If it feels like you're using too much force to open the lamp... you probably are! If you try to remove the PCB without first detaching the pogo pins, you‚Äôll damage one or both of the spring contacts that mate the PCB to the pogo pins! You don‚Äôt want your GND spring to look like mine! Before realizing that the pogo pins could be removed from the lamp, I removed both caps and tried push/pull the PCB out. The PCB is supported inside the tube with a few black plastic ‚Äòsleds‚Äô which are heat-staked on to the PCB. The ‚Äòsled‚Äô closest to the ESP partially covers the 3V3 test point. Rather than use a dedicated 3V power supply during flashing, I found it easiest to use this pin to bring the EN pin up high. If you‚Äôre going to use the 3V3 test pin instead of a dedicated external power supply, you will probably want to remove the ‚Äòsled‚Äô to get easy access to the test point. You can do this with some flush-cut snips. Be careful to not scratch the solder mask / PCB with the sharp edges of the snips The sled isn‚Äôt technically required for re-assembly but it‚Äôs pretty easy to re-attach to the PCB with some hotglue. Discard it at your peril! Here‚Äôs a closeup of the PCB with most of the test points labeled. You can see the 3V3 test point immediately to the left of R6 in the shadow of the ‚Äòsled‚Äô. Repeat these steps in reverse order to re-assemble the lamp. ","date":"2022-01-22","objectID":"/xaomi-s1-monitor-lamp-teardown-and-tasmota/:3:0","tags":["tasmota","home assistant"],"title":"Installing Tasmota on the Xiaomi Desk Lamp","uri":"/xaomi-s1-monitor-lamp-teardown-and-tasmota/"},{"categories":["teardown"],"content":"The puck Fortunately, opening up the remote is not difficult. Remove the two philips screws under the bottom cap. The main body / rotary knob lifts away from the midframe. Like with the lamp PCB, there are a few test points: Tasmota Warning It is likely that both the WW and CW LEDs will briefly light up during the flashing process. When this happens, you will draw more current than a typical USB \u003c-\u003e Serial adapter can provide. At best you‚Äôll cause a brownout and the flash will be interrupted. Use a dedicated 5V supply that can provide at least 10W of power while flashing the lamp! Make sure that the GND wire from your serial programmer and the GND wire for your dedicated 5V@2A/10W supply are tied together or you will likely destroy some of the electronics on both the lamp, your serial adapter and possibly your computer! Having said all that, it‚Äôs totally worth it: When all is said and done, the lamp is easily integrated and controlled with Home Assistant ","date":"2022-01-22","objectID":"/xaomi-s1-monitor-lamp-teardown-and-tasmota/:3:1","tags":["tasmota","home assistant"],"title":"Installing Tasmota on the Xiaomi Desk Lamp","uri":"/xaomi-s1-monitor-lamp-teardown-and-tasmota/"},{"categories":["teardown"],"content":"Flashing Info The ESP32 chip on this PCB is a single core version. Follow the instructions for flashing the ESP32 version of Tasmota, specifically the tasmota32solo1 version! Solder wires to the usual RX, TX, GPIO0 and GND test points. The GPIO0 test point is the test point nearest to the ESP32 chip; directly off the bottom right corner. I used some solid-core cable from a length of cat5 cable but any similarly high gauge wire will work. Solder a jumper between the EN and 3V3 test point. I used a small yellow wire for this. The solid blue wire attached to GPIO0 and the blue/white wire attached to GND are joined together just out of frame. The ESP will not boot into programming mode unless GPIO0 is tied to ground. Leads from a dedicated 5V power supply are attached to the main contacts with reg/green alligator clips After confirming that each point is soldered sufficiently and wired to the correct pin on your USB \u003c-\u003e Serial programmer, turn the dedicated power supply on and you should be able to flash. ‚ùØ esptool.py --chip esp32 --port /dev/ttyUSB0 --baud 921600 --before default_reset --after hard_reset write_flash -z --flash_mode dout --flash_freq 40m --flash_size detect 0x1000 bootloader_dout_40m.bin 0x8000 partitions.bin 0xe000 boot_app0.bin 0x10000 tasmota32solo1.bin esptool.py v3.2 Serial port /dev/ttyUSB0 Connecting..... \u003c...\u003e Stub running... Changing baud rate to 921600 Changed. Configuring flash size... Auto-detected Flash size: 4MB Flash will be erased from 0x00001000 to 0x00004fff... Flash will be erased from 0x00008000 to 0x00008fff... Flash will be erased from 0x0000e000 to 0x0000ffff... Flash will be erased from 0x00010000 to 0x00157fff... Compressed 15536 bytes to 10862... Wrote 15536 bytes (10862 compressed) at 0x00001000 in 0.4 seconds (effective 353.8 kbit/s)... \u003c...\u003e Hash of data verified. Leaving... Hard resetting via RTS pin... Turn off the dedicated 5V supply and desolder the GPIO0 wire and the 3V3 \u003c-\u003e EN jumper. Leave the RX, TX, and GND wires in place so you can easily check the boot logs to confirm Tasmota flashed OK: ‚ùØ screen /dev/ttyUSB0 115200 ets Jun 8 2016 00:22:57 rst:0x1 (POWERON_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT) configsip: 0, SPIWP:0xee clk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x00 mode:DOUT, clock div:2 load:0x3fff0030,len:184 load:0x40078000,len:12352 load:0x40080400,len:2912 entry 0x400805c4 00:00:00.002-228/73 HDW: ESP32-S0WD-OEM ./components/esp_littlefs/src/littlefs/lfs.c:1071:error: Corrupted dir pair at {0x0, 0x1} 00:00:00.777-231/73 UFS: FlashFS mounted with 312 kB free 00:00:00.782-231/73 CFG: Use defaults 00:00:00.893 QPC: Reset 00:00:00.941 BRY: Berry initialized, RAM used=3849 00:00:00.950 BRY: no 'preinit.be' 00:00:00.963 Project tasmota - Tasmota Version 10.1.0(tasmota)-2_0_1_1(2021-12-08T14:50:34) 00:00:00.984 BRY: no 'autoexec.be' 00:00:00.243 WIF: WifiManager active for 3 minutes 00:00:01.200 HTP: Web server active on tasmota-197907-6407 with IP address 192.168.4.1 After confirming a successful flash/boot, you can continue to configure Tasmota via the serial console or just power off and de-solder all wires and finish configuration after you re-assemble. ","date":"2022-01-22","objectID":"/xaomi-s1-monitor-lamp-teardown-and-tasmota/:4:0","tags":["tasmota","home assistant"],"title":"Installing Tasmota on the Xiaomi Desk Lamp","uri":"/xaomi-s1-monitor-lamp-teardown-and-tasmota/"},{"categories":["teardown"],"content":"Templates The ESP32 controls the lamp via 3 GPIO pins: GPIO04: Global light enable/disable. GPIO19: Cold White channel GPIO21: Warm White channel Irrespective of what the WW or CW channel are doing, there will be no light if GPIO4 is not high. This means you have two choices for how to configure the GPIO. Tasmota will disable both GPIO19 and GPIO21 when the light is switched off so there really is no need for independent control via GPIO4. This template keeps GPIO4 high and relies on Tasmota setting to fully off to shut the light off. Most people should use this template. {\"NAME\":\"Mijia Desk Lamp 1S (MJGJD02YL)\",\"GPIO\":[0,0,0,0,3840,0,1,1,0,0,0,0,0,0,0,416,0,417,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"FLAG\":0,\"BASE\":1,\"CMND\":\"DimmerRange 45,255\"} If, for some reason, you want to control the global on/off (GPIO04) independently of the WW/CW channels, use this template: {\"NAME\":\"Mijia Desk Lamp 1S (MJGJD02YL)\",\"GPIO\":[0,0,0,0,224,0,1,1,0,0,0,0,0,0,0,416,0,417,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"FLAG\":0,\"BASE\":1,\"CMND\":\"DimmerRange 45,255\"} If you do not need dimmer control and only need full on/off control, you can adjust the module so GPIO{04,19,21} are always high, low or simple on/off outputs by configuring them to be of type Relay instead of PWM outputs. ","date":"2022-01-22","objectID":"/xaomi-s1-monitor-lamp-teardown-and-tasmota/:5:0","tags":["tasmota","home assistant"],"title":"Installing Tasmota on the Xiaomi Desk Lamp","uri":"/xaomi-s1-monitor-lamp-teardown-and-tasmota/"},{"categories":["teardown"],"content":"Dimmer Range In testing, extremely low brightness values for both the WW and CW channel had some undesirable behavior: Values lower than ~30 didn‚Äôt light at all Values between 30-35 caused unpleasant flicker Values lower than ~40 would also cause flicker when attempting to light the WW and CW channels together For this reason, a DimmerRange of 45-255 is suggested. Tasmota will let you dim the light as low as possible without flicker. Your lamp, eyes and needs will differ so feel free to see if a lower dimmer value will work for you by unlocking the full dimmer range with DimmerRange 0,255 and then playing with the ct and dimmer commands to find the lowest tolerable brightness for your needs. That is why you see the DimmerRange 45,255 command in the above templates. ","date":"2022-01-22","objectID":"/xaomi-s1-monitor-lamp-teardown-and-tasmota/:5:1","tags":["tasmota","home assistant"],"title":"Installing Tasmota on the Xiaomi Desk Lamp","uri":"/xaomi-s1-monitor-lamp-teardown-and-tasmota/"},{"categories":["teardown"],"content":"PCB/IC Markings Some of the interesting ICs and PCB markings Lamp PCB is labeled Yeelight Spider 1S V06, 20210714 by XJD, 94V-0, Y Y21M09D13, JUl 7.820.0874-1 PCB has a QR code / sticker with WF-E32-RWY1, Spider1S, and the device mac address SGM4065: Over-Voltage Protection IC and Li+ Charger Front-End Protection IC with LDO Mode Some DFN-10 package that is marked with either WRDPA or WRQPA or WR0PA. It‚Äôs a little hard to tell as the markings are super faint and I can‚Äôt get them super clear even with high contrast / inverted color image filters. There are several of them with identical circuitry through the length of the board so this IC is some sort of pwm dimmable constant current LED driver. ESP32-D0WD: the star of the show GD25Q32(B): a 4096 kB SPI flash chip The lamp body is marked with CMIT ID: 2021DP11423 Remote PCB labeled with 100-P806D1-1B-A1, Yeelight Spider 1S RC Board V02, 20210716 by XJD MHCB07P. This is marked on the tiny BTLE module inside the remote. Not too many search results show up. CMIT ID: 2020DP3172(M) ","date":"2022-01-22","objectID":"/xaomi-s1-monitor-lamp-teardown-and-tasmota/:5:2","tags":["tasmota","home assistant"],"title":"Installing Tasmota on the Xiaomi Desk Lamp","uri":"/xaomi-s1-monitor-lamp-teardown-and-tasmota/"},{"categories":["teardown"],"content":"And a tangential update to a blakadder.com post about a mystery device that turned out to be the Lanbon L8","date":"2022-01-18","objectID":"/lanbon-l8-tuya-lcd-switch-openhasp/","tags":["TuYa","openHasp"],"title":"Using Home Assistant to dynamically layout openHasp widgets","uri":"/lanbon-l8-tuya-lcd-switch-openhasp/"},{"categories":["teardown"],"content":"Background This is one of those posts that sat in the Drafts folder for way too long. Just before release, I‚Äôd discover something new that would warrant substantial rewrites. After several delays, false starts and re-writes, I finally have something that is mostly new and worth sharing with the world. Like with the past few teardown posts, this one also started off as a ‚Äòcart-stuffer‚Äô item so I could unlock a more generous discount on the total purchase. The listing that caught my eye had the generic title: EU US Wifi LCD Smart Wall Light Touch Switch Tuya Smart Life App Remote Control ON OFF Timer Voice Control For Google Home Alexa Naturally, a cursory check for existing writeups / teardowns didn‚Äôt yield much. I did have some hope that the Tuya compatibility meant an easily hacked ESP module running the show and not a proprietary module. It was unlikely that the device would be Android powered at that price-point and an ESP8266 series would be woefully under powered for direct LCD control so ‚Ä¶ fingers crossed for an ESP32 module! Or, at the very least there might be a way to retrofit in an ESP module like with the recent Mi-Boxer LED controller that I helped to integrate with Tasmota. The plan was to do a teardown and dump as much technical data as I could possibly gather in an evening or two and conclude with a feasibility assessment of hacking the device for use with Home Assistant. ","date":"2022-01-18","objectID":"/lanbon-l8-tuya-lcd-switch-openhasp/:0:0","tags":["TuYa","openHasp"],"title":"Using Home Assistant to dynamically layout openHasp widgets","uri":"/lanbon-l8-tuya-lcd-switch-openhasp/"},{"categories":["teardown"],"content":"Generic becomes Lanbon Immediately after opening the shipping box and getting eyes on the actual product packaging, it was clear that this was a Lanbon L8 series module. A quick google later and it turns out that the venerable blakadder.com has already covered this device‚Ä¶ and documented it‚Äôs Tasmota compatibility! So much for publishing a teardown and trying to figure out if Home Assistant integration was feasible üòï. Funny how once you have the ‚Äòmagic query string‚Äô, google starts to yield a ton of relevant results! Just after finding the aforementioned blakadder.com posts on the L8 device, I found two very helpful sources of more information: Somebody by the name of Jan Newmarch has published a comprehensive dive into the protocol(s) used by the stock firmware / other devices in the Lanbon family. This page dedicated to the Lanbon L8 from a project called openHasp. I thought that second link seemed familiar‚Ä¶ü§î. Turns out, the openHASP project is a substantial rewrite of the initial software that powered my Enhanced HomeAssistant Switch Plate (eHasp) project. Info While digging through the above links, I realized that the model I had opened up had a different PCB layout. In the interest of adding to the collective internet KB, photos and some other technical details from the model I tore apart are below. openHasp As opposed to the old HASP project, openHasp leverages more powerful processors that can drive the LCD directly; graphical assets no longer need to be compiled down to a LCD-specific firmware before use and the content of the entire display can be arbitrarily manipulated at runtime! openHasp uses json like files to store the UI/widgets layout and configuration. On boot, the content of the jsonl is parsed and turned into the actual UI widgets that are displayed on screen. For example, here is the example jsonl that renders two buttons: {\"page\":1,\"id\":2,\"obj\":\"btn\",\"x\":10,\"y\":40,\"w\":105,\"h\":90,\"toggle\":false,\"text\":\"Button\",\"mode\":\"break\",\"align\":\"center\"} {\"page\":1,\"id\":3,\"obj\":\"btn\",\"x\":125,\"y\":40,\"w\":105,\"h\":90,\"toggle\":true,\"text\":\"#FFD700 Toggle# Button\",\"mode\":\"break\",\"align\":\"center\"} Image credit/source: openHasp Docs Notice how the absolute coordinates on screen (x and y) and and absolute width (w) and height (w) properties are explicitly declared. The only reason the buttons look appropriately sized/positioned in the above screenshot is because someone took the time to calculate the appropriate values for the particular screen resolution and orientation. The above jsonl example would look different on any openHasp device with a different screen orientation or resolution! Manually calculating the exact size and position of every widget for each class of device isn‚Äôt so bad if you‚Äôre planning on deploying the same file to several instances of the same device‚Ä¶ but it starts be become a real headache if you want to deploy the same layout to 2+ different types of device. The L8 devices are designed to be installed into a wall electrical box; they don‚Äôt sit well on my desk so prototyping various interface files on a L8 device isn‚Äôt the easiest. Instead, I am using a device with a higher resolution and bigger screen that does work well on a desk to prototype the various jsonl files. If you‚Äôre thinking that calculating the appropriate location for various UI widgets on one device and then having to re-do the math for the intended deploy targets sounds like a task better suited to a computer‚Ä¶ you‚Äôre right! ","date":"2022-01-18","objectID":"/lanbon-l8-tuya-lcd-switch-openhasp/:1:0","tags":["TuYa","openHasp"],"title":"Using Home Assistant to dynamically layout openHasp widgets","uri":"/lanbon-l8-tuya-lcd-switch-openhasp/"},{"categories":["teardown"],"content":"Dynamic Layouts with Home Assistant Fortunately, the properties of every UI widget can be modified over the network even after the jsonl file has been parsed and the initial display has been painted! My C++ skills are pretty weak so contributing new code to enable dynamic layouts directly to the openHasp codebase is not immediately practical. There is, however, a robust Home Assistant integration published in the form of a custom component. Home Assistant means Python and some Python code to calculate the appropriate position/size for a given element is immediately within my means. Warning A few (small) changes to the openHasp firmware were required to make this work. Any recent build of 0.7 should work. As of 2022-01, there is no release of the custom component that works with 0.7 out of the box so if installing through HACS, you will need to patch the custom component so devices running .0.7 can be controlled via Home Assistant. Please see the openHasp \u003c-\u003e Home Assistant docs for background information, examples and a lot more detail on how Home Assistant and openHasp work together or if any of the jsonl and yaml below does not make sense. Warning Please make sure that your openHasp device can connect to your MQTT broker and that the openHasp custom integration can discover and ‚Äòregister‚Äô your device with Home Assistant before proceeding! ","date":"2022-01-18","objectID":"/lanbon-l8-tuya-lcd-switch-openhasp/:2:0","tags":["TuYa","openHasp"],"title":"Using Home Assistant to dynamically layout openHasp widgets","uri":"/lanbon-l8-tuya-lcd-switch-openhasp/"},{"categories":["teardown"],"content":"Two devices, one pages.jsonl The pages.jsonl file used for this post and the screenshots below is a (lightly) modified versions of the clock and temperature example and the simple page navigation examples with a room specific set of ui widgets. That singular pages.jsonl file was uploaded it to two devices: Lanbon L8 with a 240x320 resolution WT32-SC01 module with a 320x480 resolution Each screenshot was taken with the device display configured to 0¬∫ and 90¬∫ of rotation. A reboot was required for the configuration change to take effect but I made zero changes to the pages.jsonl file on the device between changing the screen orientation. Lanbon L8 in it's rotated 'landscape' orientation Lanbon L8 in it's default 'portrait' orientation wt32-sc01 in 'landscape' orientation. wt32-sc01 in 'portrait' orientation. ","date":"2022-01-18","objectID":"/lanbon-l8-tuya-lcd-switch-openhasp/:2:1","tags":["TuYa","openHasp"],"title":"Using Home Assistant to dynamically layout openHasp widgets","uri":"/lanbon-l8-tuya-lcd-switch-openhasp/"},{"categories":["teardown"],"content":"building a pages.jsonl You don‚Äôt need to use this exact technique to build the pages.jsonl file; it works well for my needs / development flow. All that matters is that you get every UI element for every page into a single pages.jsonl file and then get that file uploaded to the device(s) in question. The page/id values declared in your jsonl file must match the object IDs that you will use to configure the Home Assistant integration. ‚ùØ cat header.frag.jsonl footer.frag.jsonl room.frag.jsonl \u003e pages.jsonl ‚ùØ curl http://roomPlateIpv4Here/edit --form name=data --form data=@pages.jsonl Info I store the combined files in pages.jsonl because this is the default page that an openHasp device will render. You can change this setting via the web UI: http://roomPlateIpv4Here/config/hasp or via telnet: ‚ùØ telnet roomPlateIpv4Here \u003c...\u003e prompt\u003e config/hasp {\"pages\":\"/foo.jsonl\"} header.frag.jsonl This contains the three text labels that I wish to have at the top of every openHasp device I deploy. { \"page\": 0, \"comment\": \"Default to page0 as the header and page/layout\" } { \"id\": 1, \"comment\": \"Time in the top left\", \"obj\": \"label\", \"text\": \"00:00\", \"align\": \"center\", \"bg_color\": \"#2C3E50\" } { \"id\": 2, \"comment\": \"Temp in the middle\", \"obj\": \"label\", \"text\": \"00.0¬∞C\", \"align\": \"center\", \"bg_color\": \"#2C3E50\" } { \"id\": 3, \"comment\": \"Humidity in the top right\", \"obj\": \"label\", \"text\": \"00.0%\", \"align\": \"right\", \"bg_color\": \"#2C3E50\" } footer.frag.jsonl This contains the three page navigation buttons that I wish to have at the bottom of every openHasp device that I deploy. { \"id\": 6, \"comment\": \"tab nav on the bottom, prev\", \"obj\": \"btn\", \"action\": \"prev\", \"bg_color\": \"#2C3E50\", \"text\": \"\\uE141\", \"text_color\": \"#FFFFFF\", \"radius\": 0, \"border_side\": 0, \"text_font\": 28 } { \"id\": 7, \"obj\": \"btn\", \"action\": \"back\", \"bg_color\": \"#2C3E50\", \"text\": \"\\uE2DC\", \"text_color\": \"#FFFFFF\", \"radius\": 0, \"border_side\": 0, \"text_font\": 22 } { \"id\": 8, \"obj\": \"btn\", \"action\": \"next\", \"bg_color\": \"#2C3E50\", \"text\": \"\\uE142\", \"text_color\": \"#FFFFFF\", \"radius\": 0, \"border_side\": 0, \"text_font\": 28 } room.frag.json This file should contain all the page(s) and UI widgets that are unique to the openHasp device deployed into the room that I will call room for the purposes of this post. As a demonstration, I have set up three buttons that control each of the three relays on a L8 device; you will almost certainly want to add multiple pages / other UI widgets as needed. { \"page\": 1, \"comment\": \"primary controls for the 3 relays\" } { \"id\": 101, \"comment\": \"relay1\", \"obj\": \"btn\", \"toggle\": true, \"text\": \"relay1\", \"mode\": \"break\", \"align\": \"center\", \"groupid\": 1 } { \"id\": 102, \"comment\": \"relay2\", \"obj\": \"btn\", \"toggle\": true, \"text\": \"relay2\", \"mode\": \"break\", \"align\": \"center\", \"groupid\": 2 } { \"id\": 103, \"comment\": \"relay3\", \"obj\": \"btn\", \"toggle\": true, \"text\": \"relay3\", \"mode\": \"break\", \"align\": \"center\", \"groupid\": 3 } ","date":"2022-01-18","objectID":"/lanbon-l8-tuya-lcd-switch-openhasp/:2:2","tags":["TuYa","openHasp"],"title":"Using Home Assistant to dynamically layout openHasp widgets","uri":"/lanbon-l8-tuya-lcd-switch-openhasp/"},{"categories":["teardown"],"content":"Configure Home Assistant After the pages.jsonl is deployed to each of the openHasp devices, you will need to create a configuration file for Home Assistant. For the above screenshots, I created two identical ‚É∞ copies of the yaml below ‚É∞ Other than the device name; in one file, the name was changed from plate00 to plate01. # plate00 is a test L8 module# Has a resolution of 240x320# The top left corner is 0,0, X grows positive to the right and Y grows positive down##plate00:## TODO: is there a way to fix this? Maybe a HA feature request or openHasp/CC change...# Would be really nice if HA had some way to save templates and load them# that way I don't have to declare the same variables over and over...objects:#### COMMON#### Header: Time- obj:\"p0b1\"properties:# Align left most, If we do go over our permitted length, loop\"align\": \"left\"\"text\": \"{{ states('sensor.time') }}\"\"mode\": \"loop\"### Draw the labels with a 1% margin from the top and sides\"x\": \u003e-{% set scnWd = state_attr('openhasp.plate00', 'tftWidth') | int %} {% set hdrHorMargin = (scnWd*0.01) | int %} {{hdrHorMargin}}\"y\": \u003e-{% set scnHt = state_attr('openhasp.plate00', 'tftHeight') | int %} {% set hdrVrtMargin = (scnHt*0.01) | int %} {{hdrVrtMargin}}# Width is 1/3 of the screen width after subtracting margins##\"w\": \u003e-{% set numObj = 3 %} {% set scnWd = state_attr('openhasp.plate00', 'tftWidth') | int %} {% set hdrHorMargin = (scnWd*0.01) | int %} {% set usableHdrWd = scnWd-(2*hdrHorMargin) %} {% set hdrLblWd = (usableHdrWd/numObj) | int %} {{hdrLblWd}}# Height is 10% of the screen, after margin##\"h\": \u003e-{% set scnHt = state_attr('openhasp.plate00', 'tftHeight') | int %} {% set hdrVrtMargin = (scnHt*0.01) | int %} {% set hdrHt = (scnHt*0.1) | int %} {% set hdrLblHt = hdrHt-hdrVrtMargin %} {{hdrLblHt}}# Header: Temp- obj:\"p0b2\"properties:# Align center, If we do go over our permitted length, loop\"align\": \"center\"\"text\": \"{{ states('sensor.room_temperature') }}¬∞C\"\"mode\": \"loop\"### Draw the labels with a 1% margin from the top and sides\"x\": \u003e-{% set numObj = 3 %} {% set scnWd = state_attr('openhasp.plate00', 'tftWidth') | int %} {% set hdrHorMargin = (scnWd*0.01) | int %} {% set usableHdrWd = scnWd-(2*hdrHorMargin) %} {% set hdrLblWd = (usableHdrWd/numObj) | int %} {% set hdrHorMargin = (scnWd*0.01) | int %} {{hdrHorMargin+hdrLblWd}}\"y\": \u003e-{% set scnHt = state_attr('openhasp.plate00', 'tftHeight') | int %} {% set hdrVrtMargin = (scnHt*0.01) | int %} {{hdrVrtMargin}}# Width is 1/3 of the screen width after subtracting margins##\"w\": \u003e-{% set numObj = 3 %} {% set scnWd = state_attr('openhasp.plate00', 'tftWidth') | int %} {% set hdrHorMargin = (scnWd*0.01) | int %} {% set usableHdrWd = scnWd-(2*hdrHorMargin) %} {% set hdrLblWd = (usableHdrWd/numObj) | int %} {{hdrLblWd}}# Height is 10% of the screen, after margin##\"h\": \u003e-{% set scnHt = state_attr('openhasp.plate00', 'tftHeight') | int %} {% set hdrVrtMargin = (scnHt*0.01) | int %} {% set hdrHt = (scnHt*0.1) | int %} {% set hdrLblHt = hdrHt-hdrVrtMargin %} {{hdrLblHt}}# Header: Humidity- obj:\"p0b3\"properties:# Align right most, If we do go over our permitted length, loop\"align\": \"right\"\"text\": \"{{ states('sensor.room_humidity') }}%\"\"mode\": \"loop\"### Draw the labels with a 1% margin from the top and sides\"x\": \u003e-{% set numObj = 3 %} {% set scnWd = state_attr('openhasp.plate00', 'tftWidth') | int %} {% set hdrHorMargin = (scnWd*0.01) | int %} {% set usableHdrWd = scnWd-(2*hdrHorMargin) %} {% set hdrLblWd = (usableHdrWd/numObj) | int %} {% set hdrHorMargin = (scnWd*0.01) | int %} {{hdrHorMargin+(2*hdrLblWd)}}\"y\": \u003e-{% set scnHt = state_attr('openhasp.plate00', 'tftHeight') | int %} {% set hdrVrtMargin = (scnHt*0.01) | int %} {{hdrVrtMargin}}# Width is 1/3 of the screen width after subtracting margins##\"w\": \u003e-{% set numObj = 3 %} {% set scnWd = state_attr('openhasp.plate00', 'tftWidth') | int %} {% set hdrHorMargin = (scnWd*0.01) | int %} {% set usableHdrWd = scnWd-(2*hdrHorMargin) %} {% set hdrLblWd = (usableHdrWd/numObj) | int %} {{hd","date":"2022-01-18","objectID":"/lanbon-l8-tuya-lcd-switch-openhasp/:2:3","tags":["TuYa","openHasp"],"title":"Using Home Assistant to dynamically layout openHasp widgets","uri":"/lanbon-l8-tuya-lcd-switch-openhasp/"},{"categories":["teardown"],"content":"Teardown ","date":"2022-01-18","objectID":"/lanbon-l8-tuya-lcd-switch-openhasp/:3:0","tags":["TuYa","openHasp"],"title":"Using Home Assistant to dynamically layout openHasp widgets","uri":"/lanbon-l8-tuya-lcd-switch-openhasp/"},{"categories":["teardown"],"content":"Product packaging Since it‚Äôs all but impossible to find any photos of the product packaging online, here‚Äôs a few of those: Minimal instructions and wasteful packaging. Other than the small foam insert, this entire package can be recycled! The provided screws are NOT the US standard #6 32 thread-per-inch. They are slightly larger and will strip out any screw holes in an electrical box! ","date":"2022-01-18","objectID":"/lanbon-l8-tuya-lcd-switch-openhasp/:3:1","tags":["TuYa","openHasp"],"title":"Using Home Assistant to dynamically layout openHasp widgets","uri":"/lanbon-l8-tuya-lcd-switch-openhasp/"},{"categories":["teardown"],"content":"Internals This particular model is the 3 relay version. Packaging claims 200W power. It's not clear if that is per channel or total. My money is on total. You can clearly see the revised PCB that is substantially different from the one featured on this blakadder post. My PCB has a parasitic TuYa module also attached. Almost none of the pins are connected to the PCB so the TuYa module is 100% self contained and commands the main ESP module via UART. Removing the TuYa module is pretty painless with some hot air. It can also be left alone and the openHasp binaries will just ignore it. You can also place an order directly with Lanbon for units that do not have the TuYa module populated but this will require a minimum order quantity. Generic relays, generic caps, generic transformers... don't switch any critical loads with this! A closer look at what appears to be a dedicated power monitoring IC. It appears to monitor the aggregate of all three channels, not each individually. Very likely to make sure no more than 200W is switched at one time... ","date":"2022-01-18","objectID":"/lanbon-l8-tuya-lcd-switch-openhasp/:3:2","tags":["TuYa","openHasp"],"title":"Using Home Assistant to dynamically layout openHasp widgets","uri":"/lanbon-l8-tuya-lcd-switch-openhasp/"},{"categories":["teardown"],"content":"PCB/IC Markings Some of the interesting ICs and PCB markings: CB3S: TuYa wifi module HLW8012: Single phase energy monitor chip ESP32-WROVER-IB: the primary ESP32 module that runs the show Primary PCB is marked: L8-HS_CB_V1.17(20210805) Daughter / ‚Äòpower‚Äô board L8-HS MB V1,14 ","date":"2022-01-18","objectID":"/lanbon-l8-tuya-lcd-switch-openhasp/:3:3","tags":["TuYa","openHasp"],"title":"Using Home Assistant to dynamically layout openHasp widgets","uri":"/lanbon-l8-tuya-lcd-switch-openhasp/"},{"categories":["teardown"],"content":"Where 'generic' means 'SSMS118 clone'","date":"2022-01-01","objectID":"/rgb-wall-switch-teardown/","tags":["tuya"],"title":"Generic RGB Wall Switch teardown","uri":"/rgb-wall-switch-teardown/"},{"categories":["teardown"],"content":"Yep! Another teardown post! This one was also a cheap ‚Äúbecause i‚Äôm curious‚Äù post. What It‚Äôs a ‚Äòdecora‚Äô style wall switch with WiFI and an RGB color changing paddle. The product listing was very non specific: EU US WiFi Smart Wall Switch Push Button Timer Relay Switch Voice Remote Control RGB LED Night Light Lamp TUYA Alexa Google Home I saw TuYa in the item description and hoped that it would be based on an ESP8266 module or at least use a pin-compatible module. After all, there are a few such devices on the Wall Switches and Dimmers section of the tasmota templates repository. ","date":"2022-01-01","objectID":"/rgb-wall-switch-teardown/:0:0","tags":["tuya"],"title":"Generic RGB Wall Switch teardown","uri":"/rgb-wall-switch-teardown/"},{"categories":["teardown"],"content":"Teardown Almost immediately after opening it became clear: the item is a variant of the SSMS118-01AI switch. Other than that, the internals are pretty predictable / standard. From the side you can see plastic clips holding the paddle to the Aluminum substrate. No screws on the back, so we probably open it from the front. Not sure about how code compliant those wire terminal/lugs are. If the paddle was removed, the philips screws would be unobstructed. RGB leds on a thin PCB with a reflective sticker attached. The sticker probably makes the LEDs appear brighter. Philips screws removed and the switch immediately splits in half. I wish everything was this easy to get into! Almost textbook design at this point; keep the mains voltage on it‚Äôs own PCB and only send back low voltage / signal to the controller PCB. The mains PCB attaches to the controller PCB via 3 sets of three male/female pin headers along the top and bottom of the left edge and one side of the right edge. Sparsely populated and a generic no-name relay. But at least there‚Äôs a fuse! Mains PCB is marked HYS-00-004-MAIN_V1.1 with a datecode of 2019-5-7. Equally sparse controller PCB. Aside from the massive mechanical switch and the three transistors for the RGB leds, everything lives on the ESP module. At first glance, the module looks like a standard ESP-12‚Ä¶ but it isn‚Äôt! There are 6 pins on each of the three edges, not the 8 that would be present on an ESP-12 module. Controller PCB is marked HYS-00-004-WIFI_V1.1 with a datecode of 2019-4-11. After a bit of reverse image searching, the ESP based module appears to be a WT8266-S1s. The datasheet can be found here. To save you a click, here‚Äôs the useful bit: I checked a few of the pins listed on the SSMS118-01AI template switch and they appeared to match the PCB shown above. Thats all for this one! ","date":"2022-01-01","objectID":"/rgb-wall-switch-teardown/:1:0","tags":["tuya"],"title":"Generic RGB Wall Switch teardown","uri":"/rgb-wall-switch-teardown/"},{"categories":["teardown"],"content":"All new product line, still familiar internals.","date":"2022-01-01","objectID":"/shelly-pro-4pm-teardown/","tags":["shelly"],"title":"Shelly Pro 4PM teardown","uri":"/shelly-pro-4pm-teardown/"},{"categories":["teardown"],"content":"Yet another teardown post! Curiosity got the better of me while putting together a BOM for a project and I decided to add one of the new Shelly devices to my order to bump the total over the threshold for a nice discount. I have not seen a ton of discussion about what‚Äôs inside of a any of the new Shelly Pro devices. These ‚Äònext generation‚Äô devices appear to all use a common and more uniform API which, apparently, is too demanding of the ESP8266 based hardware so it won‚Äôt be backported. A cursory google only reveals some light technical details from a teardown post on a german site. All of the pictures attached ot that post require a login üôÅ. So here is my teardown. No login required! What The Shelly Pro 4 PM is a rather compact DIN mounted relay/power monitoring module with some connectivity. The 4 is for the number of channels that can be independently switches and monitored. As for connectivity, the official product page sums it up nicely: Professional 4 channels relay with Wi-Fi, LAN, and Bluetooth connection, suitable for home and facility automation with remote control and precise power management. DIN rail mountable inside a breaker box. Enhanced safety features and compatible with most used home automation platforms. ","date":"2022-01-01","objectID":"/shelly-pro-4pm-teardown/:0:0","tags":["shelly"],"title":"Shelly Pro 4PM teardown","uri":"/shelly-pro-4pm-teardown/"},{"categories":["teardown"],"content":"Teardown This Shelly 4PM feels like a step backwards in terms of build quality. The prior generation of devices were very dense little pucks and this feels pretty hollow; the plastic DIN case creaks and squeaks. The internal layout isn‚Äôt my favorite and it made both disassembly and reassembly a bit tenuous at a few points. The layout may be inevitable, though, as DIN case is more or less a standard shape and size. Layouts are almost always a bit weird when the electronics have to be designed to fit the case rather than the other way around. Other than the layout quirks, the Shelly team continues to go with what they know: the espressif line of chips. This time the ESP826x series is out and the much more capable ESP32 series is in‚Ä¶ which allows for both the color LCD and the ethernet interface. As is common with these types of devices, the ESP runs the show‚Ä¶ but it has a few deputies: dedicated power monitoring ICs and an ethernet PHY. And with that, let‚Äôs get into it: The main body of the shelly is clipped to the rear ‚Äòplate‚Äô which houses the DIN rail attachment mechanism. You can see the clips on the very top and bottom along the left edge: 40A at 240V is a _lot_ of power to fit into a fairly compact device! Viewed from the rear, the clips are easier to see in the four corners: The rear plate lifts off to reveal the largest PCB. There are 4 copies of the same circuit. Very nice to see big traces with extra solder and some beefy current shunts! Just behind the ‚Äòinput trigger‚Äô terminals on the main PCB is a 2x10 @ 2.54mm pitch female header. Into which slides the ‚Äòsmarts‚Äô PCB which hosts the main ESP32 MCU as well as the ethernet jack. On this smaller PCB and next to the ethernet jack is a very small 1x6 @ 1mm pitch female header block. It is cleverly hidden next to the jack but could probably be accessed with the case on if you‚Äôre careful. If I had to guess, this is a debug/programming header for at least the main MCU. It‚Äôs not pictured until later, but there is a 2x2 @ 2.54mm pitch male header block on the other side of the smarts PCB. This is where a small daughterboard containing only the 3 buttons connects. How much do you want to bet that the pins on the debug header are the usual +3.3, GND, IO0, RX, TX for ESP flashing? On the main PCB, behind the ‚Äòsmarts‚Äô PCB is a set of two ICs marked with ADE7953ACPZ. As expected, these are the energy management / monitoring ICs. Why two crystals, though? The IC marked MCP23S17 is a simple SPI based IO expander‚Ä¶ almost certainly used to drive the relays and possibly command the power management ICs. On the rear of the ‚Äòsmarts‚Äô PCB is the star of the show: ESP32-D0WDQ6. In addition to the passives and the flat flex socket for the LCD, we have: cFeon QH64-104HIP 64 Megabit flash chip SMSC8720A: 10/100 Megabit ethernet PHY There is also another daughterboard covered in kapton tape. This is soldered to the main PCB and just has a few electrolytic caps. I guess this arrangement was easier than trying to clear some room on the back of the main PCB so the heavy current traces could be kept simple ü§î? In the top right corner you can see the 4 pin header where the button daughter board attaches‚Ä¶ just next to the ethernet phy. From this angle, still in the top right corner, you can see the button daughter board attached to the 4 pin header. Just a few very tiny passives! Electrically, nothing unusual or bizarre. Layout was a bit ‚Äòinventive‚Äô but the unusual but standard shape of the case probably drove at least some of the decision to have 4 different PCBs that all have to be tediously connected by hand during manufacture! Thats all for this one! ","date":"2022-01-01","objectID":"/shelly-pro-4pm-teardown/:1:0","tags":["shelly"],"title":"Shelly Pro 4PM teardown","uri":"/shelly-pro-4pm-teardown/"},{"categories":["teardown"],"content":"PCB/IC Markings AKA SEO optimization üòâ ADE7953ACPZ: Power monitoring MCP23S17: IO expansion ESP32-D0WDQ6: main CPU EN25QH64: 8 MB flash chip Primary PCB is marked: Shelly4ProPM_Relays_v0.1.2 Daughter boards not really marked with anything other than the usual component IDs and the date code of 211015 ","date":"2022-01-01","objectID":"/shelly-pro-4pm-teardown/:2:0","tags":["shelly"],"title":"Shelly Pro 4PM teardown","uri":"/shelly-pro-4pm-teardown/"},{"categories":["teardown","review"],"content":"Something here","date":"2021-12-11","objectID":"/tuya-smart-curtain-driver-robot-teardown/","tags":["tuya"],"title":"Tuya Smart Curtain Driver Robot Teardown","uri":"/tuya-smart-curtain-driver-robot-teardown/"},{"categories":["teardown","review"],"content":"I am trying something new out with this post; some mix of hardware teardown and a brief product review. Why I was looking for a way to actuate some heavy blackout curtains. There have been several DIY projects out there that manipulate curtains but they all appear to be relatively involved as they are often designed for a very specific type of curtain; servos that fit on the ‚Äòtilt rod‚Äô or motors that can manipulate the pull chain‚Ä¶ etc. The specific curtains that I wanted to power-actuate are curtains that do not have a pull string or a set of wheels/track to facilitate their movement. Just folds of fabric hanging directly from a telescopic metal rod. After a quick review of hte existing commercial solutions for my application/style of curtains, it became clear that they all work in about the same way: some battery powered motor mechanically couples to the curtain rod and moves along the rod dragging / pushing the curtain as it does so. Since they all more or less use the same design, I figured that most of the differentiation between products would be in the software side of things. No product immediately stood out as having local Home Assistant integration so it didn‚Äôt matter which product I selected; I will inevitably have to do some reverse engineering / hacking to get local Home Assistant integration. I selected the Tuya Smart Curtain Driver Robot because: Cheap Appeared to use USB-C for charging I was vaguely aware that TuYa was pumping out a ton of ESP8266 based hardware and hoped that I‚Äôd find the familiar microcontroller inside. Below is a collection of photos and some thoughts that are - roughly - what I wish I had been able to find when doing the product research. If I had found the equivalent of this post while doing my research, I would have been able to save myself a purchase! What Searching for rod-based curtain actuators will turn up a ton of results. A fair number of them use product images very similar to these: Official marketing photo How well the robot performs will depend on how well the little white wheel is held against the bottom of the curtain rod. The arms that the upper sled attaches to are spring loaded for additional clamping force. The case seems to be fairly generic and used across multiple brands so it‚Äôs safe to say that depending on the version / hardware variant, you may or may not have all of the featured inputs/sensors. Only one of the two units in a pair comes equipped with the light sensor. The light sensor is a nice touch. I will absolutely be borrowing that idea when designing my own solution üí°ü§î! ","date":"2021-12-11","objectID":"/tuya-smart-curtain-driver-robot-teardown/:0:0","tags":["tuya"],"title":"Tuya Smart Curtain Driver Robot Teardown","uri":"/tuya-smart-curtain-driver-robot-teardown/"},{"categories":["teardown","review"],"content":"Teardown I‚Äôm not a huge fan of unboxing videos. The box is rather unremarkable; it sustained some damage in transit, but that‚Äôs what it‚Äôs supposed to do. Relatively well packaged. The seller that I purchased from had explicit listings for different curtain rod styles so I am not sure why I received hardware for all styles. There does not appear to be any easy way to install this hardware. The upper sled is coupled to the main body through two spring-loaded arms with a ratchet and paw setup. The arms can be easily removed from the main body if needed. I am getting some vague Portal2 Turret vibes... Since the entire weight of the robot will be hanging from the upper sled, the springs are the only thing that will pull the actuator wheel into the curtain rod. I don‚Äôt know how the springs will last over time, but I absolutely can forsee needing to re-tension things as the springs inevitably stretch out. The ratchet/paws seem to indicate compatibility with some comically large diameter curtain rods! Obligatory 'i void warranties' reference. Use a Philips style J00 or J000 screwdriver to remove the four screws holding the thing together. Use any flat pry tool to crack the two halves apart. Screw hiding under warranty void sticker and obvious mechanical/snap seam make it pretty obvious how this will come apart. And with that, our first real look at the electronics inside! I expected a simple PCB that contained a charge controller circuit for the battery and a simple motor driver with over current protection‚Ä¶ and nothing else. I was sure that everything else would be handled directly by a the radio-on-module. I absolutely did not expect the PCB to have provisions for ‚Ä¶ two radio modules! A few other quick observations: The unpopulated radio module footprint does not match any ESP-8266 modules that I am familiar with. The populated radio module does look like a common ESP-12E module footprint‚Ä¶ but the module is clearly not an ESP. The markings have been erased from all the interesting ICs ü§¨. The 20 pin chip closest to the unpopulated module footprint could be anything but is likely the ‚Äòhousekeeping‚Äô CPU. The populated radio module likely communicates with this chip to command the motor and check the sensors The product marketing photos indicated that there would be a light sensor. The PCB appears to have a foot print for an LDR‚Ä¶ but it‚Äôs not populated‚Ä¶ only a few passive components besides some radio-on-module The USB-C port does not have any active electronics connected to it. The port likely does not speak any power delivery protocols and certainly does not have a hidden UART for talking to either of the microcontrollers. No motor is visible so that means that it must be embedded in the comically small drive wheel‚Ä¶ Some more technical details are discussed below. Huh. Was not expecting the PCB to be quite so big or complex! Lifting up the PCB reveals the battery pack. I did not slice the pack open to see which brand of cells went into the pack. Grateful that they didn't solder the battery directly to the PCB. I have not tested the battery to see accurate the labeled capacity is. I was still looking for that elusive light sensor so I opened up the second unit‚Ä¶ and found it! Other than the populated second radio module, R20 and the LDR, the PCBs appear identical. Something tells me that the PCB with two radio modules is the 'leader' out of the two. On the rear we can see an obvious programming / debug port and a PCB/product designator: ZNCL_TY_V1.5. Giving that a quick google returns almost nothing. I did find this post from /u/coned_miro asking about a very similar PCB revision: ...The main board says 'ZNCL_TY_V1.3' on the back Nothing new to be learned about the tuya device from that thread, sadly. No, I didn't hook a scope up or trace out the obvious programming/debug header. ","date":"2021-12-11","objectID":"/tuya-smart-curtain-driver-robot-teardown/:1:0","tags":["tuya"],"title":"Tuya Smart Curtain Driver Robot Teardown","uri":"/tuya-smart-curtain-driver-robot-teardown/"},{"categories":["teardown","review"],"content":"The App I never intended to use the manufacturer provided app for anything other than the initial setup so this will be a very brief section. The robot was quickly discovered and provisioned through the app. BTLE Pair/Provisioning was straightforward The device calibration process is pretty rudimentary and does not have an easy ‚Äúundo‚Äù process. If you make a mistake in configuring the direction/distance that the robot needs to travel for curtain open/close, you have to factory reset the device. Fortunately this is easy to do in app and discovering/re-provisioning the device takes only a few seconds. The two firmware version strings strongly hints at a ‚Äútwo processors for two domains‚Äù architecture: the anonymous 20pin chip runs everything on the PCB and the BT7L module deals with external communications and is only abstractly aware of the PCB/motor/sensor/battery state. I have only skimmed the TuYa developer documentation but I think that the VirtualID is common to _all_ of the curtain robots. Verdict While disappointing that there was no easily hackable ESP microcontroller running the show, it doesn‚Äôt matter. I can‚Äôt use this product as is for my intended application; the motor is just too puny for the task. The brains(?) My curtains are rather thick and heavy. A tiny motor can‚Äôt possibly have enough power to do this on it‚Äôs own‚Ä¶ especially with a sub-optimal coupling mechanism! To give the motor a fighting chance, the engineers went with a TON of reduction-gearing. The gearbox allows a wimpy but fast motor to become a more grunty motor at the expense of speed. Almost anything small that rotates at high speed will come with some unpleasant sounds. This is ESPECIALLY true for cheaply made gearbox full of small gears. This means that any invocation of the robot will be noisy. You can expect the noisy little device to slowly move across the curtain rod. üôÑ The robot struggled to push the curtains together towards the end of an opening cycle‚Ä¶ it would often skip in place as the drive wheel struggled to keep enough traction on the curtin rod. Likewise, asking the robot to pull the bucked up curtains closed was out of the question without some sort of an assist. Because the robot has no fixed position sensor, it can‚Äôt really measure where on the curtain rod it is. Every time the drive wheel skips, the difference between where the robot thinks it is and where it actually is will grow. If you can stand the whiny/slow movement, expect frequent re-calibrations üëé. TL;DR: Looks like there‚Äôs a reason why the hobbyist/DIY community has produced such a wide variety of bespoke curtain/drape actuators‚Ä¶ most of the commercial ones have sacrificed too much in order to be widely usable. The solution that I end up implementing will be designed with my heavy drapes in mind and will use an appropriately sized and quiet motor! A simple brushed DC motor with no position encoder and what is probably a cheaply made gearbox. What could go wrong? Technical Details A highly condensed version of my initial notes from setup/teardown: Was not expecting multiple radio units. The blue radio-module that both PCBs have in common appears to be a JDY-25M. There is a SDK for the JDY-25M available here. It contains some english documentation. The JDY-25M SDK does not appear to contain any information about how to program the chip or build a custom firmware. You are meant to interface with the ‚Äòstock‚Äô firmware via AT+ commands. The firmware appears to support multiple modes‚Ä¶ including a bi-directional communication link. I suspect that the unique radio module is the connection to the outside world and the the two identical radio modules are used to coordinate movement between the two pods I was never able to get the ‚Äòfollower‚Äô unit to pair or otherwise command the second unit. The unique radio module is a module made specifically by/for TuYa: https://developer.tuya.com/en/docs/iot/bt7l?id=K96gqp1dp6iiw ","date":"2021-12-11","objectID":"/tuya-smart-curtain-driver-robot-teardown/:2:0","tags":["tuya"],"title":"Tuya Smart Curtain Driver Robot Teardown","uri":"/tuya-smart-curtain-driver-robot-teardown/"},{"categories":["teardown","review"],"content":"PCB Markings AKA SEO optimization üòâ PCB is marked: ZNCL_TY_V1.5 ‚Äúprimary‚Äù radio: BT7L ‚Äúsecondary‚Äù radio JDY-25M ","date":"2021-12-11","objectID":"/tuya-smart-curtain-driver-robot-teardown/:3:0","tags":["tuya"],"title":"Tuya Smart Curtain Driver Robot Teardown","uri":"/tuya-smart-curtain-driver-robot-teardown/"},{"categories":["homeassistant"],"content":"How is X11 still so unpleasant to use and configure in 2021?!","date":"2021-11-20","objectID":"/hardware-accelerated-graphics-on-the-raspberry-pi-4-a-snappier-kds/","tags":["raspberry-pi","xorg","KDS"],"title":"Hardware accelerated graphics on the raspberry pi4 for a speedier KDS","uri":"/hardware-accelerated-graphics-on-the-raspberry-pi-4-a-snappier-kds/"},{"categories":["homeassistant"],"content":"Surfacing the right information at the right time in the right place is a difficult but essential task for any credible automation system. I have been experimenting with the concept of a Home Assistant powered KDS for a few years now and have found that the refrigerator happens to be an especially good place to surface some information and device controls. Yes, it's over-exposed and shot at an awkward angle but that's what it took to minimize glare! This is not a post about how to build the KDS pictured above; you can follow any of the numerous ‚Äúhow to use a raspberry pi as a kiosk‚Äù guides out there and you‚Äôd be 90% of the way there. The last 10% is highly application specific; the hardware you design and 3d-print or otherwise fabricate will depend on your particular screen and selected mounting location. This is a post about solving a performance issue with the dashboard hosted on the device. Earlier versions of this KDS were powered by a raspberry pi 3 B (not even the + variant!) with 1 GB of ram. The Lovelace dashboard that the KDS displays is quite javascript heavy and would frequently hang on the pi3b. I use this dashboard to adjust grocery lists, control lights, set appliance timers and more. If the dashboard is sluggish or otherwise unresponsive, it‚Äôs worse than useless! As soon as I swapped in a raspberry pi 4 with 4 GB ram, things got ‚Ä¶. marginally better üòë. Sure, it booted much faster and the JS heavy graphs didn‚Äôt cause the box to wedge anymore, but manipulating things on screen still was still a choppy experience. Animations didn‚Äôt show at all or had all but a few frames dropped :(. I know that the raspberry pi 4 is more than capable of running a single web page in a headless browser so something is wrong. After a bit of digging, it turns out that chromium does NOT use hardware acceleration by default on the raspberry pi. Ok, that‚Äôs an easy fix. Just enable the gpu and reboot: pi@kds:~ $ cat /boot/config.txt \u003c...\u003e # Enable DRM VC4 V3D driver for much more performant chrome dtoverlay=vc4-kms-v3d \u003c...\u003e pi@kds:~ $ sudo reboot ‚Ä¶ right? No. Turning on the gpu acceleration broke the various screen rotation / resolution directives that I had configured in /boot/config.txt: pi@kds:~ $ cat /boot/config.txt \u003c...\u003e [all] # We need to rotate the display 90degrees as the 'default' orientation from the manufacturer assumes a horizontal orientation, not a vertical one # See: https://www.waveshare.com/wiki/13.3inch_HDMI_LCD_(H) display_rotate=1 # Force correct resolution # Use 'DMT/Display Monitor Timings # See: https://www.raspberrypi.com/documentation/computers/config_txt.html#video-options hdmi_group=2 hdmi_mode=82 One of the Raspberry Pi Engineers explains why: display_rotate only does anything if the firmware is in charge of the display, which isn‚Äôt the case when using vc4-kms-v3d. Even when the video out could be configured with config.txt, the firmware offers no such mechanism to rotate input events to match the orientation. Fortunately, the LCD manufacturer provides good documentation about how to configure the touch inputs with X11 Unfortunately, the manufacturer does not provide corresponding documentation about how to configure the display with X11. Not that I can blame them! Configuring X11 has always been‚Ä¶ tedious ‚Ä¶ to use a ‚Äòpolite‚Äô term for the experience! ","date":"2021-11-20","objectID":"/hardware-accelerated-graphics-on-the-raspberry-pi-4-a-snappier-kds/:0:0","tags":["raspberry-pi","xorg","KDS"],"title":"Hardware accelerated graphics on the raspberry pi4 for a speedier KDS","uri":"/hardware-accelerated-graphics-on-the-raspberry-pi-4-a-snappier-kds/"},{"categories":["homeassistant"],"content":"Xorg and SSH I‚Äôll spare you the bulk of the rant and summarize with this: Can't open display :0.0 For reasons that don‚Äôt make a ton of sense to me, all of the command line tools for probing display hardware and creating X11 configurations really don‚Äôt like working over SSH ü§î. Yes, I of course tried the export DISPLAY=:0.0 trick. xrandr and friends are fine when running in a local shell, but just don‚Äôt play nice when a local user connects via SSH. This makes things a lot harder than they needed to be as the location of the KDS does not lend its self to easily hooking up a keyboard and mouse. Furthermore, the intended purpose of this install is to display a web page. Thats it. There is next to no desktop environment installed because one is not needed for a full screen headless chrome instance. Installing a virtual console application was going to involve a lot of bloat and other unnecessary packages which is overkill for a few CLI utilities that should just work over any console weather that be local PTY or ssh! After a few hours of anguish and trial/error later, I had everything working as expected! But before we get there and while i‚Äôm still ranting, why is there no xorg -checkconf ... command?! Ok. Now it‚Äôs all out of my system. \u003c/rant\u003e ","date":"2021-11-20","objectID":"/hardware-accelerated-graphics-on-the-raspberry-pi-4-a-snappier-kds/:1:0","tags":["raspberry-pi","xorg","KDS"],"title":"Hardware accelerated graphics on the raspberry pi4 for a speedier KDS","uri":"/hardware-accelerated-graphics-on-the-raspberry-pi-4-a-snappier-kds/"},{"categories":["homeassistant"],"content":"Solution Every tap registers instantly and there‚Äôs no jank or stutter in any animation. Likewise, graphs animate as quickly as they load‚Ä¶ Perfect! This is the X11 configuration that rotated the display and would ‚Äòsee‚Äô the display attached to the GPU: pi@kds:~ $ cat /etc/X11/xorg.conf.d/monitor.conf # Device = GPU # When using rPi 4 with GPU instead of software render, the `modesetting` driver is the one to use... apparently. Section \"Device\" Identifier \"default\" Driver \"modesetting\" EndSection Section \"Monitor\" Identifier \"default\" # equivalent to `display_rotate = 1` in config.txt Option \"Rotate\" \"right\" EndSection Section \"Screen\" Identifier \"default\" Monitor \"default\" EndSection In addition to the X11 config, some ram needs to be allocated as dedicated graphics memory: pi@kds:~ $ cat /boot/config.txt | grep -B2 gpu_mem [all] # Allocate 256MB of ram for the GPU gpu_mem=256 pi@kds:~ $ sudo reboot Chrome did not automatically switch over to the GPU backed rendering pipe but it‚Äôs easy enough to configure chrome to use the GPU manually. And with all that in place, a quick sudo systemctl restart lightdm and a brief screen flicker later, chromium launched in full screen mode with the correct orientation. After the dashboard finished loading, the scroll/tap/animation performance was as good as it would be on any competent computer! I really don‚Äôt know why I couldn‚Äôt easily find a working X11 configuration example for use with the rPi 4 GPU, but I wasn‚Äôt able to ü§∑. Hopefully the above helps somebody else! ","date":"2021-11-20","objectID":"/hardware-accelerated-graphics-on-the-raspberry-pi-4-a-snappier-kds/:2:0","tags":["raspberry-pi","xorg","KDS"],"title":"Hardware accelerated graphics on the raspberry pi4 for a speedier KDS","uri":"/hardware-accelerated-graphics-on-the-raspberry-pi-4-a-snappier-kds/"},{"categories":["skyhole"],"content":"Another victim of the recently expired Lets Encrypt Root Certificate","date":"2021-10-01","objectID":"/skyhole-expired-lets-encrypt-ca/","tags":["troubleshooting","LetsEncrypt"],"title":"Using new Lets Encrypt intermediate chain with SkyHole","uri":"/skyhole-expired-lets-encrypt-ca/"},{"categories":["skyhole"],"content":"If you somehow missed it, one of the certificates used by Lets Encrypt chain of trust expired this week. As expected, things broke‚Ä¶. including my private, filtered DNS over TLS server - SkyHole. Below is a condensed form of my notes to create the exact document that I wish I had while trying to triage broken DNS on my phone. TL;DR: Implement solution 3 from this post. Note: After releasing the initial version of SkyHole, I re-factored most of the code to eliminate the dependency on Docker. This was to make the project easier to deploy on resource constrained hardware. At the time, I was working with SaltStack a lot and took the opportunity to re-do the entire thing as a salt state for a bit of practice. The exact steps and commands shown below are unique to my particular instance. Use them as guidance for fixing an issue with the publicly released version of SkyHole. Symptoms My current daily driver runs Android 11. When configured to use a private DNS server, Android essentially behaves as if you‚Äôve turned WiFi/Cell data off if there is any issue when talking to the DoT server. While this ‚Äòfail private‚Äô approach is commendable, the lack of debug info in the UI is not; no details are given about the failure other than a generic ‚Äòthe private dns server could not be reached‚Äô message. I have seen this behavior once before when the certificate renewal timer failed to fire off‚Ä¶ except I implemented email based notifications after that incident and had recently received a notification from the renewal script. Just to be sure, I checked the notAfter in each certificate and they all had plenty of life left: me@dot-host:/etc/coredns/tls# gawk 'BEGIN { pipe=\"openssl x509 -noout -subject -dates\"} \\ \u003e /^-+BEGIN CERT/,/^-+END CERT/ { print | pipe } \u003e /^-+END CERT/ { close(pipe); printf(\"\\n\")} ' chain.pem subject=CN = dot.my-test-domain.tld notBefore=Oct 1 01:50:58 2021 GMT notAfter=Dec 30 01:50:57 2021 GMT subject=C = US, O = Let's Encrypt, CN = R3 notBefore=Sep 4 00:00:00 2020 GMT notAfter=Sep 15 16:00:00 2025 GMT subject=C = US, O = Internet Security Research Group, CN = ISRG Root X1 notBefore=Jan 20 19:14:03 2021 GMT notAfter=Sep 30 18:14:03 2024 GMT Borrowed that command from this post. Looking for more information, adb yielded something: ‚ùØ adb logcat | grep resolv 09-30 21:28:12.995 962 15448 W resolv : Validating DnsTlsServer 12.34.56.78 with mark 0xf0084 09-30 21:28:13.085 962 15448 W resolv : SSL_connect ssl error =1, mark 0xf0084: No such file or directory 09-30 21:28:13.085 962 15448 W resolv : TLS Handshake failed 09-30 21:28:13.085 962 15448 W resolv : query failed 09-30 21:28:13.085 962 15448 W resolv : validateDnsTlsServer returned 0 for 12.34.56.78 The No such file or directory message came from here. Google uses their own fork of openSSL in Android so spent some time trying to figure out what an error code of 1 means in the openSSL project. I think 1 is SSL_ERROR_SSL but that seems to be a relatively ‚Äògeneric‚Äô error. Furthermore, in context of No such file or directory ‚Ä¶ it makes even less sense. Oh well. So much for that theory. From this point on, I‚Äôm treating all of the TLS connection stuff as a black box. Investigating I was able to confirm that the TLS certificates on the skyhole instance had not expired and the intermediate chain was not using any of the depreciated certificates. I had also not made any changes to the skyhole instance in close to a year and kdig didn‚Äôt throw any warnings when querying against the DoT server. I could see the manual query from kdig in the DNS query/filter logs ‚Ä¶ so it seemed like the problem was not in either the TLS portion or the DNS portion. That left Android as the culprit. But I was also fairly sure that Google hadn‚Äôt changed anything on the phone w/r/t how the DoT client worked‚Ä¶ü§î If in doubt, turn to the wires! I ran tcpdump on the skyhole instance and did notice traffic from Android that was not showing up in the DNS server logs. I compared the traffic with a working manual query","date":"2021-10-01","objectID":"/skyhole-expired-lets-encrypt-ca/:0:0","tags":["troubleshooting","LetsEncrypt"],"title":"Using new Lets Encrypt intermediate chain with SkyHole","uri":"/skyhole-expired-lets-encrypt-ca/"},{"categories":["home-lab","observability"],"content":"EDIT: (2021-09-19): After some back and forth with /u/Laxarus, there is now a simpler method! The snmp platform still does not support setting device_class, but wrapping the sensor in another template sensor is not required; just do so in your customize.yaml. I have called this out below. This is another quick ‚Äúhere‚Äôs how I did it, hope this help‚Äù post. In preparation for the inevitable grid brownouts that summer 2021 would bring, I installed a rather beefy UPS for my home network / lab. After some browsing, I discovered a local eWaste liquidator with a really good deal on some second-hand APC UPSs. A few hundred dollars and about 150 lbs later, the UPS was installed in the server rack. Despite being a newer generation, the software on the UPS has a TON of similarities to the older style of PDU that I installed in my lab a while back. This made it relatively straightforward to use the same pattern to start getting UPS metrics into Grafana as well. After getting the basic monitoring up and running, I started to draft this post to serve as an ‚Äòupdate‚Äô to the APC9700 post. Life got in the way and the post sat in the drafts branch where it was completely forgotten about‚Ä¶. until Home Assistant released their new Energy dashboard. Now that HA could show the energy consumption of individual devices right next to the cumulative consumption and production data, the post was worth finishing and expanding on. The configuration that I was going to publish is below but after finding this comment by Laxarus on Navydevildoc‚Äôs reddit post, I‚Äôve got a revised and simpler configuration to share! ","date":"2021-09-05","objectID":"/apc-ups-energy-in-homeassistant/:0:0","tags":["SNMP","home-assistant"],"title":"Adding an APC UPS to Home Assistant energy dashboard","uri":"/apc-ups-energy-in-homeassistant/"},{"categories":["home-lab","observability"],"content":"Long Term Statistics in Home Assistant Before diving into the configuration, a little bit of context. In preparation for the energy sub system, the Home Assistant developers have been working on a ‚Äòlong term statistics‚Äô (LTS) framework. The LTS framework is meant to give HA some improved speed and capabilities when dealing with a lot of data! The energy subsystem is the first ‚Äòconsumer‚Äô of the LTS framework. Home Assistant will look for two ‚Äòproperties‚Äô on a given sensor to determine if that sensor will work with the LTS framework. For a sensor/entity to ‚Äòwork‚Äô with the long term stats system it must: have a property called device_class with a value of energy, gas, or monetary have a property called state_class with a value of either measurement or total_increasing In testing, I was not able to get a sensor with state_class: measurement and device_class: energy to ‚Äòwork‚Äô with the energy sub system. Fortunately, this does not apply with the concise configuration below! As the LTS framework is still new, many platforms - including the SNMP platform - do not support the required properties: Invalid config for [sensor.snmp]: [state_class] is an invalid option for [sensor.snmp]. Check: sensor.snmp-\u003estate_class. Invalid config for [sensor.snmp]: [device_class] is an invalid option for [sensor.snmp]. Check: sensor.snmp-\u003edevice_class. The template platform has been updated to work with the device_class or state_class properties though. So that‚Äôs the technique to use here; a template sensor with the correct {device,state}_class properties set will wrap the snmp sensor. Hopefully a future release of HA will include {device,state}_class support for the snmp platform; the template sensors in the configuration snips below won‚Äôt be needed! EDIT (2021-09-19): You don‚Äôt need to wrap the snmp sensor in a template sensor. As of home assistant 2021.09, the snmp platform does not allow you to set device_class: energy‚Ä¶ however, you can set the device_class attribute on the snmp sensor through customize.yaml: Make sure your configuration file loads the customization file: ‚ùØ cat configuration.yaml | grep customize customize: !include customize.yaml If your snmp sensor was called sensor.usp_energy, then you would add an object called sensor.ups_energy like so: ‚ùØ cat customize.yaml | grep -a2 ups sensor.ups_energy: state_class: total_increasing device_class: energy ","date":"2021-09-05","objectID":"/apc-ups-energy-in-homeassistant/:1:0","tags":["SNMP","home-assistant"],"title":"Adding an APC UPS to Home Assistant energy dashboard","uri":"/apc-ups-energy-in-homeassistant/"},{"categories":["home-lab","observability"],"content":"Configure Home Assistant I have broken my configuration.yaml up to make things easier to manage. Almost all entity/device/template/sensor..etc configuration is done through files placed in the devices/**/* directory: ‚ùØ cat configuration.yaml | grep -E 'devices/sensor|template/' sensor: !include_dir_merge_list devices/sensor/ template: !include_dir_merge_list devices/template/ ","date":"2021-09-05","objectID":"/apc-ups-energy-in-homeassistant/:2:0","tags":["SNMP","home-assistant"],"title":"Adding an APC UPS to Home Assistant energy dashboard","uri":"/apc-ups-energy-in-homeassistant/"},{"categories":["home-lab","observability"],"content":"A single OID for power consumption Thanks again to Laxarus for the tip about the upsHighPrecOutputEnergyUsage OID! First, create the ‚Äòraw‚Äô sensor using the snmp platform: devices/sensor/snmp.yaml: - platform:snmpname:\"UPS Energy (raw)\"host:192.168.1.1# The current in tenths of amperes drawn by the load on the UPS.# Contained in Module(s): PowerNet-MIB##baseoid:.1.3.6.1.4.1.318.1.1.1.4.3.6.0# Determines whether the sensor should start and keep working even if the SNMP host is unreachable or not responding.# This allows the sensor to be initialized properly even if, for example, your printer is not on when you start Home Assistant.accept_errors:true# UPS reports in tens of kWh so we'll need to divide by 10 to get kWh; HA only accepts kWh or Wh for sensors# that will 'work' on the energy dashboardunit_of_measurement:kWhvalue_template:\"{{ ((value | int) / 10) | float}}\" Then, wrap the snmp sensor with the necessary properties: devices/template/ups_energy.yaml: - sensor:- name:\"UPS Energy\"# Unique ID is required for mgmt through the web UIunique_id:tmpl-ups-energyicon:mdi:lightning-bolt# Required for Energy dashboardstate_class:total_increasingdevice_class:energyunit_of_measurement:kWhstate:\"{{ (states('sensor.ups_energy_raw') | float) }}\" Restart Home Assistant and you should now be able to add sensor.ups_energy to the list of individual devices on your Energy Dashboard :D. ","date":"2021-09-05","objectID":"/apc-ups-energy-in-homeassistant/:2:1","tags":["SNMP","home-assistant"],"title":"Adding an APC UPS to Home Assistant energy dashboard","uri":"/apc-ups-energy-in-homeassistant/"},{"categories":["home-lab","observability"],"content":"Current and Voltage independently After sorting through the massive MIB file that APC publishes; I only found ways to measure the voltage and current via SNMP. I assumed that APC meant for you to calculate the power use on your own from the voltage and current. As it turns out, APC has a upsHighPrecOutputEnergyUsage field which reports: The output energy usage of the UPS in hundredths of kWh. If your APC device publishes a value on the OID .1.3.6.1.4.1.318.1.1.1.4.3.6.0 then you can skip the configuration below; use the more concise configuration above. If your devices does not publish the cumulative energy consumption, it can still be calculated manually. The manual approach below is a lot like the concise approach above; uses two snmp sensors to collect the voltage and current from the UPS and then wrap everything in a LTS-compatible template sensor to get the data to show up on the energy dashboard. devices/sensor/snmp.yaml: # Unfortunately, there is no direct 'watt' field. We need to calculate this on our own# P = IV so if we can get the current and voltage, we can figure out the power##- platform:snmpname:\"UPS Output Current\"host:192.168.1.1# The current in tenths of amperes drawn by the load on the UPS.# Contained in Module(s): PowerNet-MIB##baseoid:.1.3.6.1.4.1.318.1.1.1.4.3.4.0# Determines whether the sensor should start and keep working even if the SNMP host is unreachable or not responding.# This allows the sensor to be initialized properly even if, for example, your printer is not on when you start Home Assistant.accept_errors:true# For reasons that I don't understand... HA does not like it when i specify 'device_class' :/#device_class: currentunit_of_measurement:\"A\"# Because the number is in 10ths of amps, we need to shift the decimal by 1 place# 43 becomes 4.3##value_template:\"{{((value | int) / 10) | float}}\"- platform:snmpname:\"UPS Output Voltage\"host:192.168.1.1#The output voltage of the UPS system in tenths of VAC.# Contained in Module(s): PowerNet-MIB##baseoid:.1.3.6.1.4.1.318.1.1.1.4.3.1.0# Determines whether the sensor should start and keep working even if the SNMP host is unreachable or not responding.# This allows the sensor to be initialized properly even if, for example, your printer is not on when you start Home Assistant.accept_errors:trueunit_of_measurement:\"V\"# Because the number is in 10ths of volts, we need to shift the decimal by 1 place# 1211 becomes 121.1##value_template:\"{{((value | int) / 10) | float}}\" devices/template/ups_energy.yaml: # The docs around the long term stats support for a sensor are not super clear and seem to be a bit contradictory.# Both the power and current sensors are 'point in time' sensors and DO NOT represent an 'always increasing' value.# The docs seem to imply that HA will do the integration for you if the sensor has `state_class` set to `measurement` or# `total_increasing`. But elsewhere in the docs, you have this:# Home Assistant tracks the min, max and mean value during the statistics period.# The state_class property must be set to measurement, and the device_class must not be either of `energy`, `gas`, or `monetary`.## In testing, I was only able to get sensors that had `total_increasing` and `energy` set to show up / work with the energy dashboard. It looks like a `measurement` sensor _could_ be used... but only if the `last_reset` property can be set to 0... and currently this can't be done via YAML.## So we lie about the sensor and tell HA that it's a `total_increasing` sensor and we just hope that the value never drops more than 10% which appears to be the signal to HA that the meter has been reset :/## https://developers.home-assistant.io/docs/core/entity/sensor/#long-term-statistics# https://www.home-assistant.io/integrations/sensor/##- sensor:- name:\"UPS Power\"# Unique ID is required for mgmt through the web UIunique_id:tmpl-UPS-power-useicon:mdi:lightning-bolt# This sensor records the instantaneous power load on the UPS... it is a measurement at that poi","date":"2021-09-05","objectID":"/apc-ups-energy-in-homeassistant/:2:2","tags":["SNMP","home-assistant"],"title":"Adding an APC UPS to Home Assistant energy dashboard","uri":"/apc-ups-energy-in-homeassistant/"},{"categories":["gists","reference"],"content":"A working Tasmota rule to automatically configure the DS03 as a 4 speed fan controller","date":"2021-05-12","objectID":"/treatlife-ds03-tasmota-autoconfig-with-homeassistant/","tags":["tasmota","home-assistant","home-automation"],"title":"Fixing Home Assistant discovery with Tasmota on the Treatlife DS03","uri":"/treatlife-ds03-tasmota-autoconfig-with-homeassistant/"},{"categories":["gists","reference"],"content":"UPDATE: (2021-10-22): Tasmota 9.5.0 has been superseded by the new Tasmota 10.0.0 release. This release works perfectly with the rules/automation outlined below; you no longer need to avoid the problematic 9.5 release with the DS03. I am extremely grateful to every one of the people that contributes to the Tasmota project to keep it improving! UPDATE: (2021-09-19): Multiple have gotten in touch with me seeking some support with this post. At present, there is a bug with the Tasmota 9.5.0 release which breaks the automation outlined below. If you are having trouble getting the steps below to work either use Tasmota 9.4 or the latest development release of tasmota 9.5 if you‚Äôre going to continue on with this post! The Treatlife DS03 is one of only a few Tasmota compatible ceiling fan controllers available in the US. It‚Äôs internal architecture splits the task of dimming the lights and switching the fan speed electronics from communicating over the network. A very resource constrained ESP8266 module handles the network comms while a dedicated microcontroller running it‚Äôs own software manages the user-facing buttons/indicator-lights as well as dimming the light and adjusting the fan speed. The two components communicate over a simple UART. This is a totally reasonable way to build such a device, but for reasons that I don‚Äôt fully understand, Tasmota does not publish a completely functional auto-configuration payload for Home Assistant. Home Assistant automatically discovers the full light/dimmer capabilities of the DS03, but for some reason does not see that the DS03 is capable of running a fan at 4 different speeds; Home Assistant only allows for turning the fan on/off. The default auto-configuration leads Home Assistant to believe the fan can only be switched on/off. The existing guides on how to flash the device with Tasmota and integrate it with Home Assistant all work around this limitation by manually configuring Home Assistant to see the device as a multi-speed fan ü§¶. I‚Äôm not a huge fan of doing things manually, especially when there‚Äôs a well documented and robust protocol designed to make manual configuration unnecessary! Why ignore the almost completely working auto-configuration in favor of manual configuration? Why not just fix the auto-config payload so Home Assistant exposes the full functionality of the device? Both of the above guides were written long before Home Assistant gained support for fans with more than 3 speeds so even if I were to configure Home Assistant with a copy their example YAML, I‚Äôd still be missing the ability to control the 4th speed! ","date":"2021-05-12","objectID":"/treatlife-ds03-tasmota-autoconfig-with-homeassistant/:0:0","tags":["tasmota","home-assistant","home-automation"],"title":"Fixing Home Assistant discovery with Tasmota on the Treatlife DS03","uri":"/treatlife-ds03-tasmota-autoconfig-with-homeassistant/"},{"categories":["gists","reference"],"content":"How In short, Tasmota supports some basic scripting, called rules. They work exactly as you‚Äôre thinking: On $someEvent do $someAction. One of the actions allows the Tasmota device to publish a message to a MQTT topic. I‚Äôm going to have the DS03 broadcast a proper auto-configuration message to Home Assistant. The technique is basically the same one outlined in this article, but I‚Äôm posting this to document a few of the subtle differences in my approach. I‚Äôll assume that you‚Äôve successfully flashed your DS03 with Tasmota and have already configured the module and issued the necessary ledtable commands. You will also need the native Tasmota integration installed. If you‚Äôre following either the blakadder or digiblur guides linked above, stop at the step where you‚Äôre meant to configure rule1. Issue a slightly modified rule: Rule1 on TuyaReceived#Data=55AA03070005030400010016 do publish2 stat/%topic%/speed 25 endon on TuyaReceived#Data=55AA03070005030400010117 do publish2 stat/%topic%/speed 50 endon on TuyaReceived#Data=55AA03070005030400010218 do publish2 stat/%topic%/speed 75 endon on TuyaReceived#Data=55AA03070005030400010319 do publish2 stat/%topic%/speed 100 endon This tells Tasmota to publish an integer speed (25,50,75,100) when it receives a specific packet from the dedicated MCU over th UART. Then, issue a second rule to actually publish the configuration data: rule2 on SetOption19#Data=OFF do publish2 homeassistant/fan/%macaddr%/config {\"uniq_id\":\"AABBCC\",\"~\":\"%topic%/POWER1\",\"cmd_t\":\"cmnd/~\",\"pl_off\":\"OFF\",\"pl_on\":\"ON\",\"stat_t\":\"stat/~\",\"avty_t\":\"tele/%topic%/LWT\",\"pl_avail\":\"Online\",\"pl_not_avail\":\"Offline\",\"pct_cmd_t\":\"cmnd/%topic%/tuyasend4\",\"pct_cmd_tpl\":\"{%set v=value|int%}{%if v\u003c=25%}3,0{%elif v\u003c=50%}3,1{%elif v\u003c=75%}3,2{%elif v\u003c=100%}3,3{%endif%}\",\"pct_stat_t\":\"stat/%topic%/speed\",\"dev\":{\"cns\":[[\"mac\",\"%macaddr%\"]]}} endon Note: You‚Äôll probably want to modify the above payload so the occurrences of the placeholder string AABBCC are replaced with the last 6 characters of your own device‚Äôs MAC address! For readability, here‚Äôs the unminified JSON: { \"uniq_id\": \"AABBCC\", \"~\":\"%topic%/POWER1\", \"cmd_t\": \"cmnd/~\", \"pl_off\": \"OFF\", \"pl_on\": \"ON\", \"stat_t\": \"stat/~\", \"avty_t\": \"tele/%topic%/LWT\", \"pl_avail\": \"Online\", \"pl_not_avail\": \"Offline\", \"pct_cmd_t\": \"cmnd/%topic%/tuyasend4\", \"pct_cmd_tpl\": \"{%set v=value|int%}{%if v\u003c=25%}3,0{%elif v\u003c=50%}3,1{%elif v\u003c=75%}3,2{%elif v\u003c=100%}3,3{%endif%}\", \"pct_stat_t\": \"stat/%topic%/speed\", \"dev\": { \"cns\": [ [ \"mac\", \"%macaddr%\" ] ] } } Note: The dev portion of the payload is the magic that convinces Home Assistant to combine the multiple entities under once device. Without that portion of the document, you will still have a properly configured DS03, but it will exist as an ‚Äòorphaned‚Äô entity that belongs to no device! All that‚Äôs left is to enable rule2 and then trigger it: rule2 1 so19 0 Altogether, It‚Äôll look something like this: 18:23:54.140 CMD: Rule1 on TuyaReceived#Data=55AA03070005030400010016 do publish2 stat/%topic%/speed 25 endon on TuyaReceived#Data=55AA03070005030400010117 do publish2 stat/%topic%/speed 50 endon on TuyaReceived#Data=55AA03070005030400010218 do publish2 stat/%topic%/speed 75 endon on TuyaReceived#Data=55AA03070005030400010319 do publish2 stat/%topic%/speed 100 endon 18:23:54.149 RUL: Stored uncompressed, would compress from 344 to 98 (-72%) 18:23:54.155 MQT: stat/living_room_ceiling_fan/RESULT = {\"Rule1\":{\"State\":\"ON\",\"Once\":\"OFF\",\"StopOnError\":\"OFF\",\"Length\":344,\"Free\":167,\"Rules\":\"on TuyaReceived#Data=55AA03070005030400010016 do publish2 stat/%topic%/speed 25 endon on TuyaReceived#Data=55AA03070005030400010117 do publish2 stat/%topic%/speed 50 endon on TuyaReceived#Data=55AA03070005030400010218 do publish2 stat/%topic%/speed 75 endon on TuyaReceived#Data=55AA03070005030400010319 do publish2 stat/%topic%/speed 100 endon\"}} 18:24:05.061 CMD: rule2 on SetOption19#Data=OFF do publish2 homeassistant/fan/%macaddr%/config {\"uniq_id\":\"AABBCC\",\"~\":\"%topic%/POWER1\",\"","date":"2021-05-12","objectID":"/treatlife-ds03-tasmota-autoconfig-with-homeassistant/:1:0","tags":["tasmota","home-assistant","home-automation"],"title":"Fixing Home Assistant discovery with Tasmota on the Treatlife DS03","uri":"/treatlife-ds03-tasmota-autoconfig-with-homeassistant/"},{"categories":["gists","reference"],"content":"Side note: Rules Crash! While developing the configuration payload, I was able to reliably crash the ESP8266 module causing Tasmota to reboot. The crash / reboot symptoms are pretty similar to those outlined here so I assume that even though the rules ‚Äúfit‚Äù, something about how the rule was parsed or the actions the rule drove caused the ESP to run out of RAM. When I say ‚Äúfit‚Äù I mean that I‚Äôd see lines like this in the console after configuring a test payload for rule2: MQT: stat/living_room_ceiling_fan/RESULT = {\"Rule2\":{\"State\":\"ON\",...\"Free\":9,\"Rules\":\"on ... endon\"}} I could technically make the rule 9 characters longer and it‚Äôd still fit‚Ä¶ right? Not quite. Looking at the result from issuing the Rule1 command, it was clear that while rule2 would have an absolute maximum length of 511 characters (\"Length\":344,\"Free\":167; 344+167=511) there was also a less well defined soft limit on rule length. For some versions of my rule2 payload, I was able to solve the crashing just by switching to the ‚Äòlite‚Äô version of Tasmota. While the ‚Äòlite‚Äô version of Tasmota does work with Tuya MCU (USE_TUYA_MCU), it does not support Home Assistant configuration (USE_HOME_ASSISTANT)! After flashing back to the ‚Äòregular‚Äô Tasmota build, I set out trying to compress the rule2 payload as much as possible so that it would still work and not reliably crash the ESP8266 on the DS03. After testing several things, I managed to get a working rule2 that didn‚Äôt reliably crash when triggered. ","date":"2021-05-12","objectID":"/treatlife-ds03-tasmota-autoconfig-with-homeassistant/:1:1","tags":["tasmota","home-assistant","home-automation"],"title":"Fixing Home Assistant discovery with Tasmota on the Treatlife DS03","uri":"/treatlife-ds03-tasmota-autoconfig-with-homeassistant/"},{"categories":["home-lab"],"content":"AKA a real-life 'unread' indicator","date":"2021-02-28","objectID":"/poe-stack-light/","tags":["home assistant","MQTT","ESPHome","has:download"],"title":"PoE powered Stack Light","uri":"/poe-stack-light/"},{"categories":["home-lab"],"content":" The lights are much brighter than they appear in this picture; had to intentionally darken the image to prevent camera from blowing out the colors. Stack/signal lights are everywhere in industrial applications for good reason: they‚Äôre a compact and relatively information-dense indicator system. They always seemed like the kind of indicator that only people with expensive machines needed. Until I found that they can be had for just under $6/light from Ali Express, that is. I don‚Äôt have any giant industrial machines to attach one to, but I do have a non-trivial number of containers/servers/networked-devices running and they all emit various notifications, usually through email. Who wouldn‚Äôt mind a novel way to move those notifications beyond email/push notifications into the physical world ü§î? üü¢ =\u003e Everything is nominal üü† =\u003e Check your email; a WARN level event has occurred üî¥ =\u003e A WARN or ERROR level condition has occurred; something (ISP down?) is preventing delivery of notifications so check the logs/dashboards directly üîµ =\u003e A new INFO level message available in Home Assistant ‚ö™ =\u003e Not sure; either a ‚ÄúA HIGH priority task is past due‚Äù or a ‚Äòmodifier‚Äô for above status While waiting for the light to arrive from China, I started to design something to drive it. It was immediately obvious that an ESP32 module would be ideal to run the show, and just for the fun of it, I decided to make the entire thing (optionally) controlled and powered over Ethernet. ","date":"2021-02-28","objectID":"/poe-stack-light/:0:0","tags":["home assistant","MQTT","ESPHome","has:download"],"title":"PoE powered Stack Light","uri":"/poe-stack-light/"},{"categories":["home-lab"],"content":"Home Assistant It wouldn‚Äôt be an ESP32 powered project w/o the the fantastic ESPHome framework! With ESPHome comes trivial Home Assistant integration; each individual light / channel on the stack light is automatically configured via MQTT a a light: Stack light is controlled via MQTT making it easy to control from Home Assistant or any other program that can speak MQTT. A slightly modified version of the ESPHome config that I use to build the firmware for the light is attached at the end of this post. Unfortunately, the one Home Assistant integration that I had in mind is currently not feasible! I wanted to light the blue light when there is any new/unread Home Assistant persistent notifications; a real life ‚Äúunread‚Äù badge of sorts. There is no way to get the list / count of active notifications unless you‚Äôre a websocket client, however. Using the persistent_notifications_updated event as a trigger won‚Äôt work because the event payload lacks useful data; I can‚Äôt figure out the number of notifications or their state‚Ä¶ just that either notification has been created or dismissed. If I wanted the blue light on any time a notification was either created or destroyed, I could use this trigger. But the light is no longer a useful indicator; it would be on the first time a notification was created or destroyed and then it would never be off. Manually trying to keep track of the number of notification created/dismissed actions just feels like a hacky workaround that could easily get out of sync, too. Oh well üòî. ","date":"2021-02-28","objectID":"/poe-stack-light/:1:0","tags":["home assistant","MQTT","ESPHome","has:download"],"title":"PoE powered Stack Light","uri":"/poe-stack-light/"},{"categories":["home-lab"],"content":"BOM I‚Äôll cover the individual 3D printed and electronic components below. Beyond them, you‚Äôll need some additional hardware: 4x m3x8mm screws 4x m4x8mm screws 4x m4x10mm screws 6x Neodymium magnets sized 20mm x 6mm x 2mm. These are optional and are leftover magnets from this build 10mm diameter anti-slip pads. Thees are optional but will keep the base from sliding around. I‚Äôve linked to the screws that I used, but any similar ones should work. Strong glue could also work, but is not recommended. The m3 screws are for attaching the PCB to the printed part (in yellow, below) The shorter m4 screws are for attaching the base (yellow) to the lid (dark blue) and the longer screws are for attaching the stack light to the lid. About to start melting threads into the 3D printed parts. Stack light Looking quickly through Ali Express, it seems that the lights come in a few different styles, but all appear to be modular in construction. Regardless of lamp style, they all appear to come in 2-5 lamp variants and some have configuration switches that allow for customizing the behavior per lamp. The ESPHome code and PCB are designed to accommodate up to 6 colors but will work with less. No matter which style and colors you select, make sure you get one with a positive anode rated for 12V DC. The exact lamp that I used is here. ESP32 Module I chose to use the WirelessTag WT32-eth01 module for the onboard Ethernet circuitry at a relatively cheap price: about $10/module. Bonus: it‚Äôs got a breadboard friendly footprint and castellated pads! You do not need to use Ethernet for control or power; the ESPHome configuration below can be easily modified to use the WiFi. In any case, you will need a dedicated UART programmer for the module as there is no built-in USB port on the WT32-eth01. PCB Nothing much to see here; just a simple board to consolidate connections for what would otherwise be a mess of wires. Since I was already using Ethernet for the data, may as well use it for the power, too. Designing my own PoE circuitry was not in scope for this project, so I went with another off-the-shelf module. I ordered the 12V2A-Full 24W version, but the others are likely to also have an identical internal PCB layout which should fit in the 3D printed parts. Make sure to get one that supplies the 12V that the stack light will need! The PCB does not care where the 12V DC supply comes from. It wouldn‚Äôt be difficult to modify the enclosure to accommodate a USB-C Power Delivery module or even just a standard barrel jack / LED power supply. Like the PoE module, I use an off the shelf DC to DC converter module to step the 12V down from the PoE dongle to 5V which the ESP32 module requires. That link is to a whole-sale lot of 10 converters. You can order the same module in quantities of one from similar listings. I buy them in bulk because it‚Äôs more expensive to design and solder my own on each board that I build‚Ä¶ My testing isn‚Äôt super through, but I see the total power draw (measured from the PoE supplying equipment) reaching about 4.5W when all lights are on and about 2W at at idle. The ESP32 just drives some N-Channel MOSFETS to switch the individual lights on/off. They‚Äôre the only surface mount (SOT-23-4) component; everything else can be done with through hole components. The board is designed for up to 6 colors/lights, but populate only as many MOSFETS as you need. All of the screw terminals are optional; I had several spares left over from a different project, but soldering wires directly to the PCB would work as well. The 6 pin screw terminal is LCSC part C409139 The 2 pin screw terminal is LCSC part C8463 The source and gerber files from EasyEDA are below. Upload them to your favorite PCB prototyping service or try your hand at making your own. Printed parts There are two parts: a lid and a plate. The electronics are attached to the plate and the stack light is attached to the lid. In the photos associated with this post, the lid is dark blue and the plat","date":"2021-02-28","objectID":"/poe-stack-light/:2:0","tags":["home assistant","MQTT","ESPHome","has:download"],"title":"PoE powered Stack Light","uri":"/poe-stack-light/"},{"categories":["home-lab"],"content":"Assemble Assembly is relatively straightforward; its mostly integrating a few components into a simple 3d printed enclosure. ","date":"2021-02-28","objectID":"/poe-stack-light/:3:0","tags":["home assistant","MQTT","ESPHome","has:download"],"title":"PoE powered Stack Light","uri":"/poe-stack-light/"},{"categories":["home-lab"],"content":"PCB Solder the electronic components to the PCB. If omitting screw terminals for the stack light wires, do not solder them to the PCB yet! I created the castellated pad footprint for the ESP32 module by hand and, in the version of the PCB pictured, didn‚Äôt get the pads as close as they should be so there are some ugly solder blobs to compensate. The pads are correctly placed on the most recent PCB revision. I have included two programming headers on the PCB to flash your firmware; one at 2.54mm pitch and the other at 1.0mm pitch, the latter of which is intended for use with this programmer. There is a solder bridge labeled EXT 3v3; short this out if you intend to use the programmer to power the ESP32 module. Leave it alone if you plan to use external DC to power the device during programming. I suggest programming the module now to verify that you‚Äôve built the PCB correctly and that your stack light works as expected. Once you‚Äôve confirmed the electronics and software all work together, proceed to final assembly. ","date":"2021-02-28","objectID":"/poe-stack-light/:3:1","tags":["home assistant","MQTT","ESPHome","has:download"],"title":"PoE powered Stack Light","uri":"/poe-stack-light/"},{"categories":["home-lab"],"content":"Everything else The various holes designed to receive screw threads are intentionally undersized. If you‚Äôre not using self-tapping screws, you‚Äôll find it MUCH EASER to insert a hot screw for the first time. With the screw on the end of the driver, hold the tip of the screw/threads under a flame for 5-10 seconds and then quickly rotate the screw into the plastic using a bit of extra ‚Äòpushing‚Äô force. Once the screw is fully inserted, allow it to fully cool (~5min) so the softened plastic has a chance to solidify around the screw threads. The screws that hold the base plate to the body of the enclosure are meant to sit flush. Ensure that you screw them in fully before the plastic cools! If the screws protrude even a fraction of a millimeter, the light can wobble and the magnetic attachment is weakened. While waiting for the screws to cool, cut the Ethernet and power leads from the PoE dongle down to size. Desolder the leads from the dongle, trim to be as short as possible and re-solder. The less ‚Äòslack‚Äô cable in the enclosure, the easier it will be to finish assembly! I cut a few inches off the Ethernet cable and power leads so everything fits in the enclosure better. After the screws have cooled, ensure that the PCB sits flush against the mounts. PCB should be flush against the mounting posts. With all wires connected, lift the PoE dongle off of the base plate slightly and align the RJ45 jack with the square hole in the enclosure. Make sure the side of the base plate opposite the side with the RJ45 jack is securely mounts into the body of the enclosure! Gently press the remaining side of the base plate into the enclosure. As the base plate gets closer to flush with the body, the RJ45 jack should slowly come into alignment with the wall. Use the plate as a lever to carefully push, then hold, the PoE dongle in place. When the base blate is completely installed into the body, the RJ45 jack should be flush with the external wall of the enclosure. RJ45 jack should be flush to the outer wall of the enclosure. Attach the base plate to the enclosure body with the 4 screws, attach silicon feet or a 3M command strip and then you‚Äôre done! Translucent white lenses for much less ambiguity than the stack lights with colored lenses. ","date":"2021-02-28","objectID":"/poe-stack-light/:4:0","tags":["home assistant","MQTT","ESPHome","has:download"],"title":"PoE powered Stack Light","uri":"/poe-stack-light/"},{"categories":["home-lab"],"content":"Files All files below are licensed under the Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) license unless otherwise explicitly noted. None of the files below may be used for commercial purposes Translucent white lenses for much less ambiguity than the stack lights with colored lenses. I wasn't sure where I'd want to install this, so there are a few options for attaching the base to surfaces. Use the plate as a lever to carefully push, then hold, the PoE dongle in place. The lights are much brighter than they appear in this picture; had to intentionally darken the image to prevent camera from blowing out the colors. files/easy_eda_gerber.zip: sha1: d7686b0ad88a1686a5a11cb009632b53ca474c75 files/easy_eda_source.zip: sha1: e05a00cdca9af94dd0e8d1d8f3aa998b75c14a08 files/enclosure-lid-m1v2.stl: stl file sha1: 3870a674d9cf08bf26e3607e42ee766e9816ac6c files/enclosure-plate-m1v2.stl: stl file sha1: 8f90b54be2a798cf87bc6ca4fc118b82669e0668 files/esphome_confg.yaml: yaml file sha1: aa0076b7bee08f09568536463c8794f15a2f59b2 files/pcb.step: step file sha1: e212f3cd3d90a639e6518b7d11bc5cc20df09b67 files/poe-dongle.step: step file sha1: a698c249d89f2ab2c981427df49620cb09ce5f66 files/stack-light-base.step: step file sha1: 3c3d0d6162a985b4f09d0f9a58fdacb3f08beb78 If the screws protrude even a fraction of a millimeter, the light can wobble and the magnetic attachment is weakened. Stack light is controlled via MQTT making it easy to control from Home Assistant or any other program that can speak MQTT. PCB should be flush against the mounting posts. RJ45 jack should be flush to the outer wall of the enclosure. About to start melting threads into the 3D printed parts. Insert your magnets before the layer covering thee 6 cavities is printed. I cut a few inches off the Ethernet cable and power leads so everything fits in the enclosure better. ","date":"2021-02-28","objectID":"/poe-stack-light/:5:0","tags":["home assistant","MQTT","ESPHome","has:download"],"title":"PoE powered Stack Light","uri":"/poe-stack-light/"},{"categories":null,"content":"This is ‚Äúreference‚Äù post for anybody else that happens to have this same very specific problem. I was looking for a way to incorporate some of the many cheap / industrial grade sensors from AliExpress with Home Assistant. Long story short: almost everything electronic in the industrial space uses Modbus to communicate, typically with a PLC. While Home Assistant does have support for the Modbus protocol, but wanted to use a PLC that could manage the sensors directly and expose the values over the network in a more standard format; MQTT. Turns out, quite a few PLCs come with network interfaces and can speak MQTT now! So I picked up a PR-18DC-DAI-R-N PLC from the ‚Äòbudget friendly‚Äô supplier rievtech. The PLC was put into service in 2018 and never updated; the firmware version it was running was almost certainly below 150 but I didn‚Äôt record the specific version. Hoping to squash a small bug, I chose to upgrade the firmware to version 152 which was released at the end of 2020 and somehow managed to brick the device ü§¶. I am speculating but it looks like something significant changed around firmware version 150. If you try to update a device from a version prior to 150 - like I did - something in memory is not properly migrated to the format required by versions after 150 and this causes the update process to fail before completion: SO close! That failure message came from the Update_Net_V152_20201205.zip file which is meant for the ethernet equipped PLCs in the PR line. The failure apparently soft bricks the PLC. Blank white screen. Non responsive buttons, Occasional blinking Ethernet lights. Fun! üôÉ The PLC seemed ‚Äòalive‚Äô as I could still see arp packets coming from it‚Äôs ethernet port on boot and the web server seemed to accept my connection but never return any data. Even after restarting the PLC, the firmware updater was able to open a new connection and flash the firmware‚Ä¶ always failing at the same spot: 99.17%. Clearly something is alive and well inside the PLC‚Ä¶ If I can connect to whatever is running and convince that process to update the flash then I have a good shot to do ‚Äòsolderless‚Äô recovery. Absolute worst case, I buy another one and clone the flash memory from the working one onto the bricked one. ","date":"2021-01-13","objectID":"/unbrick-rievtech-plc-failed-firmware-update/:0:0","tags":["PLC","recovery","rant"],"title":"Unbrick a rievtech PLC after failed firmware upgrade","uri":"/unbrick-rievtech-plc-failed-firmware-update/"},{"categories":null,"content":"Recovery process Turns out, their support team has a file ready to go for this exact problem! I guess I‚Äôm not the first person. Really wish they‚Äôd publish this file and/or procedure on their website. I could have recovered from my failure in minutes with a quick google search and saved myself a few hours of trouble shooting before drafting a support ticket‚Ä¶ not to mention the days of waiting for a reply. Oh well. That‚Äôs why I‚Äôm documenting it. I was given a 2.6MB file named UpdateFail_PR-18DC-DAI-R-N_V150.zip. After extracting, it looks a lot like their regular firmware update archives, just much smaller. I suspect that the archive is much smaller because it‚Äôs only got flash images for a few affected models/devices. In any event, the archive comes with a doc file that I couldn‚Äôt open and was able to eventually convert it to a pdf which is also attached to this post. In short: Connect the PLC using their programming cable Open the COM port and ‚Äòprepare‚Äô the device. This takes only a few seconds Click the update button. In my case, I got a failure telling me to `Please power off the PLC first, and then power on again!\" Power cycle the PLC, keeping the update program and COM port open Click Start. The process of flashing version 150 started and took several minutes to finish This left me with a completely working PLC ü•≥! I was able to access the web interface and use the LCD screen. I was then able to use the network update tool to the firmware version released recently; version 152. So there you go. If a failed network update leaves your PR series PLC in a mostly-not-working state, there is hope! Able to flash Version 152 w/o issue! ","date":"2021-01-13","objectID":"/unbrick-rievtech-plc-failed-firmware-update/:1:0","tags":["PLC","recovery","rant"],"title":"Unbrick a rievtech PLC after failed firmware upgrade","uri":"/unbrick-rievtech-plc-failed-firmware-update/"},{"categories":null,"content":"Files files/How to update the hardware.doc.pdf: pdf file sha1(How to update the hardware.doc.pdf): 0b451b11938b58c384465f5bf350b2f133848649 files/UpdateFail_PR-18DC-DAI-R-N_V150.zip: zip file sha1(UpdateFail_PR-18DC-DAI-R-N_V150.zip): 60c306b521cdb15589b0e36dc73df484c2117539 Blank white screen. Non responsive buttons, Occasional blinking Ethernet lights. Fun! üôÉ Able to flash Version 152 w/o issue! SO close! ","date":"2021-01-13","objectID":"/unbrick-rievtech-plc-failed-firmware-update/:2:0","tags":["PLC","recovery","rant"],"title":"Unbrick a rievtech PLC after failed firmware upgrade","uri":"/unbrick-rievtech-plc-failed-firmware-update/"},{"categories":["home-lab"],"content":"Monitor all the things!","date":"2020-12-27","objectID":"/monitoring-ap7900-switched-pdu-prometheus-grafana/","tags":["prometheus","grafana","SNMP"],"title":"Monitoring APC AP7900 switched PDU with Prometheus and Grafana","uri":"/monitoring-ap7900-switched-pdu-prometheus-grafana/"},{"categories":["home-lab"],"content":"The APC AP7900 is a 1U single phase PDU with 8 switchable outlets and a network interface. It‚Äôs been EoL‚Äôd and can be had for less than 20% of it‚Äôs original price on eBay. The network interface is so underpowered tha it can‚Äôt support any modern cryptographic ciphers. So with that, here‚Äôs a revised copy of my notes from the process of getting the device reset, updated and monitored. ","date":"2020-12-27","objectID":"/monitoring-ap7900-switched-pdu-prometheus-grafana/:0:0","tags":["prometheus","grafana","SNMP"],"title":"Monitoring APC AP7900 switched PDU with Prometheus and Grafana","uri":"/monitoring-ap7900-switched-pdu-prometheus-grafana/"},{"categories":["home-lab"],"content":"The Hardware Unfortunately, there‚Äôs no ‚Äúreset everything to defaults‚Äù button or button sequence on the PDU. The unit I purchased had been configured with a manual IP assignment so it wasn‚Äôt as straightforward as using an unfolded paperclip to press the reboot button at boot and wait for a successful DHCP negotiation. This process has been covered before, so I‚Äôll omit it here. In short: connect to the local mgmt interface via the serial port, adjust the network configuration and other settings as needed. The firmware can be updated via FTP easily enough. The processor on the network interface is really slow so allow for several minutes between the bin file upload and the flashing to commence/end. I had to repeat this three times for each of the partitions / subsystem OSs. ","date":"2020-12-27","objectID":"/monitoring-ap7900-switched-pdu-prometheus-grafana/:1:0","tags":["prometheus","grafana","SNMP"],"title":"Monitoring APC AP7900 switched PDU with Prometheus and Grafana","uri":"/monitoring-ap7900-switched-pdu-prometheus-grafana/"},{"categories":["home-lab"],"content":"The Metrics Again, because the network interface has an ancient/slow CPU, any method that extracts metrics from the device must be light weight‚Ä¶ enter SNMP. SNMP is quite old and cumbersome but there‚Äôs an exporter for prometheus which, after some tedious configuration, can interface the complexity that is is legacy SNMP with prometheus. ","date":"2020-12-27","objectID":"/monitoring-ap7900-switched-pdu-prometheus-grafana/:2:0","tags":["prometheus","grafana","SNMP"],"title":"Monitoring APC AP7900 switched PDU with Prometheus and Grafana","uri":"/monitoring-ap7900-switched-pdu-prometheus-grafana/"},{"categories":["home-lab"],"content":"Generating a config In short, SNMP identifies each setting/entity that can be monitored or set with a unique numerical ID. Each number is separated with a . and represents a specific edge/vertex on the graph of all settings that device supports. So, a setting known as rPDUIdentDeviceLinetoLineVoltage may be ‚Äòread‚Äô at the following address: 1.3.6.1.4.1.318.1.1.12.1.15.0. So if you have a few hundred parameters to monitor, you‚Äôll have a few hundred nondescript numerical paths. Keeping track of them all is a royal pain in the ass, even with lookup tables; known as ‚ÄúMIB files‚Äù. Unfortunately, there‚Äôs no way around it; a map between the numerical paths and the ‚Äòhuman friendly‚Äô names must be built so the prometheus exporter knows what to expose and how to categorize it. The exporter comes with generator to make this process a bit easier, but the process of obtaining MIB files isn‚Äôt quite so straightforward. I hit a few snags and below is an updated Dockerfile that gave me a working generator tool: FROMgolang:latest### The `mibs` target in the Makefile does not run to completion on OSX.# Somewhere, a `sed` command is run against some vendor's MIB file that's for hardware that I don't want to target.# I don't have the patience to resolve those issues and i'd prefer that the _entire_ MIB parse and generate # process be 100% contained in the container image anyways.## There are a _variety_ of errors that cropped up when running `generator parse_errors`:## - level=warn ts=2020-12-27T21:40:42.988Z caller=main.go:120 msg=\"NetSNMP reported parse error(s)\" errors=16924# - Cannot find module (SNMPv2-SMI): At line 275 in mibs/apc-powernet-mib# - Did not find 'enterprises' in module #-1 (mibs/apc-powernet-mib)# - Did not find 'DisplayString' in module #-1 (mibs/apc-powernet-mib)# - Unlinked OID in PowerNet-MIB: apc ::= { enterprises 318 }# - Undefined identifier: enterprises near line 281 of mibs/apc-powernet-mib# - Cannot adopt OID in PowerNet-MIB: atsInputEntry ::= { atsInputTable 1 }# - \u003cand hundreds more `Cannot adopt OID in PowerNet-MIB:` messages# - Bad operator (INTEGER): At line 73 in /usr/share/snmp/mibs/ietf/SNMPv2-PDU### After some searching, it appears that MIBs can refer to other MIBs and some set of 'base' files is not present.# Due to licensing, the Debian docker image that the generator is based on does NOT ship w/ them or the # `snmp-mibs-downloader` tool which is used to fetch the base MIB files. This is easy enough to fix...### First, update the repos we'll pull packaged fromRUN echo \"deb http://deb.debian.org/debian/ buster main contrib non-free\" | tee -a /etc/apt/sources.list \u0026\u0026 \\ echo \"deb http://deb.debian.org/debian/ buster-updates main contrib non-free\" | tee -a /etc/apt/sources.list \u0026\u0026 \\ echo \"deb http://security.debian.org/debian-security buster/updates main contrib non-free\" | tee -a /etc/apt/sources.list# Then we run the 'original' set of commands, adding in the `snmp-mibs-downloader` package.# As part of the post-install hook, snmp-mibs-downloader will fetch the base MIBs that appear to be# missing.##RUN apt-get update \u0026\u0026 \\ apt-get install -y libsnmp-dev p7zip-full snmp-mibs-downloader \u0026\u0026 \\ go get github.com/prometheus/snmp_exporter/generator \u0026\u0026 \\ cd /go/src/github.com/prometheus/snmp_exporter/generator \u0026\u0026 \\ go get -v . \u0026\u0026 \\ go install# To fix _this_ error:# Bad operator (INTEGER): At line 73 in /usr/share/snmp/mibs/ietf/SNMPv2-PDU## we install a 'patched' version.# src: https://serverfault.com/questions/936119/snmp-mibs-on-ubuntu-error-in-mibs##RUN wget http://pastebin.com/raw.php?i=p3QyuXzZ -O /usr/share/snmp/mibs/ietf/SNMPv2-PDU### This command is not needed for generation, but IS needed for manual checking / use of `snmptranslate` within the# container. Add to the above RUN statement if needed.# sed -i \"s/^\\(mibs *:\\).*/#\\1/\" /etc/snmp/snmp.conf## It simply comments out the `mibs:` line in `/etc/snmp/snmp.conf`### The 'stock' generator expects the output of `make mibs` to be mounted into /opt/mibs.# Since we ar","date":"2020-12-27","objectID":"/monitoring-ap7900-switched-pdu-prometheus-grafana/:2:1","tags":["prometheus","grafana","SNMP"],"title":"Monitoring APC AP7900 switched PDU with Prometheus and Grafana","uri":"/monitoring-ap7900-switched-pdu-prometheus-grafana/"},{"categories":["home-lab"],"content":"The Dashboard Once metrics are making their way into prometheus, it‚Äôs only a bit of work to get a dashboard up and running. For sanity checking I fired up a load; a crypto-miner. See if you can spot when‚Ä¶ :). Simple dashboard in grafana The json file for the dashboard is about 750 lines long, so rather than embed it, I‚Äôve attached it as a file; the sha1 hash of dashboard.json is 400edb0c4064068f12e17c2f1f0d6862d3b8d449. ","date":"2020-12-27","objectID":"/monitoring-ap7900-switched-pdu-prometheus-grafana/:3:0","tags":["prometheus","grafana","SNMP"],"title":"Monitoring APC AP7900 switched PDU with Prometheus and Grafana","uri":"/monitoring-ap7900-switched-pdu-prometheus-grafana/"},{"categories":["home-lab"],"content":"estimating costs The dashboard just multiplies the average Wattage by the average cost of a kWh and then scales that to fit a 24h window. The rate I pay for electricity changes based on the hour in which the power is used; about 40% of the week, my power costs a few cents per kWh more. The cost shown in the image above is a rough approximation based on my average power rate of around 12.5 cents per kWh. This rate can be adjusted with the avgkWH_Cost variable, if needed. ","date":"2020-12-27","objectID":"/monitoring-ap7900-switched-pdu-prometheus-grafana/:3:1","tags":["prometheus","grafana","SNMP"],"title":"Monitoring APC AP7900 switched PDU with Prometheus and Grafana","uri":"/monitoring-ap7900-switched-pdu-prometheus-grafana/"},{"categories":["home-lab"],"content":"Files files/dashboard.json: sha1(dashboard.json): 400edb0c4064068f12e17c2f1f0d6862d3b8d449 Simple dashboard in grafana ","date":"2020-12-27","objectID":"/monitoring-ap7900-switched-pdu-prometheus-grafana/:4:0","tags":["prometheus","grafana","SNMP"],"title":"Monitoring APC AP7900 switched PDU with Prometheus and Grafana","uri":"/monitoring-ap7900-switched-pdu-prometheus-grafana/"},{"categories":null,"content":"Seriously, why is this so hard?","date":"2020-11-27","objectID":"/amcrest-ip-cam-security-isnt-a-feature-its-a-punchine/","tags":["onvif","home assistant","rant","security"],"title":"Amcrest IP Cameras: security isn't a feature, it's a punchline","uri":"/amcrest-ip-cam-security-isnt-a-feature-its-a-punchine/"},{"categories":null,"content":"This is part rant, part ‚Äúreference‚Äù for anybody else that‚Äôs struggling to get their Amcrest IP Camera to work with Home Assistant via ONVIF. Skip to TL;DR for a working Home Assistant config. Briefly, ONVIF is an industry group that maintains a set of standards to allow for interoperability between IP Cameras and related devices from multiple vendors. One set of protocols so your cameras from $vendorA will work with with the recording/analytics software from $vendorB which can then pipe events into software from $vendorC. How ONVIF works and how it‚Äôs implemented are beyond the scope of this rant, but, like most standards that haven‚Äôt aged well, SOAP is involved. ü§Æ. The IP Camera in question is the Amcrest IP4M-1051, though it does appear that other devices from Amcrest are effected by some of the same issues I‚Äôll detail below. Additionally, Amcrest appears to be a budget brand offering cheaper versions of DaHua hardware, so the firmware Amcrest uses likely originates from DaHua. The hardware is pretty good for the price. About $80 and you get a camera with a pretty wide field of view, 4K resolution, automatic IR leds/filter, PTZ servos, 10/100 Ethernet and 2.4/5ghz WiFi. The software, however is scarry üò±. I‚Äôve only spent a few hours with the camera so far, but here‚Äôs an incomplete list of the security-related issues i‚Äôve noticed in that time: There‚Äôs no way to require the web interface be served over HTTPS. You can turn on HTTPS support, but you can‚Äôt turn of HTTP support! ONVIF runs over HTTP ‚Ä¶ on port 80! Only the ADMIN user is supported for ONVIF Passwords are limited to 32 characters in length‚Ä¶ but the web UI won‚Äôt inform you about this. ","date":"2020-11-27","objectID":"/amcrest-ip-cam-security-isnt-a-feature-its-a-punchine/:0:0","tags":["onvif","home assistant","rant","security"],"title":"Amcrest IP Cameras: security isn't a feature, it's a punchline","uri":"/amcrest-ip-cam-security-isnt-a-feature-its-a-punchine/"},{"categories":null,"content":"Firmware Before anybody asks, yes, I did update the firmware to the latest version immediately after unboxing. As of writing, the latest firmware available is version V2.620.00AC000.3.R.20191218 which can be downloaded here. FW for all Amcrest devices can be fetched from https://amcrest.com/firmwaredownloads. In the unlikely event that anybody sees this post and somehow gets Amcrest to correct their issues, the versions of software on the affected cameras are: Software Version: V2.620.00AC000.3.R, Build Date: 2019-12-18 WEB Version: 3.2.1.619604 ONVIF Version: 16.12(V2.4.1.513183) ","date":"2020-11-27","objectID":"/amcrest-ip-cam-security-isnt-a-feature-its-a-punchine/:0:1","tags":["onvif","home assistant","rant","security"],"title":"Amcrest IP Cameras: security isn't a feature, it's a punchline","uri":"/amcrest-ip-cam-security-isnt-a-feature-its-a-punchine/"},{"categories":null,"content":"Web UI Nothing shocking about a networking equipped, consumer-grade bit of electronics with a web based management interface. The only reason I‚Äôm noting it here is because I can‚Äôt find a way to force the web UI to be served over HTTPS üò¢. *sigh* And the HTTPS tab has no way to disable the web server on port 80 or at least do a simple redirect to the HTTPS URL üòû. I'll leave you to determine if it's a good idea for the web interface to generate a self-signed certificate or not. I suspect that the next issue might have something to do with the ‚Äòalways on‚Äô HTTP server‚Ä¶ ü§î ","date":"2020-11-27","objectID":"/amcrest-ip-cam-security-isnt-a-feature-its-a-punchine/:1:0","tags":["onvif","home assistant","rant","security"],"title":"Amcrest IP Cameras: security isn't a feature, it's a punchline","uri":"/amcrest-ip-cam-security-isnt-a-feature-its-a-punchine/"},{"categories":null,"content":"ONVIF over port 80 The inciting ‚Äòincident‚Äô for this post was a ‚Äògeneric‚Äô error from Home Assistant while trying to connect the camera to HA. While going through the config flow, I‚Äôd get a super useful an unknown error occurred message üôÉ. After a bit of digging through verbose HA logs, I started to suspect that the default port of 5000 was not the correct port despite the port being ‚Äòopen‚Äô on the camera: $ nmap -p1-6553 cameraIPv4Here Starting Nmap 7.91 ( https://nmap.org ) at 2020-11-27 16:14 PST Nmap scan report for cameraIPv4Here Host is up (0.010s latency). Not shown: 6547 closed ports PORT STATE SERVICE 53/tcp open domain 80/tcp open http 123/tcp filtered ntp 443/tcp open https 554/tcp open rtsp 5000/tcp open upnp Nmap done: 1 IP address (1 host up) scanned in 2.21 seconds Sure enough, Home Assistant found a responsive ONVIF endpoint on port 80. Repeated testing showed that port 80 is the ONLY port with a responsive ONVIF endpoint ü§¶. So yeah. ONVIF traffic, just like the web UI traffic, can be sniffed by anybody between the client and the camera. That‚Äôs not OK for a device that‚Äôs intended to be used for security. So this little setting is basically useless: 'Authentication' is misleading. It should be labeled something along the lines of 'allow just ADMIN to use onvif or allow anybody to use onvif' That screenshot is from the PDF file here which has this revision info: Amcrest IP4M-1051B / IP4M-1051W 4MP ProHD Indoor Wi-Fi Camera User Manual Version 1.0.3 Revised April 4th, 2019 ","date":"2020-11-27","objectID":"/amcrest-ip-cam-security-isnt-a-feature-its-a-punchine/:2:0","tags":["onvif","home assistant","rant","security"],"title":"Amcrest IP Cameras: security isn't a feature, it's a punchline","uri":"/amcrest-ip-cam-security-isnt-a-feature-its-a-punchine/"},{"categories":null,"content":"ONVIF only supports authentication with the Admin user After discovering that ONVIF only ‚Äòworks‚Äô over port 80, I took a moment to get over my disappointment and then tried to set up a second user with minimal authority on the camera; read only and limited permission to move the camera around. Except I was never able to get HA to successfully connect to the camera when using the secondary user. Home Assistant still failed to connect to the camera over ONVIF even after elevating the secondary user to the privilege level of an admin: Admin users have all 34 permissions enabled My secondary user permissions: As Home Assistant really does not expose a ton of debugging information, I tried the secondary user credentials with the Onvifer app. The debugging logs from that app confirmed that only the admin credential set ‚Äòworked‚Äô with ONVIF. After a bit more research, it turns out that I‚Äôm not the first person to discover this: Source: https://amcrest.com/forum/ip-cameras-f18/firmware-security-bug-regarding-onvif--t13445-s10.html Source: https://amcrest.com/forum/ip-cameras-f18/ip3m-941b-onvif-and-user-management-t12647.html Now i‚Äôm embarrassed that it took me so long to discover an issue that‚Äôs been documented since AT LEAST summer of 2019! üò≥ ","date":"2020-11-27","objectID":"/amcrest-ip-cam-security-isnt-a-feature-its-a-punchine/:3:0","tags":["onvif","home assistant","rant","security"],"title":"Amcrest IP Cameras: security isn't a feature, it's a punchline","uri":"/amcrest-ip-cam-security-isnt-a-feature-its-a-punchine/"},{"categories":null,"content":"Password length Can we please stop putting ceilings on password length? Or, at least if you‚Äôre going to set an upper bound on password length, please make sure that: You‚Äôre consistent about enforcing the length You tell the user when their password is longer than allowed. The very first time the default credentials are used to sign into the camera, you‚Äôre prompted to change the default password. Good! Only problem: the password generated by my password was, apparently, longer than the camera supports. The new admin password was silently truncated as I was logged in. I didn‚Äôt realize that the password stored in the manager wouldn‚Äôt let me in until after the camera applied it‚Äôs FW update and rebooted. After a factory reset, I figured out what happened. The maxlength property of the login form differs from the password set form. In any case, there‚Äôs no warning that the input exceeds the length! ... ... sigh ","date":"2020-11-27","objectID":"/amcrest-ip-cam-security-isnt-a-feature-its-a-punchine/:3:1","tags":["onvif","home assistant","rant","security"],"title":"Amcrest IP Cameras: security isn't a feature, it's a punchline","uri":"/amcrest-ip-cam-security-isnt-a-feature-its-a-punchine/"},{"categories":null,"content":"TL;DR: It‚Äôs almost 2021, but we still have IP Cameras shipping with 2011‚Äôs security issues. Absolutely do not expose your IP Cameras directly to the internet or otherwise allow them to contact the internet. Keep cameras on their own dedicated and isolated network and consider the admin credentials for the camera to be compromised. Seriously re-consider using WiFi for your cameras. If you‚Äôre trying to use the Home Assistant ONVIF integration to control an Amcrest IP4M-1051, you must use the admin credentials and change the port from 5000 to 80. The first bit of documentation you see when unboxing the camera is this little guy: This is *literally* the first thing you see when unpacking the camera. which reads: IMPORTANT SECURITY NOTICE Please make sure your device has the latest firmware as listed on: www.amcrest.com/firmware-subscribe Never use the default password for your device. Always ensure your password contains a combination of lowercase and uppercase characters and numbers. A for effort, though, Amcrest! üëèüåü üôÉ ","date":"2020-11-27","objectID":"/amcrest-ip-cam-security-isnt-a-feature-its-a-punchine/:4:0","tags":["onvif","home assistant","rant","security"],"title":"Amcrest IP Cameras: security isn't a feature, it's a punchline","uri":"/amcrest-ip-cam-security-isnt-a-feature-its-a-punchine/"},{"categories":["gists","reference"],"content":"A few rules for better home automation with Tasmota","date":"2020-11-20","objectID":"/two-tasmota-rules/","tags":["tasmota","home-assistant","home-automation"],"title":"Two Tasmota rules","uri":"/two-tasmota-rules/"},{"categories":["gists","reference"],"content":"Tasmota is an incredibly powerful alternative/open source firmware for the ever popular Espressif family of WiFi equipped microcontrollers. This does not need to be another post espousing it‚Äôs many awesome qualities, so just trust me on this; Tasmota is AWESOME. Tasmota supports user configurable rules which are simple commands wired into various device triggers. In short; a device running Tasmota gains some autonomy to react to events without needing to report the event to, and wait for commands from, a remote server. I find the rules syntax to be a bit awkward and the list of practical examples feels like autodoc with a few practical examples sprinkled in. I have never been able to craft a Tasmota rule without also consulting the list of commands and doing a few searches through the github issues looking for issues/questions similar to mine. This post is a simple ‚Äúhere‚Äôs how i did it‚Äù that I wish I had found when I needed to solve the problem. Hopefully this will save you some trouble! ","date":"2020-11-20","objectID":"/two-tasmota-rules/:0:0","tags":["tasmota","home-assistant","home-automation"],"title":"Two Tasmota rules","uri":"/two-tasmota-rules/"},{"categories":["gists","reference"],"content":"Mr. Coffee A $15 ‚Äòsmart relay‚Äô is all that‚Äôs needed to turn a simple drip-over coffee maker into a remote-controllable coffee maker. Immediately, you gain the ability to start brewing coffee in the morning from bed. With a little extra integration work, start brewing coffee 10 minutes before your alarm is scheduled to go off. Simple quality of life improvement! Every coffee maker has at least one safety interlock to disable the heating element if it gets too hot, but some have additional interlocks. Specifically, my coffee maker has two more interlocks in series with the heating element; if the carafe is removed or the water tank is empty, the circuit is broken and the heater immediately stops producing heat. From the perspective of the smart relay, the power consumption is either 0 Watts or a bit over 1100 Watts. I was not comfortable using Home Assistant to monitor power consumption and then toggle the relay off after observing an interlock kick in. If something happened to the WiFi connection or the MQTT server or Home Assistant, there‚Äôs no way to disconnect power from the coffee maker; the relay will stay ‚Äòon‚Äô. If the interlock failed, somehow, the heating element would immediately begin pumping out heat when it really shouldn‚Äôt be! Writing a simple ‚Äúif power consumption drops below 1100 Watts, turn relay off‚Äù rule would be enough, except there‚Äôs no way to distinguish between the thermal interlock tripping and the carafe being removed for a quick pour. The simple rule is incompatible with the extra interlocks; it will prematurely stop the brewing 100% of the time the carafe is removed. If you want to pour a cup of coffee while it‚Äôs still brewing, this is rather inconvenient. Solution: give the user 30 seconds to return the carafe during brewing before turning the relay off. From the perspective of the outlet, ignore any lulls in power consumption as long as they‚Äôre shorter than 30 seconds. Otherwise, assume that an interlock has tripped. This is implemented with two rules: Rule1 # When relay1 (heater) is turned on, activate rule2 ON Power1#state=1 DO Rule2 1 ENDON # and deactivate rule2 when the heater is turned off ON Power1#state=0 DO Rule2 0 ENDON # When Timer1 expires, turn the heater off ON Rules#Timer=1 DO Power1 off ENDON # When the current used by the heating element rises above 1 Amp, disable Timer1 ON Energy#Current\u003e1 DO RuleTimer1 0 ENDON # ... and enable rule 2 ON Energy#Current\u003e1 DO Rule2 1 ENDON Rule2 # Wait for power use to drop to 0; start counting down ON Energy#Current\u003c.2 DO RuleTimer1 30 ENDON # and disable rule2 so the timer is not constantly reset ON Energy#Current\u003c.2 DO Rule2 0 ENDON I chose .2 Amps as the trigger, but the logic works the exact same way with Power / Wattage. ","date":"2020-11-20","objectID":"/two-tasmota-rules/:0:1","tags":["tasmota","home-assistant","home-automation"],"title":"Two Tasmota rules","uri":"/two-tasmota-rules/"},{"categories":["gists","reference"],"content":"Electric Kettle I wanted to detect when my electric kettle was done boiling the water so I could play a sound and flash the lights in whichever room I happened to be in at the time. This is trivial to do with a ‚Äòsmart outlet‚Äô and a template sensor in Home Assistant: - platform:templatesensors:kettle_running:friendly_name:\"Kettle Boiling\"# If the kettle is using more than 5w, assume its on / boiling watericon_template:\u003e-{% if states('sensor.kettle_energy_power') | float \u003e 5 %} mdi:kettle-steam {% else %} mdi:kettle {% endif %}value_template:\"{{states('sensor.kettle_energy_power') | float \u003e 5}}\" Only problem, Tasmota only publishes the kettle‚Äôs power once every 300 seconds. This means sensor.kettle_energy_power only gets updated every 300s which makes it really hard to fire off a timely notification when the kettle is done. The ‚Äòbrute-force‚Äô solution is to configure Tasmota to transmit the telemetry continuously. Except there‚Äôs no need for the Tasmota device on the kettle to be constantly informing Home Assistant that there‚Äôs no power being used whenever the kettle is not on; my application only cares about the ‚Äòfalling edge‚Äô. Borrow the trigger from the Mr. Coffee rule and shorten the telemetry period only when the kettle is consuming more than 1 Watt. Like the coffee maker, it‚Äôs either consuming 0 Watts or about 1.1 Kilowatt. Rule1 on ENERGY#Power\u003e1 do Backlog TelePeriod 10; Rule2 1 endon Rule2 on ENERGY#Power=0 do Backlog TelePeriod 1; Rule2 0 endon As soon as the kettle starts using more than 1 Watt, configure Tasmota to publish its sensor data every 10 seconds. I‚Äôll get notified that the water is boiling within 10s; much better than 300s! Once the power consumption goes back down to 0, reset the telemetry update period and disable the rule. The second rule must be disabled to prevent constant triggering of the rule when the kettle is not boiling. Without the Rule2 0, the console/logs for the device would be full of statements like this repeating every few seconds: RUL: ENERGY#POWER\u003e1 performs \"TelePeriod 10\" MQT: stat/tasmota_kettle/RESULT = {\"TelePeriod\":10} Hope that helped! EDIT: 2021-09-24: small typo fixes. Thanks for pointing them out :). ","date":"2020-11-20","objectID":"/two-tasmota-rules/:1:0","tags":["tasmota","home-assistant","home-automation"],"title":"Two Tasmota rules","uri":"/two-tasmota-rules/"},{"categories":null,"content":"A few new hardware features and software tweaks to make the wonderful HASP project even better","date":"2020-10-01","objectID":"/enhanced-homeassistantswitchplate/","tags":["fusion-360","has:download","home assistant"],"title":"Enhanced Home Assistant Switch Plate (HASP)","uri":"/enhanced-homeassistantswitchplate/"},{"categories":null,"content":"The HASwitchPlate project by aderusha is brilliant. He‚Äôs managed to arrange some relatively cheap commodity hardware into a package that conveniently fits into a prime location for interacting with Home Automation - the light switch. The entire package sips power off of the already present mains wiring and connects to any MQTT broker via the esp8266 chip. As the HASP was designed to be used with Home Assistant, the humble 2.4 inch LCD transforms into an accessible control surface for an incredibly powerful home automation platform! ","date":"2020-10-01","objectID":"/enhanced-homeassistantswitchplate/:0:0","tags":["fusion-360","has:download","home assistant"],"title":"Enhanced Home Assistant Switch Plate (HASP)","uri":"/enhanced-homeassistantswitchplate/"},{"categories":null,"content":"Modifications First, a brief word about indemnification: All instructions and information on this page is purely for informational purposes. The original HASP and my modifications come with neither an expressed or implied warranty. By constructing your own, you assume all risk. ","date":"2020-10-01","objectID":"/enhanced-homeassistantswitchplate/:1:0","tags":["fusion-360","has:download","home assistant"],"title":"Enhanced Home Assistant Switch Plate (HASP)","uri":"/enhanced-homeassistantswitchplate/"},{"categories":null,"content":"Software The few software modifications I‚Äôve made to the HASP project are relatively small and don‚Äôt implement anything significant or new; they are ‚Äòquality of life‚Äô improvements that target small portions of the code. I strongly believe that the hardest part of using a given piece automation technology should be taking it out of the box. To wit, Home Assistant has robust - but not perfect - support for automatic device discovery and configuration via MQTT. Once a device has connected to the MQTT broker, it simply publishes a document detailing how HA should interface with the device. It‚Äôs a wonderful experience to see a new device connect to the network for the first time and just a few seconds later the new device is registered in HA, waiting for you to start integrating it into automations ü§©ü§§. While there are quite a few sensors/stateful-attributes in the original HASP code, none of them automatically present themselves to Home Assistant üòî. I set about fixing that to the best of my abilities. Unfortunately, the LCD backlight is the only peripheral that could be ‚Äòupgraded‚Äô to automatic configuration without making a ton of changes to the original code base. All of the hardware modifications detailed below automatically configure themselves with Home Assistant. The original HASP code base uses allocates too little memory for storing MQTT credentials. Any username or password longer than 31 bytes/characters would be silently truncated on save. Despite the ‚Äòcredentials saved, rebooting‚Äô message, the next screen was always a ‚Äòfailure to connect‚Äô message. Frustrating! The pull request to address this is here. ","date":"2020-10-01","objectID":"/enhanced-homeassistantswitchplate/:1:1","tags":["fusion-360","has:download","home assistant"],"title":"Enhanced Home Assistant Switch Plate (HASP)","uri":"/enhanced-homeassistantswitchplate/"},{"categories":null,"content":"Hardware The HASP does support dimming the LCD, but it has no awareness of ambient light levels. This makes it rather difficult to deploy a HASP in any ‚Äòlight sensitive‚Äô location like a bedroom or media room without another device to cue Home Assistant and lower the LCD brightness. Workable, but too high friction to be ideal. Light Dependent Resistors - LDR for short - are a very cheap and compact way to get an approximate light level. Fortunately, the analogue pin is broken out on the PCB so a simple resistive divider and a few lines of code are all that‚Äôs needed to get a a number that linearly correlates to the level of light hitting the face plate. It just so happens that there is just enough room to fit a LDR beneath the surface of the decor plate and out of the way of the LCD. As (not) shown in the picture above, there is no way to tell that the LDR is embedded beneath the surface. The range of values from the LDR isn‚Äôt great, but they are adequate enough to reliably detect if the HASP is in a darkened room. ignore the spikes just before noon, those are due to to testing with a flash light While researching potential ways to measure the ambient brightness, I stumbled across the HomeSeer HS-WD200+ which features a rather novel way to convey additional information to a user; seven RGB leds üòç. It‚Äôs a brilliant use of such a simple and ubiquitous technology that I‚Äôm not really sure why every smart switch doesn‚Äôt do this! HomeSeer's WS200 has a delightful innovation... RGB LEDs! With zero room to spare, four LEDs can fit into a small cavity between the LCD and decor plate surface. Like with the LDR, there is no visual ‚Äòtell‚Äô that there are LEDs beneath the surface‚Ä¶ unless they‚Äôre on, of course. Ignore the dirt on the switch. Notice how you can't tell there's an LDR beneath the surface The enclosure Without consuming more than 1 gang, the only realistic way to get the wires for the new components to the HASP PCB is to go around the edge of the LCD‚Äôs PCB. This is accomplished with two small ‚Äòchannels‚Äô that slightly protrude in the vertical directions from the lip around the LCD and into the box that encloses the electronics. Section analysis from f360 showing small channels around the LCD for wires to LDR and LEDs Additionally, I found that the original printed parts do not properly fit in the two gang electrical box where I intended to deploy the HASP. The only way to fit the HASP in my 2-gang electric boxes is to cut out a small section In total, the modifications required to accommodate the LDR and LED tape are relatively small, but I had to re-create the model from scratch so several things are likely a bit different from the original model. It should be relatively easy to port the modifications to the other multi-gang configurations that the original HASP supports. The .step and .f3z files are available should you want to make the necessary modifications to other switch plate configurations. The .stl and .3mf files are available for easy printing. All files available below and on github. ","date":"2020-10-01","objectID":"/enhanced-homeassistantswitchplate/:1:2","tags":["fusion-360","has:download","home assistant"],"title":"Enhanced Home Assistant Switch Plate (HASP)","uri":"/enhanced-homeassistantswitchplate/"},{"categories":null,"content":"Assembly The steps below are meant to be followed between the original steps 03_Electronics_Assembly and 04_Project_Enclosure. In short, you‚Äôll want to assemble and test the HASP PCB as in the original instructions, but use the steps below as a substitute for the enclosure assembly process. ","date":"2020-10-01","objectID":"/enhanced-homeassistantswitchplate/:2:0","tags":["fusion-360","has:download","home assistant"],"title":"Enhanced Home Assistant Switch Plate (HASP)","uri":"/enhanced-homeassistantswitchplate/"},{"categories":null,"content":"Additional Materials In addition to everything in the original BOM, you‚Äôll need: A LDR. Be aware that LDRs come in many different shapes and sizes and have different resistance values. Space is rather tight, so the form factor matters a lot more than the resistance values or band of light that the LDR responds to. If you use a different LDR, you may need to adjust the resistor value to better match your LDR. You can get 50 of the exact model GL5516 that I used for less than $2 here. A 10KŒ© resistor to form a simple resistive divider with the LDR. This will better map the the full range of the LDR to the 0-1 volt range that the ESP8266 ADC uses. Space is rather limited so the smaller the resistor, the better; no need for anything larger than 1/4 Watt. You can get a 10-pack of 10KŒ© resistors here WS2812B LED tape featuring the 3535SMD package. The ‚Äòregular size‚Äô LED package will not fit so make sure you use the smaller 3535SMD package! Beyond that, aim for LED tape that is no wider than ~8mm and has highest density possible. After quite some searching, the best that I could find is 8mm wide tape with a density of 144 LEDs per meter. Unfortunately, they don‚Äôt sell LEDs 4 at a time, so you can pick up 1 meter of the exact LEDs I used here. Several centimeters of very fine gauge wire. Ideally, multiple colors so you can keep organized but this is not required. Again, space is rather tight, so AWG 28 or 30 is ideal. Much bigger than that and you‚Äôll likely have issues fitting everything together. You can get a 1m length of multiple colors here. HeatShrink Tubing (HST). The exact diameter needed will depend on how compact your soldering is and the size of resistor used. Multiple colors will help keep things organized, but that‚Äôs not required. I suggest a kit so you can get the perfect diameter and length. You can get a kit here. Standard 2.54mm pin headers. You can get a set of male and female headers here. All the components needed for assembly Note: Where possible, I‚Äôve used commission links. The links don‚Äôt raise the price of any item, they simply let the retailer know that I‚Äôm the reason for your business. In return, I get a small cut of your purchase as a ‚Äòthanks‚Äô from the retailer. If you‚Äôre not comfortable with that, you can use a URL unwinding service to get the ‚Äòraw‚Äô product link and drop the attribution/commission part. ","date":"2020-10-01","objectID":"/enhanced-homeassistantswitchplate/:2:1","tags":["fusion-360","has:download","home assistant"],"title":"Enhanced Home Assistant Switch Plate (HASP)","uri":"/enhanced-homeassistantswitchplate/"},{"categories":null,"content":"Brass inserts The original instructions suggest using glue to secure the brass inserts to the face plate, but I suggest using either a lighter or a very fine tip soldering iron to heat up the brass insert. A hot insert will melt the surrounding plastic which will make for a much stronger joint. The modified version of the HASP face plate used in this guide intentionally features holes slightly too small for the brass inserts so glue won‚Äôt be enough. Fully insert the 20mm screw into the brass insert, use pliers to grasp the screw and apply heat with a lighter for a few seconds and then insert into the face plate. Make sure that the screw is completely inserted into the insert so that molten plastic can‚Äôt flow into the insert. If molten plastic enters and cools on the threads, it will be rather difficult to later screw things together! Molten plastic can't flow into a filled insert As the inserts cool, you‚Äôll have a few seconds to make adjustments to their orientation before they become fixed. Make sure that each screw is vertical and cool to the touch before moving on to the wiring harness. screws make it easy to perform final alignment on inserts and act as a heatsink ","date":"2020-10-01","objectID":"/enhanced-homeassistantswitchplate/:2:2","tags":["fusion-360","has:download","home assistant"],"title":"Enhanced Home Assistant Switch Plate (HASP)","uri":"/enhanced-homeassistantswitchplate/"},{"categories":null,"content":"Wire Harness There are only six wires for the two components and the LED tape is the only component where polarity matters. A table mapping each pin on the HASP PCB to each component lead is below. HASP PCB Pin Component GND LED Tape, 10KŒ© resistor +5V LED Tape VCC in +3.3V LDR A0 LDR \u0026 10KŒ© resistor junction D0 N/A D1 LED Tape CLK/DTA in D2 N/A DBG N/A You are strongly encouraged to test / check your work after each step with a simple multimeter. Complete assembly involves irreversible steps, like shrinking HST. If you make a mistake, it‚Äôs best to catch it before ‚Äòfinalizing‚Äô things as you‚Äôre almost certainly going to have to destroy the component and or wiring harness to repair it. Additionally, you can flash my modified HASP firmware to a fully assembled HASP device and use that as a testing device. On boot up, the modified firmware briefly flashes each LED in sequence. About every 10 seconds after boot, the LDR value will be read and published to MQTT. Cover the LDR with your hand and check your MQTT broker or HA to confirm that the value changes significantly between exposed and covered states. LDR Fit the LDR into the face plate and position the leads in the channel under and to the top of the LCD PCB. Then trim the excess length off of the LDR leads so that they extend ‚Äòbeyond‚Äô the LCD by about 8mm or so. LDR under the LCD w/ trimmed leads... Remove the LDR from the face plate and straighten the leads out. Lay the LDR, resistor, and wire out as shown below. Use this time to cut the HST down to size so everything but the leg of the LDR that joins the resistor can be covered. Note: the leads on the resistor have also been trimmed down to ~15mm to better fit. rough layout of LDR harness It‚Äôs probably going to be easiest to start with the ‚Äòsupply‚Äô wire which runs directly from the HASP PCB‚Äôs +3.3v pin to the LDR. As space is exceedingly tight, there is no room for overly large solder joints. Carefully wrap the wire around the lead and apply just enough solder to make good electrical contact. Once the supply wire has been soldered to the LDR, affix the HST so the entirety of the lead and solder joint are protected. strip ~1cm off the end of the wire, wrap around the lead, then solder Repeat the same procedure with the lead of the resistor that will go directly to the ground. Affix the HST after the solder joint has cooled. No room for mechanically strong solder joints Use the same ‚Äòwrap‚Äô technique with the remaining leads from the LDR and the resistor. Apply just enough solder for good electrical contact between the signal wire and the two leads of the LDR and resistor. same wrapping technique, just with two leads this time After the solder joint cools, cover the entire LDR/Resistor assembly in HST so there is no exposed wire or component lead. get everything nicely protected behind HST Set the LDR component aside for now and move on to the LED tape. LEDs If you‚Äôve not already trimmed the LED tape to fit in the face plate, do so now. Leave yourself as much room as needed to solder on the one side where you‚Äôll need to feed power and data in. The LED tape has incredibly small pads so take your time on this. You have about 5 cubic millimeters total for the three solder joints on the LED tape. Solder just enough for electrical contact, there will be no significant mechanical stress. Note: The arrows printed on the strip point in the direction of data flow; combined with the off-center placement of the LED packages, there is only one way to properly install the LED tape in the decor plate. know which way the LED tape wires will need to point to make it into the 'channel' prior to soldering After soldering the power, signal and ground wires, flatten them and gently shape them so they align and flow into the channel on the face plate in a manner similar to the LDR. For a bit of mechanical robustness, consider braiding the wires together. twist the wires together for a more compact and robust cable Pin Header After soldering wires o","date":"2020-10-01","objectID":"/enhanced-homeassistantswitchplate/:2:3","tags":["fusion-360","has:download","home assistant"],"title":"Enhanced Home Assistant Switch Plate (HASP)","uri":"/enhanced-homeassistantswitchplate/"},{"categories":null,"content":"Printing In the electrical boxes there‚Äôs absolutely no room to spare, so all parts are designed to fit together with very tight clearances. Print as slow as you need to in order too achieve very good dimensional accuracy. Like with the brass inserts, the various screw holes are intentionally undersized for better thread engagement. The obvious orientation is the best, no supports needed The HASP does run a bit warm, but not any warmer than other smart switches with similar form-factor. PLA will likely be fine unless you in tend to deploy the HASP in a particularly hot location. Thermals In testing, the parts of the HASP ran ~20¬∫ above ambient. Most of that heat comes from the small AC-\u003eDC converter and the LCD. Surprisingly, the ESP8266 does not emit that much heat. Overall, nothing particularly alarming, especially when the HASP is deployed into a larger multi-gang electrical box with with plenty of air to radiate heat into. Apologies in advance for the mixed ¬∫C/¬∫F units. HASP removed from electrical box, heat from the AC-DC converter radiating through the enclosure similar to first picture, parts inside enclosure radiate heat through the enclosure, bringing it to about 20 degrees above ambient temperature there are clear hot-spots on the enclosure that match up with the location of the ESP and the AC-DC converter Less heat is radiated through the front of the HASP; the LCD backlight and embedded LEDs are clearly the warmest components The tiny PNP transistor that toggles the LCD power is the hottest component, by far. Everything else has a relatively consistent temperature: PNP Transistor is clearly warmest internal component, ESP8266 cooler than expected When installed in wall, the HASP is radiating heat into the electrical box and through neighboring switches: a little bit of ambient heat radiating through the gap between LCD and switch as well as through the switch ","date":"2020-10-01","objectID":"/enhanced-homeassistantswitchplate/:2:4","tags":["fusion-360","has:download","home assistant"],"title":"Enhanced Home Assistant Switch Plate (HASP)","uri":"/enhanced-homeassistantswitchplate/"},{"categories":null,"content":"Future work I did accomplish my two main goals: Ambient light sensor for more responsive backlight control HomeSeer-like LEDs for additional information display However, there‚Äôs a few aspects of the HASP that i‚Äôd like to further improve: Increased automatic configuration w/ the HASP. There‚Äôs still a non-trivial amount of work required to set up a HASP with Home Assistant. The HASP device has many different attributes that could be exposed to Home Assistant automatically. E.G.: The HASP will periodically check for a firmware update; the HASP should configure Home Assistant with a binary_sensor that indicates if there‚Äôs a firmware update available. Some of the automations that live in Home Assistant to manage button presses / update screen content could probably be re-factored down to a few generic scripts and services. The display uses a resistive matrix to detect touch events. Resistive screens, while cheap, are a bit finnicky and inferior to the more consistent and precise capacitive touch screen tech. If Nextion ever makes a capacitive version of the NX3224T024, then it would be an instant upgrade! Similarly, the viewing angle on the LCD is‚Ä¶ not great. The HASP, like most light switches, is at a convenient height for hands‚Ä¶ not eyes. If you‚Äôre standing relatively close to the HASP, you‚Äôll be looking down at the screen with quite a steep angle. Depending on the current screen brightness and colors, this may result in a washed out and illegible screen. Better LED diffusion. There‚Äôs not a lot of space for light pipes or similar, but I would like to find a better way of diffusing the LEDs. Or even to fit a masking layer between the LEDs and the plate, so the effect would be akin to a back-lit silhouette. Effects for the LEDs. Right now, the LEDs only support on/off/brightness commands. Their ability to passively indicate information would be enhanced if Home Assistant could send ‚Äòeffect‚Äô commands, too. E.G.: Rather than HA having to send a constant stream of color/brightness commands to fade between blue, green, yellow, purple, simply send a fade(2s) blue, green, yellow, purple command. There‚Äôs plenty of spare room on the HASP PCB for the 10KŒ© resistor. This would simplify the creation of the wiring harness. I‚Äôve been meaning to learn KiKad, this might be a very gentle way to start learning it. ü§î Enclose the LED tape 100% inside the HASP. This version works well and the small ‚Äòhole‚Äô in the enclosure. I don‚Äôt think there‚Äôs any safety concern w/ the current design, but I‚Äôd still like to have the low voltage stuff 100% blocked off from thee electrical box‚Ä¶ ","date":"2020-10-01","objectID":"/enhanced-homeassistantswitchplate/:3:0","tags":["fusion-360","has:download","home assistant"],"title":"Enhanced Home Assistant Switch Plate (HASP)","uri":"/enhanced-homeassistantswitchplate/"},{"categories":null,"content":"Files For archive / posterity, all source files are included here. Unless otherwise explicitly stated otherwise, all files below are licensed as Creative Commons Attribution-NonCommercial-ShareAlike (CC BY-NC-SA). Section analysis from f360 showing small channels around the LCD for wires to LDR and LEDs The only way to fit the HASP in my 2-gang electric boxes is to cut out a small section All the components needed for assembly Molten plastic can't flow into a filled insert screws make it easy to perform final alignment on inserts and act as a heatsink LDR under the LCD w/ trimmed leads... rough layout of LDR harness strip ~1cm off the end of the wire, wrap around the lead, then solder No room for mechanically strong solder joints same wrapping technique, just with two leads this time get everything nicely protected behind HST know which way the LED tape wires will need to point to make it into the 'channel' prior to soldering twist the wires together for a more compact and robust cable remove the pin from the plastic 'frame' and carefully solder the wires to the pins A few pins are not needed Align and ensure no pinched wires! If the LEDs weren't on, you'd never know they were there üòä ignore the spikes just before noon, those are due to to testing with a flash light models/box.step: step file models/box.stl: stl file models/combined.3mf: 3mf file models/combined.step: step file models/enhanced-HASP.f3z: models/plate.step: step file models/plate.stl: stl file Ignore the dirt on the switch. Notice how you can't tell there's an LDR beneath the surface The obvious orientation is the best, no supports needed HASP removed from electrical box, heat from the AC-DC converter radiating through the enclosure similar to first picture, parts inside enclosure radiate heat through the enclosure, bringing it to about 20 degrees above ambient temperature there are clear hot-spots on the enclosure that match up with the location of the ESP and the AC-DC converter Less heat is radiated through the front of the HASP; the LCD backlight and embedded LEDs are clearly the warmest components PNP Transistor is clearly warmest internal component, ESP8266 cooler than expected a little bit of ambient heat radiating through the gap between LCD and switch as well as through the switch HomeSeer's WS200 has a delightful innovation... RGB LEDs! ","date":"2020-10-01","objectID":"/enhanced-homeassistantswitchplate/:4:0","tags":["fusion-360","has:download","home assistant"],"title":"Enhanced Home Assistant Switch Plate (HASP)","uri":"/enhanced-homeassistantswitchplate/"},{"categories":null,"content":"An update to ESPHome custom_component to capture particulate matter sensor values from WS3 Weather Station","date":"2020-08-27","objectID":"/ws3-weather-station-pm25-sensor/","tags":["fusion-360","has:download","esphome","home assistant"],"title":"Adding an airborne particulate mater sensor to WS3 Weather Station","uri":"/ws3-weather-station-pm25-sensor/"},{"categories":null,"content":"A while back, I posted a small bit of code that could decode the data from the ubiquitous WS3 Weather Station and make it accessible to the amazing HomeAssistant via the wonderful ESPHome project. Since then, my weather station has been dutifully collecting data that‚Äôs been invaluable for augmenting automation that deals with indoor climate. As the numerous wild fires in California rage on, the air quality has gone from bad to dangerous. Knowing that outside was warmer, but less humid, was no longer enough to make a smart decision about weather or not to open the windows for some cost-effective cooling. I now need HomeAssistant to be aware of how clean the outside air was before making the decision to pipe in outdoor air. This post covers two things: A small update to the existing WS3 -\u003e ESPHome -\u003e HomeAssistant bridge code to take advantage of the WS3s' support for the ubiquitous PMS5003T sensor. A simple 3d-printable enclosure for deploying the particulate matter sensor outdoors When deployed, it looks like this: Excuse the awkward camera angle; sensor is deployed in an awkward to photograph location. Please ignore the awkward camera angle as the sensor is deployed in a location where there‚Äôs not quite enough room for proper camera placement. And results in graphs that look like this: Smoke particles are between .4Œºm to .7Œºm in size... which explains the elevated red line relative to other particle sizes. A simplified copy of this post appears on thingiverse and prusaprinters. ","date":"2020-08-27","objectID":"/ws3-weather-station-pm25-sensor/:0:0","tags":["fusion-360","has:download","esphome","home assistant"],"title":"Adding an airborne particulate mater sensor to WS3 Weather Station","uri":"/ws3-weather-station-pm25-sensor/"},{"categories":null,"content":"The enclosure As of writing, there‚Äôs one existing enclosure for the sensor on thingiverse. Unfortunately, the enclosure does not appear to have any design features for mounting to a pole nor does it have any bug-proofing design elements. I took this opportunity to design my own that could be easily mounted, features a slanted ‚Äòroof‚Äô to prevent standing moisture ingress and could use standard size tobacco pipe filters to keep all but the tiniest of insects/particles out. The sensor uses a small fan to draw ambient air past an infrared laser. As airborne particles cross the laser beam, they reflect a certain amount of light which can be correlated with the size of the particle. This data can then be turned into fairly accurate counts of how many particles of a given size are in the sampled air. The enclosure is a basic box with two circular air channels pointed downwards to prevent moisture ingress. The intake and exhaust ports are at staggered heights and pointed in opposite directions and to minimize the chance of recirculating the same air. The lower port is the intake which connects to a few small holes on the front of the sensor and the exhaust port is the raised port which connects directly to the exhaust fan. If you could remove the first few mm from the front, it would look something like this: From the side, you can see the two air channels and the few mm of room in the back for wiring. The sensor sits on a ‚Äòpedestal‚Äô to keep it elevated away from any moisture that may collect on the bottom of the enclosure. The base plate/pedestal are secured to the ‚Äòbody‚Äô with two M3 screws. I used 10mm as that‚Äôs what I had on hand, but screws between 6-12mm should work as well. The holes are sized for a M3, but any similar sized screw will work. Use a lighter or similar to heat the screw as you drive it into the plastic to create your own threads if using a larger/longer screw. Besides the ‚Äòpedestal‚Äô there are a few contact surfaces that hold on to the sensor with a friction fit. The ‚Äòceiling‚Äô is a few mm thick and shouldn‚Äôt permit much moisture ingress but an optional slanted roof component can be printed as an extra precaution. Upper and lower chambers for exhaust and intake. While designing the enclosure, I used this PMS5003 model from Leclercq Gregory. üôè ","date":"2020-08-27","objectID":"/ws3-weather-station-pm25-sensor/:1:0","tags":["fusion-360","has:download","esphome","home assistant"],"title":"Adding an airborne particulate mater sensor to WS3 Weather Station","uri":"/ws3-weather-station-pm25-sensor/"},{"categories":null,"content":"Printing This is a functional part with only three small surfaces that require reasonably tight precision to properly hold onto the sensor. The SPEED setting with a .2mm layer height and a reasonable 20% infill gave me part that works and feels water tight. The walls and ceiling need to keep water out so dipping below 15% infill or otherwise using settings that wont give solid layer adhesion is not advised. I printed using ABS for durability, but PLA will probably work if you can deploy into a shaded environment. The shroud and the base are not optional, the triangle shaped block is intended to turn the flat roof of the shroud into a slanted roof so water can‚Äôt collect. It is optional but shown below. No raft/support when printed in this orientation. ","date":"2020-08-27","objectID":"/ws3-weather-station-pm25-sensor/:1:1","tags":["fusion-360","has:download","esphome","home assistant"],"title":"Adding an airborne particulate mater sensor to WS3 Weather Station","uri":"/ws3-weather-station-pm25-sensor/"},{"categories":null,"content":"Assemble Briefly: collect materials press-fit the PM2.5 sensor into the enclosure make a wire that can interface the PM2.5 sensor to the WS3 board via RJ11 seal everything up glue on mesh screens and angled roof plug into WS3 flash ESPHome onto ","date":"2020-08-27","objectID":"/ws3-weather-station-pm25-sensor/:2:0","tags":["fusion-360","has:download","esphome","home assistant"],"title":"Adding an airborne particulate mater sensor to WS3 Weather Station","uri":"/ws3-weather-station-pm25-sensor/"},{"categories":null,"content":"Bill of Materials More or less everything that is needed for assembly is pictured below. More or less everything needed to assemble. Components: WS3 Weather Station - Essential / Foundational ST5003T PM2.5 Sensor - Essential / Foundational ESP32 Device - A link to the ESP32 based device that I use but any ESP platform with a spare GPIO that can be used as a UART will work. 3/4 inch tobacco pipe screens - For bug/critter proofing the enclosure. Strongly suggested for outdoor deployments. 2x M3 x 10mm screws - Optional. The base can be glued to the shroud or any similar screw will work Note: Where possible, I‚Äôve used referral links. The links don‚Äôt raise the price of any item, they simply let the retailer know that I sent you and, in return, I get a small cut of your purchase. If you‚Äôre not comfortable with that, you can use a URL unwinding service to get the ‚Äòraw‚Äô product link and drop the attribution/commission part. General bits: Superglue Waterproofing caulk/sealant Drill/Screwdriver Driver bit for the screws The stepped drill bit in the above picture is not a requirement if you assemble things in the correct oder. The cable egress hole is sized for a ‚Äòtypical‚Äô 3 pair RJ11 cable plus a tiny bit of wiggle room. I needed a working cable to test the code while the parts were printing so the hole in the printed base needed to be enlarged slightly to fit the head of the cable. ","date":"2020-08-27","objectID":"/ws3-weather-station-pm25-sensor/:2:1","tags":["fusion-360","has:download","esphome","home assistant"],"title":"Adding an airborne particulate mater sensor to WS3 Weather Station","uri":"/ws3-weather-station-pm25-sensor/"},{"categories":null,"content":"Wiring There‚Äôs no ready-made cable out there that‚Äôll join the two devices so one must be made. Fortunately, there‚Äôs only 6 wires to deal with‚Ä¶ 4 of them are distinct. Sacrifice the cable that comes with the PM2.5 sensor and the RJ11 cable by cutting them in half and solder the correct wires together. The color of the wires that come in both the RJ11 cable and the PM2.5 cable are likely going to differ from the ones I used so I‚Äôve left those details out and provided a table showing which pins are to be joined together: Pin # PM2.5 Sensor Pin WS3 Pin 1 VCC 5V 2 GND GND 3 SET ENABLE 4 RX RX 5 TX GND 6 RESET 5V 7 NC 8 NC For reference, Pin 1 on both the WS3 and PM2.5 Sensor: With the wiring done, the sensor just needs to be stuffed into the enclosure. Don‚Äôt forget to thread the RJ11 cable through the hole in the base plate BEFORE soldering it to the cable for the PM2.5 sensor‚Ä¶ otherwise you‚Äôll need that stepped drill bit! üôÉ Sensor has been press-fit into the enclosure and wire fed through the base plate. To finish, secure the base with screws and a bit of water-proofing caulk for good measure: I suggest waiting until the end to glue on the optional roof and waiting until just before that to glue on the optional mesh screens. ","date":"2020-08-27","objectID":"/ws3-weather-station-pm25-sensor/:2:2","tags":["fusion-360","has:download","esphome","home assistant"],"title":"Adding an airborne particulate mater sensor to WS3 Weather Station","uri":"/ws3-weather-station-pm25-sensor/"},{"categories":null,"content":"The code Setting up and using ESPHome is outside the scope of this post but there are several good guides out there. Once you have that set up, include the ws3.h file and set up your custom sensor as shown below. A working example and more detail is over on the github repo. It‚Äôll look like this: uart:id:uart_bus# At this time, ESP does not Transmit anything to the WS3tx_pin:GPIO16rx_pin:GPIO17baud_rate:2400sensor:- platform:customlambda:|-auto ws3 = new WS3(id(uart_bus)); App.register_component(ws3); return { ws3-\u003etemperature_sensor, ws3-\u003epressure_sensor, ws3-\u003ehumidity_sensor, ws3-\u003ewind_speed_current_sensor, ws3-\u003ewind_speed_peak_5m_sensor, ws3-\u003ewind_direction_sensor, ws3-\u003erain_fall_1h_sensor, ws3-\u003erain_fall_24h_sensor, ws3-\u003eparticles_03um, ws3-\u003eparticles_05um, ws3-\u003eparticles_10um, ws3-\u003eparticles_25um, ws3-\u003eparticles_50um, ws3-\u003eparticles_100um, }; With that, check the logs from your instance of ESPHome and you should see something like this: [D][ws3:157]: pkt_read_ok!\u001b [D][WS3:410]: VALID! Packet: [c000s000g000t093r000p000h35b09880,050,080,088,502,056,065,*18 ], Checksum: [18] chksum: [18]\u001b [E][WS3:342]: Validating: [c000s000g000t093r000p000h35b09880,050,080,088,502,056,065]\u001b indicating that the WS3 has detected the PM2.5 sensor and is reporting it‚Äôs readings in addition to the temperature/wind data. Then just check your HomeAssistant install for the data. ","date":"2020-08-27","objectID":"/ws3-weather-station-pm25-sensor/:3:0","tags":["fusion-360","has:download","esphome","home assistant"],"title":"Adding an airborne particulate mater sensor to WS3 Weather Station","uri":"/ws3-weather-station-pm25-sensor/"},{"categories":null,"content":"Files For archive / posterity, all source files are included here. All files are licensed as Creative Commons Attribution-NonCommercial-ShareAlike (CC BY-NC-SA). Sensor has been press-fit into the enclosure and wire fed through the base plate. I suggest waiting until the end to glue on the optional roof and waiting until just before that to glue on the optional mesh screens. Smoke particles are between .4Œºm to .7Œºm in size... which explains the elevated red line relative to other particle sizes. Excuse the awkward camera angle; sensor is deployed in an awkward to photograph location. models/BASE.step: step file models/BODY.step: step file models/LID.step: step file models/base.stl: stl file models/body.stl: stl file models/combined.3mf: 3mf file models/lid.stl: stl file More or less everything needed to assemble. No raft/support when printed in this orientation. Upper and lower chambers for exhaust and intake. ","date":"2020-08-27","objectID":"/ws3-weather-station-pm25-sensor/:4:0","tags":["fusion-360","has:download","esphome","home assistant"],"title":"Adding an airborne particulate mater sensor to WS3 Weather Station","uri":"/ws3-weather-station-pm25-sensor/"},{"categories":null,"content":"California Electric Grid Regulators publish alerts indicating a pending blackout","date":"2020-08-16","objectID":"/rss-and-homeassistant-for-early-blackout-warning/","tags":["home assistant","automation"],"title":"RSS and Home Assistant: early warning for grid blackouts","uri":"/rss-and-homeassistant-for-early-blackout-warning/"},{"categories":null,"content":"California, like most of the West Coast, is currently in the middle of a prolonged and serious heat-wave. Record breaking temperatures results in a distribution grid stressed beyond it‚Äôs abilities which guarantees blackouts. The organization that oversees the electric grid in California publishes RSS feeds for various types of grid related news and events. All the CA ISO RSS feeds are published here, but the two feed that I‚Äôm using are: http://content.caiso.com/awe/noticeRSS.xml http://content.caiso.com/awe/noticeflexRSS.xml As energy demand ramps up, flex alerts are issued as a call to reduce energy consumption. If demand continues to rise warnings and, finally, stage3 events are issued. A warning does not guarantee a stage3 event, but a stage3 event mans that blackouts are all but inevitable in the coming hours. The exact meaning of each alert type is outlined in this PDF. The noticeRSS.xml feed, has early warning notifications that look like this: \u003citem\u003e \\n \u003ctitle\u003eNOTICE 202002440: CAISO Grid Warning Issued \u003c/title\u003e \\n \u003clink\u003ehttp://www.caiso.com/awe/noticelog.html#202002440\u003c/link\u003e \\n \u003cdescription\u003eEffective: 16-Aug-2020 12:00 PM Terminates: 16-Aug-2020 11:59 PM\u003c/description\u003e \\n \u003c/item\u003e Note: there‚Äôs nothing wrong w/ your browser, the \\n characters are in the actual feed. No matter, the RSS parser in Home Assistant can tolerate them. I use the alerts/warnings to do a few simple tasks, but there‚Äôs so much potential beyond the automation I currently have: bumps thermostats up by a few degrees to lighten demand* re-schedule a few routine activities that are usually done in the evening to as soon as possible (cooking, for example) notify me to immediately go check that the generator has fuel Currently in ‚Äòunarmed‚Äô mode as I tweak the logic driving the decision ","date":"2020-08-16","objectID":"/rss-and-homeassistant-for-early-blackout-warning/:0:0","tags":["home assistant","automation"],"title":"RSS and Home Assistant: early warning for grid blackouts","uri":"/rss-and-homeassistant-for-early-blackout-warning/"},{"categories":null,"content":"How to do it Basically, add the two feeds above to the feedreader integration and use the feedreader type of event to trigger your automation. Somewhere in configuration.yaml, load the feedreader component. feedreader:!include feedreader/rss.yaml and in the feedreader/rss.yaml file, add the URLs: urls:- http://content.caiso.com/awe/noticeRSS.xml- http://content.caiso.com/awe/noticeflexRSS.xml# Pull down the feed 2x/ hourscan_interval:minutes:30 Unfortunately, Home Assistant does not support setting the scan_interval per feed, so you‚Äôll have to figure out a happy middle ground if you‚Äôve already got a few RSS feeds you monitor. Likewise, don‚Äôt pull the feed down excessively‚Ä¶ I don‚Äôt see a lot of evidence that the feed is cached well and the CA ISO does occasionally have to put banners on the top of their site saying that the site is under heavy load. Don‚Äôt be the reason the site goes down because you wanted instant notification. If you‚Äôre not in a position to do any sophisticated automation based on the notification, it‚Äôs still simple to fire off a notification to manually prepare: ##- alias:Notify when new Flex or Warning issuedtrigger:platform:eventevent_type:feedreaderaction:service:persistent_notification.createdata_template:notification_id:\"{{ trigger.event.data.title }}\"title:\"FlexAlert\"message:\u003e{% set tokens = trigger.event.data.description.split(' ') %} {% set start_str = \"{} {} {}\".format(tokens[1], tokens[2], tokens[3]) %} {% set start = strptime(start_str, '%d-%b-%Y %I:%M %p') %} {% set end_str = \"{} {} {}\".format(tokens[5], tokens[6], tokens[7]) %} {% set end = strptime(end_str, '%d-%b-%Y %I:%M %p') %} \"Heads up, electricity demand is likely to exceed production from {{ start.isoformat() }} to {{ end.isoformat() }}\" Which should create a simple notification that‚Äôll look something like this: Ignore the sample text from my testing The strptime function yields start and end objects that can be manipulated further: {% set now = now() %} {% if start.day \u003e now.day -%} It looks like demand will be high *tomorrow* {%- endif %} Happy automating. ","date":"2020-08-16","objectID":"/rss-and-homeassistant-for-early-blackout-warning/:1:0","tags":["home assistant","automation"],"title":"RSS and Home Assistant: early warning for grid blackouts","uri":"/rss-and-homeassistant-for-early-blackout-warning/"},{"categories":["tools"],"content":"A powerful collection of scriptable tools for managing ToDoist","date":"2020-07-26","objectID":"/the-missing-todoist-tools/","tags":["tmtdt","automation","ToDoist"],"title":"Announcing The Missing ToDoist Tools","uri":"/the-missing-todoist-tools/"},{"categories":["tools"],"content":"TMTDT: The Missing ToDoist Tools üéâ As the name implies, TMTDT started as a small collection of scripts that I used to augment ToDoist with features they can‚Äôt/won‚Äôt implement. It‚Äôs grown quite a bit since then. I don't know how to make flashy demo gifs. See the file driving the demo Those scripts started as simple idea and quickly morphed into a creaky, but essential, tool. As more features were added it continued too morph into an unmaintainable mess. Untangling that mess was on my todo list but never a high priority partly because of issues TMTDT was designed to solve ü§¶. I lost my day job right as the spring of 2020 shelter in place order was put in place. TMTDT is certainly not how I thought early summer was going to be spent, but a useful way nonetheless. One significant chunk of my newly-freed time and a lengthy re-write later, I had something that looked promising. After a lot more work and some tinkering, I‚Äôve got something that feels like far more than a hacky tool for personal use. ","date":"2020-07-26","objectID":"/the-missing-todoist-tools/:0:0","tags":["tmtdt","automation","ToDoist"],"title":"Announcing The Missing ToDoist Tools","uri":"/the-missing-todoist-tools/"},{"categories":["tools"],"content":"Why Why not? I had several scripts that I would run on a regular basis to do things like: set up projects with multiple different types of templates based on things like the date fix typos i routinely made while quick adding tasks. re-schedule certain daily tasks if they had been missed No joke, I‚Äôd spend a lot of time fixing typos, expanding ideas for a project into proper sub-tasks and sections and other routine administrative work: Representative of time spent during a typical week In that specific week, I kept track of how 37 hours were spent. Of those 37, about 4 were spent on general Inbox review / process. At least 3 of those 4 were spent directly on task triage. 3/37 is about 8%. With no full time day job - hire me - that‚Äôs a fairly representative breakdown for a given week; some time planning the things, lots of time doing the things. What would you do with 8% of your time back each week? I‚Äôm kidding. We all know that I‚Äôm not getting any free time back from this. Credit: XKCD #1319 I‚Äôve written this software to suit my needs, but the decision to make it a bit more robust and featured before release is because I‚Äôve noticed a few ‚Äònew‚Äô tools to better augment ToDoist: autodoist shortcuts taskbutler planner. This is more of a UI, but it‚Äôs a very pretty app. And I‚Äôm genuinely curious about how other people will user it. I am always appreciative when somebody finds a smart way to save some time and shares their trick. I‚Äôm hoping somebody figures out how to use this tool in a way that I can learn from. An announcement post for TMTDT is now on /r/todoist. ","date":"2020-07-26","objectID":"/the-missing-todoist-tools/:1:0","tags":["tmtdt","automation","ToDoist"],"title":"Announcing The Missing ToDoist Tools","uri":"/the-missing-todoist-tools/"},{"categories":["tools"],"content":"How The code and some documentation can be found on GitHub. The demo gif at the top of this post illustrates a simple example, but more through (read: contrived) examples are included in the jobs directory. The short version: Scriptable tools for building jobs to manage a TooDoist account Slightly longer version: Architecture inspired by Elastic Search‚Äôs Curator. Functionality built for ToDoist. ","date":"2020-07-26","objectID":"/the-missing-todoist-tools/:2:0","tags":["tmtdt","automation","ToDoist"],"title":"Announcing The Missing ToDoist Tools","uri":"/the-missing-todoist-tools/"},{"categories":["tools"],"content":"Demo The full set of resources for the demo are here, but the ‚Äòmeaningful‚Äô parts are below: # apply these labels...labels:- \"at_work\"# to tasks that...filters:- filter:# Any task that...task:# ... ends in 'at work' or 'the office'content:match:'(at work$|at the office$)'option:# remove portions of task content that match the querymutate:Yes# *AND*# ... has no labelslabels:absent:Yes# *AND*# ... is in this projectprojects:name:match:'Inbox' and # Create the projects...projects:# ... as child projects of `Garage Sale üèöÔ∏èüíµ`- parent:project:Garage Sale üèöÔ∏èüíµ# ... populated with template tasks/sectionstemplate:file:./templates/garage-sale.csv# where the name of the projects to create comes from ...from:filters:- filter:# Any task that...task:content:match:\".\"option:delete:yesprojects:# ... is in this projectname:match:'Garage Sale üèöÔ∏èüíµ' ","date":"2020-07-26","objectID":"/the-missing-todoist-tools/:2:1","tags":["tmtdt","automation","ToDoist"],"title":"Announcing The Missing ToDoist Tools","uri":"/the-missing-todoist-tools/"},{"categories":["posts","software","ops-tools"],"content":"I made a tool because UDP ingress to k8 is hard","date":"2020-07-21","objectID":"/capp-cloud-agnostic-proxy-protocol/","tags":["short-posts","k8s","UDP","traefik","packer","networking","digital-ocean"],"title":"CAPP: Cloud Agnostic Proxy Protocol","uri":"/capp-cloud-agnostic-proxy-protocol/"},{"categories":["posts","software","ops-tools"],"content":"It‚Äôs another ‚Äúi made a thing!‚Äù post. üôÉ I‚Äôm playing around with porting a few different applications over to k8. Some of them - like skyhole - rely on UDP packets which my hosted k8 provider of choice (read: cheapest! üí∞) does not support. The solution is either: Keep track of all of the node IP addresses that have an exposed nodePort and have the client connect directly to the cluster on the nodePort Set up some sort of intermediary to re-write the packet from the targetPort to the nodePort Option 1 seems fragile; if a cluster host / node is recycled, the client needs to learn the new correct IP addresses. Option 2 seems far more flexible and is basically how most hosted k8 providers do ingress already. In fact, if digital ocean had UDP support, this tool would never have been created. Bonus: clients that expect a specific port can still connect to the service no matter what nodePort is used. So that‚Äôs what CAPP is: Cloud Agnostic Protocol Proxy. It‚Äôs a repo w/ a small python tool which can collect the IP addresses(s) belonging to each node in an arbitrary k8 cluster and - when combined with a small user config file - generate configuration files for traefik. A ‚Äòreference‚Äô packer job is included to generate a basic machine image to host traefik. A few lines of cloud_init is all that‚Äôs needed to kick the tool off. ","date":"2020-07-21","objectID":"/capp-cloud-agnostic-proxy-protocol/:0:0","tags":["short-posts","k8s","UDP","traefik","packer","networking","digital-ocean"],"title":"CAPP: Cloud Agnostic Proxy Protocol","uri":"/capp-cloud-agnostic-proxy-protocol/"},{"categories":["gists","reference"],"content":"get *.consul domains resolved from within docker containers without resorting to dnsmasq","date":"2020-07-21","objectID":"/systemd-resolved-with-consul-agent/","tags":["consul","systemd","systemd-resolved"],"title":"Systemd Resolved With Consul Agent","uri":"/systemd-resolved-with-consul-agent/"},{"categories":["gists","reference"],"content":"I pieced this technique together a while back and created a gist for it. I‚Äôm creating this post as a pointer to that gist so I have something that‚Äôs a bit easier to reference and refer others to. And i want to test out the hugo shortcode for embedding a gist üòè. The really short version: Create a dedicated interface that can only be accessed from the local system Bind the consul-agent‚Äôs DNS service to this local only interface Tell systemd-resolved that all hostnames with the .consul TLD can be resolved via a DNS server on this local interface No need to disable resolved and replace it with dnsmasq üòÑ ","date":"2020-07-21","objectID":"/systemd-resolved-with-consul-agent/:0:0","tags":["consul","systemd","systemd-resolved"],"title":"Systemd Resolved With Consul Agent","uri":"/systemd-resolved-with-consul-agent/"},{"categories":["home-lab"],"content":"Quick / another ‚Äúi made a thing!‚Äù post. Picture showing designed parts deployed as intended (please ignore the lingering dust! üí®) I needed some horizontal / vertical cable rings for cat5 and power cables. I would have used the excellent 1U Rackmount Cable Management Rings by boulwarek except the hole spacing didn‚Äôt work for my application. I needed cable rings for the ‚Äòfront-to-back‚Äô braces which have distinct dimensions: holes needed to be spaced 10.85mm apart distance between center of screw is 20.0mm Screenshot from Fusion360 showing dimensions between screw holes I made the rings slightly smaller as the horizontal / vertical runs I needed rings for do not carry more than a few cables. A similar copy of this post is on thingiverse and prusaprinters page. ","date":"2020-07-18","objectID":"/home-lab-simple-printable-cable-org/:0:0","tags":["fusion-360","has:download","organization"],"title":"home lab: simple printable cable org","uri":"/home-lab-simple-printable-cable-org/"},{"categories":["home-lab"],"content":"Printing Theses are ‚Äòfunction‚Äô parts, so the cheapest material and fastest settings work. No support material needed and minimal bridging with the suggested print orientation shown below. Screenshot showing suggested print bed arrangement ","date":"2020-07-18","objectID":"/home-lab-simple-printable-cable-org/:1:0","tags":["fusion-360","has:download","organization"],"title":"home lab: simple printable cable org","uri":"/home-lab-simple-printable-cable-org/"},{"categories":["home-lab"],"content":"Files For archive / posterity, all source files are included here. All files are licensed as Creative Commons Attribution-NonCommercial-ShareAlike (CC BY-NC-SA). Screenshot from Fusion360 showing dimensions between screw holes Picture showing the CAD model for horizontal variant Picture showing designed parts deployed as intended (please ignore the lingering dust! üí®) models/combined.3mf: 3mf file models/horizontal.f3d: Horizontal STL: stl file models/vertical.f3d: Vertical STL: stl file Screenshot showing suggested print bed arrangement Picture showing the CAD model for vertical variant ","date":"2020-07-18","objectID":"/home-lab-simple-printable-cable-org/:2:0","tags":["fusion-360","has:download","organization"],"title":"home lab: simple printable cable org","uri":"/home-lab-simple-printable-cable-org/"},{"categories":["electronics-lab"],"content":"While doing the PoE related testing for this incident, it occurred to me that I never got around to sharing the files for a small modification to the popular RD6006 PSU. While drafting this post, I discovered that there appears to be a newer version of the RD6006: the 6012. As far as I can tell, they‚Äôre in the same ‚Äòfamily‚Äô and have the same dimensions so the CAD and related model files below should work w/ the RD6012 just as they do w/ the 6006, but i can only ‚Äòguarantee‚Äô that the CAD and related model files below will work with the RD6006. A version of this post appears on prusaprinters and thingiverse ","date":"2020-07-09","objectID":"/electronics-lab-enhanced-bench-psu/:0:0","tags":["fusion-360","has:download"],"title":"electronics lab: enhanced psu","uri":"/electronics-lab-enhanced-bench-psu/"},{"categories":["electronics-lab"],"content":"What A small enclosure for a PoE injector and QC 3.0 charger designed to sit on top of the RD6012 PSU ‚Äòkit‚Äô sold all over aliexpress and banggood. Assembled, it looks like this: As seen on AliExpress The RD6006 is incredibly versatile, but can only supply power for about 85% of the devices that make their way onto my ‚Äòhealing‚Äô bench. I wasn‚Äôt keen on taking up more valuable space with a device dedicated to PoE injection so finding a way to mod one into the PSU seemed like a good idea. Similarly, adding a versatile USB port seemed like a no-brainer as my favorite soldering iron is powered via QuickCharge 3. Three useful bench tools, one footprint, one consumed power outlet. What‚Äôs not to love? ","date":"2020-07-09","objectID":"/electronics-lab-enhanced-bench-psu/:1:0","tags":["fusion-360","has:download"],"title":"electronics lab: enhanced psu","uri":"/electronics-lab-enhanced-bench-psu/"},{"categories":["electronics-lab"],"content":"Printing: There are two components for this build: the ‚Äòplate‚Äô which rests on the top of the PSU case and has small ‚Äòfences‚Äô to fix the circuit boards in place. It‚Äôs the ‚Äòsalmon‚Äô colored component the ‚Äòlid‚Äô is the (mostly) transparent yellow component which holds the auxiliary power supplies (pink components) in place and keeps all voltages away from people. Colorized Components Relevant components, colored in F360 I used black PETG, but any material and at least 10% infill should be fine. Tune the layer height to taste. The ‚Äòplate‚Äô does not need any supports nor does the lid if printed in the suggested print orientation shown below üëá. I printed with settings optimized for speed so there was minimal sagging, but nothing substantial. What little there was didn‚Äôt interfere with clearance of any other internal component and was completely hidden. If you‚Äôre not comfortable with bridging long distances, you can optionally enforce support material from the build plate to the top of the lid or flip the lid upside down and use supports for the four feet where the screws go. Because any sagging would be hidden inside, suggested print orientation ","date":"2020-07-09","objectID":"/electronics-lab-enhanced-bench-psu/:2:0","tags":["fusion-360","has:download"],"title":"electronics lab: enhanced psu","uri":"/electronics-lab-enhanced-bench-psu/"},{"categories":["electronics-lab"],"content":"Components In addition to the miscellaneous wire and crimp connectors, there are two components used in this design: PoE injector QC 3.0 Charger ","date":"2020-07-09","objectID":"/electronics-lab-enhanced-bench-psu/:3:0","tags":["fusion-360","has:download"],"title":"electronics lab: enhanced psu","uri":"/electronics-lab-enhanced-bench-psu/"},{"categories":["electronics-lab"],"content":"Assembly I don‚Äôt have any pictures from the assembly üòû, but it‚Äôs not particularly difficult to figure out from the attached pictures. In general, the steps to take are: Print everything and clean up the parts as needed de-shell the PoE injector and QC3 charger. A plastic pry-tool or a few flat-head screwdrivers will help here! desolder the existing mains connections from both modules and solder on new ones. The new ones don‚Äôt need to be long, just a bit longer than the leads that came on the module PCBs! disconnect power from the assembled PSU and remove the case cover place the ‚Äòplate‚Äô onto the top of the PSU and use a pencil to mark all 5 holes on the cover remove the plate, drill out all 5 holes and use a file to smooth down any sharp edges on the big hole as that‚Äôs where the mains wires will go. A burr poking through insulation means the case may become energized @ mains voltages! üí• üíÄ crimp connectors onto wires and attach to the mains supply after the switch and fuse! place the ‚Äòplate‚Äô back onto the PSU cover run the wires through the new hole in the top of the PSU case and through the hole in the ‚Äòplate‚Äô add the PoE injector and QC3 module to the plate join the mains leads to the module leads. I used Wago connectors, but simple wirenuts or a screw terminal block will work. Use M3 screws to secure the lid to the plate and the PSU. I intentionally drilled the holes slightly too small so the screws would thread against the case. Not ideal, but works absolutely fine for something that‚Äôs not load-bearing or going to be repeatedly re-screwed. re-connect the IEC power connector and power on monitor for sounds and smells that indicate you screwed up. begin testing PoE and USB port for proper power. Just prior to seating the ‚Äòlid‚Äô you should have something like this: components seated and wired When all said and done, you‚Äôll get this: everything assembled and powered up ","date":"2020-07-09","objectID":"/electronics-lab-enhanced-bench-psu/:4:0","tags":["fusion-360","has:download"],"title":"electronics lab: enhanced psu","uri":"/electronics-lab-enhanced-bench-psu/"},{"categories":["electronics-lab"],"content":"Files The f360 file is‚Ä¶ a mess. I‚Äôm not going to share it here. Contact me if you really want it. The stl and 3mf files are below, though. As you can tell from the initials and date, this project was ‚Äòcompleted‚Äô awhile ago. For archive / posterity, all source files are included here. All files are licensed as Creative Commons Attribution-NonCommercial-ShareAlike (CC BY-NC-SA). everything assembled and powered up Relevant components, colored in F360 models/combined.3mf: 3mf file models/lid.stl: stl file models/plate.stl: stl file components seated and wired suggested print orientation As seen on AliExpress ","date":"2020-07-09","objectID":"/electronics-lab-enhanced-bench-psu/:5:0","tags":["fusion-360","has:download"],"title":"electronics lab: enhanced psu","uri":"/electronics-lab-enhanced-bench-psu/"},{"categories":["home-lab"],"content":"This is another brief ‚Äúi made a thing!‚Äù posts. ","date":"2020-07-05","objectID":"/home-lab-keystone-bracket/:0:0","tags":["fusion-360","has:download"],"title":"home lab: mini 'universal' patch panel","uri":"/home-lab-keystone-bracket/"},{"categories":["home-lab"],"content":"Version 2 Update 2020-12-12: I outgrew version 1! I needed a few more ports and didn‚Äôt have much time‚Ä¶ so I just scaled the part up to double the number of jacks. The links below and the thingiverse and prusaprinters links have been updated w/ the new STL files. Printing and attachment works exactly the same as with the 1x8 version. Rather than include the Fusion360 source, I have included a standard STEP file. Yes, I do need to re-do the cable runs; they're a mess ","date":"2020-07-05","objectID":"/home-lab-keystone-bracket/:1:0","tags":["fusion-360","has:download"],"title":"home lab: mini 'universal' patch panel","uri":"/home-lab-keystone-bracket/"},{"categories":["home-lab"],"content":"What Taking the side / rear of my rack off every time I needed to change which host(s) were connected to the monitor was starting to get old. Only recently did I realize that you can fit more than just RJ45 jacks in a Keystone Jack. A few measurements, a quick search through thingiverse and some CAD time later, this is the result. The model is tailored to my specific rack, but should be easily adoptable to any other dimensions. Import the Fusion360 model and then edit the first sketch in the timeline as needed and adjust the pattern on line step to adjust the number of keystone jacks. Of course, you can always just glue the print to whichever surface you need it mounted on as there‚Äôs plenty of broad/flat surface for adhesive if the two built-in screw holes won‚Äôt work! As is, the model has: 8 jacks 178.5mm from ‚Äòedge‚Äô to ‚Äòedge‚Äô between the two screw holes 6.5mm diameter for the holes as my rack uses M6 screws. Note: After printing the model you see in the pictures below, I added a small cutout which should make it easier to depress the clip on the ‚Äòmale‚Äô end of a keystone device from the ‚Äòuser facing‚Äô side as you‚Äôd typically find on a proper patch panel All in all, I‚Äôm quite happy with how it turned out: 8 jacks is more than enough for current and (projected!) future use. The only obvious improvement would be moving the numbers from the bottom to the top where there‚Äôs more room. As it is now, the perimeters around the numbers look a bit weird as they merge w/ the bottom edge that are flush w/ the rack and the top edges that are flush w/ the jacks. Many thanks to belfers for the Keystone model. The details are on the thingiverse and prusaprinters page. ","date":"2020-07-05","objectID":"/home-lab-keystone-bracket/:2:0","tags":["fusion-360","has:download"],"title":"home lab: mini 'universal' patch panel","uri":"/home-lab-keystone-bracket/"},{"categories":["home-lab"],"content":"Printing: Any material and at least 10% infill should be fine. No supports if you use the suggested print orientation shown in picture below. Tolerances on the jacks are somewhat tight so printing at a more accurate setting is probably going to be a good idea. ","date":"2020-07-05","objectID":"/home-lab-keystone-bracket/:3:0","tags":["fusion-360","has:download"],"title":"home lab: mini 'universal' patch panel","uri":"/home-lab-keystone-bracket/"},{"categories":["home-lab"],"content":"Files For archive / posterity, all source files are included here. All files are licensed as Creative Commons Attribution-NonCommercial-ShareAlike (CC BY-NC-SA). models/v1_keystone-bracket.3mf: 3mf file models/v1_keystone-bracket.f3z: f3z file Fusion360 Archive models/v1_keystone-bracket.stl: stl file models/v2.3mf: 3mf file models/v2.step: step file STEP file models/v2.stl: stl file Suggested print orientation Yes, I do need to re-do the cable runs; they're a mess ","date":"2020-07-05","objectID":"/home-lab-keystone-bracket/:4:0","tags":["fusion-360","has:download"],"title":"home lab: mini 'universal' patch panel","uri":"/home-lab-keystone-bracket/"},{"categories":["posts","troubleshooting"],"content":"A quick tale of troubleshooting a bizarre PoE related problem","date":"2020-07-01","objectID":"/poe-at-a-distance-ruined-my-cat5-speeds/","tags":["short-posts","home-automation","raspberry-pi","PoE"],"title":"PoE at a distance caused terrible cat5 speeds","uri":"/poe-at-a-distance-ruined-my-cat5-speeds/"},{"categories":["posts","troubleshooting"],"content":"This is a quick post for made in the hopes that some poor soul in the future will find it and save themselves some time. ","date":"2020-07-01","objectID":"/poe-at-a-distance-ruined-my-cat5-speeds/:0:0","tags":["short-posts","home-automation","raspberry-pi","PoE"],"title":"PoE at a distance caused terrible cat5 speeds","uri":"/poe-at-a-distance-ruined-my-cat5-speeds/"},{"categories":["posts","troubleshooting"],"content":"Background I‚Äôve been experimenting with a few different ways to surface various home automation controls in the appropriate place and at a good time. One prototype host is deployed behind a small LCD under some cabinets in a high traffic area. This host is a raspberry pi 4 with a PoE hat. It boots a very stripped down version of Raspberry Pi OS into a web browser running in Kiosk mode. It‚Äôs pretty simple and does many things well. There‚Äôs a few small issues that need to be addressed in the CAD files as well as some additional electronic improvements that should be made before I can publish the design / files. In any event, this host has been trouble-free until recently. Simple apt update transfers would take DAYS to complete, simple scp operations to other hosts on the LAN would trickle by at tens of kB/s. The web app that the host is primarily responsible for displaying would time out or fail to completely load resulting in some ‚Äúa-for-effort‚Äù graceful degradation. ","date":"2020-07-01","objectID":"/poe-at-a-distance-ruined-my-cat5-speeds/:1:0","tags":["short-posts","home-automation","raspberry-pi","PoE"],"title":"PoE at a distance caused terrible cat5 speeds","uri":"/poe-at-a-distance-ruined-my-cat5-speeds/"},{"categories":["posts","troubleshooting"],"content":"The Facts As soon as I bring up the wlan0 interface and bring down the eth0 interface performance is IMMEDIATELY restored. The web app is responsive and fully loads instantly, scp is fast like it should be on a LAN and apt update completes without any errors as fast as my internet connection will let it! Conclusion: The problem is not network related. Both the eth0 and wlan0 interface are on the same vLan so the bizarre behavior is not likely caused by a QoS policy or firewall rule. The rPi and a few other hosts a powered via a a 120 watt which is in the same closet as my core switch. Two terminations and about 200 feet of cat5 cable later, you get to the rPi host on the other side of the house. Continuity tester was used on every segment of the link to confirm the link is good. The segments of the link from the switch to the injector and to the patch-panel all use high quality pre-made cables, as does the final segment from the wall to the rPi. Shocker, they tested fine, just like the in-wall segment. Additionally, no other host on the PoE injector is misbehaving. No other host on the PoE injector is indicating that there‚Äôs not enough power, and the power supply feeding the injector isn‚Äôt even warm. Conclusion: The cables are certainly fine and the PoE injector is probably fine. Next, I disabled the PoE injector all together and use the USBC port on the rPi for power. It was just as performant as with WiFi! I did not expect this result, but it did certainly narrow down the possible problem areas. Conclusion: The problem is only present when the host is powered via PoE. I was very confident that the PoE injector was not the problem, but in order to be certain, I used a second cheap PoE injector that lives on my bench power supply. Turns out, the same slow speeds manifested with the second injector, too. Conclusion: The problem is not in the network, nor is it in the cables, nor is it in the injectors. This only leaves one candidate: the host. Unfortunately, there‚Äôs nothing about the host that screams ‚Äúi‚Äôm the problem!‚Äù. The microSD card is new and very fast. There‚Äôs nothing in the logs indicating a hardware failure. On-device performance (via non-networking benchmarks) is inline with what i‚Äôd expect. Here‚Äôs two additional facts from some brief testing I did a few weeks ago. I had more or less forgotten about them and only really remembered that: When I tried a fresh install of Ubuntu on a fresh microSD card‚Ä¶ same slow speeds. The host performs perfectly when plugged into other networks. I was confident then, that the rPi was not the issue and that something about the network was. But I just spent 3 hours systematically testing out every component of the network and concluding that the network is fine! Conclusion: I‚Äôm back where I started; angry and confused. The ‚Äúah ha!‚Äù moment didn‚Äôt come until i decided to try my second PoE injector at the client. Much to my surprise, it worked!. After a bit more testing, I determined that the PoE HAT on the rPi is ‚Äòfine‚Äô when the PoE source is CLOSE‚Ä¶ which probably explains the ‚Äòworks fine on other networks‚Äô fact above. That leaves just the ‚Äòproblem is OS independent‚Äô fact which - after thoroughly vetting every part of the network and PoE system - makes it pretty obvious that the problem must be between the rPi and the cat5 cable coming from the wall. There‚Äôs only the PoE HAT between the rPi and the cat5 cable coming from the wall. I borrowed a PoE HAT from another host elsewhere on the network and the problematic rPi started behaving again. Network transfer speeds were appropriate and the web app / dashboard was performant again! Conclusion: the PoE HAT powering a home automation dashboard has failed in such a way that makes the eth0 interface all but useless. replacing the HAT solved the problem. ","date":"2020-07-01","objectID":"/poe-at-a-distance-ruined-my-cat5-speeds/:2:0","tags":["short-posts","home-automation","raspberry-pi","PoE"],"title":"PoE at a distance caused terrible cat5 speeds","uri":"/poe-at-a-distance-ruined-my-cat5-speeds/"},{"categories":["posts","troubleshooting"],"content":"TL;DR: Several months ago, the home automation dashboard displayed on a PoE powered rPi 4 started to act up. Further investigation showed absolute crap network performance from the host to any other point on the LAN or WAN. After testing each component in isolation, the PoE HAT was the only reaming suspect. After further investigation, the failure mode is not present when the PoE source is close to the client, only when the source is far from the client. So if you have a PoE powered rPi project out there w/ abysmal eth0 performance, try replacing the PoE hat‚Ä¶ Also, if anybody knows why this happened, I‚Äôd love to know. ","date":"2020-07-01","objectID":"/poe-at-a-distance-ruined-my-cat5-speeds/:3:0","tags":["short-posts","home-automation","raspberry-pi","PoE"],"title":"PoE at a distance caused terrible cat5 speeds","uri":"/poe-at-a-distance-ruined-my-cat5-speeds/"},{"categories":["posts"],"content":"*tap* *tap* Is this thing on?","date":"2020-06-27","objectID":"/hello-world/","tags":["short-posts"],"title":"Hello World","uri":"/hello-world/"},{"categories":["posts"],"content":"Blowing the dust off the domain, trying Hugo out. tap tap Is this thing on? ","date":"2020-06-27","objectID":"/hello-world/:0:0","tags":["short-posts"],"title":"Hello World","uri":"/hello-world/"},{"categories":["home-lab"],"content":"A while back, I traded writing salt states and managing systemd .service files wrapping podman for the ‚Äòsimplicity‚Äô of running kubernetes in my home lab. Jury is still out on weather or not the switch was worth it. The cluster is a hodgepodge of second hand Intel NUCs and other scavenged compute hardware i‚Äôve collected over the past few years. Some of it runs on 12v, some of it on 19v. For each node, there‚Äôs a dedicated switch mode power supply. Each supply takes up an outlet and brings a bit of cable mgmt related clutter. The solution is consolidation. So thats how this project came to be. ","date":"2020-06-27","objectID":"/home-lab-consolidated-psu/:0:0","tags":["fusion-360","has:download"],"title":"home lab: consolidating multiple PSUs","uri":"/home-lab-consolidated-psu/"},{"categories":["home-lab"],"content":"What A set of 3d printable parts to compactly combine two LRS-350 PSUs into a compact unit with optional voltage and current displays. The details are on the thingiverse and prusaprinters page. ","date":"2020-06-27","objectID":"/home-lab-consolidated-psu/:1:0","tags":["fusion-360","has:download"],"title":"home lab: consolidating multiple PSUs","uri":"/home-lab-consolidated-psu/"},{"categories":["home-lab"],"content":"Files For archive / posterity, all source files are included here. All files are licensed as Creative Commons Attribution-NonCommercial-ShareAlike (CC BY-NC-SA). Fully Assembled; ignore the messy workbench component view, from rear component view, from front Print Bed arrangement, green is support structures meter panel print orientation Consolidated PSU CAD: f3z file Fusion360 Archive Box: stl file Brace: stl file Core Components: 3mf file Lid: stl file (Optional) Meter Panel: 3mf file (Optional) Meter Panel: stl file using slic3r too remove the second meter cutout ","date":"2020-06-27","objectID":"/home-lab-consolidated-psu/:2:0","tags":["fusion-360","has:download"],"title":"home lab: consolidating multiple PSUs","uri":"/home-lab-consolidated-psu/"},{"categories":null,"content":"The best way to get in touch is to email me ‚úâÔ∏è. There are a few clever ways to obfuscate email addresses to prevent spam. Unfortunately, they all rely on javascript or otherwise can break screen readers and other tools that are often used by disabled persons. So with that in mind, here‚Äôs a simple algorithm to derive the best email to contact me Visit the home page Split my name into $first_name and $last_name Send your email to contact@$fist_name$last_name.com If you had observed the name Bobby Tables on the home page, you would email contact@bobbytables.com. ","date":"0001-01-01","objectID":"/contact/:0:0","tags":null,"title":"","uri":"/contact/"},{"categories":null,"content":"Security and Privacy related things For sensitive topics, especially any security issues in any software I am responsible for, please use PGP to get in touch with me. The easiest way to do so is through KeyBase ","date":"0001-01-01","objectID":"/contact/:0:1","tags":null,"title":"","uri":"/contact/"},{"categories":null,"content":"I used to curate a r√©sum√© as an excuse to learn LaTex but have found over the years that most positions don‚Äôt actually look at the r√©sum√©, they look at the summary that their ATS generates after ingesting the resume. Not all ATS platforms can reliably ingest the PDF export from LinkedIn that has been my defacto resume since I stopped maintaining the LaTex version, so I offer my r√©sum√© in a few formats for other workflows/needs. All the formats below are parsed / rendered based off of the the parent source - LinkedIn - which is kept up to date and rather descriptive/detailed. LinkedIn JSON document. Complies with the JSON Resume schema HTML document which can be easily turned into a PDF if you so choose ","date":"0001-01-01","objectID":"/resume/:0:0","tags":null,"title":"","uri":"/resume/"}]