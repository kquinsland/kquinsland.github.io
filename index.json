[{"categories":null,"content":"Just the docking station for now, robot coming soon","date":"2023-05-06","objectID":"/roborock-s8-pro-ultra-dock-teardown/","tags":["teardown"],"title":"Roborock S8 Pro Ultra Teardown","uri":"/roborock-s8-pro-ultra-dock-teardown/"},{"categories":null,"content":"Roborock S8 teardown I recently acquired the new S8 from Roborock to replace my rapidly failing roomba. While I am patiently waiting for Dennis and Hypfer to add Valetudo support, I thought I’d have a peek inside to see if this model will be any more serviceable or maintainable than my current vacuum. From what I’m told, the S7 and the S8 are supposed to be pretty similar so here’s to hoping that it’s not too much more of a wait. In the mean time this post is going “live” with photos of the docking station internals and a few photos of the vacuum. I ran out of time to finish the S8 teardown but I’ll update this post when I have made progress. Assuming the S8 is similar to the S7, I imagine that the procedure and internals will be similar. ","date":"2023-05-06","objectID":"/roborock-s8-pro-ultra-dock-teardown/:0:0","tags":["teardown"],"title":"Roborock S8 Pro Ultra Teardown","uri":"/roborock-s8-pro-ultra-dock-teardown/"},{"categories":null,"content":"The dock Fortunately, it’s pretty easy to open the huge charging station/dock up. Really, you just need a single philips screwdriver for the ~10 screws on the rear. There is one sticker covering a screw on the rear but it’s not the “tamper-evident” kind so it should be easy enough to replace if needed. Excess cable slack can be looped around the rear of the docking station to minimize errant cords. Note the white sticker covering the screw in the middle on the bottom. Near the mains input is a simple USB-C port. dmesg doesn’t show any signs of life on the port both with and without the mains cable plugged in. I have not yet tried with the robot docked so there may be some simple handshake that’s needed before this port becomes interesting. With screws removed, the rear panel lifts off to reveal the internals. The overall layout seems logical and there’s lots of room between components which is nice to see. Each component is well labeled secured to the main body with standard screws and Zip-Ties. In addition to the small features molded into the body for cable management, the cables to the components that move are protected with an easy to remove cable chain. The strong vaccuum motor that empties the mobile dustbin into the larger bin is powered directly via mains but isn’t easily accessible. The mains PSU is nothing special to write home about. There is a low-voltage connection right next to the mains cabling that heads down to the main “evacuation” suction motor but there is no obvious relay. Here’s a closeup of the main control board for the docking station. Each of the connectors around the edge is a different size/number of pins os it’s virtually impossible to plug the wrong cable in to the wrong port - nice! The conformal coating does obscure component IDs and traces, but you can still get a high-level idea of the topology. More than likely, all sensors and actuators are controlled by the Nation N32G455 and the ESP32 is (probably) just there for communicating status to the robot and/or cloud. From this angle it’s a bit easier to see where the USB-C traces go but since the ESP32 module is BGA packaged and everything is conformally coated, I skipped the tedious work of trying to beep things out. At least the conformal coating is pretty easy to rub off the IC. ","date":"2023-05-06","objectID":"/roborock-s8-pro-ultra-dock-teardown/:1:0","tags":["teardown"],"title":"Roborock S8 Pro Ultra Teardown","uri":"/roborock-s8-pro-ultra-dock-teardown/"},{"categories":null,"content":"The vacuum More photos coming in a later update, but here’s what I have so far. It would be better if Roborock provided tools to verify this claim, but at least they're trying to address consumer privacy concerns. Like with the S7, the panel surrounding the LIDAR puck can be pried off. Nice to see that the labeling for which roller goes into which position is molding into the robot body for ultimate wear-resistance. And here’s a shot of the LIDAR pcb. As for getting into the rest of the robot, it’s not that difficult. Standard “keep track of all the screws and take photos at each step” advice applies here. You can follow the the existing S7 teardown guides for the initial steps but once you remove the front bumper just look for screws that hold the top lid onto the body of the robot. There are two obvious ones, two next to the castor wheel and a few more hiding under the mop pad. With those removed, the lid slides off pretty easily to reveal the PCB: There’s a few interesting things to note here: The roller brush assembly and mop head are lifted up via small steel cables. You can see the actuator motor for the main brush assembly just off of the top left corner of the PCB. The steel cable runs through the white plastic guides which route it around other internal components. The “space claim” portion of this design must have been pretty interesting :). There are only two small locating features for the PCB. When installing the PCB back in to the chassis start with the small plastic peg between the screw and the micro USB port. If you seat this corner of the PCB first and everything else should fall into place nicely. The conformal coating is annoying but here’s the big players: An Allwinner MR813 runs the show. Samsung KLM4G1 for RAM. A GigaDevice GDQ2BFAA-CE 4Gb flash chip for OS storage. A GDQ2BFAA handles everything low level. WiFi provided by RTL8189FTV. ","date":"2023-05-06","objectID":"/roborock-s8-pro-ultra-dock-teardown/:2:0","tags":["teardown"],"title":"Roborock S8 Pro Ultra Teardown","uri":"/roborock-s8-pro-ultra-dock-teardown/"},{"categories":null,"content":"Yet another 'karl puts ESPHome on something cheap from AliExpress' posts.","date":"2023-04-21","objectID":"/dingtian-2ch-relay-with-esphome/","tags":["Tasmota","esphome","home-assistant"],"title":"ESPHome on dingtian-tech relay modules","uri":"/dingtian-2ch-relay-with-esphome/"},{"categories":null,"content":" This is another one of those quick “I wish that was easier to find when I was googling it” posts. For a project, I needed a small relay module to switch a few mains loads. I chose this generic looking relay module from AliExpress because it was powered by an ESP32 and featured ethernet connectivity. AliExpress is full of generic looking relay modules but this one is branded dingtian-tech The device came with an obvious programming header right next to the ESP32 so I thought it would be a 5 minute job to flash Tasmota and probe the GPIOs. N.O.P.E. This post is a super condensed version of my notes that I’m posting in the off chance that they’re useful for somebody else. ","date":"2023-04-21","objectID":"/dingtian-2ch-relay-with-esphome/:0:0","tags":["Tasmota","esphome","home-assistant"],"title":"ESPHome on dingtian-tech relay modules","uri":"/dingtian-2ch-relay-with-esphome/"},{"categories":null,"content":"ESP32 Secure Boot No matter what I did to flash the ESP32 module, it would always boot loop with output like this: rst:0x1 (POWERON_RESET),boot:0x7 (DOWNLOAD_BOOT(UART0/UART1/SDIO_REI_REO_V2))␍␊ waiting for download␍␊ \u003cbreak\u003e \u003c0xff\u003eets Jun 8 2016 00:22:57␍␊ I knew that I didn’t brick anything because the ESP would boot right up as soon as i re-flashed the original dump. Turns out, there’s a few reasons why this might happen but in this case, it’s because secure boot was enabled. Because at least a decent chunk of the flash dump I took was in plain text, I didn’t thing that there was any flash protection in place but sure enough, at least some of the protection features have been enabled: ❯ espefuse.py summary Connecting... Detecting chip type... Unsupported detection protocol, switching and trying again... Connecting... Detecting chip type... ESP32 espefuse.py v3.3.1 === Run \"summary\" command === EFUSE_NAME (Block) Description = [Meaningful Value] [Readable/Writeable] (Hex Value) ---------------------------------------------------------------------------------------- Calibration fuses: BLK3_PART_RESERVE (BLOCK0): BLOCK3 partially served for ADC calibration data = False R/W (0b0) ADC_VREF (BLOCK0): Voltage reference calibration = 1114 R/W (0b00010) Config fuses: XPD_SDIO_FORCE (BLOCK0): Ignore MTDI pin (GPIO12) for VDD_SDIO on reset = False R/W (0b0) XPD_SDIO_REG (BLOCK0): If XPD_SDIO_FORCE, enable VDD_SDIO reg on reset = False R/W (0b0) XPD_SDIO_TIEH (BLOCK0): If XPD_SDIO_FORCE \u0026 XPD_SDIO_REG = 1.8V R/W (0b0) CLK8M_FREQ (BLOCK0): 8MHz clock freq override = 54 R/W (0x36) SPI_PAD_CONFIG_CLK (BLOCK0): Override SD_CLK pad (GPIO6/SPICLK) = 0 R/W (0b00000) SPI_PAD_CONFIG_Q (BLOCK0): Override SD_DATA_0 pad (GPIO7/SPIQ) = 0 R/W (0b00000) SPI_PAD_CONFIG_D (BLOCK0): Override SD_DATA_1 pad (GPIO8/SPID) = 0 R/W (0b00000) SPI_PAD_CONFIG_HD (BLOCK0): Override SD_DATA_2 pad (GPIO9/SPIHD) = 0 R/W (0b00000) SPI_PAD_CONFIG_CS0 (BLOCK0): Override SD_CMD pad (GPIO11/SPICS0) = 0 R/W (0b00000) DISABLE_SDIO_HOST (BLOCK0): Disable SDIO host = False R/W (0b0) Efuse fuses: WR_DIS (BLOCK0): Efuse write disable mask = 388 R/W (0x0184) RD_DIS (BLOCK0): Efuse read disable mask = 3 R/W (0x3) CODING_SCHEME (BLOCK0): Efuse variable block length scheme = NONE (BLK1-3 len=256 bits) R/W (0b00) KEY_STATUS (BLOCK0): Usage of efuse block 3 (reserved) = False R/W (0b0) Identity fuses: MAC (BLOCK0): Factory MAC Address = 78:21:84:56:b1:50 (CRC 0x6c OK) R/W MAC_CRC (BLOCK0): CRC8 for factory MAC address = 108 R/W (0x6c) CHIP_VER_REV1 (BLOCK0): Silicon Revision 1 = True R/W (0b1) CHIP_VER_REV2 (BLOCK0): Silicon Revision 2 = False R/W (0b0) CHIP_VERSION (BLOCK0): Reserved for future chip versions = 2 R/W (0b10) CHIP_PACKAGE (BLOCK0): Chip package identifier = 1 R/W (0b001) CHIP_PACKAGE_4BIT (BLOCK0): Chip package identifier #4bit = False R/W (0b0) MAC_VERSION (BLOCK3): Version of the MAC field = 0 R/W (0x00) Security fuses: FLASH_CRYPT_CNT (BLOCK0): Flash encryption mode counter = 1 R/- (0b0000001) UART_DOWNLOAD_DIS (BLOCK0): Disable UART download mode (ESP32 rev3 only) = False R/- (0b0) FLASH_CRYPT_CONFIG (BLOCK0): Flash encryption config (key tweak bits) = 15 R/W (0xf) CONSOLE_DEBUG_DISABLE (BLOCK0): Disable ROM BASIC interpreter fallback = True R/W (0b1) ABS_DONE_0 (BLOCK0): Secure boot V1 is enabled for bootloader image = True R/W (0b1) ABS_DONE_1 (BLOCK0): Secure boot V2 is enabled for bootloader image = False R/W (0b0) JTAG_DISABLE (BLOCK0): Disable JTAG = True R/W (0b1) DISABLE_DL_ENCRYPT (BLOCK0): Disable flash encryption in UART bootloader = True R/W (0b1) DISABLE_DL_DECRYPT (BLOCK0): Disable flash decryption in UART bootloader = True R/W (0b1) DISABLE_DL_CACHE (BLOCK0): Disable flash cache in UART bootloader = True R/W (0b1) BLOCK1 (BLOCK1): Flash encryption key = ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? -/- BLOCK2 (BLOCK2): Secure boot key = ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?","date":"2023-04-21","objectID":"/dingtian-2ch-relay-with-esphome/:1:0","tags":["Tasmota","esphome","home-assistant"],"title":"ESPHome on dingtian-tech relay modules","uri":"/dingtian-2ch-relay-with-esphome/"},{"categories":null,"content":"Tasmota And here’s the working Tasmota template: {\"NAME\":\"2chFinal\",\"GPIO\":[0,0,224,0,0,0,1,1,0,0,0,0,225,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,0,32,0,160,0,0,161],\"FLAG\":0,\"BASE\":1} And visually: This configuration works even though GPIO34 should be Button_i. ","date":"2023-04-21","objectID":"/dingtian-2ch-relay-with-esphome/:2:0","tags":["Tasmota","esphome","home-assistant"],"title":"ESPHome on dingtian-tech relay modules","uri":"/dingtian-2ch-relay-with-esphome/"},{"categories":null,"content":"ESPHome This is a bare-bones config that covers all the core/critical functionality. esp32: # See: https://docs.platformio.org/en/latest/boards/espressif32/esp32dev.html board: esp32dev # Above the \"FACTORY\" button there are two LEDs. One is wired in series with the switch and the other is controllable via GPIO. Use the second one as a status indicator. status_led: pin: number: GPIO32 inverted: true ethernet: type: JL1101 mdc_pin: GPIO23 mdio_pin: GPIO18 phy_addr: 0 clk_mode: GPIO17_OUT # The PHY chip has a pin labeled TX_EN that goes to GPIO 21 on ESP # and the RSTn pin on the phy goes to GPIO0 ## # Datasheet indicates the RSTn should be LOW to disable the phy and default is high power_pin: GPIO0 binary_sensor: # The \"factory reset\" button - platform: gpio name: \"User Button\" pin: number: GPIO34 inverted: true # The two sets of contacts for manual trigger # input is pulled up to 3.3V by default. - name: \"User Input 1\" platform: gpio pin: number: GPIO36 inverted: true - name: \"User Input 2\" platform: gpio pin: number: GPIO39 inverted: true switch: - name: \"Relay 1\" platform: gpio pin: GPIO2 - name: \"Relay 2\" platform: gpio pin: GPIO16 ","date":"2023-04-21","objectID":"/dingtian-2ch-relay-with-esphome/:3:0","tags":["Tasmota","esphome","home-assistant"],"title":"ESPHome on dingtian-tech relay modules","uri":"/dingtian-2ch-relay-with-esphome/"},{"categories":null,"content":"A (relatively) straightforward guide to installing Frigate NVR without Docker Compose.","date":"2023-03-04","objectID":"/frigate-install/","tags":["frigate","home-assistant","systemd","co-author/chatGPT"],"title":"Frigate From Scratch guide","uri":"/frigate-install/"},{"categories":null,"content":" FYI Portions of this post was edited for clarity with the help of ChatGPT. The Frigate NVR project is a relatively new entrant to the home security camera DVR space. Like most immature yet popular software, it has a killer feature - very good object detection that just works™ and robust Home Assistant integration. Unfortunately, the Frigate docs are a bit spartan particularly around installing; they more or less start with “now that you’ve installed it, let’s go over configuring / using …”. While this does seem like a rather import omission, it’s somewhat intentional. This is because Frigate is only distributed as a Docker container so installing really boils down to “get a computer that runs docker and then make sure docker run ... is executed when you want”. Most of the existing guides out there all use docker-compose with only some minor attention paid to supervisory configuration: FRIGATE NVR Project with Seeed Odyssey Frigate NVR: Linux Manual Install installing frigate from scratch guide #4041 This document isn’t going to introduce anything new or innovative but should offer an alternative that closely tracks the way I did it. ","date":"2023-03-04","objectID":"/frigate-install/:0:0","tags":["frigate","home-assistant","systemd","co-author/chatGPT"],"title":"Frigate From Scratch guide","uri":"/frigate-install/"},{"categories":null,"content":"Goal This post is going to cover the steps taken to get a host that: runs the Frigate docker container via systemd uses a coral.ai edge TPU for accelerated object detection records footage on a network mounted file share This post is not going to cover details that are likely specific to your deployment or are whole posts on their own: host or camera hardware selection. camera placement host setup tasks like installing OS configuring frigate to use your specific cameras integrating frigate with Home Assistant ","date":"2023-03-04","objectID":"/frigate-install/:1:0","tags":["frigate","home-assistant","systemd","co-author/chatGPT"],"title":"Frigate From Scratch guide","uri":"/frigate-install/"},{"categories":null,"content":"Prep I’m going to assume that you’ve already got a suitable host for running Frigate and that you have already set it up as to your liking; ssh keys, $hostname set, timezone and ntp servers set up … etc. I used a modern Intel N6005 system running Ubuntu 22.04 but the general process should be very similar for you and may even be identical if you use a debian based OS on similar hardware. ","date":"2023-03-04","objectID":"/frigate-install/:2:0","tags":["frigate","home-assistant","systemd","co-author/chatGPT"],"title":"Frigate From Scratch guide","uri":"/frigate-install/"},{"categories":null,"content":"Install Docker Installing the bare docker runtime is pretty straight forward. As this is a debian based host, I followed the apt repo method. Make sure the system is up to date before installing anything new - if something goes wrong and breaks your system you’ll have an easier time figuring out what needs fixing. karl@nvr:~$ sudo -i [sudo] password for karl: root@nvr:~# apt update; apt dist-upgrade -y; apt autoremove -y; apt autoclean -y \u003c...\u003e root@nvr:~# cat /var/run/reboot-required.pkgs linux-image-5.19.0-35-generic linux-base root@nvr:~# reboot Post update, install a subset of the docker packages: karl@nvr:~$ sudo mkdir -m 0755 -p /etc/apt/keyrings karl@nvr:~$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg karl@nvr:~$ echo \\ \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list \u003e /dev/null karl@nvr:~$ sudo apt update; sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin \u003c...\u003e After this operation, 401 MB of additional disk space will be used. Do you want to continue? [Y/n] Y \u003c...\u003e And then check signs of life: karl@nvr:~$ sudo docker run hello-world \u003c...\u003e Status: Downloaded newer image for hello-world:latest Hello from Docker! This message shows that your installation appears to be working correctly. \u003c...\u003e With that, docker is good to go and we can move on to the other prerequisites. ","date":"2023-03-04","objectID":"/frigate-install/:2:1","tags":["frigate","home-assistant","systemd","co-author/chatGPT"],"title":"Frigate From Scratch guide","uri":"/frigate-install/"},{"categories":null,"content":"Create Frigate User It’s good practice to create dedicated users with limited permissions to run the service(s) under. Create the user and verify that the user does not need elevated credentials to talk to docker: karl@nvr:~$ sudo useradd --comment \"service user for Frigate NVR\" --groups docker --system --shell /usr/bin/bash frigate karl@nvr:~$ sudo -i root@nvr:~# su - frigate su: warning: cannot change directory to /home/frigate: No such file or directory frigate@nvr:/root$ groups frigate docker frigate@nvr:/root$ docker container list -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES dd7a5d1694c7 hello-world \"/hello\" 4 minutes ago Exited (0) 4 minutes ago mystifying_yalow Quite note about docker security Yes, I am aware that - because the frigate user can invoke docker commands directly - it isn’t difficult for the frigate user to escalate credentials to those of root. Running the docker daemon in rootless mode or an alternative ’non-root’ container management tool is one way to eliminate this risk but is beyond the scope of this post. As always, defense in depth; this frigate host is appropriately firewalled off from the rest of the network. After docker is installed and the frigate user is added to the docker group, the next pre-requisite is storage for Frigate recordings. ","date":"2023-03-04","objectID":"/frigate-install/:2:2","tags":["frigate","home-assistant","systemd","co-author/chatGPT"],"title":"Frigate From Scratch guide","uri":"/frigate-install/"},{"categories":null,"content":"Create Mounts Tip You can skip this step if you do not wish to use remote storage for the Frigate configuration and recordings. Storage quotas Frigate does not have sophisticated controls for configuring how long recordings are kept so you are encouraged to set up a storage quota for whatever disk/mount/share you use for network recordings. If you are going the network share route, the software on the NAS likely has this functionality. If you are going with local storage, the simplest way to enforce a quota is to use a dedicated partition. Using .mount files, it is trivial to have systemd mount the network share before starting Frigate. I chose to use a NFS share as both the NAS and the Frigate host are *NIX based and file system permissions tend to work a lot cleaner over NFS compared to Samba. If you run into errors related to the database that frigate uses, you may consider re-locating the database to a local mount. The technique outlined below will work for Samba shares as well but the .mount files will be configured slightly differently and you’ll need to install slightly different software: karl@nvr:~$ sudo apt install nfs-common # Only needed if you use SMB shares. Without this package, you will likely get obscure errors related to hostname resolution # See: https://askubuntu.com/questions/373340/ubuntu-server-13-10-cant-mount-hard-drive-that-is-on-my-router/374699#374699 karl@nvr:~$ sudo apt-get install cifs-utils With the correct smb/nfs packages installed, tell systemd how to mount the network share locally automatically: # Create path on host karl@nvr:~$ sudo mkdir -p /mnt/frigate karl@nvr:~$ sudo chown -R frigate /mnt/frigate karl@nvr:~$ ls -lah /mnt/frigate/ total 8.0K drwxr-xr-x 2 frigate root 4.0K Mar 2 08:37 . drwxr-xr-x 3 root root 4.0K Mar 2 08:37 .. # Create the mount files karl@nvr:~$ sudo $EDITOR /etc/systemd/system/mnt-frigate.mount karl@nvr:~$ sudo $EDITOR /etc/systemd/system/mnt-frigate.automount # And apply them karl@nvr:~$ sudo systemctl daemon-reload karl@nvr:~$ sudo systemctl enable mnt-frigate.moun karl@nvr:~$ sudo systemctl enable mnt-frigate.automount karl@nvr:~$ sudo systemctl start mnt-frigate.mount karl@nvr:~$ sudo systemctl start mnt-frigate.automount The /etc/systemd/system/mnt-frigate.mount file looks like this: [Unit] Description=Mount Frigate NFS share share locally for frigate docker container Requires=systemd-networkd.service After=network-online.target Wants=network-online.target [Mount] What=yourServerIPHere:/path/to/your/nfs/share/here Where=/mnt/frigate Type=nfs Options=default TimeoutSec=5 [Install] WantedBy=multi-user.target And the /etc/systemd/system/mnt-frigate.automount looks like this: [Unit] Description=automount for frigate [Automount] Where=/mnt/frigate TimeoutIdleSec=0 [Install] WantedBy=multi-user.target After systemctl start/enable ... the mounts should be up and running. Use systemctl status to check that things worked properly and use journalctl to check logs if things went wrong. Ideally you’ll have something that looks like this: root@nvr:~# systemctl status mnt-frigate.mount ● mnt-frigate.mount - Mount Frigate NFS share share locally for frigate docker container Loaded: loaded (/proc/self/mountinfo; enabled; preset: enabled) Active: active (mounted) since \u003c...\u003e TriggeredBy: ● mnt-frigate.automount Where: /mnt/frigate \u003c...\u003e At this point, all the basic pre-requisites are satisfied: a frigate specific user can run docker run ... commands and systemd will automatically mount the network share locally. ","date":"2023-03-04","objectID":"/frigate-install/:2:3","tags":["frigate","home-assistant","systemd","co-author/chatGPT"],"title":"Frigate From Scratch guide","uri":"/frigate-install/"},{"categories":null,"content":"Coral.ai edge TPU Tip Skip this step if you are not using PCI-E based edge TPU nodes. As mentioned at the top, one of the features that makes Frigate so attractive is how easy it is to use dedicated hardware for image/object classification. I am using a PCI-Express based TPU so there’s a little bit more wor required to successfully pass a PCIe device into a docker container. Fortunately this process is a lot simpler than it used to be and the google provided instructions are pretty clear: # Confirm there is no apex driver present already. karl@nvr:~$ sudo lsmod | grep apex # Add apt repos karl@nvr:~$ echo \"deb https://packages.cloud.google.com/apt coral-edgetpu-stable main\" | sudo tee /etc/apt/sources.list.d/coral-edgetpu.list deb https://packages.cloud.google.com/apt coral-edgetpu-stable main # Install the driver karl@nvr:~$ curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add - \u003c...\u003e karl@nvr:~$ sudo apt-get update; sudo apt-get install gasket-dkms libedgetpu1-std Get:1 https://packages.cloud.google.com/apt coral-edgetpu-stable InRelease [6,332 B] \u003c...\u003e The following additional packages will be installed: build-essential bzip2 cpp cpp-12 dctrl-tools dh-dkms dkms dpkg-dev fakeroot fontconfig-config fonts-dejavu-core g++ g++-12 gcc \u003c...\u003e Do you want to continue? [Y/n] Y \u003c...\u003e After install, udev rules are needed to make sure the proper driver is loaded: # Confirm file does not exist karl@nvr:~$ sudo cat /etc/udev/rules.d/65-apex.rules cat: /etc/udev/rules.d/65-apex.rules: No such file or directory karl@nvr:~$ sudo sh -c \"echo 'SUBSYSTEM==\\\"apex\\\", MODE=\\\"0660\\\", GROUP=\\\"apex\\\"' \u003e\u003e /etc/udev/rules.d/65-apex.rules\" # Add the `frigate` user to the `apex` group so it can access the \"virtual\" PCIe devices karl@nvr:~$ sudo groupadd -U frigate apex karl@nvr:~$ sudo groups frigate frigate : frigate docker apex # Cleanest way to make sure driver and udev rules work is to reboot karl@nvr:~$ sudo reboot Checking that the apex driver is properly loaded is quick and painless: # I have a \"dual\" TPU so two devices show up. If you only have a \"single\" TPU, only one will show up. karl@nvr:~$ sudo lspci -nn | grep 089a [sudo] password for karl: 03:00.0 System peripheral [0880]: Global Unichip Corp. Coral Edge TPU [1ac1:089a] 04:00.0 System peripheral [0880]: Global Unichip Corp. Coral Edge TPU [1ac1:089a] karl@nvr:~$ sudo ls /dev/apex_* /dev/apex_0 /dev/apex_1 And with that, all the core/extended pre-requisites are done and the remaining work is actually pretty minimal. ","date":"2023-03-04","objectID":"/frigate-install/:2:4","tags":["frigate","home-assistant","systemd","co-author/chatGPT"],"title":"Frigate From Scratch guide","uri":"/frigate-install/"},{"categories":null,"content":"Install After the pre-requisites are satisfied so all that’s left is the .unit file which will wrap the docker run commands. ","date":"2023-03-04","objectID":"/frigate-install/:3:0","tags":["frigate","home-assistant","systemd","co-author/chatGPT"],"title":"Frigate From Scratch guide","uri":"/frigate-install/"},{"categories":null,"content":"EnvironmentFile Frigate supports env-var substitution in it’s configuration file like so: mqtt: host: mqtt.server.com user: {FRIGATE_SOME_KEY_HERE} The configuration file - sans sensitive information - can now be safely checked in to source control. Create a file just for holding our env-vars: karl@nvr:~$ sudo mkdir -p /etc/frigate [sudo] password for karl: karl@nvr:~$ sudo touch /etc/frigate/secrets karl@nvr:~$ sudo chown -R frigate:frigate /etc/frigate karl@nvr:~$ sudo chmod -R 0750 /etc/frigate karl@nvr:~$ sudo ls -lah /etc/frigate/ total 12K drwxr-x--- 2 frigate frigate 4.0K Mar 4 16:13 . drwxr-xr-x 110 root root 4.0K Mar 4 15:16 .. -rwxr-x--- 1 frigate frigate 356 Mar 4 16:13 secrets The secrets file is simple key=value format: karl@nvr:~$ sudo cat /etc/frigate/secrets # Note: frigate \u003c 0.12 does not support env-var for mqtt.user; set it here/now for use in the future. FRIGATE_MQTT_USER=frigate FRIGATE_MQTT_PASSWORD=ChangeMe FRIGATE_CAM01_RTSP_USER=frigate FRIGATE_CAM01_RTSP_PASS=changeme Warning The use of env-var substitution for the username field in the MQTT section of the config requires frigate 0.12 or higher. At the time of writing (2023.03), the latest stable release is 0.11. Some additional details in this GH issue. ","date":"2023-03-04","objectID":"/frigate-install/:3:1","tags":["frigate","home-assistant","systemd","co-author/chatGPT"],"title":"Frigate From Scratch guide","uri":"/frigate-install/"},{"categories":null,"content":"Systemd Unit for Frigate The /etc/systemd/system/frigate.service file: [Unit] Description=Frigate NVR # Don't start until after docker is healthy and the nfs share is mounted After=docker.service Requires=docker.service Requires=mnt-frigate.mount [Service] User=frigate Group=frigate TimeoutStartSec=0 Restart=always # We want to start with a fresh container every time ExecStartPre=-/usr/bin/docker exec %n stop ExecStartPre=-/usr/bin/docker rm %n ExecStartPre=/usr/bin/docker pull blakeblackshear/frigate:stable # Expose the web UI on port 80 to keep things a bit cleaner ExecStart=/usr/bin/docker run --rm --name %n \\ --env-file /etc/frigate/secrets \\ --mount type=tmpfs,target=/tmp/cache,tmpfs-size=1000000000 \\ --device /dev/dri/renderD128 \\ --device /dev/apex_0:/dev/apex_0 \\ --device /dev/apex_1:/dev/apex_1 \\ --shm-size=64m \\ -v /mnt/frigate/storage:/media/frigate \\ -v /mnt/frigate/config:/config:ro \\ -v /etc/localtime:/etc/localtime:ro \\ -p 80:5000 \\ -p 1935:1935 \\ blakeblackshear/frigate:stable [Install] WantedBy=default.target Then enable/start the service karl@nvr:~$ sudo systemctl enable frigate.service Created symlink /etc/systemd/system/default.target.wants/frigate.service → /etc/systemd/system/frigate.service. karl@nvr:~$ sudo systemctl start frigate.service \u003c...\u003e karl@nvr:~$ sudo systemctl status frigate ● frigate.service - Frigate NVR Loaded: loaded (/etc/systemd/system/frigate.service; enabled; preset: enabled) Active: active (running) since \u003c...\u003e CGroup: /system.slice/frigate.service └─27104 /usr/bin/docker run --rm --name frigate.service --mount type=tmpfs,target=/tmp/cache,tmpfs-size=1000000000 --device /dev/dri/renderD128 --device /dev/apex_0:/dev/apex_0 --device /dev/apex_1:/dev/apex_1 --shm-size=\u003e And that’s all there is to it :). Hopefully that helps! ","date":"2023-03-04","objectID":"/frigate-install/:3:2","tags":["frigate","home-assistant","systemd","co-author/chatGPT"],"title":"Frigate From Scratch guide","uri":"/frigate-install/"},{"categories":null,"content":"And getting some hyper-personalized control over my coffee brewing in the process!","date":"2023-01-21","objectID":"/improved-esphome-coffee-automation/","tags":["esphome","home-assistant","home-automation","sonoff-S31"],"title":"Integrating a dumb coffee maker with Home Assistant via ESPHome","uri":"/improved-esphome-coffee-automation/"},{"categories":null,"content":" My beloved coffee maker of 10 years has finally died 😢. Parts are no longer available from either the manufacturer or the second-hand market. Taking advantage of a (slight) holiday sale discount, I pulled the trigger on a coffee maker that’s designed to be repairable forever. The perpetual serviceability is a side effect of an ultra-simple design; this coffee maker has zero intelligent features which means there’s next to no remote control or customizability. ","date":"2023-01-21","objectID":"/improved-esphome-coffee-automation/:0:0","tags":["esphome","home-assistant","home-automation","sonoff-S31"],"title":"Integrating a dumb coffee maker with Home Assistant via ESPHome","uri":"/improved-esphome-coffee-automation/"},{"categories":null,"content":"Adding Home Assistant integration Fortunately, we can add a decent amount of control with a basic smart outlet. Naturally, I went with the amazing Sonoff S31 but you can get similar results with any ESPHome compatible device so long as you have a way to control power to the coffee maker and to monitor the power used by the coffee maker. This borrows a technique that I first wrote about in Dynamic timers in ESPHome and tweaks it a bit to add of coffee-specific automations: Run the boiler for a moment, then pause. This is to let the coffee bloom. Turn relay off automatically after a period of no power use. This is done locally for safety and to save me the hassle of putting a template “is coffee brewing” sensor in home assistant. I still report energy data to home assistant for statistical purposes but don’t use the data for automations. Here’s what that looks like: S31 powered coffee maker in Home Assistant. Note that the bloom settings can be adjusted on the fly. ","date":"2023-01-21","objectID":"/improved-esphome-coffee-automation/:1:0","tags":["esphome","home-assistant","home-automation","sonoff-S31"],"title":"Integrating a dumb coffee maker with Home Assistant via ESPHome","uri":"/improved-esphome-coffee-automation/"},{"categories":null,"content":"ESPHome Below is a simplified ESPHome configuration file that resembles what I use “in production”. As is, you’ll need to fill it out / add in your own versions of some of the unique-to-me details intentionally omitted; these will be the device/component id: values, mostly. substitutions: friendly_name: \"Mr. Coffee\" friendly_name_short: \"Coffee\" esphome: name: ${hostname} esp8266: board: esp01_1m restore_from_flash: false packages: # \u003c...\u003e # Has ID: out_relay_1 output: !include ../../packages/sonoff_s31_outlet/output_relay.yaml globals: # Does the button toggle the relay - id: glbl_relay_latched type: bool restore_value: no initial_value: \"true\" ## # Bloom settings ## # How long do we run the heater for? # The time from power on to first water in basket depends on water temperature. # The cooler the water, the longer it'll be. # For now, the intent is to use other sensors to estimate the water temp and have HA # update the configuration before starting a brew. # # Maybe in a future version, outfit with water level/temp probe directly. ## - id: glbl_pre_bloom_time_sec type: int restore_value: yes # Note: value for demonstration purposes; do your own testing to determine appropriate value for your # environment / coffee maker initial_value: \"30\" # How long do we pause to do a bloom for? - id: glbl_bloom_time_sec type: int restore_value: yes # Note: value for demonstration purposes; do your own testing to determine appropriate value for your # environment / coffee maker initial_value: \"30\" # And of course we need something to hold the timer value - id: _glbl_brew_timer_ticks type: int restore_value: no initial_value: \"0\" # We need a place to store the number of ticks that we have observed low power while brewing. - id: _glbl_brew_low_power_ticks type: int restore_value: no initial_value: \"0\" ## # See: https://esphome.io/components/sensor/index.html sensor: - platform: cse7766 update_interval: 1s # \u003c...\u003e power: name: \"${friendly_name_short} Power\" accuracy_decimals: 1 # Needed for total daily calculations id: s31_power filters: - or: - throttle: 300s # Publish every time there's been more than 3.5W change - delta: 3.5 # Do the integration locally so HA does not have to # See: https://esphome.io/components/sensor/total_daily_energy.html ## - name: \"${friendly_name_short} Daily Energy\" platform: total_daily_energy power_id: s31_power icon: \"mdi:meter-electric-outline\" # On the device page, HA will display a widget so we can adjust bloom time number: - name: \"Pre Bloom Time\" id: num_pre_bloom_sec platform: template icon: \"mdi:timer-sand\" entity_category: \"config\" unit_of_measurement: seconds mode: slide # Note: value for demonstration purposes; do your own testing to determine appropriate value for your # environment / coffee maker min_value: 10 max_value: 60 step: 2 lambda: |- return (int) id(glbl_pre_bloom_time_sec); set_action: then: - globals.set: id: glbl_pre_bloom_time_sec value: !lambda |- // TODO: we're relying on HA to pass an integer; perhaps we should do atoi() and catch any exceptions return (int) x; - name: \"Bloom Time\" id: num_bloom_sec platform: template icon: \"mdi:timer-sand-paused\" entity_category: \"config\" unit_of_measurement: seconds mode: slider # Note: value for demonstration purposes; do your own testing to determine appropriate value for your # environment / coffee maker min_value: 10 max_value: 60 step: 2 lambda: |- return (int) id(glbl_bloom_time_sec); set_action: then: - globals.set: id: glbl_bloom_time_sec value: !lambda |- // TODO: we're relying on HA to pass an integer; perhaps we should do atoi() and catch any exceptions return (int) x; # Show current phase (IDLE/BREW/BLOOM/NEEDS-CLEANING...etc) text_sensor: - name: \"Mode\" id: txt_operation_mode platform: template icon: \"mdi:information-off-outline\" entity_category: \"diagnostic\" # Will be called to update as necessary from other components update_interval: never lambda: | // This lambda function should never be called / we should never update the text se","date":"2023-01-21","objectID":"/improved-esphome-coffee-automation/:1:1","tags":["esphome","home-assistant","home-automation","sonoff-S31"],"title":"Integrating a dumb coffee maker with Home Assistant via ESPHome","uri":"/improved-esphome-coffee-automation/"},{"categories":null,"content":"Home Assistant automations When some automation determines that it’s now time to start making coffee, this is a portion of the script that is executed: sequence: # ... - service: number.set_value data: # This is a bit simplified; my template does some more maths to map the temperature to a more precise value. # I simplified the value template here to illustrate how the adjustable timers are meant to be used. value: \u003e- {% if states('sensor.kitchen_temperature')|float(-1) \u003c 25 %}35{% else %}20{% endif %} target: entity_id: number.pre_bloom_time - service: number.set_value data: value: \"35.0\" target: entity_id: number.bloom_time - type: turn_on device_id: #\u003c Your Device ID Here \u003e entity_id: switch.coffee_power domain: switch ","date":"2023-01-21","objectID":"/improved-esphome-coffee-automation/:1:2","tags":["esphome","home-assistant","home-automation","sonoff-S31"],"title":"Integrating a dumb coffee maker with Home Assistant via ESPHome","uri":"/improved-esphome-coffee-automation/"},{"categories":["teardown"],"content":"Taking a look inside the `BN-LINK U158WT` and `POWSAV AHR-083` and flashing both with a custom firmware.","date":"2023-01-15","objectID":"/esphome-power-strips/","tags":["teardown","esphome","tasmota","OpenBeken","sonoff-S31"],"title":"Teardown and Home Assistant integration with two generic Chinese 'smart' power strips.","uri":"/esphome-power-strips/"},{"categories":["teardown"],"content":" I love the Sonoff-S31 smart plugs. They’re cheap, well made and - most importantly - trivial to flash with ESPHome and integrate into Home Assistant. They do have one obvious draw back, though; optimized for a “traditional” US style outlet. When you try to deploy them to a power strip, you end up loosing about 50% of the outlets on the strip! This is how you loose about 50% of the outlets on your power strip. I figured that there must be a power strip out there that had the WiFi radio, power supply and relays built in. Looking through the Power Strip listing of the excellent Tasmota device/template repository, there are more than a few options out there. Upon closer inspection, almost all of them are from super generic/no-name Chinese brands and lack any ETL or UL certifications 😬. Searching for smart power strips on Amazon returns several results… and only a few from name brands. The few name brand power strips out there that I could find are using their own microcontrollers internally and are immediately disqualified as they’ll be - at best - difficult ot integrate with Home Assistant. I’m not quite so concerned about any power conditioning/surge suppression as I am not plugging in any valuable or delectate electronics. I am concerned with a more integrated / space efficient solution that allows me to retain my ESPHome/Home Assistant integration. After cross referencing the Tasmota templates listing with the Amazon search listings, it became clear that there’s really only a few designs that get sold under several different brands and that virtually all of the devices that were known to be powered by an ESP micro are no longer for sale on Amazon. I eventually took a gamble on two: BN-LINK U158WT POWSAV AHR-083 ","date":"2023-01-15","objectID":"/esphome-power-strips/:0:0","tags":["teardown","esphome","tasmota","OpenBeken","sonoff-S31"],"title":"Teardown and Home Assistant integration with two generic Chinese 'smart' power strips.","uri":"/esphome-power-strips/"},{"categories":["teardown"],"content":"BN-Link Marketing photo for the BN-Link power strip This opens up with a standard philips screw driver and you only need one bit size for all screws - nice touch! The screws are hiding under the anti-slip pads but instead of those being glued down, the pads use a friction fit on the + shaped locating pegs. I really like this design feature as the glued pads never stick quite as well when replaced. In addition to the 4 screws, there are several plastic clip/tabs around the permitter that take some work to carefully undo. If you have a thin metal pry tool / spudger, it will come in handy! Overall, the physical construction is solid enough and - pleasantly - serviceable. I'm not loving the sloppy wiring connecting the USB power supply to the mains rails. Like the USB power supply, the WiFi module is also separate from the main PCB. You know what's cheaper than pin headers? PCB fingers in slots. Bad news: this module is NOT an ESP powered device. Good news: there a Tasmota-like firmware for it: OpenBK7231T! I’ll go ahead and flash the OpenBK firmware and have a go to at least give it a try. The relay switching electronics look reasonable enough: The relays themselves are nothing special to write home about: Note the links. I'd bet that it's simpler to scale a design by copy/pasting a self-contained footprint and adjust the number of links on the BOM as needed. There’s nothing remarkable about the USB Power supply; standard switch mode power supply topology. The power conversion is done by the chip under the metal heat sink; I didn’t bother to get an ID on it as the ports don’t support any quick charge or power delivery protocols. Before putting the strip back together, I secured the USB power supply wires with a bit of electrical tape to lessen the probability of a short due to insulation wearing off. ","date":"2023-01-15","objectID":"/esphome-power-strips/:1:0","tags":["teardown","esphome","tasmota","OpenBeken","sonoff-S31"],"title":"Teardown and Home Assistant integration with two generic Chinese 'smart' power strips.","uri":"/esphome-power-strips/"},{"categories":["teardown"],"content":"Flashing OpenBK I don’t have a ton of notes about the flashing process as it was pretty straight forward. Two small things to note: The hid_download_py/uartprogram tool needs a requirements.txt. You can get away with only 4 wires (power, gnd, rx, tx) to program the chip but you must move very fast! It took me more than a few attempts to get the tool to connect to the bootloader on the chip; you have a very limited window for the tool to connect to the chip. I had to run connect power to the chip within about 200ms of starting the uartprogram. If i waited much longer, I would get Cannot get bus. Eventually I was able to program the chip: ❯ python3 uartprogram ../OpenBK7231T_UA_1.15.308.bin -d /dev/ttyUSB0 -w UartDownloader.... programm.... Cannot get bus. : | |[ ?k/s] ❯ python3 uartprogram ../OpenBK7231T_UA_1.15.308.bin -d /dev/ttyUSB0 -w UartDownloader.... programm.... Gotten Bus... : | |[ ?k/s]caution: ignoring unexpected reply in SetBaudRate Write Successful: |##################################################|[ 13.2k/s] The caution: ignoring unexpected reply came as soon as I connected the power to the programmer. After figuring out the GPIO assignments, I did manage to get the Home Assistant / MQTT auto discovery working but - like with Tasmota - wasn’t impressed with the lack of customization in the mqtt payloads. I highly value having the correct device/entity class, icon, name … etc all populating in home assistant automatically; ESPHome lets me do this. I’ll keep an eye on the project and may find another use for this power strip in the future. If ESPHome ever adds support for the BK7231T chips then this is perfect. Tip While drafting this post, I came across an ESP based drop in replacement for the WB2S module: the WT-01N. Had I known, I would have just done the module swap, flashed ESPHome and stopped there. While looking for the WT-01N, on Ali Express, I found that there’s already a small supply of ESP-02S modules that should be drop in replacements! Next time! WT-01N swap Note On a rainy afternoon in late 2023.03, I got around to doing the module swap. Below you’ll find the appropriate Tasmota configuration for GPIO pins. And here's the Tasmota configuration for the BN-Link. ","date":"2023-01-15","objectID":"/esphome-power-strips/:1:1","tags":["teardown","esphome","tasmota","OpenBeken","sonoff-S31"],"title":"Teardown and Home Assistant integration with two generic Chinese 'smart' power strips.","uri":"/esphome-power-strips/"},{"categories":["teardown"],"content":"BN GPIO notes The project needs some basic “here’s how to figure out which GPIOs do what” docs similar to these but I eventually figured out the following GPIO assignments. PIN Label Purpose Notes 6 PWM0 Rel 1 Outlet closest to the power cord. 7 PWM1 NC This is not connected to the main PCB. 8 PWM2 Rel 4 Outlet closest to the USB. 10 RXD1 Btn This is the user button. 11 TXD1 WiFiLED_n WiFi status LED. 23 ADC3 NC This is not connected to the main PCB. 24 PWM4 Rel 2 Second outlet from power cord. 26 PWM5 Rel 3 Third outlet from power cord. ","date":"2023-01-15","objectID":"/esphome-power-strips/:1:2","tags":["teardown","esphome","tasmota","OpenBeken","sonoff-S31"],"title":"Teardown and Home Assistant integration with two generic Chinese 'smart' power strips.","uri":"/esphome-power-strips/"},{"categories":["teardown"],"content":"POWSAV Happy that I was able to get open firmware on the first but disappointed with the lack of customization, I moved onto the second candidate. Marketing photo for the POWSAV power strip Note At one point in time, this exact same device was sold under the ahrise branding and was Tasmota compatible. The model number is the same, the templates repo picture is identical, the GPIO pinout is identical… but the linked Amazon listing is no longer available. The PCB silk screen also include the old AHR markings so I’m guessing that this was just a re-brand with the new POWSAV branding after switching to TuYa? To open this one, you’ll need a 2.2mm triangle bit. There are 6 screws. four hidden under the anti-slip pads. Why are the screw mounting slots not centered :/. The USB, WiFI and mains switching are all on a single PCB but the main power cut off and protection features are all on a separate PCB. Nothing of concern to see on the bottom, everything looks pretty boring... which is good when it comes to mains handling! About what you'd expect for a PCB layout. Plenty of distance between the HV and LV sides! It’s nice to see that the surge suppression circuitry is on it’s own PCB. Repairs there should be easier to pull off - in theory. Here’s a few more shots of the primary components/assemblies: Note the silk screen: this protection PCB is common to the AHR-053 model as well. WB3S is a TuYa branded module that is pin compatible with the ubiquitous ESP-8266 modules. Note the black insulating material separating the USB ports from the mains side of things. Relatively painless extraction, only partially lifted the pad in the bottom left. Not even 5 min later, the TuYa modules has been replaced with one running a firmware powered by ESPHome. ","date":"2023-01-15","objectID":"/esphome-power-strips/:2:0","tags":["teardown","esphome","tasmota","OpenBeken","sonoff-S31"],"title":"Teardown and Home Assistant integration with two generic Chinese 'smart' power strips.","uri":"/esphome-power-strips/"},{"categories":["teardown"],"content":"POWSAV GPIO notes Thanks to excellent Tasmota docs, it was pretty easy to figure out the mappings. For reference: PIN Type Number GPIO2 Led_i 1 GPIO5 Button_n 1 GPIO 12 Relay 3 GPIO 13 Relay 4 GPIO 14 Relay 2 GPIO 15 Relay 1 And the corresponding template: {\"NAME\":\"POWSAV_AHR-083\",\"GPIO\":[0,0,320,0,0,64,0,0,226,227,225,224,0,0],\"FLAG\":0,\"BASE\":18} ","date":"2023-01-15","objectID":"/esphome-power-strips/:2:1","tags":["teardown","esphome","tasmota","OpenBeken","sonoff-S31"],"title":"Teardown and Home Assistant integration with two generic Chinese 'smart' power strips.","uri":"/esphome-power-strips/"},{"categories":["teardown"],"content":"Esphome And here’s a super basic ESPHome configuration using the mappings from above. substitutions: friendly_name_short: \"Power Strip\" esphome: name: \"power-strip\" esp8266: board: esp01_1m # Disable writing the switch mode / restore_from_flash restore_from_flash: false status_led: pin: number: GPIO02 inverted: True binary_sensor: # I don't know what the stock behavior was. For now, only basic control - name: \"${friendly_name_short} Button\" platform: gpio internal: true pin: number: GPIO05 mode: INPUT_PULLUP inverted: False # Press is momentary quick on_press: then: - switch.toggle: id: sw_relay1 # Not doing anything fancy so we can go with basic GPIO switches # See: https://esphome.io/components/switch/gpio.html switch: - name: \"Outlet 1\" id: sw_relay1 platform: gpio pin: GPIO15 icon: \"mdi:numeric-1\" # Don't want to wear down flash storing state, easiest to just not bother remembering restore_mode: ALWAYS_OFF # See: https://developers.home-assistant.io/docs/core/entity/switch/#available-device-classes device_class: OUTLET - name: \"Outlet 2\" id: sw_relay2 platform: gpio pin: GPIO14 icon: \"mdi:numeric-2\" restore_mode: ALWAYS_OFF device_class: OUTLET - name: \"Outlet 3\" id: sw_relay3 platform: gpio pin: GPIO12 icon: \"mdi:numeric-3\" restore_mode: ALWAYS_OFF device_class: OUTLET - name: \"Outlet 4\" id: sw_relay4 platform: gpio pin: GPIO13 icon: \"mdi:numeric-4\" restore_mode: ALWAYS_OFF device_class: OUTLET ","date":"2023-01-15","objectID":"/esphome-power-strips/:2:2","tags":["teardown","esphome","tasmota","OpenBeken","sonoff-S31"],"title":"Teardown and Home Assistant integration with two generic Chinese 'smart' power strips.","uri":"/esphome-power-strips/"},{"categories":["IMadeAThing"],"content":"This 'i made an IoT geiger counter' post isn't like all the other ones, I swear!","date":"2022-11-09","objectID":"/esphome-geiger-counter/","tags":["esphome","home assistant"],"title":"Integrating ESPHome with a cheap Geiger Counter","uri":"/esphome-geiger-counter/"},{"categories":["IMadeAThing"],"content":"Yes, there have been loads of people doing similar things! ESPHome already has a tutorial covering exactly this! I’m writing this up because the approach that I ended up taking was not the intended/planned approach. ","date":"2022-11-09","objectID":"/esphome-geiger-counter/:0:0","tags":["esphome","home assistant"],"title":"Integrating ESPHome with a cheap Geiger Counter","uri":"/esphome-geiger-counter/"},{"categories":["IMadeAThing"],"content":"The Geiger Counter I originally pulled the trigger on this particular version because it had a built in screen attached to a micro controller. I naïvely thought that I’d be able to get a simple UART from the 4 pins next to the microcontroller or maybe even get data directly off of the micro USB port. Info As of 2022.11, the geiger counter pictured above can be found here. The listing title is DIY Geiger Counter Kit Assembled Module Nuclear Radiation Detector X γ β rays Iodine 131 Detecting OLED Display Radiation Tester ","date":"2022-11-09","objectID":"/esphome-geiger-counter/:1:0","tags":["esphome","home assistant"],"title":"Integrating ESPHome with a cheap Geiger Counter","uri":"/esphome-geiger-counter/"},{"categories":["IMadeAThing"],"content":"The USB / UART port After receiving and unpacking it, I probed around and determined that the micro USB port did have the data lines going to the U5 micro and that the 4 pins also went to the micro. Unfortunately both seemed dead; the pins didn’t have any signal on them and the software on the micro implementing the USB stack didn’t seem to be fully implemented. Using dmesg I could see a device being plugged in but the device failed to respond to any probes. So much for the easy way out. ","date":"2022-11-09","objectID":"/esphome-geiger-counter/:1:1","tags":["esphome","home assistant"],"title":"Integrating ESPHome with a cheap Geiger Counter","uri":"/esphome-geiger-counter/"},{"categories":["IMadeAThing"],"content":"Plan B With the identifying markings sanded off of the chip, attempting to dump / reverse / re-program the firmware wasn’t the most appealing option. After some quick testing, I determined that the micro controller toggles the beeper and the LED via distinct GPIO pins and that the LED is pulsed to 3.3v for 5ms. For reference, here are the points that I chose to inject power and observe the LED. I am injecting 5V into the geiger counter from the ESP module so I can program and power the entire assembly with a single cable. If you choose to use separate power supplies for both, make sure that the ESP and geiger counter share a ground! Removing R1 is optional; keep it if you want the beeper to click as well. I have some thoughts on being able to toggle this behavior below I left R1 in place so it's easier to reverse the mod. And with a bit of hot glue, we’re done with the hardware assembly. There's no good place for the ESP module so I chose to strategically obfuscate the portion of the screen that does not display the actual measurements. Warning There’s no good place to put the ESP module such that the screen is unobstructed and such that the ESP is not near the geiger tube. As the tube is charged up to ~400v, it putting the ESP module directly over it seems like a potential problem. I wouldn't put the ESP right here because a) the tube is partially obstructed and b) the tube is charged to a few hundred volts and putting any delicate electronics that close seems like a bad idea. ","date":"2022-11-09","objectID":"/esphome-geiger-counter/:2:0","tags":["esphome","home assistant"],"title":"Integrating ESPHome with a cheap Geiger Counter","uri":"/esphome-geiger-counter/"},{"categories":["IMadeAThing"],"content":"ESPHome Ignore that 12 hour gap in the data... I forgot to plug the assembly back in after doing some tests. The firmware is pretty simple. The configuration below is an abridged version of what I am currently using. I’ve stripped out unnecessary things but left some comments in to serve as basic documentation. ## # To convert from particles per unit time, there's supposed to be some conversion factor. # This conversion factor depends on the tube and the cheap Ali Express tubes all seem to be J321 style. # Not a ton of documentation out there, but I did find one source that says J321 is basically J305. # See: https://www.radmon.org/index.php/forum/geiger-muller-tubes/1245-information-on-j321-gm-tube # # But even then, the conversion factor is derived from some known isotope. They expose the tube to some # known isotope and then measure the counts. Because they also know the proper dosing info for the # isotope, the tube then gets a conversion factor. # # Additionally, the micro controller sits between the raw data from the tube and the LED that I am tapping into. # Each time there is _any_ radiation detected, the micro controller pluses the LED for 5ms. In theory, multiple # radioactive particles could strike the tube in the 5ms window and the microcontroller would know ... but I wouldn't. # At 5ms per pulse, the maximum number of particles per second that I can detect is 200. Even if the TRUE count # is 3x that... 200 is still way more than enough to know that _something_ isn't right and that's really what I'm after here. # # So for now, just stick with basic counts per min w/ the understanding that the signal that I'm observing might not # be with the full resolution that the tube is capable of. ## esphome: # Note: this will be the hostname that device request during the DHCP dance... name: \"geiger-counter\" esp32: board: mhetesp32minikit # Enable logging logger: level: INFO sensor: # See: https://esphome.io/components/sensor/pulse_counter.html - name: Particle Count platform: pulse_counter id: sense_p_cnt # Does not really matter which pin for ESP32 pin: GPIO32 use_pcnt: true # Measured with oScope: pulse is 5ms _exactly_. # Docs say to use falling edge detection with the hardware pulse counter count_mode: rising_edge: DISABLE falling_edge: INCREMENT # Docs ALSO say that you can't configure a filter of more than 13us when using the # internal pulse counter. 5ms is ... 5000 us and that's more than 13us so I guess we'll # stick with the defaults? ## internal_filter: 13us # As best I can tell, pulses trigger an ISR which just increases some counter somewhere. # Every update_interval, esphome checks the value in the storage and computes the count # per min. ## update_interval: 60s unit_of_measurement: \"cpm\" state_class: \"measurement\" icon: \"mdi:radioactive-circle-outline\" ","date":"2022-11-09","objectID":"/esphome-geiger-counter/:3:0","tags":["esphome","home assistant"],"title":"Integrating ESPHome with a cheap Geiger Counter","uri":"/esphome-geiger-counter/"},{"categories":["IMadeAThing"],"content":"Beeper I can’t confirm it, but I suspect that the beeper is driven independently of the LED because the original designer wanted to implement a software toggle for the sound. I don’t need the sound functionality but I also don’t want to permanently disable it. It would be nice to be able to toggle it on/off as needed. There are a few ways to get similar functionality: Hack the hardware… more. The TO92 driving the beeper (via R1) is a SS9014 NPN. I could add another transistor in series with R1 and then control the current flow via another GPIO on the ESP. Inspired by this reddit thread, I could try to get the ESP to toggle a beeper directly when a pulse is detected. There are some issues with this approach, though. It is not possible to get direct access to the ISR via ESPHome. I’d have to create my own custom component to pull this off. Not the end of the world but also more time than I wanted to spend so I went with a different approach that appears to work. Basically, create two instances of the pulse_counter sensor using the same GPIO pin. One of them will remain external and will publish data to Home Assistant at 60s intervals. The other will be internal and will be updated every loop(). By attaching a lambda function to the sensor evaluation loop, we can compare the number of recorded pulses many times per second. The number of cycles that the internal pulse counter will sum pulses over is 1 so any time the current value does not match the previous value … should indicate that a pulse was fired off. Here’s what I came up with: sensor: # See: https://esphome.io/components/sensor/pulse_counter.html - name: Particle Count # \u003c...\u003e - name: INTERNAL Particle Count internal: true platform: pulse_counter # \u003c... literally the exact same config as the external pulse counter ...\u003e ## # 0ms means every loop() update_interval: 0ms filters: # LogE because we want it to stand out on the console while testing - lambda: |- static int num_zeros = 0; if (x \u003e 0) { // reset num_zeros = 0; // Indicate that a non 0 measurement was taken and dump to console // This is where a beeper would be fired off if desired... ESP_LOGE(\"filterLambda\", \"raw is %f\", x ); } else { num_zeros++; } // Dont spam console if (num_zeros % 1000 == 0) { ESP_LOGI(\"filterLambda\", \"num_zeros is %d\", num_zeros ); } return x; In testing, I would get logs like: [17:34:18][E][filterLambda:165]: raw is 10000.000000 [17:34:18][I][filterLambda:170]: num_zeros is 0 [17:34:19][E][filterLambda:165]: raw is 10000.000000 [17:34:19][I][filterLambda:170]: num_zeros is 0 [17:34:19][E][filterLambda:165]: raw is 10000.000000 [17:34:19][I][filterLambda:170]: num_zeros is 0 [17:34:20][E][filterLambda:165]: raw is 10000.000000 [17:34:20][I][filterLambda:170]: num_zeros is 0 [17:34:22][E][filterLambda:165]: raw is 10000.000000 [17:34:22][I][filterLambda:170]: num_zeros is 0 [17:34:24][E][filterLambda:165]: raw is 10000.000000 [17:34:24][I][filterLambda:170]: num_zeros is 0 [17:34:24][E][filterLambda:165]: raw is 10000.000000 [17:34:24][I][filterLambda:170]: num_zeros is 0 [17:34:25][E][filterLambda:165]: raw is 10000.000000 [17:34:25][I][filterLambda:170]: num_zeros is 0 [17:34:26][E][filterLambda:165]: raw is 10000.000000 [17:34:26][I][filterLambda:170]: num_zeros is 0 [17:34:32][E][filterLambda:165]: raw is 10000.000000 [17:34:32][I][filterLambda:170]: num_zeros is 0 [17:34:33][E][filterLambda:165]: raw is 10000.000000 [17:34:33][I][filterLambda:170]: num_zeros is 0 [17:34:35][E][filterLambda:165]: raw is 10000.000000 [17:34:35][I][filterLambda:170]: num_zeros is 0 [17:34:40][E][filterLambda:165]: raw is 10000.000000 [17:34:40][I][filterLambda:170]: num_zeros is 0 [17:34:42][E][filterLambda:165]: raw is 10000.000000 [17:34:42][I][filterLambda:170]: num_zeros is 0 [17:34:43][E][filterLambda:165]: raw is 10000.000000 [17:34:43][I][filterLambda:170]: num_zeros is 0 [17:34:44][E][filterLambda:165]: raw is 10000.000000 [17:34:44][I][filterLambda:170]: num_zeros is 0 [17:34:45][E][filterLambda:16","date":"2022-11-09","objectID":"/esphome-geiger-counter/:3:1","tags":["esphome","home assistant"],"title":"Integrating ESPHome with a cheap Geiger Counter","uri":"/esphome-geiger-counter/"},{"categories":["teardown"],"content":"Millimeter Wave technology has recently hit “mass consumer product adoption” price points. A casual search for “human presence sensor” on Ali Express will turn up a seemingly endless number of sub $40 devices that can detect movement far more accurately than any old PIR sensor. Each listing is fairly generic; there’s no explicit manufacturer details but they all use the same marketing images: As the photos below will show, neither device is super well marked with a model number so I’ll just refer to each by either the color of the enclosure or by the radar sensor inside. Before getting into the specific modules, a brief look at the packaging for both. ","date":"2022-11-01","objectID":"/two-mmwave-sensors/:0:0","tags":["teardown"],"title":"Quick look inside two Ali Express mmWave presence detection sensors","uri":"/two-mmwave-sensors/"},{"categories":["teardown"],"content":"Packaging The packaging isn’t anything special but I am including pictures here in the off chance that some of the Mandarin markings is useful for somebody. Micro USB in 2022?! Both devices featured here have micro USB leads. It’s 2022 and we’re still using MICRO USB for power? I know that USB-C connectors are slightly more expensive but it just seems lazy and dated to put a micro USB port on any new design in 2022! uart? I did probe both of the 4 pin connectors on the PCB but didn’t see any signs of life. If those headers are for a UART, the MCU isn’t responding to any inputs nor is it putting anything out over it :(. ","date":"2022-11-01","objectID":"/two-mmwave-sensors/:1:0","tags":["teardown"],"title":"Quick look inside two Ali Express mmWave presence detection sensors","uri":"/two-mmwave-sensors/"},{"categories":["teardown"],"content":"ZY-M100-S AKA “the white one”. Box content is bare-bones; the USB lead is comically short for almost any “mid height on the wall” or ceiling installs so i’m not really sure what the point was. I’m not sure why they went with 3 screws here instead of 4. If you’re going to omit a screw for cost-cutting reasons, why not just use clips or a single screw in the middle? No, it's not the camera or the lighting, the text really is that blurry in real life. The interior is more or less as expected; two highly integrated modules with a small MCU gluing them together. There is some evidence that the Zigbee version of the white sensor supports ambient brightness. Based on the two small holes in the enclosure and the PCB markings, I suspect that d2 is being used as a light sensor: Nothing of interest on the bottom of the PCB: Close up of the sensor MCU ","date":"2022-11-01","objectID":"/two-mmwave-sensors/:2:0","tags":["teardown"],"title":"Quick look inside two Ali Express mmWave presence detection sensors","uri":"/two-mmwave-sensors/"},{"categories":["teardown"],"content":"Unique Markings PCB: ZY-M100 and V4.20 TuYa radio: WBR3 TuYa mcu: GD32E230 Radar sensor: JYSJ_5807_A01 with an IC marked SJ 501. No results on this one. Please do get in touch if you do know anything about it. I’d love to re-use the sensor in something else! We have an ID! Thanks to the prolific blakadder.com for bringing it to my attention and @crlogic from the Home Assistant community forums for identifying the module and linking to a datasheet! The module is Leapmmw 5.8GHz Motion Detection: MD5G20 ","date":"2022-11-01","objectID":"/two-mmwave-sensors/:2:1","tags":["teardown"],"title":"Quick look inside two Ali Express mmWave presence detection sensors","uri":"/two-mmwave-sensors/"},{"categories":["teardown"],"content":"The MicRadar RD24D AKA “the black one”. Like the M100, there’s not a ton in the box. The rear enclosure has a simple key-hole slot for mounting to a wall or ceiling and the USB power lead is considerably longer than the M100. Somebody did consider that a celling-mounted device might need a long power lead… Yes, that is a neo-pixel LEDin the center of the opaque plastic panel. Same story here: WiFi module and radar sensor both talk to a MCU over UART. Nothing remarkable on the bottom of the PCB: They only soldered in one half of the pins connecting the radar sensor to the main PCB. I wonder how much time/money that saved... Here’s a close up of the business end of the sensor. This one is considerably more sophisticated and complex relative to the white one. And a close up of the coordinating MCU ","date":"2022-11-01","objectID":"/two-mmwave-sensors/:3:0","tags":["teardown"],"title":"Quick look inside two Ali Express mmWave presence detection sensors","uri":"/two-mmwave-sensors/"},{"categories":["teardown"],"content":"Unique Markings PCB: V1.01 TuYa radio: CB3S TuYa mcu: STC 8G1K17 Radar sensor: MicRadar R24D. I can’t find a datasheet for the specific module, but it does seem to be part of this product family. IC1: MicRadar / T15BT / DAT2230 IC2: This above picture isn’t the best but the chip is marked with S3KM11L / N46Y80D1 / 2123H. The only google result does not really indicate who makes the chip. ","date":"2022-11-01","objectID":"/two-mmwave-sensors/:3:1","tags":["teardown"],"title":"Quick look inside two Ali Express mmWave presence detection sensors","uri":"/two-mmwave-sensors/"},{"categories":["teardown"],"content":"Conclusion Neither are going to be quick/easy to convert or otherwise get working with the likes of ESPHome or Tasmota: Neither wifi module is an espressif module. At least some re-flow work would be required to replace the modules with an Espressif module. There’s a MCU sitting between the WiFi module and the actual sensor. Reverse engineering how the TuYa radio talks to the MCU and how the MCU talks to the radar module just isn’t worth the time! The sensors cost about as much as the bare radar modules themselves so - if you’re willing to spend the time to desolder the radar modules - you get an enclosure for “free”. ","date":"2022-11-01","objectID":"/two-mmwave-sensors/:4:0","tags":["teardown"],"title":"Quick look inside two Ali Express mmWave presence detection sensors","uri":"/two-mmwave-sensors/"},{"categories":["IMadeAThing"],"content":"My endless quest to Integrate ALL THE THINGS with Home Assistant claims another victim.","date":"2022-10-22","objectID":"/esphome-sinilink-pc-remotes/","tags":["esphome","home assistant"],"title":"ESPHome for Sinilink PC remotes","uri":"/esphome-sinilink-pc-remotes/"},{"categories":["IMadeAThing"],"content":"PC (power) remote control While doing research for a potential project, I stumbled onto a device that fit’s so squarely into that “it’s so simple and obvious, why didn’t I think tof that?!” category that I immediately placed an order for a few. That device? A simple WiFi equipped micro controller that gets wired between the power button on a PC and the motherboard. This makes it possible to remotely control and monitor the power state of any PC! I am using these devices in conjunction with my previously integrated KVM switch to automate turning hosts on/off as they are activated/deactivated on the KVM switch. Note There are several different types of device on Ali Express. Most appear to use TuYa MCUs so it’s not immediately clear if/how those devices can be converted to use ESPHome or not; buy those at your own risk. The two Sinilink devices liked below are trivial to get working with ESPHome/Tasmota though! Sinilink PCIe Computer Remote (XY-WPCE) Sinilink USB Computer Remote (XY-WPCL) The PCI Express version is simpler to integrate with a PC as it uses the 3.3v power rails to determine when the PC is on. The USB version does not have this luxury so power must be supplied via the DC barrel jack. Additionally, the USB version is also wired series with the power LED(s) on the computer so the module can discern the PCs power state. Why not just use Wake On Lan? Yes, Home Assistant does have support for Wake On Lan but I chose not to use it for a few reasons: Does not work across subnets. WoL uses a broadcast packet and routers tend to frown on forwarding those between subnets. As my HA instance runs inside of Kubernetes, it’s going to be more than a little difficult to get the WoL packets out of the cluster! Does not do status checking. The Sinilink modules have direct feedback about the state of the PC power. Does not do shutdown. There is no WoL packet that can send a PC back to sleep! Tip If you use the PCI Express version and find that the module does not stay powered up while the PC is asleep/off, check your PC BIOS for ErP settings. I had to explicitly turn off ErP and permit the PC to wake from PCI-E devices before the 3.3v standby rail was activated. ","date":"2022-10-22","objectID":"/esphome-sinilink-pc-remotes/:0:0","tags":["esphome","home assistant"],"title":"ESPHome for Sinilink PC remotes","uri":"/esphome-sinilink-pc-remotes/"},{"categories":["IMadeAThing"],"content":"A quick detour about write_flash errors I don’t see this error often but I do see it enough to warrant talking about. I ordered 3 of the PCI Express and the USB version of the devices above. Of the 6 devices I received, 3 didn’t “take” the custom firmware. Devices that have defects with the onboard flash will appear to be function when probed with esptool.py but will exhibit some sort of error when doing any write_flash operations. The symptoms present like this # Note the baud rate; it's considerably slower than the default baud rate. # Trying lower baud rates is a suggested 'fix'. ❯ esptool.py -b 19200 --port /dev/ttyUSB0 write_flash -fs 1MB -fm dout 0x0 ~/Downloads/tasmota-lite.bin esptool.py v3.3.1 Serial port /dev/ttyUSB0 Connecting................... Detecting chip type... Unsupported detection protocol, switching and trying again... Connecting... Detecting chip type... ESP8266 Chip is ESP8285H16 Features: WiFi, Embedded Flash Crystal is 26MHz MAC: e8:aa:bb:cc:dd:ee Uploading stub... Running stub... Stub running... Configuring flash size... Flash will be erased from 0x00000000 to 0x0007afff... Compressed 501328 bytes to 358200... Wrote 501328 bytes (358200 compressed) at 0x00000000 in 188.8 seconds (effective 21.2 kbit/s)... File md5: 693ff98fbada203ab23ced0650e45ab7 Flash md5: 2a3e7abaf93800f4193d03a9da8c52fa MD5 of 0xFF is 36d49993e146cee00d35f8793084f71c A fatal error occurred: MD5 of file does not match data in flash! and ❯ esptool.py --port /dev/ttyUSB0 write_flash -fs 1MB -fm dout 0x0 ~/Downloads/tasmota-lite.bin esptool.py v3.3.1 Serial port /dev/ttyUSB0 Connecting... Detecting chip type... Unsupported detection protocol, switching and trying again... Connecting... Detecting chip type... ESP8266 Chip is ESP8285H16 Features: WiFi, Embedded Flash Crystal is 26MHz MAC: e8:aa:bb:cc:dd:ee Stub is already running. No upload is necessary. Configuring flash size... Flash will be erased from 0x00000000 to 0x0007afff... Compressed 501328 bytes to 358200... Writing at 0x00075960... (100 %) A fatal error occurred: Serial data stream stopped: Possible serial noise or corruption. There are a few “fixes” for this issue but none worked for me: Check for loose or fault connections. Use a robust power supply Try write_flash_status with --non-volatile 0 Try a different USB \u003c-\u003e 232/TTL adapter I tried all of the above and nothing worked. I soldered wires directly to the modules instead of just inserting pins into the programming header. I tried a power supply that can supply considerably more than the ~200 ma needed to power/flash the chip. I tried a few different USB ports and a few different USB \u003c-\u003e TTL adapters with both counterfeit and authentic FTDI chips. I used read_flash_status and saw that the --non-volatile settings were already 0x0000. None of the above worked for me. While disappointing and frustrating, there’s only one probable conclusion: there’s a subtle defect in the flash memory that either wasn’t noticed or checked for at the factory when the OEM firmware was flashed onto the devices. I cut my losses and moved on. ","date":"2022-10-22","objectID":"/esphome-sinilink-pc-remotes/:1:0","tags":["esphome","home assistant"],"title":"ESPHome for Sinilink PC remotes","uri":"/esphome-sinilink-pc-remotes/"},{"categories":["IMadeAThing"],"content":"ESPHome configurations For SEO/Archival purposes, I have also uploaded a copy of the config to the esphome-devices.com site. As of publishing this article, the PR is pending review. If/When the page goes live, I’ll update the link here. Success The pr is LIVE. Thanks to the super quick work of @tekmaven! The configurations there are bare-bones and cover just the basics required to get the GPIO working with ESPhome. The configuration below is a bit more featured and is a lot closer to the versions that I use in production. It features a “pc power button lockout” feature and more. Warning The code below will not compile “as is”. All of the entities under the packages: heading are “standard” across all of my ESPHome configurations and are not included here. Either remove them or substitute as needed to get something that works for you. substitutions: # Displayed in HA frontend friendly_name: \"Desktop Power Control\" friendly_name_short: \"Desktop\" hostname: \"desktop-power-control\" esphome: name: ${hostname} # Shows up in UI comment: \"Remote power button for ${friendly_name_short}.\" esp8266: # Specifically a 'ESP8285H16' with 2MB built in flash # See: https://docs.platformio.org/en/stable/boards/espressif8266/esp8285.html board: esp8285 logger: level: INFO # See: https://esphome.io/guides/configuration-types.html#packages packages: # General wifi: !include ../../packages/wifi.yaml mqtt: !include ../../packages/mqtt.yaml time: !include ../../packages/ntp.yaml ota: !include ../../packages/ota.yaml web_server: !include ../../packages/web_server.yaml status_led: pin: number: GPIO02 inverted: True # Keep track of weather or not case button press should be forwarded to the motherboard globals: - id: glbl_relay_latched type: bool restore_value: no initial_value: \"true\" script: - id: regular_press mode: single then: - output.turn_on: out_relay - delay: .5s - output.turn_off: out_relay - id: long_press mode: single then: - output.turn_on: out_relay # MB seems to respond to 5s, add 2 just to be safe - delay: 7s - output.turn_off: out_relay button: # We expose a button to the HA web UI that mimics the \"forceful\" power down sequence - name: \"${friendly_name_short} Long Press\" id: btn_forceful_down platform: template on_press: - lambda: |- // If the power state is off, we'll emit a WARN level message before running the script if( !id(inp_power_status).state ){ ESP_LOGW(\"forcefulShutdown\", \"Power state is OFF but forceful shutdown requested...\"); } else { ESP_LOGW(\"forcefulShutdown\", \"Power state is ON. Forceful shutdown requested...\"); } id(long_press).execute(); binary_sensor: # React to connection status, if needed - \u003c\u003c: !include ../../packages/binary_sensor/connection_status.config.yaml - name: \"${friendly_name_short} WiFi Config Button\" platform: gpio id: inp_wifi_cfg_btn entity_category: \"diagnostic\" icon: \"mdi:radiobox-marked\" pin: number: GPIO04 mode: INPUT_PULLUP inverted: True - name: \"${friendly_name_short} Case Button\" platform: gpio id: inp_pc_case_btn_status entity_category: \"diagnostic\" icon: \"mdi:power-standby\" pin: number: GPIO10 mode: INPUT_PULLUP inverted: True on_press: then: - if: condition: lambda: 'return id(glbl_relay_latched);' then: - output.turn_on: out_relay else: - logger.log: \"PC Case button press but disarmed!\" on_release: then: - if: condition: lambda: 'return id(glbl_relay_latched);' then: - output.turn_off: out_relay else: - logger.log: \"PC Case button release but disarmed!\" ## # Press is momentary quick on_click: then: - lambda: |- // If relay isn't latched, do nothing if( !id(glbl_relay_latched) ){ ESP_LOGD(\"caseBtnPress\", \"button pressed, not latched so doing nothing.\"); return; } ESP_LOGD(\"caseBtnPress\", \"button pressed, latched. Toggling power now...\"); id(sw_pc_power).toggle(); on_multi_click: - timing: - ON for at most 1s - OFF for at most 2s - ON for at most 1s - OFF for at most 2s - ON for at most 1s - OFF for at most 2s then: # We'd want to press a virtual / template button for hard power down # That te","date":"2022-10-22","objectID":"/esphome-sinilink-pc-remotes/:2:0","tags":["esphome","home assistant"],"title":"ESPHome for Sinilink PC remotes","uri":"/esphome-sinilink-pc-remotes/"},{"categories":["IMadeAThing","Home-Lab"],"content":" Tip This is just a ‘pointer’ post. All the details are in the kquinsland/yet-another-gps-pps-opnsense repo on github. For the longest time, I had a dedicated raspberry pi with a GPS module acting as the ntp server for my home network. I chose to use a dedicated host for this because my router - at the time - did not have a serial port that I could leverage. Recently, the miroSD card on the ntp pi died and I decided to leverage the serial port in my current router rather than re-build the operating system on the ntp host. It didn’t take that much time to but together a bare-bones schematic in KiCad. One LCSC order, one mouser order and about a week later, I had a basic RS232 \u003c-\u003e TTL converter for use with a cheap GPS module After a bit more testing, I was convinced I hadn’t made any egregious mistakes and the new module didn’t pose a significant threat/risk to my production router. ","date":"2022-10-15","objectID":"/yet-another-gps-pps-opnsense/:0:0","tags":["fusion-360","KiCad","opnsense"],"title":"I made a thing: GPS/PPS clock source for ntpd","uri":"/yet-another-gps-pps-opnsense/"},{"categories":["IMadeAThing"],"content":"and enclosure for 2.1 amplifier module.","date":"2022-08-31","objectID":"/3d-printed-subwoofer-and-arylic-amp-enclosure/","tags":["fusion-360"],"title":"I made a thing: Yet another 3d printed speaker","uri":"/3d-printed-subwoofer-and-arylic-amp-enclosure/"},{"categories":["IMadeAThing"],"content":" Background Long story made very short: the amplifier inside my ancient 2.1 desktop speakers died and I couldn’t find anything “off the shelf” that would serve as a suitable replacement and integrate well with Home Assistant. So if you can’t buy it, you have to build it! And as it turns out, there’s a whole community of audiophiles that have published designs on all the usual places you’d find free designs for makers. Similarly, there’s a few companies that seems to specialize in audio electronics aimed specifically at people that are building their own speaker systems and just want someone else to handle the electronics and software. This post will cover the design tweaks I made to an existing subwoofer assembly and an original amplifier electronics/enclosure design. ","date":"2022-08-31","objectID":"/3d-printed-subwoofer-and-arylic-amp-enclosure/:0:0","tags":["fusion-360"],"title":"I made a thing: Yet another 3d printed speaker","uri":"/3d-printed-subwoofer-and-arylic-amp-enclosure/"},{"categories":["IMadeAThing"],"content":"The components There are two assemblies in this build: the subwoofer and the receiver/power-electronics enclosure. The subwoofer is a remix of the amazing Skeleton Waveguide Subwoofer Speaker by zx82net which is a remix of \"HexiBox\" Tang Band W3-1876S Subwoofer Enclosure by hexibase. As for the drive electronics, I elected to use an Up2Stream Amp 2.1 - Multiroom Wireless 2.1 Amplifier Board. This appears to be based on a MediaTek based module module from LinkPlay. I could do a whole series of posts based on the firmware alone but for now I’ll just say that it is 1) trivial to root and 2) should not be exposed directly to the internet for any reason whatsoever. I’m not equipped to verify any of the claims made by the original subwoofer designer so I can only offer my subjective take; this subwoofer offers more wubz at greater distances and that’s before I add +10db to the bass via the equalizer on the amp! ","date":"2022-08-31","objectID":"/3d-printed-subwoofer-and-arylic-amp-enclosure/:1:0","tags":["fusion-360"],"title":"I made a thing: Yet another 3d printed speaker","uri":"/3d-printed-subwoofer-and-arylic-amp-enclosure/"},{"categories":["IMadeAThing"],"content":"Tweaks The green elements are meant to be printed in TPU or another gasket like material. The cable channel runs from the RCA jack enclosure in the rear (pink color), under the gasket material to the main speaker cavity. ","date":"2022-08-31","objectID":"/3d-printed-subwoofer-and-arylic-amp-enclosure/:2:0","tags":["fusion-360"],"title":"I made a thing: Yet another 3d printed speaker","uri":"/3d-printed-subwoofer-and-arylic-amp-enclosure/"},{"categories":["IMadeAThing"],"content":"Wiring There is now an integrated channel for standard 16 AWG speaker wire that runs from the main cavity, through each baffle, to the exterior. This cable channel also increases rigidity which aids in printing and assembly. The rear of the subwoofer body features some attachment points for a simple enclosure for speaker hookups. I am using RCA jacks but the enclosure could be easily modified to work with any similar connector. The enclosure mounts directly over the cable channel so all wires are protected/hidden. ","date":"2022-08-31","objectID":"/3d-printed-subwoofer-and-arylic-amp-enclosure/:2:1","tags":["fusion-360"],"title":"I made a thing: Yet another 3d printed speaker","uri":"/3d-printed-subwoofer-and-arylic-amp-enclosure/"},{"categories":["IMadeAThing"],"content":"Assembly You no longer need to use goopy adhesives to seal the panels to the body! The sub body and panels have been modified to accommodate a thin 3d printed sheet of TPU or similar material to act as a gasket. There is also a subtle channel cut into the sub body which is meant for gasket cord as a fall back. The dark blue represents the path that gasket cord material should be laid down. When properly joined, there will be a slight interference between the panel and the gasket material; this ensures a fantastic seal. ","date":"2022-08-31","objectID":"/3d-printed-subwoofer-and-arylic-amp-enclosure/:2:2","tags":["fusion-360"],"title":"I made a thing: Yet another 3d printed speaker","uri":"/3d-printed-subwoofer-and-arylic-amp-enclosure/"},{"categories":["IMadeAThing"],"content":"Mounting The sides of the subwoofer feature a 100x100mm VESA/FDMI mounting pattern. When printing with the holes facing the print bed, support material all but entirely obscures their existence. The support material hides the hole almost perfectly. If the image brightness wasn't turned up, you'd never notice :D Build Info This is an abridged assembly guide and Bill of Materials. I have included only what’s different/new/specific to this build. Consult the various build guides and BOMs for the original subwoofer so you understand what else is required. ","date":"2022-08-31","objectID":"/3d-printed-subwoofer-and-arylic-amp-enclosure/:2:3","tags":["fusion-360"],"title":"I made a thing: Yet another 3d printed speaker","uri":"/3d-printed-subwoofer-and-arylic-amp-enclosure/"},{"categories":["IMadeAThing"],"content":"BOM ","date":"2022-08-31","objectID":"/3d-printed-subwoofer-and-arylic-amp-enclosure/:3:0","tags":["fusion-360"],"title":"I made a thing: Yet another 3d printed speaker","uri":"/3d-printed-subwoofer-and-arylic-amp-enclosure/"},{"categories":["IMadeAThing"],"content":"Subwoofer Very little about the subwoofer BOM has changed from the original design. Optional: (1 mm) Buna-N O-Ring Cord Stock, 70A Durometer You will not need this if you’re printing TPU gaskets or using some glue / caulk. You will want some superglue or similar to help secure the gasket cord as you insert it into the channels. 16-Gauge Speaker Wire Cable, ~18 inches/40 cm. The cable channel was specifically designed for 16 AWG speaker wire with the dimensions 6mm x 3mm. Any wire can work but if there’s a gap between the wire jacket and the channel walls, you’ll need to fill the gap / seal the channel. 18 inches will allow for some relative comfort during assembly. You can get away with less but it will make some things a bit harder than needed. 28+ M4x 12mm screws. The original design didn’t include any specific screws so I explicitly chose McMaster # 90666A115. You will need at least 6 screws to secure the speaker to the sub and 11 to properly secure each panel to the subwoofer body. If you choose to install the electronics enclosure at the rear of the sub, an additional 4 screws will be needed. RCA jack: there many different types out there but the parts are meant to be used with these jacks. ","date":"2022-08-31","objectID":"/3d-printed-subwoofer-and-arylic-amp-enclosure/:3:1","tags":["fusion-360"],"title":"I made a thing: Yet another 3d printed speaker","uri":"/3d-printed-subwoofer-and-arylic-amp-enclosure/"},{"categories":["IMadeAThing"],"content":"Amplifier enclosure The heart of the build is the Up2stream Amp 2.1 module. The AliExpress listing has a few versions. I was not planning on using the IR remote and I didn’t want an external PSU so I chose to order just the board. Power Supply: The amplifier enclosure has room for a 24V 4.5A MeanWell LRS-100 To connect the DC output of the LRS-100, you’ll need a female 3.96MM 2 pin connector to mate with the DC in on the amplifier. Panel mount connectors: RCA jacks: I used the same part number from above, just ordered a few different colors for the R/L/S channels. Powercon True. Rather than a traditional IEC style or simple DC barrel jack + external PSU, I opted for a Skookum power connector. Like with the RCA jacks, there are many different parts from several manufacturers that will probably work but I specifically used this set from Ali Express. RJ45: There are likely several that will work, but I explicitly used this part from Ali Express. USB2.0: There are likely several that will work, but I explicitly used this part from Ali Express. USB extension cable: You can find all sorts of adapters in every conceivable orientation on Ali Express from stores like this. For this particular project, you will need a 15 cm flat flex cable (FFC) and 2x of the “straight” USB male connectors. Screws: The amp enclosure uses 4x of the same McMaster #90666A115 for external mounting but any M4 screw could work here. 6x M3x8mm screws to hold the amplifier PCB to the internal midplate and PSU to the case. Specifically McMaster #91290A113. 4x M4x50 screws to secure the lid. Specifically McMaster #91292A140. And it all fits together inside an enclosure like so: The amp enclosure as seen from the front corner. The amp enclosure as seen from the rear corner. ","date":"2022-08-31","objectID":"/3d-printed-subwoofer-and-arylic-amp-enclosure/:3:2","tags":["fusion-360"],"title":"I made a thing: Yet another 3d printed speaker","uri":"/3d-printed-subwoofer-and-arylic-amp-enclosure/"},{"categories":["IMadeAThing"],"content":"Procedure To give you an idea of how things go together: Viewed from the rear corner, the PCB (purple) sits on top of a midplate (green, highlighted) which sits on top of the power supply (also purple, bottom). To make printing easier, the midplate is actually two components joined together by the two screws furthest from the knobs. ","date":"2022-08-31","objectID":"/3d-printed-subwoofer-and-arylic-amp-enclosure/:4:0","tags":["fusion-360"],"title":"I made a thing: Yet another 3d printed speaker","uri":"/3d-printed-subwoofer-and-arylic-amp-enclosure/"},{"categories":["IMadeAThing"],"content":"Print Just a few things to note: The suggested/ideal print orientation should be fairly obvious. Tolerances are reasonably tight, you’ll need ~ .15mm tolerance. Layer height, material, speed settings are up to you. All that matters is that you can achieve the ~.15mm tolerance. This will take a while! With respect to the subwoofer skeleton and panels, at least. Essentially, the more mass in the parts, the more energy will be required to make them rattle/flex/vibrate. The less this happens, the less “extra” noise will be emitted by your subwoofer. Following along with the original instructions for printing, I chose about 35% infill and 3 perimeters for the subwoofer skeleton. Using a .6mm nozzle and some other well tuned slicing settings, I was able to print the entire skeleton in about 40 hours using just over 1 kg of filament. I would plan on at least 80 if using a smaller nozzle with a finer layer height! Prep screw holes \u0026 flashing Intentionally undersized holes Almost all screw holes on this build are intentionally undersized. As a general preparation step, carefully drive the appropriate screw into each hole and then let it sit! In the CAD model, almost all holes meant to receive a screw are intentionally undersized by about .3mm. besides the general ‘it’s easier to expand the hole to the correct size than it is to shrink it’ reason, this is done for one key reason; it eliminates the need for dedicated screw thread hardware. By intentionally undersigning the hole, you can guarantee there will be a ton of friction generated when inserting the screws for the first time. The excess friction will soften the plastic in the vicinity of the screw threads which allows the plastic to form threads around the screw. This is not without drawbacks, though so proper procedure is critical for making this work properly! You must take every precaution to ensure that: The screw is driven into the hole in a directly perpendicular direction. As the plastic heats up, it becomes easier to knock the screw out of alignment and begin driving it at an angle. A constant (slow!) velocity should be used to drive the screw. This can be done with hand tools but will result in a pretty tough arm workout! Consider using a power drill with a low speed / constant torque option! The threads of the screw will displace some plastic. The excess molten plastic is called flashing and it it almost guarantees that you’ll need to do some post processing / cleanup of the screw holes. The molten plastic forms screw threads more or less instantly… but they won’t stay formed until the excess heat has dissipated and the material has solidified. Do not remove any screws from the body until they are cool to the touch! This can take several minutes! All 11(!) of the m4 screws driven into the sub body waiting for the plastic to set After all 11 screws had cooled and the threads had formed, the screws were removed. Nearly every one of the holes had some (small) build up of material: Use a straight edge blade or scrape tool to remove the flashing bits. In some cases, there may be some additional material that builds up on the screw threads themselves. Simply use a different screw for final assembly or use scrape tool or flame to remove the excess material from the threads: After the flashing is removed from around screw holes you should still be able to see threads within the hole but shouldn’t be able to see/feel any protrusions from the hole: Where possible, I have made the screw holes much deeper than strictly necessary. As the screw drives deeper, the tip will push molten plastic into this “well”. The extra depth on the screw hole gives the molten plastic somewhere to go. ","date":"2022-08-31","objectID":"/3d-printed-subwoofer-and-arylic-amp-enclosure/:4:1","tags":["fusion-360"],"title":"I made a thing: Yet another 3d printed speaker","uri":"/3d-printed-subwoofer-and-arylic-amp-enclosure/"},{"categories":["IMadeAThing"],"content":"Subwoofer Skeleton Gaskets Begin by driving the screws into the side panels and speaker driver then attach the gaskets. Info You do not need to press the gasket all the way up against the component; it will be compressed between the two components during final assembly. Secure the gasketed components to the body carefully Rotate each screw a few turns before moving to the next one. Do this in an alternating pattern similar to how you would tighten Lug Nuts on a car. Failure to do so will likely result in the gasket being rotated out of place internally! Be mindful of the gasket as you secure the panel to the subwoofer body. Too much torque/clamping force can cause the gasket to distort. Speaker wire Solder ~14 inches speaker wire to the RCA jack then install in the housing. Don’t forget to use heat shrink tubing or similar to insulate/protect the electrical connections! Pass the housing assembly through the speaker hole and the attach the driver and then housing to the back of the subwoofer. Firmly press the speaker wire into the the cable channel and push any slack wire into the RCA jack housing. Info There should be - at most - a few inches / 15cm of slack wire. Any more than this and you’ll run out of room inside the small housing! Once the speaker and jack housing are attached to the subwoofer body, simply line up and then attach the panels with the gaskets. Now is a good time to test that your soldering / connections are working! If you elected to use the gasket cord material, you would need to spend a non-trivial amount of time carefully cutting and routing segments of the material to fit inside the channel. You will almost certainly want to use superglue or similar to help you hold the material into the channel! The speaker wire should press-fit into the cable channel more or less sealing it completely. ","date":"2022-08-31","objectID":"/3d-printed-subwoofer-and-arylic-amp-enclosure/:4:2","tags":["fusion-360"],"title":"I made a thing: Yet another 3d printed speaker","uri":"/3d-printed-subwoofer-and-arylic-amp-enclosure/"},{"categories":["IMadeAThing"],"content":"Amp Tip Just like with the subwoofer components, you’ll want to “pre-thread” the various holes. Prep Notice the holes on the left that have been \"rightsized\" during threading and the holes on the top right that are relatively deformed still. For the various panel mounted jacks, there are small interior cavities designed to capture the nut. This cavity is actually oversized in the CAD model but due to various printer/slicing factors it is almost certainly going to be a tight fit! Align the nut with the cavity and then use the screw to pull the nut into the hole then tighten the screw all the way to pull the nuts into place: After the screw has pulled the nut into place, it should stay put. After the various holes have been prepared and the nuts have been fitted, you are ready for final assembly Assemble First, combine both parts of the midplate with the amp board. Set aside. Pro tip: print the MAC addresses of a network device somewhere on the device... Also, don't put unique device IDs onto the internet! Power Solder mains wires to the Powercon receptacle and terminate with crimp connectors. Secure the Powercon receptacle to the rear of the enclosure and then attach to the screw terminals on the PSU. Lower the PSU into the enclosure and secure it with the two screws in opposite corners. Start with the screw closest to the Powercon connector: Room inside the enclosure is intentionally tight so do as much wiring/connecting as possible before you start securing things to the enclosure. Then add the seconds screw in the opposite corner: Take this opportunity to power up and confirm that the polarity and voltage is correct! Amp PCB Push the three rotary encoders through the holes in the enclosure and then lower the midplate/PCB on top of the PSU. Route the DC wires up and around to the DC plug on the PCB. Install the RCA jacks and route wires as needed to the PCB. Then connect both the USB and RJ54 jacks on the amp module to their respective panel mount jacks. I forgot to get a picture of the USB cable but it works more or less the exact same way the ethernet cable does: A 6 inch patch cable was quicker but a custom length cable would almost certainly look better. Good thing this will soon be hidden away! Either remove the BT/WiFi antenna or secure it to the inside of the enclosure just above the LEDs (not pictured here). And before attaching the lid, attach the knobs: Don't forget the washer/nut! And just like that, the complete sub and amp. Subwoofer and amp enclosure mounted to the leg of my desk. Please ignore the mess of wires in the background! Files and licenses All the 3d printable files associated with this post are available from my printables.com page: Modified Skeleton Waveguide Subwoofer Speaker Arylic Up2Stream Amp 2.1 enclosure On that page, you will find a list of files like: ❯ tree . ├── amp-enclosure │ ├── amp-box-lid.step │ ├── amp-midplate-1.step │ ├── amp-midplate-2.step │ ├── amp-pcb.step │ └── amp-shell.step └── sub ├── gasket-bottom.step ├── gasket-speaker.step ├── gasket-top.step ├── main-body.step ├── panel-bottom.step ├── panel-top.step ├── rca-enclosure.step └── sub-components v28.f3z All photos used in this post are mine and are licensed under CC BY-NC-SA 4.0. Everything within the amp-enclosure is my original work. These files are licensed under CC BY-NC-SA 4.0. Everything in the sub directory is based off of the fusion360 file from zx82net which is licensed under CC BY-NC-SA 4.0. Likewise, my modifications fall under the same license. My modifications in ‘source’ formate are contained in the sub-components v28.f3z archive but to make printing easier, individual components are exported as STEP files. ","date":"2022-08-31","objectID":"/3d-printed-subwoofer-and-arylic-amp-enclosure/:4:3","tags":["fusion-360"],"title":"I made a thing: Yet another 3d printed speaker","uri":"/3d-printed-subwoofer-and-arylic-amp-enclosure/"},{"categories":["IMadeAThing"],"content":"Supporting files In building the various parts in the amp-enclosure directory, I relied on the following additional models: Tang Band W3-1876S 3\" Subwoofer by George Todd Fonte Chaveada Bivolt 24Vcc 4A 100W by Eliandro Baseggio ","date":"2022-08-31","objectID":"/3d-printed-subwoofer-and-arylic-amp-enclosure/:5:0","tags":["fusion-360"],"title":"I made a thing: Yet another 3d printed speaker","uri":"/3d-printed-subwoofer-and-arylic-amp-enclosure/"},{"categories":["gists","reference"],"content":"With UI components in the HA UI to enable/disable and change the duration of the timer.","date":"2022-08-14","objectID":"/esphome-dynamic-timer/","tags":["esphome"],"title":"Dynamic timers in ESPHome","uri":"/esphome-dynamic-timer/"},{"categories":["gists","reference"],"content":" As much as I love the ESPHome project, there are some features that seem like they’d be essential in an embedded/IoT firmware sdk yet their implementation remain left as an exercise to the user. This post is about one of those “Wait, that’s not built in?! How old is this project?” features: timers. ","date":"2022-08-14","objectID":"/esphome-dynamic-timer/:0:0","tags":["esphome"],"title":"Dynamic timers in ESPHome","uri":"/esphome-dynamic-timer/"},{"categories":["gists","reference"],"content":"ESPHome, Timers and You To be clear, ESPHome does have all of the primitives needed to build basic timers. You can get basic non-blocking pauses in automations with the delay: action. For simple cases where the interval is well known and fixed, this is sufficient. ","date":"2022-08-14","objectID":"/esphome-dynamic-timer/:1:0","tags":["esphome"],"title":"Dynamic timers in ESPHome","uri":"/esphome-dynamic-timer/"},{"categories":["gists","reference"],"content":"delay: and !lambda The delay: component does have one downside: the length of the delay can’t be adjusted after the fact. You can use a lambda function to dynamically calculate the length of the delay, but there is no way to adjust the length of the delay once it’s been initiated. This is already much better than a static delay that’s compiled into the binary, but this functionality is relatively new: Lambda Function for Delay? Need help to increase time delay by an automation - esphome Lambda value on delay: ","date":"2022-08-14","objectID":"/esphome-dynamic-timer/:1:1","tags":["esphome"],"title":"Dynamic timers in ESPHome","uri":"/esphome-dynamic-timer/"},{"categories":["gists","reference"],"content":"Completely configurable timers I have a few use cases that can’t be solved with basic lambda functions; I need to be able to adjust the delay timer dynamically - ideally through the Home Assistant web interface. This also isn’t a new ask from the community: Use Home Assistant number as delay in ESPHome ","date":"2022-08-14","objectID":"/esphome-dynamic-timer/:2:0","tags":["esphome"],"title":"Dynamic timers in ESPHome","uri":"/esphome-dynamic-timer/"},{"categories":["gists","reference"],"content":"A solution As an example showcase for this particular solution/implementation, I’ll use portions of a configuration file that I use with a Sonoff SwitchMan M5 switch. I want to implement basic “turn light off after $time” functionality with some additional requirements: The user should be able to arm/dis-arm this timer remotely The user should be able to adjust this timer up/down remotely The updated time should become active immediately Should live 100% on device not require working network to function Other than the last point, this is trivial to do entirely within a basic Home Assistant automation. The dynamic nature of the timer essentially means we need a place to store a) the number of seconds that an output has been ON for and b) the number of seconds that a user wants the output on for. Additionally, we’ll need to increment / evaluate the two numbers at a regular interval. Simple enough; we can implement this all with a few global vars and some basic scripts. Below is an edited/partial yaml file showing the core components and how they’re wired together. I have put clarifying comments throughout the file as there is some similar but unrelated arm/disarm functionality in this file. The device shows up in HA like so: This is how my entity shows up in HA. I can toggle the timeout period and disable the functionality altogether. The count-down timer can be engaged at any time; if the light is already on, the timer begins counting. The length of the timer can be adjusted at any time; the new value is used for the “turn off now?” calculation withing a second or so if it being updated. In short, it does everything I need without having to write any HA automation :D. Hopefully this helps somebody! ### # The user-facing switch is not *directly* wired to the relay # which allows us to insert arbitrary logic between button press # and turning the relay on/off. # When 'armed' pressing the button will toggle the relay. # Regardless of arm/dis-arm state, the input event will be reported to HA. # # Shelly uses the terminology \"linked/un-linked\" but the concept is the same. # You can insert a shelly module between a cheap wall switch with PIR sensor # and the load to squash nuisance triggers or simply expose the PIR sensor # to HA as a presence detection device. ## # See: https://esphome.io/guides/automations.html#global-variables globals: - id: glbl_relay_latched type: bool restore_value: yes initial_value: \"true\" # For the auto-off automation - id: glbl_timeout_armed type: bool restore_value: yes initial_value: \"true\" - id: glbl_timeout_length_ticks type: int restore_value: yes # 5 min * 60 seconds = 300 initial_value: \"300\" # We ALSO need to keep track of the number of 'ticks' # add _prefix to indicate 'internal' - id: _glbl_timeout_ticks type: int restore_value: no initial_value: \"0\" script: # End meaning the natural conclusion of the timer. Do whatever we're supposed to do when the timer fires off - id: on_timer_end mode: single then: - light.turn_off: light_1 - logger.log: \"on_timer_end: output should be off!\" # Stop meaning the pre-mature ending of the timer - id: on_timer_stop # Do not start a new run. Issue a warning. mode: single then: # For now, just clean up the globals and stop the ticking. # This hook could be used to do so much more, though. ## - lambda: |- auto TAG = \"script.on_timer_stop\"; id(_timer_tick).stop(); id(_glbl_timeout_ticks) = 0; ESP_LOGD(TAG, \"_timer_tick now stopped and _glbl_timeout_ticks is %d\", id(_glbl_timeout_ticks)); - id: _timer_tick # Start a new run after previous runs completes. This will happen until timer.stop() is called on us ## mode: queued then: # A single 'tick' is 1 second long - delay: 1s - lambda: |- auto TAG = \"lambda._timer_tick\"; // First, update the number of ticks id(_glbl_timeout_ticks) += 1; // Then check if we have timed out if (id(_glbl_timeout_ticks) \u003e= id(glbl_timeout_length_ticks) ) { // If we have timed out, run the script to handle the timer expiration // It's cleaner to","date":"2022-08-14","objectID":"/esphome-dynamic-timer/:2:1","tags":["esphome"],"title":"Dynamic timers in ESPHome","uri":"/esphome-dynamic-timer/"},{"categories":["hardware-modifications"],"content":"Why wasn't this thing Qi compatible from the beginning?!","date":"2022-06-10","objectID":"/hidrate-spark-qi-retrofit/","tags":["tuya","3dPrintable"],"title":"Using Qi charging to fix the biggest design flaw with the HidrateSpark Steel Pro bottle","uri":"/hidrate-spark-qi-retrofit/"},{"categories":["hardware-modifications"],"content":" Parts and Instructions The majority of this post covers the “why” this mod came to be. If you’re just looking for the mod, you can find the 3d printable parts, BOM and instructions in accompanying github repo. What Hidrate Spark bottles are one of a small but growing number of ‘smart’ water bottles. In this instance, ‘smart’ refers to some mechanism for reporting on and tracking the bottles content over time. There are a few ways to measure liquid levels but the current generation of Hidrate Spark bottles uses a small sensor puck which contains a load cell. As the bottle is emptied or filled, the puck measures a difference in weight which can then be compared with the known weight of a full/empty bottle to determine exactly how full the bottle is. There are a ton of reasons why you might want to track your water intake but they all generally fall into one of a few broad categories: Dietary restrictions: Athletes and competitors of all sorts need to precisely track their diets and water intake is no exception. Medication side effects: Any medication with ‘diminishes thirst’ as a side effect almost guarantees dehydration. A bottle that knows how long it’s been since your last drink is a very effective way to mitigate these side effects. Personal curiosity / quantified self: If you’re already tracking other aspects of your physical/mental health throughout the day, knowing when/how much water you had makes for some more interesting graphs. In the same vein, your levels of hydration can effect: cognition, blood pressure, mood, blood glucose levels, energy, complexion and more. Now as for why you’d need to bolt a kitchen scale and a BTLE radio onto the bottom of a water bottle in order to record this, there’s really only one reason: Automation. Warning I’m not going to entertain the “now you’re just being silly; there’s no need for a water bottle to have a radio or battery in it” crowd. If you don’t value any of the reasons outlined above then we agree… this is a silly water bottle and you don’t have a good reason to own one. ","date":"2022-06-10","objectID":"/hidrate-spark-qi-retrofit/:0:0","tags":["tuya","3dPrintable"],"title":"Using Qi charging to fix the biggest design flaw with the HidrateSpark Steel Pro bottle","uri":"/hidrate-spark-qi-retrofit/"},{"categories":["hardware-modifications"],"content":"Design evaluation Overall, the Hidrate Spark bottle works. It is not without some drawbacks, though. The primary and obvious downside is charging the battery 🪫. Depending on how aggressive you have the LEDs configured, the battery will need charging somewhere between 1-5 times a week. The app will inform you when the battery is low, but sometimes the notifications come far to late to be useful. I have lost data because the warning came less than an hour before the battery was dead and about 9 hours before I’d be able to charge it again. To charge the battery, you need to remove the sensor puck from the bottle and then attach a fiddly and proprietary USB connector. Worse, this connector uses prone-to-failure Pogo pins. Ignoring the shameful and unnecessary use of a non-standard USB micro/C port for charing, you now have to wait a few hours for the battery to charge; during this time, the puck can’t be inserted into the bottle so it can’t record data while it’s being charged. Remind you of anything? Apple won all sorts of 'asshole design' awards for this. Hidrate spark was inspired to also win such an award! src: YouTube/Tony H So to re-cap: Anywhere from 1-5 times a week you’ll need to remove the sensor from the bottle. During this time you’ll have to manually track any consumed water…. defeating the entire point of the bottle! If you don’t charge the puck in time, you’ll also loose automatic tracking of consumption… with little or no notice from either the puck or the app. The puck does not store measurements in flash so any data recorded before the battery died but not yet synced to the phone is gone. You will need to pack a dedicated cable for charging the bottle if you travel. Don’t loose or damage it because you can’t go to the closest electronics shop to get another compatible cable! When I did my initial tear down, I didn’t spot any electrical reason why the bottle could not charge and measure at the same time. After some additional testing, I was able to confirm that the firmware also does not object. At the very least the Hidrate team could have put the pogo pins on the bottom and shipped the bottle with a charging dock/base similar to how Ember does their mugs. Pogo pins and slip-rings are not perfect but at least you can charge and use the mug at the same time! The proprietary nature of the charge connection is still not ideal but at least the bottle could be “used” while it was charging. If the charging dock was centrally or conveniently located, the sensor puck could be consistently ’topped off’; trickle charing while idle in the same way wireless charging of phots works; take a sip and put the bottle back down to charge and measure the consumption. Alternatively, the Hidrate designers could have at least used a standard USBC or micro USB jack in the same location as the current charging pogo pins. Since the charge location is at the ’top’ of the sensor puck which is deeply embedded in the base of the water bottle, they might not have even needed to bother with a ‘fancy’ waterproof USB port and the additional electronics necessary to detect water/debris and cut off charging. Going with a standard USB C port in place of pogo pins would have the “can’t use it and charge it at the same time” draw back but it would have at least eliminated a proprietary cable! ","date":"2022-06-10","objectID":"/hidrate-spark-qi-retrofit/:1:0","tags":["tuya","3dPrintable"],"title":"Using Qi charging to fix the biggest design flaw with the HidrateSpark Steel Pro bottle","uri":"/hidrate-spark-qi-retrofit/"},{"categories":["hardware-modifications"],"content":"The other draw backs While the biggest design flaw is related to battery charging, the Hidrate spark does have a few other noteworthy issues. ","date":"2022-06-10","objectID":"/hidrate-spark-qi-retrofit/:2:0","tags":["tuya","3dPrintable"],"title":"Using Qi charging to fix the biggest design flaw with the HidrateSpark Steel Pro bottle","uri":"/hidrate-spark-qi-retrofit/"},{"categories":["hardware-modifications"],"content":"Recalibration The sensor puck measures changes in weight. To know how full the bottle is, the sensor puck must also be aware of the weight of a full and empty bottle. This weight range will change based on the density of the liquid inside. A bottle that is full of water will have a different weight compared to a bottle that is full of orange juice, for example. Any time the liquid in the bottle changes, the sensor puck will need to be recalibrated. To measure changes in weight/weight, the sensor puck relies on a load cell which (slightly) deforms as the load on it changes. All mechanical parts will wear with time so the bottle will periodically need to be recalibrated from time to time just to stay accurate. Likewise, if the bottle is dropped or otherwise experiences a sharp impact, the sensor will most certainly need to be recalibrated. ","date":"2022-06-10","objectID":"/hidrate-spark-qi-retrofit/:2:1","tags":["tuya","3dPrintable"],"title":"Using Qi charging to fix the biggest design flaw with the HidrateSpark Steel Pro bottle","uri":"/hidrate-spark-qi-retrofit/"},{"categories":["hardware-modifications"],"content":"Misc No temperature. The sensor is completely independent from the primary bottle so there is no easy way to record the temperature of the liquid. It would be nice to know how cold the liquid inside is from time to time. The hidrate team could have engineered a temperature sensor into the bottle body that would come into contact with the sensor puck when inserted but this almost certainly would have increased manufacturing costs for a relatively small benefit. Imprecise and limited user feedback. The only way the sensor puck can communicate with the user is through the ring of addressable LEDs around the permitter and through BTLE; the latter of which is unreliable as the user might not have their phone nearby or the app might be closed. There is no way for the lights to communicate exactly how long it’s been since the last drink or how much battery life is left. There are 10 LEDs and they can each be individually controlled so this drawback probably can be addressed through software; let the user pick when/how to display battery life remaining or to design a sequence of lights to indicate when the last drink took place. Most of the mass needs to be suspended above and not directly connected to the sensor puck. This means that the bottle has a high center of gravity which - when coupled with the small base - makes for a slightly unstable bottle. There isn’t any real way to avoid this though; if you’re going to use a load cell, the liquid must necessarily reasonably be above the load cell. ","date":"2022-06-10","objectID":"/hidrate-spark-qi-retrofit/:2:2","tags":["tuya","3dPrintable"],"title":"Using Qi charging to fix the biggest design flaw with the HidrateSpark Steel Pro bottle","uri":"/hidrate-spark-qi-retrofit/"},{"categories":["hardware-modifications"],"content":"A quick look at the TuYa bottle If you search the usual eastern import sites, you’ll see that the massive TuYa ecosystem has it’s own smart water bottle that can keep track of liquid intake. As best as I can tell, this is branded for TuYa but the OEM is Maxevis Smart Bottle(BLE) but the best FCC ID listing that I could find has 2ALQ5-M1 listed. Example aliexpress listing. Rather than use a load cell to measure the weight of the bottle and then calculate the liquid volume, the TuYa bottle uses an AMS IR range detector (probably TMF8805) to measure the distance to the top of the liquid. This approach is superior in virtually every way: All the electronics are in the lid: The entire top of the lid ‘free’ to communicate information to the user via a numeric screen. As a bonus, the TuYa lid supports charging while measuring the liquid level! Cheaper to manufacture: There is no complicated silicon overmolding as there is nothing in the lid that needs to fled or bend or otherwise deform. Sensor measures distance to the top of the liquid. Assuming a fixed volume, the density of the liquid does not matter; as long as the surface of the liquid is level and reflects IR, the sensor can tell you how full the bottle is. Downsides: Similar recalibration will be required if changing the bottle size… but at least no re-calibration needed when changing the liquid! As far as I can tell, there is only one size of bottle so this is a bit of a moot point. The data is not easily accessible. You can only get the data using their proprietary app and the TuYa app does not seem to have any easy way to exfiltrate this data to the sources where I’d prefer to record and manage it: FitBit. ","date":"2022-06-10","objectID":"/hidrate-spark-qi-retrofit/:3:0","tags":["tuya","3dPrintable"],"title":"Using Qi charging to fix the biggest design flaw with the HidrateSpark Steel Pro bottle","uri":"/hidrate-spark-qi-retrofit/"},{"categories":["hardware-modifications"],"content":"Brief bit of TuYa / Maxevis / Sguai M1 BTLE logs Below is a (lightly) obfuscated log file from the amazing nRF connect app. I am dumping the BTLE characteristics and data here for SEO purposes. If you do find this post and these logs and do manage to reverse engineer the packet format… do let me know!. nRF Connect, 2022-06-12 M1 (DC:23:4D:DE:AD:BE) D 11:35:37.604 [Broadcast] Action received: android.bluetooth.device.action.ACL_CONNECTED V 11:35:37.796 Connecting to DC:23:4D:DE:AD:BE... D 11:35:37.796 gatt = device.connectGatt(autoConnect = false, TRANSPORT_LE, preferred PHY = LE 1M) D 11:35:37.799 [Callback] Connection state changed with status: 0 and new state: CONNECTED (2) I 11:35:37.799 Connected to DC:23:4D:DE:AD:BE V 11:35:37.809 Discovering services... D 11:35:37.809 gatt.discoverServices() D 11:35:37.811 [Callback] Services discovered with status: 0 I 11:35:37.811 Services discovered V 11:35:37.816 Generic Access (0x1800) - Device Name [R] (0x2A00) - Appearance [R] (0x2A01) Generic Attribute (0x1801) Unknown Service (00001910-0000-1000-8000-00805f9b34fb) - Unknown Characteristic [W WNR] (00002b11-0000-1000-8000-00805f9b34fb) - Unknown Characteristic [N] (00002b10-0000-1000-8000-00805f9b34fb) Client Characteristic Configuration (0x2902) D 11:35:37.816 gatt.setCharacteristicNotification(00002b10-0000-1000-8000-00805f9b34fb, true) V 11:36:09.013 Refreshing device cache... D 11:36:09.013 gatt.refresh() (hidden) I 11:36:09.015 Cache refreshed V 11:36:09.019 Discovering services... D 11:36:09.019 gatt.discoverServices() D 11:36:09.928 [Callback] Services discovered with status: 0 I 11:36:09.928 Services discovered V 11:36:09.931 Generic Access (0x1800) - Device Name [R] (0x2A00) - Appearance [R] (0x2A01) Generic Attribute (0x1801) Unknown Service (00001910-0000-1000-8000-00805f9b34fb) - Unknown Characteristic [W WNR] (00002b11-0000-1000-8000-00805f9b34fb) - Unknown Characteristic [N] (00002b10-0000-1000-8000-00805f9b34fb) Client Characteristic Configuration (0x2902) D 11:36:09.931 gatt.setCharacteristicNotification(00002b10-0000-1000-8000-00805f9b34fb, true) V 11:36:12.944 Reading all characteristics... V 11:36:12.944 Reading characteristic 00002a00-0000-1000-8000-00805f9b34fb D 11:36:12.944 gatt.readCharacteristic(00002a00-0000-1000-8000-00805f9b34fb) I 11:36:13.027 Read Response received from 00002a00-0000-1000-8000-00805f9b34fb, value: 0 bytes V 11:36:13.030 Reading characteristic 00002a01-0000-1000-8000-00805f9b34fb D 11:36:13.030 gatt.readCharacteristic(00002a01-0000-1000-8000-00805f9b34fb) I 11:36:13.126 Read Response received from 00002a01-0000-1000-8000-00805f9b34fb, value: (0x) 00-00 A 11:36:13.126 \"[0] Unknown\" received V 11:36:13.128 2 characteristics read I 11:36:14.079 Connection parameters updated (interval: 7.5ms, latency: 0, timeout: 5000ms) I 11:36:14.176 Connection parameters updated (interval: 50.0ms, latency: 0, timeout: 5000ms) V 11:36:22.198 Reading characteristic 00002a01-0000-1000-8000-00805f9b34fb D 11:36:22.198 gatt.readCharacteristic(00002a01-0000-1000-8000-00805f9b34fb) I 11:36:22.276 Read Response received from 00002a01-0000-1000-8000-00805f9b34fb, value: (0x) 00-00 A 11:36:22.276 \"[0] Unknown\" received V 11:36:22.734 Reading characteristic 00002a01-0000-1000-8000-00805f9b34fb D 11:36:22.734 gatt.readCharacteristic(00002a01-0000-1000-8000-00805f9b34fb) I 11:36:22.826 Read Response received from 00002a01-0000-1000-8000-00805f9b34fb, value: (0x) 00-00 A 11:36:22.826 \"[0] Unknown\" received V 11:36:27.086 Reading all characteristics... V 11:36:27.086 Reading characteristic 00002a00-0000-1000-8000-00805f9b34fb D 11:36:27.086 gatt.readCharacteristic(00002a00-0000-1000-8000-00805f9b34fb) I 11:36:27.176 Read Response received from 00002a00-0000-1000-8000-00805f9b34fb, value: 0 bytes V 11:36:27.179 Reading characteristic 00002a01-0000-1000-8000-00805f9b34fb D 11:36:27.179 gatt.readCharacteristic(00002a01-0000-1000-8000-00805f9b34fb) I 11:36:27.277 Read Response received from 00002a01-0000-1000-8000-00805f","date":"2022-06-10","objectID":"/hidrate-spark-qi-retrofit/:3:1","tags":["tuya","3dPrintable"],"title":"Using Qi charging to fix the biggest design flaw with the HidrateSpark Steel Pro bottle","uri":"/hidrate-spark-qi-retrofit/"},{"categories":["gists","reference"],"content":"Its not me, Tasmota. It's you. Lets agree to still be friends, though!","date":"2022-06-09","objectID":"/treatlife-ds03-esphome/","tags":["esphome","home-assistant","home-automation"],"title":"Using ESPHome with the Treatlife DS03","uri":"/treatlife-ds03-esphome/"},{"categories":["gists","reference"],"content":" Post depreciation notice This is an update to the Fixing Home Assistant discovery with Tasmota on the Treatlife DS03 post. Tasmota reliability A few months ago, I started to notice some bizarre behavior with the DS03 ceiling fan controllers that I had previously flashed with Tasmota. Very regularly, the devices would crash and reboot! I almost never noticed unless I was explicitly looking at the uptime / boot count graphs for the devices but every once in a while, the device would reboot right as I was trying to control it remotely. I was able to confirm that the rules I was using to ‘augment’ the Home Assistant auto-discovery payload were the culprit. Odd since nothing had changed; only the version of tasmota has been changing. While it’s not clear what the issue is, it probably has something to do with RAM exhaustion. The details are in Tasmota issue #15636 if your curious. The Tasmota rules were a workaround to a broader problem: tasmota offers very little to customize how the entity is advertised to Home Assistant. Since the workaround was no longer working, the next logical step is to re-evaluate if Tasmota is the appropriate firmware for the device. Using ESPHome with the DS03 Beta software release I strongly prefer MQTT for my Home Automation interoperability. The MQTT \u003c-\u003e Home Assistant mechanism in ESPHome has been playing second fiddle to the native ESPHome \u003c-\u003e Home Assistant API as of late so there are more bugs and usability issues. As such, the YAML below depends on a fix for mqtt.fan component that exists in the 2022.06.b2 or later release. Specifically, this commit. If you do not use MQTT for your ESPHome \u003c-\u003e Home Assistant linking, you should be fine using the latest ‘stable’ release of ESPHome. After migrating the tasmota install to ESPHome, I am happy to report that ESPHome is running on the DS03 and that the full/proper MQTT auto-discovery payload is published. 🥳 Here is a ‘reference’ YAML file that is similar to the ones I use in ‘production’. You will need to add your own MQTT/WiFi… etc configuration. substitutions: hostname: YourHostNameHere friendly_name: YourDeviceNameHere esphome: name: ${hostname} platform: ESP8266 board: esp01_1m # Enable logging logger: level: INFO # Uses a TuYa MCU to drive the power components # See: https://esphome.io/components/tuya.html ## tuya: # See: https://esphome.io/components/uart.html uart: rx_pin: GPIO3 tx_pin: GPIO1 # Not sure why/where/how this error shows up but seems functional as is /shrug # [E][uart:015]: Invalid baud_rate: Integration requested baud_rate 9600 but you have 115200! baud_rate: 115200 # See: https://esphome.io/components/light/tuya.html light: - name: ${friendly_name} Light id: device_light platform: \"tuya\" dimmer_datapoint: 10 switch_datapoint: 9 min_value: 100 max_value: 1000 icon: \"mdi:ceiling-fan-light\" restore_mode: ALWAYS_OFF # See: https://esphome.io/components/fan/tuya.html fan: - name: ${friendly_name} Speed id: device_fan platform: \"tuya\" switch_datapoint: 1 speed_datapoint: 3 speed_count: 4 icon: \"mdi:ceiling-fan\" restore_mode: ALWAYS_OFF ","date":"2022-06-09","objectID":"/treatlife-ds03-esphome/:0:0","tags":["esphome","home-assistant","home-automation"],"title":"Using ESPHome with the Treatlife DS03","uri":"/treatlife-ds03-esphome/"},{"categories":["teardown"],"content":"Because I couldn't find any pictures online","date":"2022-05-14","objectID":"/omron-bp7000-evolv-teardown/","tags":["teardown"],"title":"Quick look inside the OMRON Evolv BP7000 Blood Pressure cuff","uri":"/omron-bp7000-evolv-teardown/"},{"categories":["teardown"],"content":"A friend recently asked for my help with some reverse engineering. They wanted to know how difficult it would be to re-use some components from a lot of refurbished blood pressure cuffs they had recently acquired. Sounds easy, right? At a high level, there’s going to be: a pump and a pressure sensor and a valve a micro controller to run the show a way to communicate the readings back to the user In the interest of expediting things, I asked for the FCC IDs from the devices so I could have a look inside… and was surprized to find out that there was no FCC listing for this particular model from the lot. 😕 Here's what it looks like on the outside So with that out of the way, here’s what the Omron BP7000 looks like on the inside. Teardown There are a total of 7 philips screws holding the unit together. Two of the six are much smaller so two different sized bits might be a good idea. After removing all the screws and carefully prying back the plastic clips, the front panel comes off of the body giving us the first look at the PCB stackup and mechanical internals. The OLED screen is not held in place with anything so be exceedingly careful when opening! Here’s a closeup of the ‘front’ of the main PCB. There’s a ton more passives than I thought there would be but a single large controller next to a pressure sensor is about what I figured. Details on the ICs are below. I am not quite sure what this little IC is for. Calibration or firmware? The BTLE module is connected through a 8 wire FFC. Several of the square pads are accessible from the exterior before the pressure cuff is attached. Almost certainly for programming at the factory. With the main PCB removed, you can see the actual mechanical components that build up and release the air pressure. The two blue wires are for the solenoid that vents air pressure out of the system. The port to the right and just above the BTLE module is where air pressure is measured. The white box attached tot the motor is the air pump. ","date":"2022-05-14","objectID":"/omron-bp7000-evolv-teardown/:0:0","tags":["teardown"],"title":"Quick look inside the OMRON Evolv BP7000 Blood Pressure cuff","uri":"/omron-bp7000-evolv-teardown/"},{"categories":["teardown"],"content":"BTLE module For some additional photos of the module w/o a shield, check the amazing fccid.io page. This module appears to be used in several similar blood pressure monitors. ","date":"2022-05-14","objectID":"/omron-bp7000-evolv-teardown/:1:0","tags":["teardown"],"title":"Quick look inside the OMRON Evolv BP7000 Blood Pressure cuff","uri":"/omron-bp7000-evolv-teardown/"},{"categories":["teardown"],"content":"PCB Markings AKA SEO optimization 😉 Main PCB is marked: HEM-7600T MEIKO 5662769-8A 20M MDK332V-0W And on the rear: F02Z1B F15Z1B The main CPU is - apparently - from Toshiba and marked with: 2127 HAL T5DE1FG 369440 I can’t find anything specific. The only result in google is this spreadsheet. If you look closely, you’ll find the string T5DE1FG (TOSHIBA) in column L on rows 1254 and 1255. The pressure sensor is labeled: PP02 L8HW which appears to be an Omron made sensor. The small 8 pin IC adjacent to the main processor is labeled: 4G64 12953 BTLE PCB is marked: MODEL: HHX-MD05T FCC ID: Q6ZHHXMD05T IC: 10623A-HHXMD05T Anatel 13257-20-10304 007-AE0102 9545448-2A ","date":"2022-05-14","objectID":"/omron-bp7000-evolv-teardown/:2:0","tags":["teardown"],"title":"Quick look inside the OMRON Evolv BP7000 Blood Pressure cuff","uri":"/omron-bp7000-evolv-teardown/"},{"categories":["guide"],"content":"This is a super quick “because the official docs didn’t make it super clear so here’s what ended up working for me” post. After some very disappointing WiFi connectivity issues, I settled on a Zwave based thermostat to replace the Venstar thermostat. After installing the Honeywell TH6320 and connecting it to the ZwaveJS gateway, a new `climate`` entity appeared in Home Assistant. From there, I was able to see/control: The current thermostat setpoint/mode The current air temp and humidity The current battery level / if the thermostat thought the battery was low I knew that it was possible to adjust the the screen backlight from the thermostat itself so I was a bit confused when there was no such configuration entity exposed in Home Assistant. Note the `Idle_brightness` sensor. That's not part of the 'default' zwavejs2mqtt install. After playing around with the ZwaveJS2MQTT web interface for bit, I discovered that it was possible to adjust the backlight brightness…and over 40 other settings under the Configuration v4 section. I can totally understand why only the “core” functionality would be automatically exposed to Home Assistant; most of the 40+ knobs are things that do not need to be set beyond the initial installation. So, How do I go about getting ZwaveJS2MQTT to automatically tell Home Assistant about the current backlight level? ","date":"2022-05-12","objectID":"/zwavejs-autodiscovery-additional-entities/:0:0","tags":["zwave","home assistant"],"title":"Configuring additional ZwaveJS entities in Home Assistant over MQTT","uri":"/zwavejs-autodiscovery-additional-entities/"},{"categories":["guide"],"content":"Exposing ‘idle brightness’ to Home Assistant as a Sensor From the Configuration v4 tab for the thermostat node, I found the input field [4-112-0-39] Idle Brightness which let me control the thermostat screen backlight level. I don’t know what the numbers mean, but they are important / uniquely identify a specific setting. Note If you are using this as a guide but for a different setting (perhaps you want to keep an eye on [4-112-0-28] Minimum Cool Temperature, for example) then you will want to substitute your parameter setting ‘address’ as appropriate. After some more experimentation and trying to grok documentation, I figured out how to get ZwaveJS to advertise the current value for the backlight brightness as a sensor in Home Assistant. The 'HOME ASSISTANT' tab of my thermostats' page. Here’s how to do it: Select the node in question from the Control Panel page on the ZwaveJS2MQTT web UI. In this case, you can see that my thermostat is node 4. Yours will likely be different. Select the Home Assistant tab from the left. You can see it selected in the above screenshot. In the blank Hass Device JSON box, paste the JSON document that describes the sensor / entity you wish to expose to Home Assistant. I struggled for some time trying to figure out what the document should look like but was able to ‘reverse engineer’ a working payload by studying the sensor_humidity_air entity that was automatically created. Then click the ADD button that should have activated just above the Hass Device JSON. A new row should appear in the Home Assistant - Devices table Click the newly added row so the Hass Device JSON field is populated with the JSON document you have added. Click the UPDATE button that should appear just above the Hass Device JSON label Assuming no issues, this will send the MQTT message which tells Home Assistant about your new sensor. You may wish to use a MQTT broker inspection app to monitor the exact payload that is sent to the homeassistant/... topic as well as tail -f home-assistant.log. If Home Assistant gets the message, any validation errors will show up in the HA log. Once you are satisfied with how the entity is presented in Home Assistant, click the STORE button just below the Home Assistant - Devices heading on the ZwaveJS2MQTT web UI. When all is said and done, this is what you should see: ","date":"2022-05-12","objectID":"/zwavejs-autodiscovery-additional-entities/:1:0","tags":["zwave","home assistant"],"title":"Configuring additional ZwaveJS entities in Home Assistant over MQTT","uri":"/zwavejs-autodiscovery-additional-entities/"},{"categories":["guide"],"content":"Example payload Here is a (slightly edited) version of the JSON document I added via the Hass Device JSON entry. { \"type\": \"sensor\", \"object_id\": \"idle_brightness\", \"discovery_payload\": { \"value_template\": \"{{ value_json.value }}\", \"state_topic\": \"zwave/YourThermostat_NameHere/112/0/39\", \"json_attributes_topic\": \"zwave/YourThermostat_NameHere/112/0/39\", \"device\": { \"identifiers\": [ \"zwavejs2mqtt_0xdeadbeef_node4\" ], \"manufacturer\": \"Honeywell\", \"model\": \"T6 Pro Z-Wave Programmable Thermostat (TH6320ZW)\", \"name\": \"YourThermostat NameHere\", \"sw_version\": \"1.3\" }, \"name\": \"YourThermostat NameHere idle_brightness\", \"unique_id\": \"zwavejs2mqtt_0xdeadbeef_4-112-0-Idle_Brightness\", \"entity_category\": \"config\", \"icon\": \"mdi:brightness-percent\" }, \"discoveryTopic\": \"sensor/YourThermostat_NameHere/idle_brightness/config\", \"values\": [ \"112-0-39\" ], \"persistent\": false, \"ignoreDiscovery\": false, \"id\": \"sensor_idle_brightness\" } I have replaced a few things in the example payload. You will want to retrieve the correct values for your payload from one of the automatically generated payloads. I used the sensor_humidity_air device as a starting point for my payload. ","date":"2022-05-12","objectID":"/zwavejs-autodiscovery-additional-entities/:1:1","tags":["zwave","home assistant"],"title":"Configuring additional ZwaveJS entities in Home Assistant over MQTT","uri":"/zwavejs-autodiscovery-additional-entities/"},{"categories":["guide"],"content":"Ok, but what about writing to the thermostat? A basic 'helper' widget for use in Home Assistant Automations. Once the sensor exists in Home Assistant, you will probably want to use it in an automation. Here is a simple automation that watches a basic number input widget and sets the backlight brightness for the thermostat based on what the widget is set to: alias: Sync thermostat brightness to input select description: An Example automation. trigger: - platform: state entity_id: - sensor.yourthermostat_namehere_idle_brightness id: physical - platform: state entity_id: - input_number.thermostat_backlight id: virtual condition: [] action: - choose: - conditions: - condition: trigger id: virtual sequence: - service: mqtt.publish data: topic: zwave/YourThermostat_NameHere/112/0/39/set payload_template: '{{trigger.to_state.state}}' - conditions: - condition: trigger id: physical sequence: - service: input_number.set_value target: entity_id: input_number.thermostat_backlight data_template: value: '{{trigger.to_state.state | float}}' default: [] mode: single max_exceeded: silent This works but it’s not automagic. We can do better! ","date":"2022-05-12","objectID":"/zwavejs-autodiscovery-additional-entities/:2:0","tags":["zwave","home assistant"],"title":"Configuring additional ZwaveJS entities in Home Assistant over MQTT","uri":"/zwavejs-autodiscovery-additional-entities/"},{"categories":["guide"],"content":"More Automagic, More Better The primary downside with the above automation is that the user (read: you) needs to create the input_number widget and then spend the time telling Home Assistant what to do when the value changes. This isn’t a particularly difficult task - only ~30 lines of yaml… but what if we didn’t have to do that? What if Home Assistant had a robust auto discovery mechanism that we could take advantage of to automagically set up a basic input widget that would transmit the necessary MQTT payload to adjust the backlight … automatically? I have good news and bad news. The good news is that we totally can do this. 🎉 The bad news is that ZwaveJS2MQTT does not appear to support the input_select type of entity that we’ll need to pull this off. 👎 I am not super familiar with the ZwaveJS2MQTT code base, but it looks like there is no validation on the JSON you enter under the Hass Device JSON field but there is some validation / filtering on the MQTT message that is sent for auto discovery. ZwaveJS2MQTT does not seem to support select components via MQTT so the payload that is sent to Home Assistant is incomplete and results in errors: │ ERROR (MainThread) [homeassistant.util.logging] Exception in discovery_callback when dispatching 'mqtt_discovery_updated_('select', 'YourThermostat NameHere idle_brightness │ │ Traceback (most recent call last): │ File \"/usr/src/homeassistant/homeassistant/components/mqtt/mixins.py\", line 724, in discovery_callback │ await self._discovery_update(payload) │ File \"/usr/src/homeassistant/homeassistant/components/mqtt/mixins.py\", line 886, in discovery_update │ config = self.config_schema()(discovery_payload) │ File \"/usr/local/lib/python3.9/site-packages/voluptuous/validators.py\", line 232, in __call__ │ return self._exec((Schema(val) for val in self.validators), v) │ File \"/usr/local/lib/python3.9/site-packages/voluptuous/validators.py\", line 355, in _exec │ raise e if self.msg is None else AllInvalid(self.msg, path=path) │ File \"/usr/local/lib/python3.9/site-packages/voluptuous/validators.py\", line 351, in _exec │ v = func(v) │ File \"/usr/local/lib/python3.9/site-packages/voluptuous/schema_builder.py\", line 272, in __call__ │ return self._compiled([], data) │ File \"/usr/local/lib/python3.9/site-packages/voluptuous/schema_builder.py\", line 818, in validate_callable │ return schema(data) │ File \"/usr/local/lib/python3.9/site-packages/voluptuous/schema_builder.py\", line 272, in __call__ │ return self._compiled([], data) │ File \"/usr/local/lib/python3.9/site-packages/voluptuous/schema_builder.py\", line 595, in validate_dict │ return base_validate(path, iteritems(data), out) │ File \"/usr/local/lib/python3.9/site-packages/voluptuous/schema_builder.py\", line 433, in validate_mapping │ raise er.MultipleInvalid(errors) │ voluptuous.error.MultipleInvalid: required key not provided @ data['options'] While it would be nice if ZwaveJS2MQTT would support more device types, we have a pretty simple fix: use another device to publish a valid configuration payload. And as it turns out, it’s trivial to get Home Assistant to publish an arbitrary payload to an arbitrary topic when it starts up. alias: Autoconfigure Thermostat Backlight select description: \u003e- On HA start up, publish MQTT payload so HA auto-discovers the input_select to automate thermostat backlight brightness trigger: - platform: homeassistant event: start condition: [] action: - service: mqtt.publish data: topic: homeassistant/select/YourThermostat_NameHere/idle_brightness/config payload: \u003e- {\"options\":[\"0\",\"1\",\"2\",\"3\",\"4\",\"5\"],\"name\":\"MainThermostat idle_brightness\",\"state_topic\":\"zwave/YourThermostat_NameHere/112/0/39\",\"value_template\":\"{{'{{value_json.value}}'}}\",\"command_topic\":\"zwave/YourThermostat_NameHere/112/0/39/set\",\"command_template\":\"{{'{{value}}'}}\",\"unique_id\":\"zwavejs2mqtt_0xdeadbeef_4-112-0-Idle_Brightness_Select\",\"device\":{\"identifiers\":[\"zwavejs2mqtt_0xdeadbeef_node4\"],\"manufacturer\":\"Honeywell\",\"model\":\"T6ProZ-WaveProgramm","date":"2022-05-12","objectID":"/zwavejs-autodiscovery-additional-entities/:3:0","tags":["zwave","home assistant"],"title":"Configuring additional ZwaveJS entities in Home Assistant over MQTT","uri":"/zwavejs-autodiscovery-additional-entities/"},{"categories":["teardown"],"content":"And some initial thoughts / technical details","date":"2022-04-23","objectID":"/venstar-t7850-teardown-review/","tags":["teardown","home assistant"],"title":"Quick look inside Venstar T7850 - One of the only 'no-cloud' WiFi Thermostats that plays nice with Home Assistant","uri":"/venstar-t7850-teardown-review/"},{"categories":["teardown"],"content":" Info As of 2022-05-11, there is an update on my experience with the thermostat below! This is another one of those posts from my never ending quest to integrate Home Assistant with All The Things! The thermostat that was installed when I moved in was an early Nest thermostat. These thermostats are - for the most part - well reviewed and liked. I had no complaints… except one. Google only permits programmatic interaction with Nest devices through their Smart Device Management API. This API is essentially cloud hosted MQTT and requires a small fee to access. There is no way to control a supported Nest device without an Internet connection… even if the Home Assistant server and the Nest device are on the same subnet! 👎 This policy makes it needlessly complicated to integrate the thermostat with Home Assistant and that cripples my climate control automations beyond a tolerable level. With summer approaching, I started looking for a thermostat that would play nice with Home Assistant. My criteria: Work with existing HVAC system and wiring. Play nice with Home Assistant, preferably with a local API. Cost no more than the Nest thermostat. Use TCP/IP over WiFi instead of Zigbee or Zwave. As it turns out, I am not the only one on a similar hunt: Which of these thermostats have the best experience with HA? Smart Thermostat Recommendations for 2021 Best, easiest and of course lowest cost smart thermostat for Home Assistant What is the best thermostats to use with Home Automation The “TL;DR:” of most of those threads is: “Any thermostat with zwave of zigbee will work”. As most people don’t particularly care about the network protocol(s) used to link Home Assistant to the thermostat, that’s fine advice. For whatever reason, you have to dig much deeper to find people discussing WiFi based thermostats that play nice with Home Assistant w/o an internet connection but there are a few out there. I settled on the Venstar T7850. Initial Impressions: Below is a super concise review that is based mostly on my initial impressions / install experience. I have only recently acquired and installed the T7850 so I can’t comment on any of the finer points or drawbacks that could only be known after several months experience with the thermostat. TL;DR: I wish I had more insight into Google’s disappointing decision to not implement a local API for the Nest; I’ll uninstall the Venstar and put it up on eBay the nanosecond the Nest gets a local API! ","date":"2022-04-23","objectID":"/venstar-t7850-teardown-review/:0:0","tags":["teardown","home assistant"],"title":"Quick look inside Venstar T7850 - One of the only 'no-cloud' WiFi Thermostats that plays nice with Home Assistant","uri":"/venstar-t7850-teardown-review/"},{"categories":["teardown"],"content":"An Update on WiFi connectivity Less than 48 hours after installing the thermostat, I noticed that Home Assistant was no longer able to control it. Every entity on the device showed Unavailable. Apparently, the thermostat had fallen off the network and was struggling to get back on. I went through all the usual troubleshooting steps and was able to confirm a few interesting things: Changing the network name and password didn’t help. I disabled the SSID on my access point and created an identical SSID/network key on an old raspberry pi. The thermostat was usually able to connect to the AP. If I powered down the raspberry pi AP and re-enabled the same network name/key on my AP, the thermostat would not connect. If left on the raspberry pi AP, the thermostat would eventually eventually “fall off”. I initially suspected that the initial firmware update I didn’t consent to may have broken something and started to look for a way to downgrade the firmware to the previous version that did manage to connect to my AP quickly. No such luck. While the thermostat does have an A/B partition scheme, I couldn’t find any way to force a downgrade or even get older firmware files from the manufacturer. After a few factory resets and additional troubleshooting, I started to look around… and apparently this is not a new problem. Here are two ‘relatively new’ reddit threads that mention similar connection issues with similar models in the same product family: Source: /r/homeassistant post: ALL Local Control Thermostat with MQTT and Home Assistant - Venstar T7900 Source: /r/thermostats post: Venstar T7900 - problem with WIFI And an Amazon question from years ago indicating that this might not be a ’new’ issue: Source: Amazon question: My venstar phone app says thermostat is offline. How do I reconnect it ? A Home Assistant community/support form poster seems to have a similar issue and even offers a fix… which did not work. Source: Home Assistant community forums: Venstar T7900 \u0026 Trane Air Conditioning / Amana Forced Air Furnace My access point is also a Unifi AP so of course there are a few threads on the unifi support forums: Source: Ubiquity community forums: Trouble associating Venstar Wifi thermostats with one particular UAP-AC-PRO Note Note: The FCC documents indicate that Venstar did re-brand the thermostat for First Alert and Bionaire. It is likely that they also did this for Carrier as well judging by pictures of a Carrier Infinity Touch Control thermostat. Source: Ubiquity community forums: Cant connect to Carrier Infinity Thermostat The user name seems familiar; probably the same user from one of the above reddit threads: Source: Ubiquity community forums: Venstar T7900 Thermostat Won't Connect to WiFi Source: Ubiquity community forums: Venstar ColorTouch Thermostat Unable to Connect to AC-LR TL;DR: Ubiquity’s Unifi line of wireless access points has a pretty solid reputation for a reason; by and large they just work. I have installed dozens of them over the years and have supported installs with thousands of them and had far fewer issues with those customers/sites than with your typical ‘soho’ routers and other consumer-grade access points. As of right now, I have a little more than a hundred wireless devices hanging off of the same AP that the thermostat failed to reliably connect to. Over the past several years, I have acquired many more devices and - with the exception of one other device - I have never had issues connecting anything to my wireless network. Even if only some users experience issues with Venstar thermostats connecting to WiFi, I have to wonder why the issue exists at all. It’s 2022 and there’s no excuse for basic WiFi network compatibility issues like the kind that were more common in the bad old days of early WiFi circa 2005. Somehow, the hundred+ other devices got their WiFi right… what is Venstar missing? While I didn’t want to introduce yet another wireless’s networking standard to my home, I am considerably happier","date":"2022-04-23","objectID":"/venstar-t7850-teardown-review/:1:0","tags":["teardown","home assistant"],"title":"Quick look inside Venstar T7850 - One of the only 'no-cloud' WiFi Thermostats that plays nice with Home Assistant","uri":"/venstar-t7850-teardown-review/"},{"categories":["teardown"],"content":"The Good It has optional cloud connectivity! It’s trivial to turn this off and - as far as I can tell - it is mostly disabled. More on that below. API is documented! API accessible over HTTP or HTTPS and can be put behind BasicAuth! 👏 Thermostat has lots of tweaks and options meant for ‘power users’. These settings ship with reasonably sane default values. I suspect that most of these options are included in the “residential” devices only because they’re already baked into the firmware for “commercial” customers that legitimately do need lots of knobs to adjust. It’s a reasonably good looking LCD screen; viewing angles are decent and the screen is plenty readable in direct sunlight when the brightness is turned all the way up. The piezoelectric beeper can be disabled in software! 🔇 ","date":"2022-04-23","objectID":"/venstar-t7850-teardown-review/:2:0","tags":["teardown","home assistant"],"title":"Quick look inside Venstar T7850 - One of the only 'no-cloud' WiFi Thermostats that plays nice with Home Assistant","uri":"/venstar-t7850-teardown-review/"},{"categories":["teardown"],"content":"The Bad The API is pretty limited. The screen has an integrated resistive touch panel. This was a poor choice for for a product design in 2014/2015 and is inexcusable for in 2022! 👎 There is no way to use your own TLS certificate. You have to use the certificate generated by the device. 🙁 There is no way to disable automatic firmware updates or view release notes on device. If there’s an update found, the thermostat will download it and restart… even if the user is actively using the device. 😡 Even windows (finally) let you push the update to after you’re done using the device! There is no ambient brightness sensor or presence detection sensor so the screen is always on at one brightness level. The device has WiFI and communicates with the mothership using TLS1.2… but somehow it does not have NTP support! Yep! This is literally the only internet enabled thing that I own that still requires me to manually set the date/time 😡. What a glaring oversight! ","date":"2022-04-23","objectID":"/venstar-t7850-teardown-review/:3:0","tags":["teardown","home assistant"],"title":"Quick look inside Venstar T7850 - One of the only 'no-cloud' WiFi Thermostats that plays nice with Home Assistant","uri":"/venstar-t7850-teardown-review/"},{"categories":["teardown"],"content":"API limitations Warning The only documented portions of the API cover interrogating the device for state about sensors and mode. Keep these limitations in mind when considering exactly what you want to be able to control via the API. E.G.: It was very disappointing to find out that I can’t adjust the screen on/off/brightness state via the API! So much for automatically turning the screen at night and waking it only when nearby motion was detected! There is no documented way to control most of the other device settings that can be manipulated through the screen. Things you can do via the screen but not via the (documented) API: Adjust the date / time Adjust the screen brightness Adjust any program/schedule settings or adjust vacation mode settings Adjust setpoint limits (e.g.: don’t let the user try to cool below 25°C or heat above 35°C) Set/Disable Screen lock (requires a PIN code to access controls) Set ‘screensaver’ functionality. You can’t toggle this via the API nor can you set the “idle timeout” setting or upload custom photos. You have to resort to a desktop / electron app to do so! I have not bothered with the “skyport” remote control functionality that Venstar offers but their marketing literature implies that some of the above points can be manipulated via their remote service. This leads me to believe that there is more to the API that what is documented publicly. Given that the thermostat seems to have it’s own CA created by Venstar engineering, I would bet that simple TLS proxy will not be enough to discover any undocumented API endpoints in the unit that could allow for more control. If anybody does know of a local API endpoint that allows for controlling the screen brightness…please do get in touch! Teardown It’s not a particularly complicated device: everything is on one side of a multi-layer PCB. A ton of electronics for directly interfacing with thermostat wires and a few ICs for all the fun stuff! The photos are mine, taken right before installing the unit. There are more / similar photos at the FCC filing if you’re curious. I am including mine for some additional detail and as a ‘mirror’ of the FCC photos. Shoutout to the amazing fccid.io ❤️! The main PCB is readily accessed - just remove the rear panel / wall mount bracket. I don't see any (mechanical) relays Lots of passives and misc ICs and a few unpopulated footprints. This is consistent with some of the documentation on file with the FCC: there is 1 PCB for all 6 products in the family and the only significant difference is the software and the humidity sensor. If i had to guess, I’d be that U13 is the humidity sensor. Only one obvious pin header but the silkscreen JP2 implies that there’s another one somewhere (JP1). The pins are suspiciously close to the full sized SD card and don’t match the pinout for an obvious UART but 6 pins could be JTAG. There’s nothing remarkable on the other side; just a connection for the LCD and a beeper. At least the beeper module is trivial to “factory delete” if the software option to disable it ever stops working! The full sized SD card is for users to store photos and firmware upgrades. Photo parsing is notoriously tricky so there’s a decent chance that a malicious photo could be crafted to attack the thermostat. 🤔 All the business logic lives under the big metal shield. I didn’t probe the two test points but they certainly look like they could be UART or similar interface to the app processor. Highly integrated ARM with external flash and ram. Almost a given these days! Here’s a partial shot of the LCD panel barcode. And a quick bonus picture! I took this just a few moments after the thermostat had been installed and powered up. I had connected it to the WiFi network just 45 seconds before and was exploring the system settings when the unit locked up for a second and then kicked me to this screen: No way to cancel or defer. No explanation of 'why'! There was no explanation for the abrupt reboot but after the device ca","date":"2022-04-23","objectID":"/venstar-t7850-teardown-review/:3:1","tags":["teardown","home assistant"],"title":"Quick look inside Venstar T7850 - One of the only 'no-cloud' WiFi Thermostats that plays nice with Home Assistant","uri":"/venstar-t7850-teardown-review/"},{"categories":["teardown"],"content":"Firmware The firmware updates can be obtained through the desktop app. They are written out to a SD card with this directory structure: ❯ tree . ├── FOUND.000 │ └── FILE0000.CHK ├── System Volume Information │ ├── IndexerVolumeGuid │ └── WPSettings.dat ├── VC │ └── firmware │ └── Update.bin ├── VH │ ├── dealer.bin │ ├── dealerlogo.bin │ ├── dealerlogo - Copy.jpg │ ├── firmware1a │ │ └── update.bin │ ├── gallery │ │ ├── 0.bin │ │ ├── gallery.bin │ │ └── thumbs │ │ └── 0.bin │ ├── name.bin │ ├── schedule.bin │ └── settings.bin ├── VR │ └── firmware │ └── Update.bin └── VW └── firmware1a └── update.bin 12 directories, 16 files The dealerlogo - Copy.jpg was me testing something related to the “user photos” function of the desktop app. The gallery/*.bin files are just re-sized jpeg files. There is a mechanism for backing up / importing settings using bin files which are just json files store in the root directory for the device model; VH in this case. Those files are not pictured above as I discovered the export function after I drafted this section of the post. I could do a whole series of posts on reverse engineering the firmware but that’s going to have to wait for another day / more time. In the interim, here’s some of my findings: The user interface is javascript. Yep! The entire interface is a single page web app that seems to be hosted by a binary called maestero2. Not much comes up on google, but this repo does seem like it could be related. I can see in the source code where the javascript controls the LCD backlight… so there is absolutely no good reason why I can’t do the same via the “local API”. The device appears to use mutual TLS when talking to the remote endpoints. Try to make a request to https://ctupdate.skyport.io/feed and you’ll see the server ask you for a certificate :D. I don’t know if the certificates are per device or not. The certificates are stored in a separate jffs2 partition which is not distributed in the firmware updates (as best I can tell). There are a few strings that mention code signing certificates but I have not probed the firmware update routines in depth to know how it all works. It appears that the TTY is disabled and there are no telnet/ssh services started on boot so it’s unclear how the root user can be used remotely… but I did find this in /etc/shadow: root:$1$JEstzl9y$Ed7nAJIsY/0irewnqZoqn1:10933:0:99999:7:::. ","date":"2022-04-23","objectID":"/venstar-t7850-teardown-review/:4:0","tags":["teardown","home assistant"],"title":"Quick look inside Venstar T7850 - One of the only 'no-cloud' WiFi Thermostats that plays nice with Home Assistant","uri":"/venstar-t7850-teardown-review/"},{"categories":["teardown"],"content":"network Warning Even though the skyport functionality has been switched off, I still see the thermostat phoning home to ctupdate.skyport.io on startup. In addition to the usual “write firewall rules preventing WAN access”, I would suggest sinkholing the skyport.io domain. Like with all new devices, I ran tcpdump while setting it up. Almost all of the traffic was TLS1.2 protected but I did notice a few interesting things from the packet capture. Immediately after booting / joining the network, the device sends out a DHCP request: Dynamic Host Configuration Protocol (Discover) Message type: Boot Request (1) Hardware type: Ethernet (0x01) Hardware address length: 6 Hops: 0 Transaction ID: 0x1308ee40 Seconds elapsed: 0 Bootp flags: 0x0000 (Unicast) Client IP address: 0.0.0.0 Your (client) IP address: 0.0.0.0 Next server IP address: 0.0.0.0 Relay agent IP address: 0.0.0.0 Client MAC address: MurataMa_de:ad:bf (10:98:c3🇩🇪ad:bf) Client hardware address padding: 00000000000000000000 Server host name not given Boot file name not given Magic cookie: DHCP Option: (53) DHCP Message Type (Discover) Length: 1 DHCP: Discover (1) Option: (61) Client identifier Length: 7 Hardware type: Ethernet (0x01) Client MAC address: MurataMa_de:ad:bf (10:98:c3🇩🇪ad:bf) Option: (57) Maximum DHCP Message Size Length: 2 Maximum DHCP Message Size: 576 Option: (55) Parameter Request List Length: 7 Parameter Request List Item: (1) Subnet Mask Parameter Request List Item: (3) Router Parameter Request List Item: (6) Domain Name Server Parameter Request List Item: (12) Host Name Parameter Request List Item: (15) Domain Name Parameter Request List Item: (28) Broadcast Address Parameter Request List Item: (42) Network Time Protocol Servers Option: (60) Vendor class identifier Length: 12 Vendor class identifier: udhcp 1.29.2 Option: (255) End Option End: 255 Padding: 0000000000000000000000000000000000000000 Note: de:ad:bf is replacing the actual octets of my thermostat MAC :). Interesting! The DHCP server explicitly asks for a NTP server and then the thermostat … does not use it! The udhcp 1.29.2 string implies a relatively recent build of - possibly - busybox running the show… The next packets after that are basic SSDP and IGMP: NOTIFY ALIVE SDDP/1.0 From: \"123.456.789.012:1902\" Host: \"10:98:c3🇩🇪ad:bf\" Max-Age: 300 Type: \"venstar:control4_thermostat_proxy:colortouch\" Primary-Proxy: \"thermostatV2\" Proxies: \"thermostatV2\" Manufacturer: \"Venstar\" Model: \"ColorTouch\" Driver: \"venstar_ip_colortouch_hvac.c4z\" Internet Group Management Protocol [IGMP Version: 3] Type: Membership Report (0x22) Reserved: 00 Checksum: 0xea03 [correct] [Checksum Status: Good] Reserved: 0000 Num Group Records: 1 Group Record : 239.255.255.250 Change To Exclude Mode Record Type: Change To Exclude Mode (4) Aux Data Len: 0 Num Src: 0 Multicast Address: 239.255.255.250 ","date":"2022-04-23","objectID":"/venstar-t7850-teardown-review/:5:0","tags":["teardown","home assistant"],"title":"Quick look inside Venstar T7850 - One of the only 'no-cloud' WiFi Thermostats that plays nice with Home Assistant","uri":"/venstar-t7850-teardown-review/"},{"categories":["teardown"],"content":"DNS And just before the TLS traffic, there is a single DNS query: Queries ctupdate.skyport.io: type A, class IN Name: ctupdate.skyport.io [Name Length: 19] [Label Count: 3] Type: A (Host Address) (1) Class: IN (0x0001) ","date":"2022-04-23","objectID":"/venstar-t7850-teardown-review/:5:1","tags":["teardown","home assistant"],"title":"Quick look inside Venstar T7850 - One of the only 'no-cloud' WiFi Thermostats that plays nice with Home Assistant","uri":"/venstar-t7850-teardown-review/"},{"categories":["teardown"],"content":"Web server After setting a user/password and selecting the https option for the local API, here’s what I see: ❯ openssl s_client -connect 123.456.789.012:443 CONNECTED(00000003) depth=0 C = US, ST = California, L = Chatsworth, O = Venstar Inc., OU = Engineering, CN = CT1A_100163664 verify error:num=20:unable to get local issuer certificate verify return:1 depth=0 C = US, ST = California, L = Chatsworth, O = Venstar Inc., OU = Engineering, CN = CT1A_100163664 verify error:num=21:unable to verify the first certificate verify return:1 depth=0 C = US, ST = California, L = Chatsworth, O = Venstar Inc., OU = Engineering, CN = CT1A_100163664 verify return:1 --- Certificate chain 0 s:C = US, ST = California, L = Chatsworth, O = Venstar Inc., OU = Engineering, CN = CT1A_100163664 i:C = US, ST = California, O = Venstar Inc., OU = Engineering, CN = Skyport Root CA --- Server certificate -----BEGIN CERTIFICATE----- MIIGAzCCA+ugAwIBAgIJAIMdu2UK2QoqMA0GCSqGSIb3DQEBDQUAMGkxCzAJBgNV BAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRUwEwYDVQQKDAxWZW5zdGFyIElu Yy4xFDASBgNVBAsMC0VuZ2luZWVyaW5nMRgwFgYDVQQDDA9Ta3lwb3J0IFJvb3Qg Q0EwHhcNMTkxMTA4MDUxOTM2WhcNMzcwNTE3MjM1OTU5WjB9MQswCQYDVQQGEwJV UzETMBEGA1UECAwKQ2FsaWZvcm5pYTETMBEGA1UEBwwKQ2hhdHN3b3J0aDEVMBMG A1UECgwMVmVuc3RhciBJbmMuMRQwEgYDVQQLDAtFbmdpbmVlcmluZzEXMBUGA1UE AwwOQ1QxQV8xMDAxNjM2NjQwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoIC AQDIYpgYtd/+KVEwVKTAHjFzp3FZXJx+RFQjUwdCGMOOWqrztokmNF5I/qXbWqA7 okUmO7FKUdW3hAKq358tjcPZytEr1RtRQVtc4/fg35IwtNWf1g/UACazkFOgmOLd yQ4AwMWvfgDFLxREGH3WfPCHJS7v1ddO02WZMEpligK8g7iSEsqw1ZD4gD2xIbwf OxgbIdWJyakNbOebVMul5HUoqtVOLawaOefgh65gf4x0gBgMJ95E32cXZxjUB016 r2sAanTkeK7gJhYjVuwFkepEgiLEfj+VY23Qv6CnhR2Kg4g1hv0ZxacHvNw1HCYU 5o38tyQQWNHFw4+CadUPLzSnjhK/8TaaIdVcXDgxpQTdwr3l4Q8Dyz4SX+VihdGT Zb2s4K7emuJFlQv9ZlSYpltC7o44sLnQbETBdDwoS8EjOb/T1QyfEvNoqLvWSPOD V1VPPAHp68q9DOgnXa8PJj9nlz0btITmYWhGPobtGeD25Qxl/FulAZLaHWVDfkXb VbWquGMxm5xkYqcsI7UM4r0O8W94x9QZcobQ1sgZ6rs1vDsMGCZBmdexvqZgGN/t oPEIA8MaI4R1UfkqJx3haxYS4AOYt2IEE12kiPeAZlER4PIKbcGny7BgJPi72JSb eacDm7djJBqTP/G/O6Pdny9aWh2WVh0Kom5pLCHm3qydawIDAQABo4GZMIGWMAkG A1UdEwQCMAAwSQYJYIZIAYb4QgENBDwWOklmIHlvdSBrZXB0IHRoZSBzbWFsbCBy dWxlcywgeW91IGNvdWxkIGJyZWFrIHRoZSBiaWcgb25lcy4wHQYDVR0OBBYEFNwF Q5GfrnSlRDSGT/QZ6f283vPMMB8GA1UdIwQYMBaAFLEAWEXFwN/oc5doNhyOE47D w/qxMA0GCSqGSIb3DQEBDQUAA4ICAQA6sUR9fZ0CiwWFnYOKQ5CTzy2rDsXGtP9t DJcN/Ga396Pd2CwxDxp1fXXsbrcLELsuupYnLtsm6VzAaix+fgTtxeFTaQR4vqPf wMXfRzLe0Bk6m+BpWSslD7FTCyDVCnGtuHGCfesOFVvqR897vgU4mGG0qsI8OoD9 0EEeX2HVG8QYvKSbJF3FhmKiCDemG9TVfITHKSody/iHpUNo0uHHGjsPfVXq4iWe bkQ3dqRXZmjcGPwzQK4CjlKcmXBDWyEhR25/U+dDItaTQet0GGaYK+KrpjDLH56d XWm7YDP5/EMbfRR7en7L6Ca3TFhpyNF5PxDfmz1fywqr85wdAb/ACJztew9f9hqG 35rOH+OqucGeHqfYk6UW46fjXSnybBMJG8+HcVUMpYn7myfFK0tnwQZb477dV7Fs G+rYViPjPmfgxi5/kvXpn0FvTzNg73vkgSBCRxuFIPtMkHrpQdSTr1umAXhKCd7d 3mragcL61lhKhh17vOBG73C4bhlAGBFsuACYrmnJFghlfv2X5PbLksc3h8P0DEn3 36x/fGTVRvq14/9hxeKmOhL5KFQXrja5YJpoLRs/pgBl2zXQGF3+dLdbcAdaDVjy LyDkRMOfhugXmRh7TuWaqGrpcyXVeL4Kn6nWpq51PEval1HKoUMIkahRJu2WK0BT kVBzZrkbvA== -----END CERTIFICATE----- subject=C = US, ST = California, L = Chatsworth, O = Venstar Inc., OU = Engineering, CN = CT1A_100163664 issuer=C = US, ST = California, O = Venstar Inc., OU = Engineering, CN = Skyport Root CA --- No client certificate CA names sent Peer signing digest: SHA256 Peer signature type: RSA-PSS Server Temp Key: X25519, 253 bits --- SSL handshake has read 2277 bytes and written 430 bytes Verification error: unable to verify the first certificate --- New, TLSv1.2, Cipher is ECDHE-RSA-AES128-GCM-SHA256 Server public key is 4096 bit Secure Renegotiation IS supported Compression: NONE Expansion: NONE No ALPN negotiated SSL-Session: Protocol : TLSv1.2 Cipher : ECDHE-RSA-AES128-GCM-SHA256 Session-ID: 1391DF607DB2888CA81220E321CB06CA6B5CBDE2031483A3E4AC075AD95A6A5D Session-ID-ctx: Master-Key: 7A37EEBC584574EBA6B114E85CCD685B30F640D17D38A9B2E90AC8739BC76EB4A15E38A8F3B74F3D428328F874C9807C PSK identity: None PSK identity hint: None SRP username: None Start Time: 16","date":"2022-04-23","objectID":"/venstar-t7850-teardown-review/:5:2","tags":["teardown","home assistant"],"title":"Quick look inside Venstar T7850 - One of the only 'no-cloud' WiFi Thermostats that plays nice with Home Assistant","uri":"/venstar-t7850-teardown-review/"},{"categories":["teardown"],"content":"ICs and distinguishing markings As noted above, the WiFi module was covered with a soldered on shield. Fortunately, the FCC filings give a good look! The chip is a muRata Type ZX WiFi Module which is the same WiFi radio thats inside the Nest Protect! The larger of the two metal shields on the PCB can be removed giving a look at the main application processor: W971GG (probably W971GG6JB) - DRAM. W29N01HVBINA: 1gigabit flash. AT91SAM9G15 - ARM926 with the peripherals needed for driving a LCD and reading from the resistive (🤮) touchscreen The LCD is marked with (partially visible): AT043HS40D07R2 30671T051KD 190805527 (0000000) L101661 ","date":"2022-04-23","objectID":"/venstar-t7850-teardown-review/:6:0","tags":["teardown","home assistant"],"title":"Quick look inside Venstar T7850 - One of the only 'no-cloud' WiFi Thermostats that plays nice with Home Assistant","uri":"/venstar-t7850-teardown-review/"},{"categories":["teardown"],"content":"Still searching for the perfect KVM but in the mean time here's an ESPHome integration.","date":"2022-04-16","objectID":"/hdmi-kvm-teardown-and-esphome/","tags":["esphome","home assistant"],"title":"Inside a generic/white-label HDMI KVM Switch","uri":"/hdmi-kvm-teardown-and-esphome/"},{"categories":["teardown"],"content":"If you’re here just for “how do I get it working with ESPHome” bit, skip to the ESPHome Component section below. Update 2022.05.14 I have just uploaded a basic PCB and enclosure to the ESPHome Component Repository. For the last few months, I have been looking for a KVM switch to simplify switching between work and personal computers. Initially, I didn’t think my criteria were that unreasonable, but for whatever reason there is no KVM switch that: Supports at least 4 hosts. Preferably dual monitors per host to ensure relevancy for years. Converting between HDMI and Display Port isn’t that difficult so no strong preference as long as the KVM uses HDMI2.0+ or Display Port 1.4+ as my primary monitor is 4k. USB 3 support. At least 5 gbps and Ideally using a USBC jack. Some sort of programmatic control over which host is ‘active’. Ideally this interface would be bi-directional (RS232/RS485 or IP) but I’d settle for having to record the IR remote codes and re-broadcast those with my own microcontroller if needed. Works with the DROP: SHIFT keyboard; internally this keyboard presents as it’s own USB Hub and requires more than the standard 500ma to operate. Some KVM switches don’t supply enough current and others results in the number of USB hubs between the root and the keyboard being \u003e 5 which the USB spec does not support. Costs less than $75 per host/port. Try as I might, I was not able to find anything that could satisfy all the requirements. If you know of any, please do get in touch! I spent a decent chunk of time searching through the usual consumer/IT electronics sites and they all had similar offerings… none of which were sufficient. I had some close contenders, but they are victims of the current chip shortage or otherwise very expensive unobtanium. I recently read USB-C hubs and my slow descent into madness - Dennis Schubert which prompted me to broaden my search horizons to include the marketplaces closer to where all the KVM switches I was seeing in my searches were actually designed. After a bit of searching, I found the PX-UHDKVM801-2.0: A single video channel isn’t a deal breaker; ultra wide screens can render more pixels off of one HDMI port than 2 screens from a few years ago could. Assuming this continues, by the time my current monitor dies dual video might not matter at all. Likewise, speedy USB is a “nice to have”. My keyboard, mouse and web cam must work with the KVM. If the webcam streams in SD over USB2 but full HD over a USB3 link that’s a nice benefit but not a deal breaker. For the occasional times where I need to transfer a file and can’t do it over the network, I can either plug directly into the host computers’ USB3.2 port or settle for slow USB2 file transfer speeds. Not the end of the world! Of all the KVMs that I considered, this one came with the least compromises and came with explicit documentation about how to integrate/control the switch via TCP or RS232. Buoyed by the thought of not having to reverse engineer any IR remote codes or otherwise resort to some hackery, I pulled the trigger. A quick note about the 'generic' switch I say “generic” because there are a few different brands / names on this thing and it’s not clear who the actual manufacturer is. I got it from a seller by the name of PourXuan which does seem to be the OEM behind it. However, there are a few other interesting markings that could indicate other companies contributing to / designing some internal components. Anyways, lets look inside. Teardown TL;DR: It’s been built down to a cost… but not the lowest possible cost. The construction isn’t flimsy and I didn’t find any glaringly obvious safety issues / construction shortcuts. None of the ICs have their markings scraped off and the internal architecture is simple and scalable. I did not check, but I suspect that each of the primary functions / PCBs communicates over a simple serial bus so this switch is likely pretty hackable/serviceable, too. ","date":"2022-04-16","objectID":"/hdmi-kvm-teardown-and-esphome/:0:0","tags":["esphome","home assistant"],"title":"Inside a generic/white-label HDMI KVM Switch","uri":"/hdmi-kvm-teardown-and-esphome/"},{"categories":["teardown"],"content":"Packaging / shipping The switch came well packed in some nondescript packaging. The small white box containing the power supply and some accessory hardware crumpled up the single page user manual. I have uploaded a copy of this paper and the other software/documentation provided by the seller to the same git repository hosting the ESPHome Component. An overview of everything that came in the box Rack Mount ears, two extra screws and the proper connector block needed to interface with the UART. I have not opened up the power supply to check its construction but it doesn’t feel incredibly cheap. It’s rated for 2 Amps @ 12v but the switch only drew about 3.75 Watt when measured from the wall. Nothing special. It doesn't feel cheap. ","date":"2022-04-16","objectID":"/hdmi-kvm-teardown-and-esphome/:1:0","tags":["esphome","home assistant"],"title":"Inside a generic/white-label HDMI KVM Switch","uri":"/hdmi-kvm-teardown-and-esphome/"},{"categories":["teardown"],"content":"The switch The metal shell is generic; there are holes on the side for ventilation fans that are not populated. Other than not-so-well hidden screw, the case is easy to open. Don't forget the screw behind the sticker With all screws out, the two halves slide apart easily to give us the first look at the internals! It looks like this is a pretty modular design: A standalone front panel input and network control. A dedicated PCB for each type of data; a HDMI/video plane and a HID/USB plane. Each plane uses dedicated ASICs to route the signals. A minimal number of microprocessors / wires coordinating between the PCBs. The small cable from the IR jack on the back is all that holds the two halves of the case together. The LAN module plugs into the HDMI PCB very close to where the RS232 port is and the protocol specific documentation from the seller indicates that the payloads to control the switch are the same irrespective of the transport. Each group of 4 HDMI ‘inputs’ is routed to an identical looking IC and the differential signal pairs from those ICs are routed to the big one next to the output and RS232 and LAN circuitry. The little micro next to the buzzer and grey ribbon cable is likely the main controller for the entire switch. The small IC on the front panel is probably watching for IR signals, scanning the physical buttons, driving the LED display and communicating with the rest of the system over some serial bus. This architecture would be pretty scalable; for a 16 port model, just add another HDMI and USB PCB and tweak the firmware on the main controller. ","date":"2022-04-16","objectID":"/hdmi-kvm-teardown-and-esphome/:2:0","tags":["esphome","home assistant"],"title":"Inside a generic/white-label HDMI KVM Switch","uri":"/hdmi-kvm-teardown-and-esphome/"},{"categories":["teardown"],"content":"Front PCB Nothing particularly interesting here. The single IC (STM8S003F3) is a cheap 8 bit microcontroller that - based on the PCB traces - is driving the LED display and handling the button matrix scanning and IR codes. Most of the lines from the grey ribbon cable are not actually connected to the pcb so I’d bet that this micro communicates with the ‘main’ PCBs over some serial bus. Sorry for the glare. There's a lot of flux residue on this PCB. Notice how at least 4 of the pins from the ribbon cable connector are note soldered to the PCB... This PCB is means to be used in other SKUs that come with two extra buttons that are unpopulated here. ","date":"2022-04-16","objectID":"/hdmi-kvm-teardown-and-esphome/:2:1","tags":["esphome","home assistant"],"title":"Inside a generic/white-label HDMI KVM Switch","uri":"/hdmi-kvm-teardown-and-esphome/"},{"categories":["teardown"],"content":"The LAN module Very simple / standalone module. There’s a dedicated PHY (CH395Q) and the same STM8S003F3 micro controller again. The documentation that I received from the seller indicated that the LAN module did NOT use DHCP and there didn’t seem to be a way to change the IP address configuration so I didn’t bother with trying to automate via LAN. Only after I made it most of the way through the ESPHome integration development did the seller provide additional documentation that indicates the IP address can be changed… but only if you use a Windows program. I opted to keep going with the ESPHome \u003c-\u003e RS232 integration as that would be the most flexible and accessible approach. The small LAN pcb is attached directly to the front panel with screws mating with some 90 degree flanges soldered to the PCB ","date":"2022-04-16","objectID":"/hdmi-kvm-teardown-and-esphome/:2:2","tags":["esphome","home assistant"],"title":"Inside a generic/white-label HDMI KVM Switch","uri":"/hdmi-kvm-teardown-and-esphome/"},{"categories":["teardown"],"content":"HDMI In addition to the HDMI switching duties, the HDMI PCB hosts the UART electronics: TTL to RS232 handled by the SIPEX SP3223EEX: The main application processor appears to be a STM32 clone known as the CHIPSEA F031C8T6. Switching / routing the HDMI is done with two IT66341TE chips reducing the 4 HDMI inputs down to a single output and a IT66321E to switch between those two streams. 2 to 1 HDMI mux to switch between the two outputs from the 4 -\u003e 1 muxes on board. 4 to 1 HDMI mux; one of two on the board I would bet that the unpopulated connector in the bottom right is the bus connection to a second HDMI PCB in the 16 port model but I don’t see where the differential pairs for the HDMI signal would come from so who knows 🤷. 4 to 1 HDMI mux; one of two on the board ","date":"2022-04-16","objectID":"/hdmi-kvm-teardown-and-esphome/:3:0","tags":["esphome","home assistant"],"title":"Inside a generic/white-label HDMI KVM Switch","uri":"/hdmi-kvm-teardown-and-esphome/"},{"categories":["teardown"],"content":"USB Like the HDMI PCB, the USB PCB uses a series of ASICs and a microprocessor to coordinate them all. Near the 4 ‘output’ USB ports, you can see the CH559L which runs the show. This IC is monitoring the USB bus for key codes from the keyboard for display switching purposes; press some key combination to switch inputs. This is usually PrtScrn a few times quickly followed by the number of the input bank you wish to switch to. I have not tested / verified this functionality but the seller does advertise that there is similar functionality Each ‘input’ USB port is the same: unpopulated headphone jack footprint for audio input and a FE1.1s USB 2.0 HUB ASIC and an unknown IC that looks like it’s related to the unpopulated headphone jack. Each 'input' USB port is managed with the same IC. Note the unpopulated Headphone jack footprint on the PCB I can't make out the markings, but the 16 pin square IC is almost certainly an audio ID for the unpopulated headphone jack. There’s some generic 8:1 GPIO mux chips in the form of 3251QE. They are simple IO expanders that would allow a microcontroller to read/write 8 GPIO pins using just 3 GPIO. I don’t know why they’re here or why an 8 port switch needs 2 of them… both on the USB PCB. That’s it for teardown! ","date":"2022-04-16","objectID":"/hdmi-kvm-teardown-and-esphome/:4:0","tags":["esphome","home assistant"],"title":"Inside a generic/white-label HDMI KVM Switch","uri":"/hdmi-kvm-teardown-and-esphome/"},{"categories":["teardown"],"content":"dmesg Just for completeness, here is how the KVM presents to the computer via USB. [183000.909155] usb 1-6: new high-speed USB device number 63 using xhci_hcd [183001.050545] usb 1-6: New USB device found, idVendor=1a40, idProduct=0101, bcdDevice= 1.11 [183001.050550] usb 1-6: New USB device strings: Mfr=0, Product=1, SerialNumber=0 [183001.050551] usb 1-6: Product: USB 2.0 Hub [183001.112333] hub 1-6:1.0: USB hub found [183001.112549] hub 1-6:1.0: 4 ports detected [183001.495837] usb 1-6.1: new high-speed USB device number 64 using xhci_hcd [183001.687327] usb 1-6.1: New USB device found, idVendor=1a40, idProduct=0101, bcdDevice= 1.11 [183001.687332] usb 1-6.1: New USB device strings: Mfr=0, Product=1, SerialNumber=0 [183001.687333] usb 1-6.1: Product: USB 2.0 Hub [183001.720379] hub 1-6.1:1.0: USB hub found [183001.720579] hub 1-6.1:1.0: 4 ports detected [183001.912509] usb 1-6.2: new low-speed USB device number 65 using xhci_hcd [183002.137295] usb 1-6.2: New USB device found, idVendor=0c45, idProduct=7403, bcdDevice= 0.01 [183002.137300] usb 1-6.2: New USB device strings: Mfr=1, Product=2, SerialNumber=0 [183002.137301] usb 1-6.2: Product: USB Device [183002.137303] usb 1-6.2: Manufacturer: SONiX [183002.239461] input: SONiX USB Device as /devices/pci0000:00/0000:00:01.2/0000:02:00.0/0000:03:08.0/0000:05:00.1/usb1/1-6/1-6.2/1-6.2:1.0/0003:0C45:7403.00E4/input/input288 [183002.296065] hid-generic 0003:0C45:7403.00E4: input,hidraw9: USB HID v1.00 Keyboard [SONiX USB Device] on usb-0000:05:00.1-6.2/input0 [183002.302457] input: SONiX USB Device Mouse as /devices/pci0000:00/0000:00:01.2/0000:02:00.0/0000:03:08.0/0000:05:00.1/usb1/1-6/1-6.2/1-6.2:1.1/0003:0C45:7403.00E5/input/input289 [183002.302535] input: SONiX USB Device System Control as /devices/pci0000:00/0000:00:01.2/0000:02:00.0/0000:03:08.0/0000:05:00.1/usb1/1-6/1-6.2/1-6.2:1.1/0003:0C45:7403.00E5/input/input290 [183002.359252] hid-generic 0003:0C45:7403.00E5: input,hidraw10: USB HID v1.00 Mouse [SONiX USB Device] on usb-0000:05:00.1-6.2/input1 And lsusb shows: |__ Port 6: Dev 63, If 0, Class=Hub, Driver=hub/4p, 480M ID 1a40:0101 Terminus Technology Inc. Hub /sys/bus/usb/devices/1-6 /dev/bus/usb/001/063 |__ Port 2: Dev 65, If 0, Class=Human Interface Device, Driver=usbhid, 1.5M ID 0c45:7403 Microdia Foot Switch /sys/bus/usb/devices/1-6.2 /dev/bus/usb/001/065 |__ Port 2: Dev 65, If 1, Class=Human Interface Device, Driver=usbhid, 1.5M ID 0c45:7403 Microdia Foot Switch /sys/bus/usb/devices/1-6.2 /dev/bus/usb/001/065 |__ Port 1: Dev 64, If 0, Class=Hub, Driver=hub/4p, 480M ID 1a40:0101 Terminus Technology Inc. Hub /sys/bus/usb/devices/1-6.1 /dev/bus/usb/001/064 The Microdia Foot Switch bit is odd. Could that have something to do with the 3251QE muxes? Perhaps this device indicates to the computer weather or not it is the activated one? 🤔 But why would you need two? I did not dump EDID information for the HDMI but I suspect that the switch is smart enough to just copy exactly what the display provides so the computers don’t ‘see’ the loss/change of a display which might re-arrange windows or adjust scaling. ","date":"2022-04-16","objectID":"/hdmi-kvm-teardown-and-esphome/:4:1","tags":["esphome","home assistant"],"title":"Inside a generic/white-label HDMI KVM Switch","uri":"/hdmi-kvm-teardown-and-esphome/"},{"categories":["teardown"],"content":"ESPHome component Info The ESPHome component and some additional documentation/software/details are over at kquinsland/hdmi-kvm-esphome. Yes, I wanted to be able to control this KVM from my Home Assistant install. Some sort of API was a strong desire/requirement for KVM switches for a reason! I am still working on a complementary ESPHome component to automate my standing desk (to be published soon!) but to give you an idea of the automations this KVM will be used in: Push a single button to: Turn on the VR computer Switch KVM to the VR computer Adjust the lighting as needed; turn most lights off as they’re not needed with a VR headset on but turn on ambient lighting so the room isn’t pitch dark when the headset is removed. When personal/work computer are not in use, switch to a host running Grafana dashboards on rotation Allow me to track how much time per week is spent with each host ","date":"2022-04-16","objectID":"/hdmi-kvm-teardown-and-esphome/:5:0","tags":["esphome","home assistant"],"title":"Inside a generic/white-label HDMI KVM Switch","uri":"/hdmi-kvm-teardown-and-esphome/"},{"categories":["teardown"],"content":"ICs and distinguishing markings The front panel PCB is labeled: 20170622 and features: 8S003F3P6 - A cheapish 8 bit micro controller. The LAN module PCB is marked with 20151030 and features:\\ 8S003F3P6 - The same micro used on the front panel CH395Q - A dedicated ethernet interface. The HDMI PCB is populated with: CHIPSEA F031C8T6 - STM32 clone; likely the main applications processor. I can’t find a datasheet on this specific on the english speaking web but the naming is oddly similar to how some STM32 processors are named. SIPEX SP3223EEX - Basic TTL \u003c-\u003e RS232 chip, similar to MAX232. IT66321E - 2 IN to 1 OUT HDMI2.0 18Gb/s Switch with Audio In/Out IT66341TE - 4 IN to 1 OUT HDMI2.0 18Gb/s Switch with Audio In/Out A sticker with the markings: XUFUNG 33.01.0072 2012020074 The PCB is marked with: HK20801AU 32.02.0119 BJ The USB PCB is marked with HK20801A30-KVM and is populated with: PI5C 3251QE - 8:1 Mux/DeMux BusSwitch CH559L - 8 bit enhanced USB MCU CH559 FE1.1s - FE1.1S USB 2.0 HIGH SPEED 4-PORT HUB CONTROLLER ","date":"2022-04-16","objectID":"/hdmi-kvm-teardown-and-esphome/:6:0","tags":["esphome","home assistant"],"title":"Inside a generic/white-label HDMI KVM Switch","uri":"/hdmi-kvm-teardown-and-esphome/"},{"categories":["teardown"],"content":"Assimilate all the things into Home Assistant!","date":"2022-01-22","objectID":"/xaomi-s1-monitor-lamp-teardown-and-tasmota/","tags":["tasmota","home assistant"],"title":"Installing Tasmota on the Xiaomi Desk Lamp","uri":"/xaomi-s1-monitor-lamp-teardown-and-tasmota/"},{"categories":["teardown"],"content":" MJGJD02YL vs MUGJD01YL There are at least two versions of this lamp. Thanks to @htvekov for confirming that the MUGJD01YL variant does not contain an ESP32. It contains a TLSR8368. Some photos of the MUGJD01YL internals are provided below. If you’re here just for “how do I flash tasmota” bit, skip to the Tasmota section below. I was looking for a way to light my desk my desk without screen glare. The easiest way to prevent glare on a screen is to change the orientation of the light relative to the screen either from under or behind the screen. This is not practical for ceiling mounted lights or for any floor lamps. You can get a nearly glare free light if you mount the light to the top of the screen and direct the light away from the screen at a slight angle. Light hitting the screen and bouncing into eyes is minimized and the majority of the light ends up directed down onto the desk where it’s needed. This isn’t a new problem; a quick search of any online retailor will reveal that there are many different options out there at all sorts of price points. As this light source would be heavily used for all sorts of work, the quality of the light is incredibly important; a high General CRI (Ra) and adjustable color temperature are requirements. I also wanted one that had some basic remote control functions so I don’t have to reach to the top of my monitor and risk destabilizing whatever I am working on or getting finger prints on the panel. A wired remote would be simpler and thus cheaper but my desk is already too crowded with wires and cords; if the cost difference between a wired and wireless remote was marginal, opt for wireless. After a bit of searching, I found the 2021 Xiaomi Mijia Lite Desk Lamp 1S which fit the bill exactly. Beyond the basic puck shaped wireless remote, the listing indicated that the ’new 1s version’ could be controlled with the Xiaomi app. 🤔 Instead of some very basic 433Mhz radio, the lamp/remote probably used BTLE. In some ways, that’s even better; the lamp only has a few simple functions and those shouldn’t be that hard to reverse engineer from the Android app. Once I know what data to send for on/off/dim/bright/ww/cw selection, I can use an ESP chip as a MQTT \u003c-\u003e BTLE gateway for relatively easy integration into my home automation system. Worst case, the fall back plan of using a microcontroller to emulate interacting with the remote and then integrating that microcontroller with my home automation system would work. Once the lamp showed up, I of course opened up the remote to see what type of wireless system I was going to be dealing with. Note More photos of the remote are below Giving the model number MHCB07P a quick google didn’t reveal much information other than confirm that it was using BTLE. This almost certainly means that the phone app will also use BTLE to control the lamp! If I’m lucky, I can capture the entire discovery/pair/command packets using a rooted android device and then I won’t have to bother with the puck at all. Lamp \u003c-\u003e Phone After getting the app setup, it did discover the lamp and began to walk me through the setup flow. WiFi!? Really!? But why? This must be some generic screen shown for all devices, right? Nope. There really is a simple access point inside this lamp! Well now I’m curious. What could this lamp possibly need WiFi credentials for? The remote used BTLE and every conceivable phone that will also control the lamp supports BTLE… so why spend the extra money for a WiFi enabled microcontroller at all!? ET Lamp Phone Home: I threw the lamp behind an isolated access point and it sure is chatty… After getting an IP address, the lamp looks up the A record for dk.io.mi.com and then attempts to open a TCP connection and send some bytes: Now I’m more than a little bit curious. Why send raw bytes to TCP/80 without at least the typical HTTP request headers? Why even use WiFi at all for a lamp? Is there no way to use my phone to control the lamp over BTLE? ","date":"2022-01-22","objectID":"/xaomi-s1-monitor-lamp-teardown-and-tasmota/:0:0","tags":["tasmota","home assistant"],"title":"Installing Tasmota on the Xiaomi Desk Lamp","uri":"/xaomi-s1-monitor-lamp-teardown-and-tasmota/"},{"categories":["teardown"],"content":"Dumping the FW Fortunately, this was pretty easy. After a cursory analysis, the dumped firmware did not appear to be encrypted or otherwise protected. I did a quick search for a few things that I hoped would show up in the dumped OEM firmware and was not disappointed: ❯ cat lamp.bin.strings | grep --ignore-case -E 'certificate|encrypt|tls|agent|http|post|get|verify|remote|{\"' \u003e interesting_strings.txt ❯ cat interesting_strings.txt| wc -l 710 🤨 Here are some of the highlights: [I] bluetooth_remote_double_click [E] %s: verify root cert is not valid! (%s,%d) [W] %s: Fail to get gatt db from connection %04x, ret = %d (%s,%d) [E] %s: mbedtls_ecdh_calc_secret error %d (%s,%d) miio_signature_verify [E] %s: --\u003elogin verify send failed. (%s,%d) -----BEGIN CERTIFICATE----- [E] %s: https need root cert. (%s,%d) User-Agent: MIoT http://dlg.io.mi.com/v1/ot/upload [W] %s: httpdns new resolve start failed, %d (%s,%d) There’s a lot more interesting things in the dump but they’ll have to wait for another day as immediately after getting eyes on the PCB, I saw an ESP32 chip! ","date":"2022-01-22","objectID":"/xaomi-s1-monitor-lamp-teardown-and-tasmota/:1:0","tags":["tasmota","home assistant"],"title":"Installing Tasmota on the Xiaomi Desk Lamp","uri":"/xaomi-s1-monitor-lamp-teardown-and-tasmota/"},{"categories":["teardown"],"content":"A change of plans Reverse engineering the firmware to figure out how/why the phone method of remote control was different from the remotes’ method no longer really mattered. An ESP based chip means Tasmota or ESPHome should be possible. If I could get either of those alternative firmwares running on the lamp, then cluttering up the desk with yet another remote and/or hacking MQTT support into the lamp via the remote was no longer necessary! Teardown Warning The plastic end caps on either end of the lamp tube are glued in. You will need some force to break the glue. Even with all possible precautions, getting access to the lamp PCB is a destructive process. If you are careful you can keep the destruction and cosmetic damage to a minimum. I did this teardown the hard way and damaged more of the lamp than necessary. Some of the photos below reflect this. Now that I know how it all is meant to come apart, you will hopefully have an easier time and incur less damage! ","date":"2022-01-22","objectID":"/xaomi-s1-monitor-lamp-teardown-and-tasmota/:2:0","tags":["tasmota","home assistant"],"title":"Installing Tasmota on the Xiaomi Desk Lamp","uri":"/xaomi-s1-monitor-lamp-teardown-and-tasmota/"},{"categories":["teardown"],"content":"The lamp A closer look at the marked device information before we move into the lamp. The ESP that we will soon flash with Tasmota is just behind this product information. Product info and regulatory markings Locate the small rectangle shaped protrusion from the lamp tube that mates with the magnetic mount. The protrusion has two small pogo pins on it. You can see the protrusion in the middle of the tube facing the coiled USB power cable: Everything that came in the box With the protrusion facing you, locate the plastic cap closest to the product information. This should be plastic cap on the left side of the tube. Use non-marring pliers or similar to grip the plastic cap and twist with enough force to break the glue. Do not twist more than a few degrees! The plastic cap has some features that will come into contact with and could damage the PCB if rotated too far! Use a razor blade or similar to peel back the grip-tape sticker on the protrusion. If you’re careful and manage to remove the sticker in one piece you might be able to re-apply it during reassembly. The lamp functions fine without the sticker, though. Underneath the sticker will be two small philips screws. Remove them and the metal protrusion and small plastic part containing the two pogo pins should come free. Set these aside. Gently remove the clear plastic diffuser from the lamp tube and set aside. The matte finish on the interior side of the diffuser is a fingerprint magnet. Consider using gloves for this step. Carefully slide the PCB out of the aluminum tube. Be mindful of the two spring like contacts on the back of the PCB that mated with the pogo pins! You can see the small black plastic bracket holding the pogo pins and the protrusion bit with some of the grip-tape still attached: If it feels like you're using too much force to open the lamp... you probably are! If you try to remove the PCB without first detaching the pogo pins, you’ll damage one or both of the spring contacts that mate the PCB to the pogo pins! You don’t want your GND spring to look like mine! Before realizing that the pogo pins could be removed from the lamp, I removed both caps and tried push/pull the PCB out. The PCB is supported inside the tube with a few black plastic ‘sleds’ which are heat-staked on to the PCB. The ‘sled’ closest to the ESP partially covers the 3V3 test point. Rather than use a dedicated 3V power supply during flashing, I found it easiest to use this pin to bring the EN pin up high. If you’re going to use the 3V3 test pin instead of a dedicated external power supply, you will probably want to remove the ‘sled’ to get easy access to the test point. You can do this with some flush-cut snips. Be careful to not scratch the solder mask / PCB with the sharp edges of the snips The sled isn’t technically required for re-assembly but it’s pretty easy to re-attach to the PCB with some hotglue. Discard it at your peril! Here’s a closeup of the PCB with most of the test points labeled. You can see the 3V3 test point immediately to the left of R6 in the shadow of the ‘sled’. Repeat these steps in reverse order to re-assemble the lamp. ","date":"2022-01-22","objectID":"/xaomi-s1-monitor-lamp-teardown-and-tasmota/:3:0","tags":["tasmota","home assistant"],"title":"Installing Tasmota on the Xiaomi Desk Lamp","uri":"/xaomi-s1-monitor-lamp-teardown-and-tasmota/"},{"categories":["teardown"],"content":"The puck Fortunately, opening up the remote is not difficult. Remove the two philips screws under the bottom cap. The main body / rotary knob lifts away from the midframe. Like with the lamp PCB, there are a few test points: Tasmota Warning It is likely that both the WW and CW LEDs will briefly light up during the flashing process. When this happens, you will draw more current than a typical USB \u003c-\u003e Serial adapter can provide. At best you’ll cause a brownout and the flash will be interrupted. Use a dedicated 5V supply that can provide at least 10W of power while flashing the lamp! Make sure that the GND wire from your serial programmer and the GND wire for your dedicated 5V@2A/10W supply are tied together or you will likely destroy some of the electronics on both the lamp, your serial adapter and possibly your computer! Having said all that, it’s totally worth it: When all is said and done, the lamp is easily integrated and controlled with Home Assistant ","date":"2022-01-22","objectID":"/xaomi-s1-monitor-lamp-teardown-and-tasmota/:3:1","tags":["tasmota","home assistant"],"title":"Installing Tasmota on the Xiaomi Desk Lamp","uri":"/xaomi-s1-monitor-lamp-teardown-and-tasmota/"},{"categories":["teardown"],"content":"Flashing Info The ESP32 chip on this PCB is a single core version. Follow the instructions for flashing the ESP32 version of Tasmota, specifically the tasmota32solo1 version! Solder wires to the usual RX, TX, GPIO0 and GND test points. The GPIO0 test point is the test point nearest to the ESP32 chip; directly off the bottom right corner. I used some solid-core cable from a length of cat5 cable but any similarly high gauge wire will work. Solder a jumper between the EN and 3V3 test point. I used a small yellow wire for this. The solid blue wire attached to GPIO0 and the blue/white wire attached to GND are joined together just out of frame. The ESP will not boot into programming mode unless GPIO0 is tied to ground. Leads from a dedicated 5V power supply are attached to the main contacts with reg/green alligator clips After confirming that each point is soldered sufficiently and wired to the correct pin on your USB \u003c-\u003e Serial programmer, turn the dedicated power supply on and you should be able to flash. ❯ esptool.py --chip esp32 --port /dev/ttyUSB0 --baud 921600 --before default_reset --after hard_reset write_flash -z --flash_mode dout --flash_freq 40m --flash_size detect 0x1000 bootloader_dout_40m.bin 0x8000 partitions.bin 0xe000 boot_app0.bin 0x10000 tasmota32solo1.bin esptool.py v3.2 Serial port /dev/ttyUSB0 Connecting..... \u003c...\u003e Stub running... Changing baud rate to 921600 Changed. Configuring flash size... Auto-detected Flash size: 4MB Flash will be erased from 0x00001000 to 0x00004fff... Flash will be erased from 0x00008000 to 0x00008fff... Flash will be erased from 0x0000e000 to 0x0000ffff... Flash will be erased from 0x00010000 to 0x00157fff... Compressed 15536 bytes to 10862... Wrote 15536 bytes (10862 compressed) at 0x00001000 in 0.4 seconds (effective 353.8 kbit/s)... \u003c...\u003e Hash of data verified. Leaving... Hard resetting via RTS pin... Turn off the dedicated 5V supply and desolder the GPIO0 wire and the 3V3 \u003c-\u003e EN jumper. Leave the RX, TX, and GND wires in place so you can easily check the boot logs to confirm Tasmota flashed OK: ❯ screen /dev/ttyUSB0 115200 ets Jun 8 2016 00:22:57 rst:0x1 (POWERON_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT) configsip: 0, SPIWP:0xee clk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x00 mode:DOUT, clock div:2 load:0x3fff0030,len:184 load:0x40078000,len:12352 load:0x40080400,len:2912 entry 0x400805c4 00:00:00.002-228/73 HDW: ESP32-S0WD-OEM ./components/esp_littlefs/src/littlefs/lfs.c:1071:error: Corrupted dir pair at {0x0, 0x1} 00:00:00.777-231/73 UFS: FlashFS mounted with 312 kB free 00:00:00.782-231/73 CFG: Use defaults 00:00:00.893 QPC: Reset 00:00:00.941 BRY: Berry initialized, RAM used=3849 00:00:00.950 BRY: no 'preinit.be' 00:00:00.963 Project tasmota - Tasmota Version 10.1.0(tasmota)-2_0_1_1(2021-12-08T14:50:34) 00:00:00.984 BRY: no 'autoexec.be' 00:00:00.243 WIF: WifiManager active for 3 minutes 00:00:01.200 HTP: Web server active on tasmota-197907-6407 with IP address 192.168.4.1 After confirming a successful flash/boot, you can continue to configure Tasmota via the serial console or just power off and de-solder all wires and finish configuration after you re-assemble. ","date":"2022-01-22","objectID":"/xaomi-s1-monitor-lamp-teardown-and-tasmota/:4:0","tags":["tasmota","home assistant"],"title":"Installing Tasmota on the Xiaomi Desk Lamp","uri":"/xaomi-s1-monitor-lamp-teardown-and-tasmota/"},{"categories":["teardown"],"content":"Templates The ESP32 controls the lamp via 3 GPIO pins: GPIO04: Global light enable/disable. GPIO19: Cold White channel GPIO21: Warm White channel Irrespective of what the WW or CW channel are doing, there will be no light if GPIO4 is not high. This means you have two choices for how to configure the GPIO. Tasmota will disable both GPIO19 and GPIO21 when the light is switched off so there really is no need for independent control via GPIO4. This template keeps GPIO4 high and relies on Tasmota setting to fully off to shut the light off. Most people should use this template. {\"NAME\":\"Mijia Desk Lamp 1S (MJGJD02YL)\",\"GPIO\":[0,0,0,0,3840,0,1,1,0,0,0,0,0,0,0,416,0,417,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"FLAG\":0,\"BASE\":1,\"CMND\":\"DimmerRange 45,255\"} If, for some reason, you want to control the global on/off (GPIO04) independently of the WW/CW channels, use this template: {\"NAME\":\"Mijia Desk Lamp 1S (MJGJD02YL)\",\"GPIO\":[0,0,0,0,224,0,1,1,0,0,0,0,0,0,0,416,0,417,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"FLAG\":0,\"BASE\":1,\"CMND\":\"DimmerRange 45,255\"} If you do not need dimmer control and only need full on/off control, you can adjust the module so GPIO{04,19,21} are always high, low or simple on/off outputs by configuring them to be of type Relay instead of PWM outputs. ","date":"2022-01-22","objectID":"/xaomi-s1-monitor-lamp-teardown-and-tasmota/:5:0","tags":["tasmota","home assistant"],"title":"Installing Tasmota on the Xiaomi Desk Lamp","uri":"/xaomi-s1-monitor-lamp-teardown-and-tasmota/"},{"categories":["teardown"],"content":"Dimmer Range In testing, extremely low brightness values for both the WW and CW channel had some undesirable behavior: Values lower than ~30 didn’t light at all Values between 30-35 caused unpleasant flicker Values lower than ~40 would also cause flicker when attempting to light the WW and CW channels together For this reason, a DimmerRange of 45-255 is suggested. Tasmota will let you dim the light as low as possible without flicker. Your lamp, eyes and needs will differ so feel free to see if a lower dimmer value will work for you by unlocking the full dimmer range with DimmerRange 0,255 and then playing with the ct and dimmer commands to find the lowest tolerable brightness for your needs. That is why you see the DimmerRange 45,255 command in the above templates. ","date":"2022-01-22","objectID":"/xaomi-s1-monitor-lamp-teardown-and-tasmota/:5:1","tags":["tasmota","home assistant"],"title":"Installing Tasmota on the Xiaomi Desk Lamp","uri":"/xaomi-s1-monitor-lamp-teardown-and-tasmota/"},{"categories":["teardown"],"content":"PCB/IC Markings Some of the interesting ICs and PCB markings Lamp PCB is labeled Yeelight Spider 1S V06, 20210714 by XJD, 94V-0, Y Y21M09D13, JUl 7.820.0874-1 PCB has a QR code / sticker with WF-E32-RWY1, Spider1S, and the device mac address SGM4065: Over-Voltage Protection IC and Li+ Charger Front-End Protection IC with LDO Mode Some DFN-10 package that is marked with either WRDPA or WRQPA or WR0PA. It’s a little hard to tell as the markings are super faint and I can’t get them super clear even with high contrast / inverted color image filters. There are several of them with identical circuitry through the length of the board so this IC is some sort of pwm dimmable constant current LED driver. ESP32-D0WD: the star of the show GD25Q32(B): a 4096 kB SPI flash chip The lamp body is marked with CMIT ID: 2021DP11423 Remote PCB labeled with 100-P806D1-1B-A1, Yeelight Spider 1S RC Board V02, 20210716 by XJD MHCB07P. This is marked on the tiny BTLE module inside the remote. Not too many search results show up. CMIT ID: 2020DP3172(M) ","date":"2022-01-22","objectID":"/xaomi-s1-monitor-lamp-teardown-and-tasmota/:5:2","tags":["tasmota","home assistant"],"title":"Installing Tasmota on the Xiaomi Desk Lamp","uri":"/xaomi-s1-monitor-lamp-teardown-and-tasmota/"},{"categories":["teardown"],"content":"MUGJD01YL Product details for the lamp that can't be converted to run Tasmota. Courtesy of @htvekov The PCB is held in the tube with similar plastic 'sleds'. They are secured with screws rather than heatstake so they are easier to remove. The move to heatstake in the revised edition was likely to reduce costs. Courtesy of @htvekov Courtesy of @htvekov Courtesy of @htvekov ","date":"2022-01-22","objectID":"/xaomi-s1-monitor-lamp-teardown-and-tasmota/:6:0","tags":["tasmota","home assistant"],"title":"Installing Tasmota on the Xiaomi Desk Lamp","uri":"/xaomi-s1-monitor-lamp-teardown-and-tasmota/"},{"categories":["teardown"],"content":"And a tangential update to a blakadder.com post about a mystery device that turned out to be the Lanbon L8","date":"2022-01-18","objectID":"/lanbon-l8-tuya-lcd-switch-openhasp/","tags":["TuYa","openHasp"],"title":"Using Home Assistant to dynamically layout openHasp widgets","uri":"/lanbon-l8-tuya-lcd-switch-openhasp/"},{"categories":["teardown"],"content":"Background This is one of those posts that sat in the Drafts folder for way too long. Just before release, I’d discover something new that would warrant substantial rewrites. After several delays, false starts and re-writes, I finally have something that is mostly new and worth sharing with the world. Like with the past few teardown posts, this one also started off as a ‘cart-stuffer’ item so I could unlock a more generous discount on the total purchase. The listing that caught my eye had the generic title: EU US Wifi LCD Smart Wall Light Touch Switch Tuya Smart Life App Remote Control ON OFF Timer Voice Control For Google Home Alexa Naturally, a cursory check for existing writeups / teardowns didn’t yield much. I did have some hope that the Tuya compatibility meant an easily hacked ESP module running the show and not a proprietary module. It was unlikely that the device would be Android powered at that price-point and an ESP8266 series would be woefully under powered for direct LCD control so … fingers crossed for an ESP32 module! Or, at the very least there might be a way to retrofit in an ESP module like with the recent Mi-Boxer LED controller that I helped to integrate with Tasmota. The plan was to do a teardown and dump as much technical data as I could possibly gather in an evening or two and conclude with a feasibility assessment of hacking the device for use with Home Assistant. ","date":"2022-01-18","objectID":"/lanbon-l8-tuya-lcd-switch-openhasp/:0:0","tags":["TuYa","openHasp"],"title":"Using Home Assistant to dynamically layout openHasp widgets","uri":"/lanbon-l8-tuya-lcd-switch-openhasp/"},{"categories":["teardown"],"content":"Generic becomes Lanbon Immediately after opening the shipping box and getting eyes on the actual product packaging, it was clear that this was a Lanbon L8 series module. A quick google later and it turns out that the venerable blakadder.com has already covered this device… and documented it’s Tasmota compatibility! So much for publishing a teardown and trying to figure out if Home Assistant integration was feasible 😕. Funny how once you have the ‘magic query string’, google starts to yield a ton of relevant results! Just after finding the aforementioned blakadder.com posts on the L8 device, I found two very helpful sources of more information: Somebody by the name of Jan Newmarch has published a comprehensive dive into the protocol(s) used by the stock firmware / other devices in the Lanbon family. This page dedicated to the Lanbon L8 from a project called openHasp. I thought that second link seemed familiar…🤔. Turns out, the openHASP project is a substantial rewrite of the initial software that powered my Enhanced HomeAssistant Switch Plate (eHasp) project. Info While digging through the above links, I realized that the model I had opened up had a different PCB layout. In the interest of adding to the collective internet KB, photos and some other technical details from the model I tore apart are below. openHasp As opposed to the old HASP project, openHasp leverages more powerful processors that can drive the LCD directly; graphical assets no longer need to be compiled down to a LCD-specific firmware before use and the content of the entire display can be arbitrarily manipulated at runtime! openHasp uses json like files to store the UI/widgets layout and configuration. On boot, the content of the jsonl is parsed and turned into the actual UI widgets that are displayed on screen. For example, here is the example jsonl that renders two buttons: {\"page\":1,\"id\":2,\"obj\":\"btn\",\"x\":10,\"y\":40,\"w\":105,\"h\":90,\"toggle\":false,\"text\":\"Button\",\"mode\":\"break\",\"align\":\"center\"} {\"page\":1,\"id\":3,\"obj\":\"btn\",\"x\":125,\"y\":40,\"w\":105,\"h\":90,\"toggle\":true,\"text\":\"#FFD700 Toggle# Button\",\"mode\":\"break\",\"align\":\"center\"} Image credit/source: openHasp Docs Notice how the absolute coordinates on screen (x and y) and and absolute width (w) and height (w) properties are explicitly declared. The only reason the buttons look appropriately sized/positioned in the above screenshot is because someone took the time to calculate the appropriate values for the particular screen resolution and orientation. The above jsonl example would look different on any openHasp device with a different screen orientation or resolution! Manually calculating the exact size and position of every widget for each class of device isn’t so bad if you’re planning on deploying the same file to several instances of the same device… but it starts be become a real headache if you want to deploy the same layout to 2+ different types of device. The L8 devices are designed to be installed into a wall electrical box; they don’t sit well on my desk so prototyping various interface files on a L8 device isn’t the easiest. Instead, I am using a device with a higher resolution and bigger screen that does work well on a desk to prototype the various jsonl files. If you’re thinking that calculating the appropriate location for various UI widgets on one device and then having to re-do the math for the intended deploy targets sounds like a task better suited to a computer… you’re right! ","date":"2022-01-18","objectID":"/lanbon-l8-tuya-lcd-switch-openhasp/:1:0","tags":["TuYa","openHasp"],"title":"Using Home Assistant to dynamically layout openHasp widgets","uri":"/lanbon-l8-tuya-lcd-switch-openhasp/"},{"categories":["teardown"],"content":"Dynamic Layouts with Home Assistant Fortunately, the properties of every UI widget can be modified over the network even after the jsonl file has been parsed and the initial display has been painted! My C++ skills are pretty weak so contributing new code to enable dynamic layouts directly to the openHasp codebase is not immediately practical. There is, however, a robust Home Assistant integration published in the form of a custom component. Home Assistant means Python and some Python code to calculate the appropriate position/size for a given element is immediately within my means. Warning A few (small) changes to the openHasp firmware were required to make this work. Any recent build of 0.7 should work. As of 2022-01, there is no release of the custom component that works with 0.7 out of the box so if installing through HACS, you will need to patch the custom component so devices running .0.7 can be controlled via Home Assistant. Please see the openHasp \u003c-\u003e Home Assistant docs for background information, examples and a lot more detail on how Home Assistant and openHasp work together or if any of the jsonl and yaml below does not make sense. Warning Please make sure that your openHasp device can connect to your MQTT broker and that the openHasp custom integration can discover and ‘register’ your device with Home Assistant before proceeding! ","date":"2022-01-18","objectID":"/lanbon-l8-tuya-lcd-switch-openhasp/:2:0","tags":["TuYa","openHasp"],"title":"Using Home Assistant to dynamically layout openHasp widgets","uri":"/lanbon-l8-tuya-lcd-switch-openhasp/"},{"categories":["teardown"],"content":"Two devices, one pages.jsonl The pages.jsonl file used for this post and the screenshots below is a (lightly) modified versions of the clock and temperature example and the simple page navigation examples with a room specific set of ui widgets. That singular pages.jsonl file was uploaded it to two devices: Lanbon L8 with a 240x320 resolution WT32-SC01 module with a 320x480 resolution Each screenshot was taken with the device display configured to 0º and 90º of rotation. A reboot was required for the configuration change to take effect but I made zero changes to the pages.jsonl file on the device between changing the screen orientation. Lanbon L8 in it's rotated 'landscape' orientation Lanbon L8 in it's default 'portrait' orientation wt32-sc01 in 'landscape' orientation. wt32-sc01 in 'portrait' orientation. ","date":"2022-01-18","objectID":"/lanbon-l8-tuya-lcd-switch-openhasp/:2:1","tags":["TuYa","openHasp"],"title":"Using Home Assistant to dynamically layout openHasp widgets","uri":"/lanbon-l8-tuya-lcd-switch-openhasp/"},{"categories":["teardown"],"content":"building a pages.jsonl You don’t need to use this exact technique to build the pages.jsonl file; it works well for my needs / development flow. All that matters is that you get every UI element for every page into a single pages.jsonl file and then get that file uploaded to the device(s) in question. The page/id values declared in your jsonl file must match the object IDs that you will use to configure the Home Assistant integration. ❯ cat header.frag.jsonl footer.frag.jsonl room.frag.jsonl \u003e pages.jsonl ❯ curl http://roomPlateIpv4Here/edit --form name=data --form data=@pages.jsonl Info I store the combined files in pages.jsonl because this is the default page that an openHasp device will render. You can change this setting via the web UI: http://roomPlateIpv4Here/config/hasp or via telnet: ❯ telnet roomPlateIpv4Here \u003c...\u003e prompt\u003e config/hasp {\"pages\":\"/foo.jsonl\"} header.frag.jsonl This contains the three text labels that I wish to have at the top of every openHasp device I deploy. { \"page\": 0, \"comment\": \"Default to page0 as the header and page/layout\" } { \"id\": 1, \"comment\": \"Time in the top left\", \"obj\": \"label\", \"text\": \"00:00\", \"align\": \"center\", \"bg_color\": \"#2C3E50\" } { \"id\": 2, \"comment\": \"Temp in the middle\", \"obj\": \"label\", \"text\": \"00.0°C\", \"align\": \"center\", \"bg_color\": \"#2C3E50\" } { \"id\": 3, \"comment\": \"Humidity in the top right\", \"obj\": \"label\", \"text\": \"00.0%\", \"align\": \"right\", \"bg_color\": \"#2C3E50\" } footer.frag.jsonl This contains the three page navigation buttons that I wish to have at the bottom of every openHasp device that I deploy. { \"id\": 6, \"comment\": \"tab nav on the bottom, prev\", \"obj\": \"btn\", \"action\": \"prev\", \"bg_color\": \"#2C3E50\", \"text\": \"\\uE141\", \"text_color\": \"#FFFFFF\", \"radius\": 0, \"border_side\": 0, \"text_font\": 28 } { \"id\": 7, \"obj\": \"btn\", \"action\": \"back\", \"bg_color\": \"#2C3E50\", \"text\": \"\\uE2DC\", \"text_color\": \"#FFFFFF\", \"radius\": 0, \"border_side\": 0, \"text_font\": 22 } { \"id\": 8, \"obj\": \"btn\", \"action\": \"next\", \"bg_color\": \"#2C3E50\", \"text\": \"\\uE142\", \"text_color\": \"#FFFFFF\", \"radius\": 0, \"border_side\": 0, \"text_font\": 28 } room.frag.json This file should contain all the page(s) and UI widgets that are unique to the openHasp device deployed into the room that I will call room for the purposes of this post. As a demonstration, I have set up three buttons that control each of the three relays on a L8 device; you will almost certainly want to add multiple pages / other UI widgets as needed. { \"page\": 1, \"comment\": \"primary controls for the 3 relays\" } { \"id\": 101, \"comment\": \"relay1\", \"obj\": \"btn\", \"toggle\": true, \"text\": \"relay1\", \"mode\": \"break\", \"align\": \"center\", \"groupid\": 1 } { \"id\": 102, \"comment\": \"relay2\", \"obj\": \"btn\", \"toggle\": true, \"text\": \"relay2\", \"mode\": \"break\", \"align\": \"center\", \"groupid\": 2 } { \"id\": 103, \"comment\": \"relay3\", \"obj\": \"btn\", \"toggle\": true, \"text\": \"relay3\", \"mode\": \"break\", \"align\": \"center\", \"groupid\": 3 } ","date":"2022-01-18","objectID":"/lanbon-l8-tuya-lcd-switch-openhasp/:2:2","tags":["TuYa","openHasp"],"title":"Using Home Assistant to dynamically layout openHasp widgets","uri":"/lanbon-l8-tuya-lcd-switch-openhasp/"},{"categories":["teardown"],"content":"Configure Home Assistant After the pages.jsonl is deployed to each of the openHasp devices, you will need to create a configuration file for Home Assistant. For the above screenshots, I created two identical ⃰ copies of the yaml below ⃰ Other than the device name; in one file, the name was changed from plate00 to plate01. # plate00 is a test L8 module # Has a resolution of 240x320 # The top left corner is 0,0, X grows positive to the right and Y grows positive down ## plate00: ## TODO: is there a way to fix this? Maybe a HA feature request or openHasp/CC change... # Would be really nice if HA had some way to save templates and load them # that way I don't have to declare the same variables over and over... objects: ### # COMMON ### # Header: Time - obj: \"p0b1\" properties: # Align left most, If we do go over our permitted length, loop \"align\": \"left\" \"text\": \"{{ states('sensor.time') }}\" \"mode\": \"loop\" ## # Draw the labels with a 1% margin from the top and sides \"x\": \u003e- {% set scnWd = state_attr('openhasp.plate00', 'tftWidth') | int %} {% set hdrHorMargin = (scnWd*0.01) | int %} {{hdrHorMargin}} \"y\": \u003e- {% set scnHt = state_attr('openhasp.plate00', 'tftHeight') | int %} {% set hdrVrtMargin = (scnHt*0.01) | int %} {{hdrVrtMargin}} # Width is 1/3 of the screen width after subtracting margins ## \"w\": \u003e- {% set numObj = 3 %} {% set scnWd = state_attr('openhasp.plate00', 'tftWidth') | int %} {% set hdrHorMargin = (scnWd*0.01) | int %} {% set usableHdrWd = scnWd-(2*hdrHorMargin) %} {% set hdrLblWd = (usableHdrWd/numObj) | int %} {{hdrLblWd}} # Height is 10% of the screen, after margin ## \"h\": \u003e- {% set scnHt = state_attr('openhasp.plate00', 'tftHeight') | int %} {% set hdrVrtMargin = (scnHt*0.01) | int %} {% set hdrHt = (scnHt*0.1) | int %} {% set hdrLblHt = hdrHt-hdrVrtMargin %} {{hdrLblHt}} # Header: Temp - obj: \"p0b2\" properties: # Align center, If we do go over our permitted length, loop \"align\": \"center\" \"text\": \"{{ states('sensor.room_temperature') }}°C\" \"mode\": \"loop\" ## # Draw the labels with a 1% margin from the top and sides \"x\": \u003e- {% set numObj = 3 %} {% set scnWd = state_attr('openhasp.plate00', 'tftWidth') | int %} {% set hdrHorMargin = (scnWd*0.01) | int %} {% set usableHdrWd = scnWd-(2*hdrHorMargin) %} {% set hdrLblWd = (usableHdrWd/numObj) | int %} {% set hdrHorMargin = (scnWd*0.01) | int %} {{hdrHorMargin+hdrLblWd}} \"y\": \u003e- {% set scnHt = state_attr('openhasp.plate00', 'tftHeight') | int %} {% set hdrVrtMargin = (scnHt*0.01) | int %} {{hdrVrtMargin}} # Width is 1/3 of the screen width after subtracting margins ## \"w\": \u003e- {% set numObj = 3 %} {% set scnWd = state_attr('openhasp.plate00', 'tftWidth') | int %} {% set hdrHorMargin = (scnWd*0.01) | int %} {% set usableHdrWd = scnWd-(2*hdrHorMargin) %} {% set hdrLblWd = (usableHdrWd/numObj) | int %} {{hdrLblWd}} # Height is 10% of the screen, after margin ## \"h\": \u003e- {% set scnHt = state_attr('openhasp.plate00', 'tftHeight') | int %} {% set hdrVrtMargin = (scnHt*0.01) | int %} {% set hdrHt = (scnHt*0.1) | int %} {% set hdrLblHt = hdrHt-hdrVrtMargin %} {{hdrLblHt}} # Header: Humidity - obj: \"p0b3\" properties: # Align right most, If we do go over our permitted length, loop \"align\": \"right\" \"text\": \"{{ states('sensor.room_humidity') }}%\" \"mode\": \"loop\" ## # Draw the labels with a 1% margin from the top and sides \"x\": \u003e- {% set numObj = 3 %} {% set scnWd = state_attr('openhasp.plate00', 'tftWidth') | int %} {% set hdrHorMargin = (scnWd*0.01) | int %} {% set usableHdrWd = scnWd-(2*hdrHorMargin) %} {% set hdrLblWd = (usableHdrWd/numObj) | int %} {% set hdrHorMargin = (scnWd*0.01) | int %} {{hdrHorMargin+(2*hdrLblWd)}} \"y\": \u003e- {% set scnHt = state_attr('openhasp.plate00', 'tftHeight') | int %} {% set hdrVrtMargin = (scnHt*0.01) | int %} {{hdrVrtMargin}} # Width is 1/3 of the screen width after subtracting margins ## \"w\": \u003e- {% set numObj = 3 %} {% set scnWd = state_attr('openhasp.plate00', 'tftWidth') | int %} {% set hdrHorMargin = (scnWd*0.01) | int %} {% set usableHdrWd = scnWd","date":"2022-01-18","objectID":"/lanbon-l8-tuya-lcd-switch-openhasp/:2:3","tags":["TuYa","openHasp"],"title":"Using Home Assistant to dynamically layout openHasp widgets","uri":"/lanbon-l8-tuya-lcd-switch-openhasp/"},{"categories":["teardown"],"content":"Teardown ","date":"2022-01-18","objectID":"/lanbon-l8-tuya-lcd-switch-openhasp/:3:0","tags":["TuYa","openHasp"],"title":"Using Home Assistant to dynamically layout openHasp widgets","uri":"/lanbon-l8-tuya-lcd-switch-openhasp/"},{"categories":["teardown"],"content":"Product packaging Since it’s all but impossible to find any photos of the product packaging online, here’s a few of those: Minimal instructions and wasteful packaging. Other than the small foam insert, this entire package can be recycled! The provided screws are NOT the US standard #6 32 thread-per-inch. They are slightly larger and will strip out any screw holes in an electrical box! ","date":"2022-01-18","objectID":"/lanbon-l8-tuya-lcd-switch-openhasp/:3:1","tags":["TuYa","openHasp"],"title":"Using Home Assistant to dynamically layout openHasp widgets","uri":"/lanbon-l8-tuya-lcd-switch-openhasp/"},{"categories":["teardown"],"content":"Internals This particular model is the 3 relay version. Packaging claims 200W power. It's not clear if that is per channel or total. My money is on total. You can clearly see the revised PCB that is substantially different from the one featured on this blakadder post. My PCB has a parasitic TuYa module also attached. Almost none of the pins are connected to the PCB so the TuYa module is 100% self contained and commands the main ESP module via UART. Removing the TuYa module is pretty painless with some hot air. It can also be left alone and the openHasp binaries will just ignore it. You can also place an order directly with Lanbon for units that do not have the TuYa module populated but this will require a minimum order quantity. Generic relays, generic caps, generic transformers... don't switch any critical loads with this! A closer look at what appears to be a dedicated power monitoring IC. It appears to monitor the aggregate of all three channels, not each individually. Very likely to make sure no more than 200W is switched at one time... ","date":"2022-01-18","objectID":"/lanbon-l8-tuya-lcd-switch-openhasp/:3:2","tags":["TuYa","openHasp"],"title":"Using Home Assistant to dynamically layout openHasp widgets","uri":"/lanbon-l8-tuya-lcd-switch-openhasp/"},{"categories":["teardown"],"content":"PCB/IC Markings Some of the interesting ICs and PCB markings: CB3S: TuYa wifi module HLW8012: Single phase energy monitor chip ESP32-WROVER-IB: the primary ESP32 module that runs the show Primary PCB is marked: L8-HS_CB_V1.17(20210805) Daughter / ‘power’ board L8-HS MB V1,14 ","date":"2022-01-18","objectID":"/lanbon-l8-tuya-lcd-switch-openhasp/:3:3","tags":["TuYa","openHasp"],"title":"Using Home Assistant to dynamically layout openHasp widgets","uri":"/lanbon-l8-tuya-lcd-switch-openhasp/"},{"categories":["teardown"],"content":"Where 'generic' means 'SSMS118 clone'","date":"2022-01-01","objectID":"/rgb-wall-switch-teardown/","tags":["tuya"],"title":"Generic RGB Wall Switch teardown","uri":"/rgb-wall-switch-teardown/"},{"categories":["teardown"],"content":"Yep! Another teardown post! This one was also a cheap “because i’m curious” post. What It’s a ‘decora’ style wall switch with WiFI and an RGB color changing paddle. The product listing was very non specific: EU US WiFi Smart Wall Switch Push Button Timer Relay Switch Voice Remote Control RGB LED Night Light Lamp TUYA Alexa Google Home I saw TuYa in the item description and hoped that it would be based on an ESP8266 module or at least use a pin-compatible module. After all, there are a few such devices on the Wall Switches and Dimmers section of the tasmota templates repository. ","date":"2022-01-01","objectID":"/rgb-wall-switch-teardown/:0:0","tags":["tuya"],"title":"Generic RGB Wall Switch teardown","uri":"/rgb-wall-switch-teardown/"},{"categories":["teardown"],"content":"Teardown Almost immediately after opening it became clear: the item is a variant of the SSMS118-01AI switch. Other than that, the internals are pretty predictable / standard. From the side you can see plastic clips holding the paddle to the Aluminum substrate. No screws on the back, so we probably open it from the front. Not sure about how code compliant those wire terminal/lugs are. If the paddle was removed, the philips screws would be unobstructed. RGB leds on a thin PCB with a reflective sticker attached. The sticker probably makes the LEDs appear brighter. Philips screws removed and the switch immediately splits in half. I wish everything was this easy to get into! Almost textbook design at this point; keep the mains voltage on it’s own PCB and only send back low voltage / signal to the controller PCB. The mains PCB attaches to the controller PCB via 3 sets of three male/female pin headers along the top and bottom of the left edge and one side of the right edge. Sparsely populated and a generic no-name relay. But at least there’s a fuse! Mains PCB is marked HYS-00-004-MAIN_V1.1 with a datecode of 2019-5-7. Equally sparse controller PCB. Aside from the massive mechanical switch and the three transistors for the RGB leds, everything lives on the ESP module. At first glance, the module looks like a standard ESP-12… but it isn’t! There are 6 pins on each of the three edges, not the 8 that would be present on an ESP-12 module. Controller PCB is marked HYS-00-004-WIFI_V1.1 with a datecode of 2019-4-11. After a bit of reverse image searching, the ESP based module appears to be a WT8266-S1s. The datasheet can be found here. To save you a click, here’s the useful bit: I checked a few of the pins listed on the SSMS118-01AI template switch and they appeared to match the PCB shown above. Thats all for this one! ","date":"2022-01-01","objectID":"/rgb-wall-switch-teardown/:1:0","tags":["tuya"],"title":"Generic RGB Wall Switch teardown","uri":"/rgb-wall-switch-teardown/"},{"categories":["teardown"],"content":"All new product line, still familiar internals.","date":"2022-01-01","objectID":"/shelly-pro-4pm-teardown/","tags":["shelly"],"title":"Shelly Pro 4PM teardown","uri":"/shelly-pro-4pm-teardown/"},{"categories":["teardown"],"content":"Yet another teardown post! Curiosity got the better of me while putting together a BOM for a project and I decided to add one of the new Shelly devices to my order to bump the total over the threshold for a nice discount. I have not seen a ton of discussion about what’s inside of a any of the new Shelly Pro devices. These ’next generation’ devices appear to all use a common and more uniform API which, apparently, is too demanding of the ESP8266 based hardware so it won’t be backported. A cursory google only reveals some light technical details from a teardown post on a german site. All of the pictures attached ot that post require a login 🙁. So here is my teardown. No login required! What The Shelly Pro 4 PM is a rather compact DIN mounted relay/power monitoring module with some connectivity. The 4 is for the number of channels that can be independently switches and monitored. As for connectivity, the official product page sums it up nicely: Professional 4 channels relay with Wi-Fi, LAN, and Bluetooth connection, suitable for home and facility automation with remote control and precise power management. DIN rail mountable inside a breaker box. Enhanced safety features and compatible with most used home automation platforms. ","date":"2022-01-01","objectID":"/shelly-pro-4pm-teardown/:0:0","tags":["shelly"],"title":"Shelly Pro 4PM teardown","uri":"/shelly-pro-4pm-teardown/"},{"categories":["teardown"],"content":"Teardown This Shelly 4PM feels like a step backwards in terms of build quality. The prior generation of devices were very dense little pucks and this feels pretty hollow; the plastic DIN case creaks and squeaks. The internal layout isn’t my favorite and it made both disassembly and reassembly a bit tenuous at a few points. The layout may be inevitable, though, as DIN case is more or less a standard shape and size. Layouts are almost always a bit weird when the electronics have to be designed to fit the case rather than the other way around. Other than the layout quirks, the Shelly team continues to go with what they know: the espressif line of chips. This time the ESP826x series is out and the much more capable ESP32 series is in… which allows for both the color LCD and the ethernet interface. As is common with these types of devices, the ESP runs the show… but it has a few deputies: dedicated power monitoring ICs and an ethernet PHY. And with that, let’s get into it: The main body of the shelly is clipped to the rear ‘plate’ which houses the DIN rail attachment mechanism. You can see the clips on the very top and bottom along the left edge: 40A at 240V is a _lot_ of power to fit into a fairly compact device! Viewed from the rear, the clips are easier to see in the four corners: The rear plate lifts off to reveal the largest PCB. There are 4 copies of the same circuit. Very nice to see big traces with extra solder and some beefy current shunts! Just behind the ‘input trigger’ terminals on the main PCB is a 2x10 @ 2.54mm pitch female header. Into which slides the ‘smarts’ PCB which hosts the main ESP32 MCU as well as the ethernet jack. On this smaller PCB and next to the ethernet jack is a very small 1x6 @ 1mm pitch female header block. It is cleverly hidden next to the jack but could probably be accessed with the case on if you’re careful. If I had to guess, this is a debug/programming header for at least the main MCU. It’s not pictured until later, but there is a 2x2 @ 2.54mm pitch male header block on the other side of the smarts PCB. This is where a small daughterboard containing only the 3 buttons connects. How much do you want to bet that the pins on the debug header are the usual +3.3, GND, IO0, RX, TX for ESP flashing? On the main PCB, behind the ‘smarts’ PCB is a set of two ICs marked with ADE7953ACPZ. As expected, these are the energy management / monitoring ICs. Why two crystals, though? The IC marked MCP23S17 is a simple SPI based IO expander… almost certainly used to drive the relays and possibly command the power management ICs. On the rear of the ‘smarts’ PCB is the star of the show: ESP32-D0WDQ6. In addition to the passives and the flat flex socket for the LCD, we have: cFeon QH64-104HIP 64 Megabit flash chip SMSC8720A: 10/100 Megabit ethernet PHY There is also another daughterboard covered in kapton tape. This is soldered to the main PCB and just has a few electrolytic caps. I guess this arrangement was easier than trying to clear some room on the back of the main PCB so the heavy current traces could be kept simple 🤔? In the top right corner you can see the 4 pin header where the button daughter board attaches… just next to the ethernet phy. From this angle, still in the top right corner, you can see the button daughter board attached to the 4 pin header. Just a few very tiny passives! Electrically, nothing unusual or bizarre. Layout was a bit ‘inventive’ but the unusual but standard shape of the case probably drove at least some of the decision to have 4 different PCBs that all have to be tediously connected by hand during manufacture! Thats all for this one! ","date":"2022-01-01","objectID":"/shelly-pro-4pm-teardown/:1:0","tags":["shelly"],"title":"Shelly Pro 4PM teardown","uri":"/shelly-pro-4pm-teardown/"},{"categories":["teardown"],"content":"PCB/IC Markings AKA SEO optimization 😉 ADE7953ACPZ: Power monitoring MCP23S17: IO expansion ESP32-D0WDQ6: main CPU EN25QH64: 8 MB flash chip Primary PCB is marked: Shelly4ProPM_Relays_v0.1.2 Daughter boards not really marked with anything other than the usual component IDs and the date code of 211015 ","date":"2022-01-01","objectID":"/shelly-pro-4pm-teardown/:2:0","tags":["shelly"],"title":"Shelly Pro 4PM teardown","uri":"/shelly-pro-4pm-teardown/"},{"categories":["teardown","review"],"content":"Something here","date":"2021-12-11","objectID":"/tuya-smart-curtain-driver-robot-teardown/","tags":["tuya"],"title":"Tuya Smart Curtain Driver Robot Teardown","uri":"/tuya-smart-curtain-driver-robot-teardown/"},{"categories":["teardown","review"],"content":"I am trying something new out with this post; some mix of hardware teardown and a brief product review. Why I was looking for a way to actuate some heavy blackout curtains. There have been several DIY projects out there that manipulate curtains but they all appear to be relatively involved as they are often designed for a very specific type of curtain; servos that fit on the ’tilt rod’ or motors that can manipulate the pull chain… etc. The specific curtains that I wanted to power-actuate are curtains that do not have a pull string or a set of wheels/track to facilitate their movement. Just folds of fabric hanging directly from a telescopic metal rod. After a quick review of hte existing commercial solutions for my application/style of curtains, it became clear that they all work in about the same way: some battery powered motor mechanically couples to the curtain rod and moves along the rod dragging / pushing the curtain as it does so. Since they all more or less use the same design, I figured that most of the differentiation between products would be in the software side of things. No product immediately stood out as having local Home Assistant integration so it didn’t matter which product I selected; I will inevitably have to do some reverse engineering / hacking to get local Home Assistant integration. I selected the Tuya Smart Curtain Driver Robot because: Cheap Appeared to use USB-C for charging I was vaguely aware that TuYa was pumping out a ton of ESP8266 based hardware and hoped that I’d find the familiar microcontroller inside. Below is a collection of photos and some thoughts that are - roughly - what I wish I had been able to find when doing the product research. If I had found the equivalent of this post while doing my research, I would have been able to save myself a purchase! What Searching for rod-based curtain actuators will turn up a ton of results. A fair number of them use product images very similar to these: Official marketing photo How well the robot performs will depend on how well the little white wheel is held against the bottom of the curtain rod. The arms that the upper sled attaches to are spring loaded for additional clamping force. The case seems to be fairly generic and used across multiple brands so it’s safe to say that depending on the version / hardware variant, you may or may not have all of the featured inputs/sensors. Only one of the two units in a pair comes equipped with the light sensor. The light sensor is a nice touch. I will absolutely be borrowing that idea when designing my own solution 💡🤔! ","date":"2021-12-11","objectID":"/tuya-smart-curtain-driver-robot-teardown/:0:0","tags":["tuya"],"title":"Tuya Smart Curtain Driver Robot Teardown","uri":"/tuya-smart-curtain-driver-robot-teardown/"},{"categories":["teardown","review"],"content":"Teardown I’m not a huge fan of unboxing videos. The box is rather unremarkable; it sustained some damage in transit, but that’s what it’s supposed to do. Relatively well packaged. The seller that I purchased from had explicit listings for different curtain rod styles so I am not sure why I received hardware for all styles. There does not appear to be any easy way to install this hardware. The upper sled is coupled to the main body through two spring-loaded arms with a ratchet and paw setup. The arms can be easily removed from the main body if needed. I am getting some vague Portal2 Turret vibes... Since the entire weight of the robot will be hanging from the upper sled, the springs are the only thing that will pull the actuator wheel into the curtain rod. I don’t know how the springs will last over time, but I absolutely can forsee needing to re-tension things as the springs inevitably stretch out. The ratchet/paws seem to indicate compatibility with some comically large diameter curtain rods! Obligatory 'i void warranties' reference. Use a Philips style J00 or J000 screwdriver to remove the four screws holding the thing together. Use any flat pry tool to crack the two halves apart. Screw hiding under warranty void sticker and obvious mechanical/snap seam make it pretty obvious how this will come apart. And with that, our first real look at the electronics inside! I expected a simple PCB that contained a charge controller circuit for the battery and a simple motor driver with over current protection… and nothing else. I was sure that everything else would be handled directly by a the radio-on-module. I absolutely did not expect the PCB to have provisions for … two radio modules! A few other quick observations: The unpopulated radio module footprint does not match any ESP-8266 modules that I am familiar with. The populated radio module does look like a common ESP-12E module footprint… but the module is clearly not an ESP. The markings have been erased from all the interesting ICs 🤬. The 20 pin chip closest to the unpopulated module footprint could be anything but is likely the ‘housekeeping’ CPU. The populated radio module likely communicates with this chip to command the motor and check the sensors The product marketing photos indicated that there would be a light sensor. The PCB appears to have a foot print for an LDR… but it’s not populated… only a few passive components besides some radio-on-module The USB-C port does not have any active electronics connected to it. The port likely does not speak any power delivery protocols and certainly does not have a hidden UART for talking to either of the microcontrollers. No motor is visible so that means that it must be embedded in the comically small drive wheel… Some more technical details are discussed below. Huh. Was not expecting the PCB to be quite so big or complex! Lifting up the PCB reveals the battery pack. I did not slice the pack open to see which brand of cells went into the pack. Grateful that they didn't solder the battery directly to the PCB. I have not tested the battery to see accurate the labeled capacity is. I was still looking for that elusive light sensor so I opened up the second unit… and found it! Other than the populated second radio module, R20 and the LDR, the PCBs appear identical. Something tells me that the PCB with two radio modules is the 'leader' out of the two. On the rear we can see an obvious programming / debug port and a PCB/product designator: ZNCL_TY_V1.5. Giving that a quick google returns almost nothing. I did find this post from /u/coned_miro asking about a very similar PCB revision: ...The main board says 'ZNCL_TY_V1.3' on the back Nothing new to be learned about the tuya device from that thread, sadly. No, I didn't hook a scope up or trace out the obvious programming/debug header. ","date":"2021-12-11","objectID":"/tuya-smart-curtain-driver-robot-teardown/:1:0","tags":["tuya"],"title":"Tuya Smart Curtain Driver Robot Teardown","uri":"/tuya-smart-curtain-driver-robot-teardown/"},{"categories":["teardown","review"],"content":"The App I never intended to use the manufacturer provided app for anything other than the initial setup so this will be a very brief section. The robot was quickly discovered and provisioned through the app. BTLE Pair/Provisioning was straightforward The device calibration process is pretty rudimentary and does not have an easy “undo” process. If you make a mistake in configuring the direction/distance that the robot needs to travel for curtain open/close, you have to factory reset the device. Fortunately this is easy to do in app and discovering/re-provisioning the device takes only a few seconds. The two firmware version strings strongly hints at a “two processors for two domains” architecture: the anonymous 20pin chip runs everything on the PCB and the BT7L module deals with external communications and is only abstractly aware of the PCB/motor/sensor/battery state. I have only skimmed the TuYa developer documentation but I think that the VirtualID is common to _all_ of the curtain robots. Verdict While disappointing that there was no easily hackable ESP microcontroller running the show, it doesn’t matter. I can’t use this product as is for my intended application; the motor is just too puny for the task. The brains(?) My curtains are rather thick and heavy. A tiny motor can’t possibly have enough power to do this on it’s own… especially with a sub-optimal coupling mechanism! To give the motor a fighting chance, the engineers went with a TON of reduction-gearing. The gearbox allows a wimpy but fast motor to become a more grunty motor at the expense of speed. Almost anything small that rotates at high speed will come with some unpleasant sounds. This is ESPECIALLY true for cheaply made gearbox full of small gears. This means that any invocation of the robot will be noisy. You can expect the noisy little device to slowly move across the curtain rod. 🙄 The robot struggled to push the curtains together towards the end of an opening cycle… it would often skip in place as the drive wheel struggled to keep enough traction on the curtin rod. Likewise, asking the robot to pull the bucked up curtains closed was out of the question without some sort of an assist. Because the robot has no fixed position sensor, it can’t really measure where on the curtain rod it is. Every time the drive wheel skips, the difference between where the robot thinks it is and where it actually is will grow. If you can stand the whiny/slow movement, expect frequent re-calibrations 👎. TL;DR: Looks like there’s a reason why the hobbyist/DIY community has produced such a wide variety of bespoke curtain/drape actuators… most of the commercial ones have sacrificed too much in order to be widely usable. The solution that I end up implementing will be designed with my heavy drapes in mind and will use an appropriately sized and quiet motor! A simple brushed DC motor with no position encoder and what is probably a cheaply made gearbox. What could go wrong? Technical Details A highly condensed version of my initial notes from setup/teardown: Was not expecting multiple radio units. The blue radio-module that both PCBs have in common appears to be a JDY-25M. There is a SDK for the JDY-25M available here. It contains some english documentation. The JDY-25M SDK does not appear to contain any information about how to program the chip or build a custom firmware. You are meant to interface with the ‘stock’ firmware via AT+ commands. The firmware appears to support multiple modes… including a bi-directional communication link. I suspect that the unique radio module is the connection to the outside world and the the two identical radio modules are used to coordinate movement between the two pods I was never able to get the ‘follower’ unit to pair or otherwise command the second unit. The unique radio module is a module made specifically by/for TuYa: https://developer.tuya.com/en/docs/iot/bt7l?id=K96gqp1dp6iiw ","date":"2021-12-11","objectID":"/tuya-smart-curtain-driver-robot-teardown/:2:0","tags":["tuya"],"title":"Tuya Smart Curtain Driver Robot Teardown","uri":"/tuya-smart-curtain-driver-robot-teardown/"},{"categories":["teardown","review"],"content":"PCB Markings AKA SEO optimization 😉 PCB is marked: ZNCL_TY_V1.5 “primary” radio: BT7L “secondary” radio JDY-25M ","date":"2021-12-11","objectID":"/tuya-smart-curtain-driver-robot-teardown/:3:0","tags":["tuya"],"title":"Tuya Smart Curtain Driver Robot Teardown","uri":"/tuya-smart-curtain-driver-robot-teardown/"},{"categories":["home assistant"],"content":"How is X11 still so unpleasant to use and configure in 2021?!","date":"2021-11-20","objectID":"/hardware-accelerated-graphics-on-the-raspberry-pi-4-a-snappier-kds/","tags":["raspberry-pi","xorg","KDS"],"title":"Hardware accelerated graphics on the raspberry pi4 for a speedier KDS","uri":"/hardware-accelerated-graphics-on-the-raspberry-pi-4-a-snappier-kds/"},{"categories":["home assistant"],"content":"Surfacing the right information at the right time in the right place is a difficult but essential task for any credible automation system. I have been experimenting with the concept of a Home Assistant powered KDS for a few years now and have found that the refrigerator happens to be an especially good place to surface some information and device controls. Yes, it's over-exposed and shot at an awkward angle but that's what it took to minimize glare! This is not a post about how to build the KDS pictured above; you can follow any of the numerous “how to use a raspberry pi as a kiosk” guides out there and you’d be 90% of the way there. The last 10% is highly application specific; the hardware you design and 3d-print or otherwise fabricate will depend on your particular screen and selected mounting location. This is a post about solving a performance issue with the dashboard hosted on the device. Earlier versions of this KDS were powered by a raspberry pi 3 B (not even the + variant!) with 1 GB of ram. The Lovelace dashboard that the KDS displays is quite javascript heavy and would frequently hang on the pi3b. I use this dashboard to adjust grocery lists, control lights, set appliance timers and more. If the dashboard is sluggish or otherwise unresponsive, it’s worse than useless! As soon as I swapped in a raspberry pi 4 with 4 GB ram, things got …. marginally better 😑. Sure, it booted much faster and the JS heavy graphs didn’t cause the box to wedge anymore, but manipulating things on screen still was still a choppy experience. Animations didn’t show at all or had all but a few frames dropped :(. I know that the raspberry pi 4 is more than capable of running a single web page in a headless browser so something is wrong. After a bit of digging, it turns out that chromium does NOT use hardware acceleration by default on the raspberry pi. Ok, that’s an easy fix. Just enable the gpu and reboot: pi@kds:~ $ cat /boot/config.txt \u003c...\u003e # Enable DRM VC4 V3D driver for much more performant chrome dtoverlay=vc4-kms-v3d \u003c...\u003e pi@kds:~ $ sudo reboot … right? No. Turning on the gpu acceleration broke the various screen rotation / resolution directives that I had configured in /boot/config.txt: pi@kds:~ $ cat /boot/config.txt \u003c...\u003e [all] # We need to rotate the display 90degrees as the 'default' orientation from the manufacturer assumes a horizontal orientation, not a vertical one # See: https://www.waveshare.com/wiki/13.3inch_HDMI_LCD_(H) display_rotate=1 # Force correct resolution # Use 'DMT/Display Monitor Timings # See: https://www.raspberrypi.com/documentation/computers/config_txt.html#video-options hdmi_group=2 hdmi_mode=82 One of the Raspberry Pi Engineers explains why: display_rotate only does anything if the firmware is in charge of the display, which isn’t the case when using vc4-kms-v3d. Even when the video out could be configured with config.txt, the firmware offers no such mechanism to rotate input events to match the orientation. Fortunately, the LCD manufacturer provides good documentation about how to configure the touch inputs with X11 Unfortunately, the manufacturer does not provide corresponding documentation about how to configure the display with X11. Not that I can blame them! Configuring X11 has always been… tedious … to use a ‘polite’ term for the experience! ","date":"2021-11-20","objectID":"/hardware-accelerated-graphics-on-the-raspberry-pi-4-a-snappier-kds/:0:0","tags":["raspberry-pi","xorg","KDS"],"title":"Hardware accelerated graphics on the raspberry pi4 for a speedier KDS","uri":"/hardware-accelerated-graphics-on-the-raspberry-pi-4-a-snappier-kds/"},{"categories":["home assistant"],"content":"Xorg and SSH I’ll spare you the bulk of the rant and summarize with this: Can't open display :0.0 For reasons that don’t make a ton of sense to me, all of the command line tools for probing display hardware and creating X11 configurations really don’t like working over SSH 🤔. Yes, I of course tried the export DISPLAY=:0.0 trick. xrandr and friends are fine when running in a local shell, but just don’t play nice when a local user connects via SSH. This makes things a lot harder than they needed to be as the location of the KDS does not lend its self to easily hooking up a keyboard and mouse. Furthermore, the intended purpose of this install is to display a web page. Thats it. There is next to no desktop environment installed because one is not needed for a full screen headless chrome instance. Installing a virtual console application was going to involve a lot of bloat and other unnecessary packages which is overkill for a few CLI utilities that should just work over any console weather that be local PTY or ssh! After a few hours of anguish and trial/error later, I had everything working as expected! But before we get there and while i’m still ranting, why is there no xorg -checkconf ... command?! Ok. Now it’s all out of my system. \u003c/rant\u003e ","date":"2021-11-20","objectID":"/hardware-accelerated-graphics-on-the-raspberry-pi-4-a-snappier-kds/:1:0","tags":["raspberry-pi","xorg","KDS"],"title":"Hardware accelerated graphics on the raspberry pi4 for a speedier KDS","uri":"/hardware-accelerated-graphics-on-the-raspberry-pi-4-a-snappier-kds/"},{"categories":["home assistant"],"content":"Solution Every tap registers instantly and there’s no jank or stutter in any animation. Likewise, graphs animate as quickly as they load… Perfect! This is the X11 configuration that rotated the display and would ‘see’ the display attached to the GPU: pi@kds:~ $ cat /etc/X11/xorg.conf.d/monitor.conf # Device = GPU # When using rPi 4 with GPU instead of software render, the `modesetting` driver is the one to use... apparently. Section \"Device\" Identifier \"default\" Driver \"modesetting\" EndSection Section \"Monitor\" Identifier \"default\" # equivalent to `display_rotate = 1` in config.txt Option \"Rotate\" \"right\" EndSection Section \"Screen\" Identifier \"default\" Monitor \"default\" EndSection In addition to the X11 config, some ram needs to be allocated as dedicated graphics memory: pi@kds:~ $ cat /boot/config.txt | grep -B2 gpu_mem [all] # Allocate 256MB of ram for the GPU gpu_mem=256 pi@kds:~ $ sudo reboot Chrome did not automatically switch over to the GPU backed rendering pipe but it’s easy enough to configure chrome to use the GPU manually. And with all that in place, a quick sudo systemctl restart lightdm and a brief screen flicker later, chromium launched in full screen mode with the correct orientation. After the dashboard finished loading, the scroll/tap/animation performance was as good as it would be on any competent computer! I really don’t know why I couldn’t easily find a working X11 configuration example for use with the rPi 4 GPU, but I wasn’t able to 🤷. Hopefully the above helps somebody else! ","date":"2021-11-20","objectID":"/hardware-accelerated-graphics-on-the-raspberry-pi-4-a-snappier-kds/:2:0","tags":["raspberry-pi","xorg","KDS"],"title":"Hardware accelerated graphics on the raspberry pi4 for a speedier KDS","uri":"/hardware-accelerated-graphics-on-the-raspberry-pi-4-a-snappier-kds/"},{"categories":["skyhole"],"content":"Another victim of the recently expired Lets Encrypt Root Certificate","date":"2021-10-01","objectID":"/skyhole-expired-lets-encrypt-ca/","tags":["troubleshooting","LetsEncrypt"],"title":"Using new Lets Encrypt intermediate chain with SkyHole","uri":"/skyhole-expired-lets-encrypt-ca/"},{"categories":["skyhole"],"content":"If you somehow missed it, one of the certificates used by Lets Encrypt chain of trust expired this week. As expected, things broke…. including my private, filtered DNS over TLS server - SkyHole. Below is a condensed form of my notes to create the exact document that I wish I had while trying to triage broken DNS on my phone. TL;DR: Implement solution 3 from this post. Note: After releasing the initial version of SkyHole, I re-factored most of the code to eliminate the dependency on Docker. This was to make the project easier to deploy on resource constrained hardware. At the time, I was working with SaltStack a lot and took the opportunity to re-do the entire thing as a salt state for a bit of practice. The exact steps and commands shown below are unique to my particular instance. Use them as guidance for fixing an issue with the publicly released version of SkyHole. Symptoms My current daily driver runs Android 11. When configured to use a private DNS server, Android essentially behaves as if you’ve turned WiFi/Cell data off if there is any issue when talking to the DoT server. While this ‘fail private’ approach is commendable, the lack of debug info in the UI is not; no details are given about the failure other than a generic ’the private dns server could not be reached’ message. I have seen this behavior once before when the certificate renewal timer failed to fire off… except I implemented email based notifications after that incident and had recently received a notification from the renewal script. Just to be sure, I checked the notAfter in each certificate and they all had plenty of life left: me@dot-host:/etc/coredns/tls# gawk 'BEGIN { pipe=\"openssl x509 -noout -subject -dates\"} \\ \u003e /^-+BEGIN CERT/,/^-+END CERT/ { print | pipe } \u003e /^-+END CERT/ { close(pipe); printf(\"\\n\")} ' chain.pem subject=CN = dot.my-test-domain.tld notBefore=Oct 1 01:50:58 2021 GMT notAfter=Dec 30 01:50:57 2021 GMT subject=C = US, O = Let's Encrypt, CN = R3 notBefore=Sep 4 00:00:00 2020 GMT notAfter=Sep 15 16:00:00 2025 GMT subject=C = US, O = Internet Security Research Group, CN = ISRG Root X1 notBefore=Jan 20 19:14:03 2021 GMT notAfter=Sep 30 18:14:03 2024 GMT Borrowed that command from this post. Looking for more information, adb yielded something: ❯ adb logcat | grep resolv 09-30 21:28:12.995 962 15448 W resolv : Validating DnsTlsServer 12.34.56.78 with mark 0xf0084 09-30 21:28:13.085 962 15448 W resolv : SSL_connect ssl error =1, mark 0xf0084: No such file or directory 09-30 21:28:13.085 962 15448 W resolv : TLS Handshake failed 09-30 21:28:13.085 962 15448 W resolv : query failed 09-30 21:28:13.085 962 15448 W resolv : validateDnsTlsServer returned 0 for 12.34.56.78 The No such file or directory message came from here. Google uses their own fork of openSSL in Android so spent some time trying to figure out what an error code of 1 means in the openSSL project. I think 1 is SSL_ERROR_SSL but that seems to be a relatively ‘generic’ error. Furthermore, in context of No such file or directory … it makes even less sense. Oh well. So much for that theory. From this point on, I’m treating all of the TLS connection stuff as a black box. Investigating I was able to confirm that the TLS certificates on the skyhole instance had not expired and the intermediate chain was not using any of the depreciated certificates. I had also not made any changes to the skyhole instance in close to a year and kdig didn’t throw any warnings when querying against the DoT server. I could see the manual query from kdig in the DNS query/filter logs … so it seemed like the problem was not in either the TLS portion or the DNS portion. That left Android as the culprit. But I was also fairly sure that Google hadn’t changed anything on the phone w/r/t how the DoT client worked…🤔 If in doubt, turn to the wires! I ran tcpdump on the skyhole instance and did notice traffic from Android that was not showing up in the DNS server logs. I compared the traffic with a working manual query","date":"2021-10-01","objectID":"/skyhole-expired-lets-encrypt-ca/:0:0","tags":["troubleshooting","LetsEncrypt"],"title":"Using new Lets Encrypt intermediate chain with SkyHole","uri":"/skyhole-expired-lets-encrypt-ca/"},{"categories":["home-lab","observability"],"content":"EDIT: (2021-09-19): After some back and forth with /u/Laxarus, there is now a simpler method! The snmp platform still does not support setting device_class, but wrapping the sensor in another template sensor is not required; just do so in your customize.yaml. I have called this out below. This is another quick “here’s how I did it, hope this help” post. In preparation for the inevitable grid brownouts that summer 2021 would bring, I installed a rather beefy UPS for my home network / lab. After some browsing, I discovered a local eWaste liquidator with a really good deal on some second-hand APC UPSs. A few hundred dollars and about 150 lbs later, the UPS was installed in the server rack. Despite being a newer generation, the software on the UPS has a TON of similarities to the older style of PDU that I installed in my lab a while back. This made it relatively straightforward to use the same pattern to start getting UPS metrics into Grafana as well. After getting the basic monitoring up and running, I started to draft this post to serve as an ‘update’ to the APC9700 post. Life got in the way and the post sat in the drafts branch where it was completely forgotten about…. until Home Assistant released their new Energy dashboard. Now that HA could show the energy consumption of individual devices right next to the cumulative consumption and production data, the post was worth finishing and expanding on. The configuration that I was going to publish is below but after finding this comment by Laxarus on Navydevildoc’s reddit post, I’ve got a revised and simpler configuration to share! ","date":"2021-09-05","objectID":"/apc-ups-energy-in-homeassistant/:0:0","tags":["SNMP","home-assistant"],"title":"Adding an APC UPS to Home Assistant energy dashboard","uri":"/apc-ups-energy-in-homeassistant/"},{"categories":["home-lab","observability"],"content":"Long Term Statistics in Home Assistant Before diving into the configuration, a little bit of context. In preparation for the energy sub system, the Home Assistant developers have been working on a ‘long term statistics’ (LTS) framework. The LTS framework is meant to give HA some improved speed and capabilities when dealing with a lot of data! The energy subsystem is the first ‘consumer’ of the LTS framework. Home Assistant will look for two ‘properties’ on a given sensor to determine if that sensor will work with the LTS framework. For a sensor/entity to ‘work’ with the long term stats system it must: have a property called device_class with a value of energy, gas, or monetary have a property called state_class with a value of either measurement or total_increasing In testing, I was not able to get a sensor with state_class: measurement and device_class: energy to ‘work’ with the energy sub system. Fortunately, this does not apply with the concise configuration below! As the LTS framework is still new, many platforms - including the SNMP platform - do not support the required properties: Invalid config for [sensor.snmp]: [state_class] is an invalid option for [sensor.snmp]. Check: sensor.snmp-\u003estate_class. Invalid config for [sensor.snmp]: [device_class] is an invalid option for [sensor.snmp]. Check: sensor.snmp-\u003edevice_class. The template platform has been updated to work with the device_class or state_class properties though. So that’s the technique to use here; a template sensor with the correct {device,state}_class properties set will wrap the snmp sensor. Hopefully a future release of HA will include {device,state}_class support for the snmp platform; the template sensors in the configuration snips below won’t be needed! EDIT (2021-09-19): You don’t need to wrap the snmp sensor in a template sensor. As of home assistant 2021.09, the snmp platform does not allow you to set device_class: energy… however, you can set the device_class attribute on the snmp sensor through customize.yaml: Make sure your configuration file loads the customization file: ❯ cat configuration.yaml | grep customize customize: !include customize.yaml If your snmp sensor was called sensor.usp_energy, then you would add an object called sensor.ups_energy like so: ❯ cat customize.yaml | grep -a2 ups sensor.ups_energy: state_class: total_increasing device_class: energy ","date":"2021-09-05","objectID":"/apc-ups-energy-in-homeassistant/:1:0","tags":["SNMP","home-assistant"],"title":"Adding an APC UPS to Home Assistant energy dashboard","uri":"/apc-ups-energy-in-homeassistant/"},{"categories":["home-lab","observability"],"content":"Configure Home Assistant I have broken my configuration.yaml up to make things easier to manage. Almost all entity/device/template/sensor..etc configuration is done through files placed in the devices/**/* directory: ❯ cat configuration.yaml | grep -E 'devices/sensor|template/' sensor: !include_dir_merge_list devices/sensor/ template: !include_dir_merge_list devices/template/ ","date":"2021-09-05","objectID":"/apc-ups-energy-in-homeassistant/:2:0","tags":["SNMP","home-assistant"],"title":"Adding an APC UPS to Home Assistant energy dashboard","uri":"/apc-ups-energy-in-homeassistant/"},{"categories":["home-lab","observability"],"content":"A single OID for power consumption Thanks again to Laxarus for the tip about the upsHighPrecOutputEnergyUsage OID! First, create the ‘raw’ sensor using the snmp platform: devices/sensor/snmp.yaml: - platform: snmp name: \"UPS Energy (raw)\" host: 192.168.1.1 # The current in tenths of amperes drawn by the load on the UPS. # Contained in Module(s): PowerNet-MIB ## baseoid: .1.3.6.1.4.1.318.1.1.1.4.3.6.0 # Determines whether the sensor should start and keep working even if the SNMP host is unreachable or not responding. # This allows the sensor to be initialized properly even if, for example, your printer is not on when you start Home Assistant. accept_errors: true # UPS reports in tens of kWh so we'll need to divide by 10 to get kWh; HA only accepts kWh or Wh for sensors # that will 'work' on the energy dashboard unit_of_measurement: kWh value_template: \"{{ ((value | int) / 10) | float}}\" Then, wrap the snmp sensor with the necessary properties: devices/template/ups_energy.yaml: - sensor: - name: \"UPS Energy\" # Unique ID is required for mgmt through the web UI unique_id: tmpl-ups-energy icon: mdi:lightning-bolt # Required for Energy dashboard state_class: total_increasing device_class: energy unit_of_measurement: kWh state: \"{{ (states('sensor.ups_energy_raw') | float) }}\" Restart Home Assistant and you should now be able to add sensor.ups_energy to the list of individual devices on your Energy Dashboard :D. ","date":"2021-09-05","objectID":"/apc-ups-energy-in-homeassistant/:2:1","tags":["SNMP","home-assistant"],"title":"Adding an APC UPS to Home Assistant energy dashboard","uri":"/apc-ups-energy-in-homeassistant/"},{"categories":["home-lab","observability"],"content":"Current and Voltage independently After sorting through the massive MIB file that APC publishes; I only found ways to measure the voltage and current via SNMP. I assumed that APC meant for you to calculate the power use on your own from the voltage and current. As it turns out, APC has a upsHighPrecOutputEnergyUsage field which reports: The output energy usage of the UPS in hundredths of kWh. If your APC device publishes a value on the OID .1.3.6.1.4.1.318.1.1.1.4.3.6.0 then you can skip the configuration below; use the more concise configuration above. If your devices does not publish the cumulative energy consumption, it can still be calculated manually. The manual approach below is a lot like the concise approach above; uses two snmp sensors to collect the voltage and current from the UPS and then wrap everything in a LTS-compatible template sensor to get the data to show up on the energy dashboard. devices/sensor/snmp.yaml: # Unfortunately, there is no direct 'watt' field. We need to calculate this on our own # P = IV so if we can get the current and voltage, we can figure out the power ## - platform: snmp name: \"UPS Output Current\" host: 192.168.1.1 # The current in tenths of amperes drawn by the load on the UPS. # Contained in Module(s): PowerNet-MIB ## baseoid: .1.3.6.1.4.1.318.1.1.1.4.3.4.0 # Determines whether the sensor should start and keep working even if the SNMP host is unreachable or not responding. # This allows the sensor to be initialized properly even if, for example, your printer is not on when you start Home Assistant. accept_errors: true # For reasons that I don't understand... HA does not like it when i specify 'device_class' :/ #device_class: current unit_of_measurement: \"A\" # Because the number is in 10ths of amps, we need to shift the decimal by 1 place # 43 becomes 4.3 ## value_template: \"{{((value | int) / 10) | float}}\" - platform: snmp name: \"UPS Output Voltage\" host: 192.168.1.1 #The output voltage of the UPS system in tenths of VAC. # Contained in Module(s): PowerNet-MIB ## baseoid: .1.3.6.1.4.1.318.1.1.1.4.3.1.0 # Determines whether the sensor should start and keep working even if the SNMP host is unreachable or not responding. # This allows the sensor to be initialized properly even if, for example, your printer is not on when you start Home Assistant. accept_errors: true unit_of_measurement: \"V\" # Because the number is in 10ths of volts, we need to shift the decimal by 1 place # 1211 becomes 121.1 ## value_template: \"{{((value | int) / 10) | float}}\" devices/template/ups_energy.yaml: # The docs around the long term stats support for a sensor are not super clear and seem to be a bit contradictory. # Both the power and current sensors are 'point in time' sensors and DO NOT represent an 'always increasing' value. # The docs seem to imply that HA will do the integration for you if the sensor has `state_class` set to `measurement` or # `total_increasing`. But elsewhere in the docs, you have this: # Home Assistant tracks the min, max and mean value during the statistics period. # The state_class property must be set to measurement, and the device_class must not be either of `energy`, `gas`, or `monetary`. # # In testing, I was only able to get sensors that had `total_increasing` and `energy` set to show up / work with the energy dashboard. It looks like a `measurement` sensor _could_ be used... but only if the `last_reset` property can be set to 0... and currently this can't be done via YAML. # # So we lie about the sensor and tell HA that it's a `total_increasing` sensor and we just hope that the value never drops more than 10% which appears to be the signal to HA that the meter has been reset :/ # # https://developers.home-assistant.io/docs/core/entity/sensor/#long-term-statistics # https://www.home-assistant.io/integrations/sensor/ ## - sensor: - name: \"UPS Power\" # Unique ID is required for mgmt through the web UI unique_id: tmpl-UPS-power-use icon: mdi:lightning-bolt # This sensor records the ","date":"2021-09-05","objectID":"/apc-ups-energy-in-homeassistant/:2:2","tags":["SNMP","home-assistant"],"title":"Adding an APC UPS to Home Assistant energy dashboard","uri":"/apc-ups-energy-in-homeassistant/"},{"categories":["gists","reference"],"content":"A working Tasmota rule to automatically configure the DS03 as a 4 speed fan controller","date":"2021-05-12","objectID":"/treatlife-ds03-tasmota-autoconfig-with-homeassistant/","tags":["tasmota","home-assistant","home-automation"],"title":"Fixing Home Assistant discovery with Tasmota on the Treatlife DS03","uri":"/treatlife-ds03-tasmota-autoconfig-with-homeassistant/"},{"categories":["gists","reference"],"content":" Update This post is now deprecated. It has been superseded by Using ESPHome with the Treatlife DS03 from 2022-06. UPDATE: (2021-10-22): Tasmota 9.5.0 has been superseded by the new Tasmota 10.0.0 release. This release works perfectly with the rules/automation outlined below; you no longer need to avoid the problematic 9.5 release with the DS03. I am extremely grateful to every one of the people that contributes to the Tasmota project to keep it improving! UPDATE: (2021-09-19): Multiple have gotten in touch with me seeking some support with this post. At present, there is a bug with the Tasmota 9.5.0 release which breaks the automation outlined below. If you are having trouble getting the steps below to work either use Tasmota 9.4 or the latest development release of tasmota 9.5 if you’re going to continue on with this post! The Treatlife DS03 is one of only a few Tasmota compatible ceiling fan controllers available in the US. It’s internal architecture splits the task of dimming the lights and switching the fan speed electronics from communicating over the network. A very resource constrained ESP8266 module handles the network comms while a dedicated microcontroller running it’s own software manages the user-facing buttons/indicator-lights as well as dimming the light and adjusting the fan speed. The two components communicate over a simple UART. This is a totally reasonable way to build such a device, but for reasons that I don’t fully understand, Tasmota does not publish a completely functional auto-configuration payload for Home Assistant. Home Assistant automatically discovers the full light/dimmer capabilities of the DS03, but for some reason does not see that the DS03 is capable of running a fan at 4 different speeds; Home Assistant only allows for turning the fan on/off. The default auto-configuration leads Home Assistant to believe the fan can only be switched on/off. The existing guides on how to flash the device with Tasmota and integrate it with Home Assistant all work around this limitation by manually configuring Home Assistant to see the device as a multi-speed fan 🤦. I’m not a huge fan of doing things manually, especially when there’s a well documented and robust protocol designed to make manual configuration unnecessary! Why ignore the almost completely working auto-configuration in favor of manual configuration? Why not just fix the auto-config payload so Home Assistant exposes the full functionality of the device? Both of the above guides were written long before Home Assistant gained support for fans with more than 3 speeds so even if I were to configure Home Assistant with a copy their example YAML, I’d still be missing the ability to control the 4th speed! ","date":"2021-05-12","objectID":"/treatlife-ds03-tasmota-autoconfig-with-homeassistant/:0:0","tags":["tasmota","home-assistant","home-automation"],"title":"Fixing Home Assistant discovery with Tasmota on the Treatlife DS03","uri":"/treatlife-ds03-tasmota-autoconfig-with-homeassistant/"},{"categories":["gists","reference"],"content":"How In short, Tasmota supports some basic scripting, called rules. They work exactly as you’re thinking: On $someEvent do $someAction. One of the actions allows the Tasmota device to publish a message to a MQTT topic. I’m going to have the DS03 broadcast a proper auto-configuration message to Home Assistant. The technique is basically the same one outlined in this article, but I’m posting this to document a few of the subtle differences in my approach. I’ll assume that you’ve successfully flashed your DS03 with Tasmota and have already configured the module and issued the necessary ledtable commands. You will also need the native Tasmota integration installed. If you’re following either the blakadder or digiblur guides linked above, stop at the step where you’re meant to configure rule1. Issue a slightly modified rule: Rule1 on TuyaReceived#Data=55AA03070005030400010016 do publish2 stat/%topic%/speed 25 endon on TuyaReceived#Data=55AA03070005030400010117 do publish2 stat/%topic%/speed 50 endon on TuyaReceived#Data=55AA03070005030400010218 do publish2 stat/%topic%/speed 75 endon on TuyaReceived#Data=55AA03070005030400010319 do publish2 stat/%topic%/speed 100 endon This tells Tasmota to publish an integer speed (25,50,75,100) when it receives a specific packet from the dedicated MCU over th UART. Then, issue a second rule to actually publish the configuration data: rule2 on SetOption19#Data=OFF do publish2 homeassistant/fan/%macaddr%/config {\"uniq_id\":\"AABBCC\",\"~\":\"%topic%/POWER1\",\"cmd_t\":\"cmnd/~\",\"pl_off\":\"OFF\",\"pl_on\":\"ON\",\"stat_t\":\"stat/~\",\"avty_t\":\"tele/%topic%/LWT\",\"pl_avail\":\"Online\",\"pl_not_avail\":\"Offline\",\"pct_cmd_t\":\"cmnd/%topic%/tuyasend4\",\"pct_cmd_tpl\":\"{%set v=value|int%}{%if v\u003c=25%}3,0{%elif v\u003c=50%}3,1{%elif v\u003c=75%}3,2{%elif v\u003c=100%}3,3{%endif%}\",\"pct_stat_t\":\"stat/%topic%/speed\",\"dev\":{\"cns\":[[\"mac\",\"%macaddr%\"]]}} endon Note: You’ll probably want to modify the above payload so the occurrences of the placeholder string AABBCC are replaced with the last 6 characters of your own device’s MAC address! For readability, here’s the unminified JSON: { \"uniq_id\": \"AABBCC\", \"~\":\"%topic%/POWER1\", \"cmd_t\": \"cmnd/~\", \"pl_off\": \"OFF\", \"pl_on\": \"ON\", \"stat_t\": \"stat/~\", \"avty_t\": \"tele/%topic%/LWT\", \"pl_avail\": \"Online\", \"pl_not_avail\": \"Offline\", \"pct_cmd_t\": \"cmnd/%topic%/tuyasend4\", \"pct_cmd_tpl\": \"{%set v=value|int%}{%if v\u003c=25%}3,0{%elif v\u003c=50%}3,1{%elif v\u003c=75%}3,2{%elif v\u003c=100%}3,3{%endif%}\", \"pct_stat_t\": \"stat/%topic%/speed\", \"dev\": { \"cns\": [ [ \"mac\", \"%macaddr%\" ] ] } } Note: The dev portion of the payload is the magic that convinces Home Assistant to combine the multiple entities under once device. Without that portion of the document, you will still have a properly configured DS03, but it will exist as an ‘orphaned’ entity that belongs to no device! All that’s left is to enable rule2 and then trigger it: rule2 1 so19 0 Altogether, It’ll look something like this: 18:23:54.140 CMD: Rule1 on TuyaReceived#Data=55AA03070005030400010016 do publish2 stat/%topic%/speed 25 endon on TuyaReceived#Data=55AA03070005030400010117 do publish2 stat/%topic%/speed 50 endon on TuyaReceived#Data=55AA03070005030400010218 do publish2 stat/%topic%/speed 75 endon on TuyaReceived#Data=55AA03070005030400010319 do publish2 stat/%topic%/speed 100 endon 18:23:54.149 RUL: Stored uncompressed, would compress from 344 to 98 (-72%) 18:23:54.155 MQT: stat/living_room_ceiling_fan/RESULT = {\"Rule1\":{\"State\":\"ON\",\"Once\":\"OFF\",\"StopOnError\":\"OFF\",\"Length\":344,\"Free\":167,\"Rules\":\"on TuyaReceived#Data=55AA03070005030400010016 do publish2 stat/%topic%/speed 25 endon on TuyaReceived#Data=55AA03070005030400010117 do publish2 stat/%topic%/speed 50 endon on TuyaReceived#Data=55AA03070005030400010218 do publish2 stat/%topic%/speed 75 endon on TuyaReceived#Data=55AA03070005030400010319 do publish2 stat/%topic%/speed 100 endon\"}} 18:24:05.061 CMD: rule2 on SetOption19#Data=OFF do publish2 homeassistant/fan/%macaddr%/config {\"uniq_id\":\"AABBCC\",\"~\":\"%topic%/POWER1\",\"","date":"2021-05-12","objectID":"/treatlife-ds03-tasmota-autoconfig-with-homeassistant/:1:0","tags":["tasmota","home-assistant","home-automation"],"title":"Fixing Home Assistant discovery with Tasmota on the Treatlife DS03","uri":"/treatlife-ds03-tasmota-autoconfig-with-homeassistant/"},{"categories":["gists","reference"],"content":"Side note: Rules Crash! While developing the configuration payload, I was able to reliably crash the ESP8266 module causing Tasmota to reboot. The crash / reboot symptoms are pretty similar to those outlined here so I assume that even though the rules “fit”, something about how the rule was parsed or the actions the rule drove caused the ESP to run out of RAM. When I say “fit” I mean that I’d see lines like this in the console after configuring a test payload for rule2: MQT: stat/living_room_ceiling_fan/RESULT = {\"Rule2\":{\"State\":\"ON\",...\"Free\":9,\"Rules\":\"on ... endon\"}} I could technically make the rule 9 characters longer and it’d still fit… right? Not quite. Looking at the result from issuing the Rule1 command, it was clear that while rule2 would have an absolute maximum length of 511 characters (\"Length\":344,\"Free\":167; 344+167=511) there was also a less well defined soft limit on rule length. For some versions of my rule2 payload, I was able to solve the crashing just by switching to the ’lite’ version of Tasmota. While the ’lite’ version of Tasmota does work with Tuya MCU (USE_TUYA_MCU), it does not support Home Assistant configuration (USE_HOME_ASSISTANT)! After flashing back to the ‘regular’ Tasmota build, I set out trying to compress the rule2 payload as much as possible so that it would still work and not reliably crash the ESP8266 on the DS03. After testing several things, I managed to get a working rule2 that didn’t reliably crash when triggered. ","date":"2021-05-12","objectID":"/treatlife-ds03-tasmota-autoconfig-with-homeassistant/:1:1","tags":["tasmota","home-assistant","home-automation"],"title":"Fixing Home Assistant discovery with Tasmota on the Treatlife DS03","uri":"/treatlife-ds03-tasmota-autoconfig-with-homeassistant/"},{"categories":["home-lab"],"content":"AKA a real-life 'unread' indicator","date":"2021-02-28","objectID":"/poe-stack-light/","tags":["home assistant","MQTT","ESPHome","has:download"],"title":"PoE powered Stack Light","uri":"/poe-stack-light/"},{"categories":["home-lab"],"content":" The lights are much brighter than they appear in this picture; had to intentionally darken the image to prevent camera from blowing out the colors. Stack/signal lights are everywhere in industrial applications for good reason: they’re a compact and relatively information-dense indicator system. They always seemed like the kind of indicator that only people with expensive machines needed. Until I found that they can be had for just under $6/light from Ali Express, that is. I don’t have any giant industrial machines to attach one to, but I do have a non-trivial number of containers/servers/networked-devices running and they all emit various notifications, usually through email. Who wouldn’t mind a novel way to move those notifications beyond email/push notifications into the physical world 🤔? 🟢 =\u003e Everything is nominal 🟠 =\u003e Check your email; a WARN level event has occurred 🔴 =\u003e A WARN or ERROR level condition has occurred; something (ISP down?) is preventing delivery of notifications so check the logs/dashboards directly 🔵 =\u003e A new INFO level message available in Home Assistant ⚪ =\u003e Not sure; either a “A HIGH priority task is past due” or a ‘modifier’ for above status While waiting for the light to arrive from China, I started to design something to drive it. It was immediately obvious that an ESP32 module would be ideal to run the show, and just for the fun of it, I decided to make the entire thing (optionally) controlled and powered over Ethernet. ","date":"2021-02-28","objectID":"/poe-stack-light/:0:0","tags":["home assistant","MQTT","ESPHome","has:download"],"title":"PoE powered Stack Light","uri":"/poe-stack-light/"},{"categories":["home-lab"],"content":"Home Assistant It wouldn’t be an ESP32 powered project w/o the the fantastic ESPHome framework! With ESPHome comes trivial Home Assistant integration; each individual light / channel on the stack light is automatically configured via MQTT a a light: Stack light is controlled via MQTT making it easy to control from Home Assistant or any other program that can speak MQTT. A slightly modified version of the ESPHome config that I use to build the firmware for the light is attached at the end of this post. Unfortunately, the one Home Assistant integration that I had in mind is currently not feasible! I wanted to light the blue light when there is any new/unread Home Assistant persistent notifications; a real life “unread” badge of sorts. There is no way to get the list / count of active notifications unless you’re a websocket client, however. Using the persistent_notifications_updated event as a trigger won’t work because the event payload lacks useful data; I can’t figure out the number of notifications or their state… just that either notification has been created or dismissed. If I wanted the blue light on any time a notification was either created or destroyed, I could use this trigger. But the light is no longer a useful indicator; it would be on the first time a notification was created or destroyed and then it would never be off. Manually trying to keep track of the number of notification created/dismissed actions just feels like a hacky workaround that could easily get out of sync, too. Oh well 😔. ","date":"2021-02-28","objectID":"/poe-stack-light/:1:0","tags":["home assistant","MQTT","ESPHome","has:download"],"title":"PoE powered Stack Light","uri":"/poe-stack-light/"},{"categories":["home-lab"],"content":"BOM I’ll cover the individual 3D printed and electronic components below. Beyond them, you’ll need some additional hardware: 4x m3x8mm screws 4x m4x8mm screws 4x m4x10mm screws 6x Neodymium magnets sized 20mm x 6mm x 2mm. These are optional and are leftover magnets from this build 10mm diameter anti-slip pads. Thees are optional but will keep the base from sliding around. I’ve linked to the screws that I used, but any similar ones should work. Strong glue could also work, but is not recommended. The m3 screws are for attaching the PCB to the printed part (in yellow, below) The shorter m4 screws are for attaching the base (yellow) to the lid (dark blue) and the longer screws are for attaching the stack light to the lid. About to start melting threads into the 3D printed parts. Stack light Looking quickly through Ali Express, it seems that the lights come in a few different styles, but all appear to be modular in construction. Regardless of lamp style, they all appear to come in 2-5 lamp variants and some have configuration switches that allow for customizing the behavior per lamp. The ESPHome code and PCB are designed to accommodate up to 6 colors but will work with less. No matter which style and colors you select, make sure you get one with a positive anode rated for 12V DC. The exact lamp that I used is here. ESP32 Module I chose to use the WirelessTag WT32-eth01 module for the onboard Ethernet circuitry at a relatively cheap price: about $10/module. Bonus: it’s got a breadboard friendly footprint and castellated pads! You do not need to use Ethernet for control or power; the ESPHome configuration below can be easily modified to use the WiFi. In any case, you will need a dedicated UART programmer for the module as there is no built-in USB port on the WT32-eth01. PCB Nothing much to see here; just a simple board to consolidate connections for what would otherwise be a mess of wires. Since I was already using Ethernet for the data, may as well use it for the power, too. Designing my own PoE circuitry was not in scope for this project, so I went with another off-the-shelf module. I ordered the 12V2A-Full 24W version, but the others are likely to also have an identical internal PCB layout which should fit in the 3D printed parts. Make sure to get one that supplies the 12V that the stack light will need! The PCB does not care where the 12V DC supply comes from. It wouldn’t be difficult to modify the enclosure to accommodate a USB-C Power Delivery module or even just a standard barrel jack / LED power supply. Like the PoE module, I use an off the shelf DC to DC converter module to step the 12V down from the PoE dongle to 5V which the ESP32 module requires. That link is to a whole-sale lot of 10 converters. You can order the same module in quantities of one from similar listings. I buy them in bulk because it’s more expensive to design and solder my own on each board that I build… My testing isn’t super through, but I see the total power draw (measured from the PoE supplying equipment) reaching about 4.5W when all lights are on and about 2W at at idle. The ESP32 just drives some N-Channel MOSFETS to switch the individual lights on/off. They’re the only surface mount (SOT-23-4) component; everything else can be done with through hole components. The board is designed for up to 6 colors/lights, but populate only as many MOSFETS as you need. All of the screw terminals are optional; I had several spares left over from a different project, but soldering wires directly to the PCB would work as well. The 6 pin screw terminal is LCSC part C409139 The 2 pin screw terminal is LCSC part C8463 The source and gerber files from EasyEDA are below. Upload them to your favorite PCB prototyping service or try your hand at making your own. Printed parts There are two parts: a lid and a plate. The electronics are attached to the plate and the stack light is attached to the lid. In the photos associated with this post, the lid is dark blue and the plat","date":"2021-02-28","objectID":"/poe-stack-light/:2:0","tags":["home assistant","MQTT","ESPHome","has:download"],"title":"PoE powered Stack Light","uri":"/poe-stack-light/"},{"categories":["home-lab"],"content":"Assemble Assembly is relatively straightforward; its mostly integrating a few components into a simple 3d printed enclosure. ","date":"2021-02-28","objectID":"/poe-stack-light/:3:0","tags":["home assistant","MQTT","ESPHome","has:download"],"title":"PoE powered Stack Light","uri":"/poe-stack-light/"},{"categories":["home-lab"],"content":"PCB Solder the electronic components to the PCB. If omitting screw terminals for the stack light wires, do not solder them to the PCB yet! I created the castellated pad footprint for the ESP32 module by hand and, in the version of the PCB pictured, didn’t get the pads as close as they should be so there are some ugly solder blobs to compensate. The pads are correctly placed on the most recent PCB revision. I have included two programming headers on the PCB to flash your firmware; one at 2.54mm pitch and the other at 1.0mm pitch, the latter of which is intended for use with this programmer. There is a solder bridge labeled EXT 3v3; short this out if you intend to use the programmer to power the ESP32 module. Leave it alone if you plan to use external DC to power the device during programming. I suggest programming the module now to verify that you’ve built the PCB correctly and that your stack light works as expected. Once you’ve confirmed the electronics and software all work together, proceed to final assembly. ","date":"2021-02-28","objectID":"/poe-stack-light/:3:1","tags":["home assistant","MQTT","ESPHome","has:download"],"title":"PoE powered Stack Light","uri":"/poe-stack-light/"},{"categories":["home-lab"],"content":"Everything else The various holes designed to receive screw threads are intentionally undersized. If you’re not using self-tapping screws, you’ll find it MUCH EASER to insert a hot screw for the first time. With the screw on the end of the driver, hold the tip of the screw/threads under a flame for 5-10 seconds and then quickly rotate the screw into the plastic using a bit of extra ‘pushing’ force. Once the screw is fully inserted, allow it to fully cool (~5min) so the softened plastic has a chance to solidify around the screw threads. The screws that hold the base plate to the body of the enclosure are meant to sit flush. Ensure that you screw them in fully before the plastic cools! If the screws protrude even a fraction of a millimeter, the light can wobble and the magnetic attachment is weakened. While waiting for the screws to cool, cut the Ethernet and power leads from the PoE dongle down to size. Desolder the leads from the dongle, trim to be as short as possible and re-solder. The less ‘slack’ cable in the enclosure, the easier it will be to finish assembly! I cut a few inches off the Ethernet cable and power leads so everything fits in the enclosure better. After the screws have cooled, ensure that the PCB sits flush against the mounts. PCB should be flush against the mounting posts. With all wires connected, lift the PoE dongle off of the base plate slightly and align the RJ45 jack with the square hole in the enclosure. Make sure the side of the base plate opposite the side with the RJ45 jack is securely mounts into the body of the enclosure! Gently press the remaining side of the base plate into the enclosure. As the base plate gets closer to flush with the body, the RJ45 jack should slowly come into alignment with the wall. Use the plate as a lever to carefully push, then hold, the PoE dongle in place. When the base blate is completely installed into the body, the RJ45 jack should be flush with the external wall of the enclosure. RJ45 jack should be flush to the outer wall of the enclosure. Attach the base plate to the enclosure body with the 4 screws, attach silicon feet or a 3M command strip and then you’re done! Translucent white lenses for much less ambiguity than the stack lights with colored lenses. ","date":"2021-02-28","objectID":"/poe-stack-light/:4:0","tags":["home assistant","MQTT","ESPHome","has:download"],"title":"PoE powered Stack Light","uri":"/poe-stack-light/"},{"categories":["home-lab"],"content":"Files All files below are licensed under the Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) license unless otherwise explicitly noted. None of the files below may be used for commercial purposes Translucent white lenses for much less ambiguity than the stack lights with colored lenses. I wasn't sure where I'd want to install this, so there are a few options for attaching the base to surfaces. Use the plate as a lever to carefully push, then hold, the PoE dongle in place. The lights are much brighter than they appear in this picture; had to intentionally darken the image to prevent camera from blowing out the colors. files/easy_eda_gerber.zip: sha1: d7686b0ad88a1686a5a11cb009632b53ca474c75 files/easy_eda_source.zip: sha1: e05a00cdca9af94dd0e8d1d8f3aa998b75c14a08 files/enclosure-lid-m1v2.stl: stl file sha1: 3870a674d9cf08bf26e3607e42ee766e9816ac6c files/enclosure-plate-m1v2.stl: stl file sha1: 8f90b54be2a798cf87bc6ca4fc118b82669e0668 files/esphome_confg.yaml: yaml file sha1: aa0076b7bee08f09568536463c8794f15a2f59b2 files/pcb.step: step file sha1: e212f3cd3d90a639e6518b7d11bc5cc20df09b67 files/poe-dongle.step: step file sha1: a698c249d89f2ab2c981427df49620cb09ce5f66 files/stack-light-base.step: step file sha1: 3c3d0d6162a985b4f09d0f9a58fdacb3f08beb78 If the screws protrude even a fraction of a millimeter, the light can wobble and the magnetic attachment is weakened. Stack light is controlled via MQTT making it easy to control from Home Assistant or any other program that can speak MQTT. PCB should be flush against the mounting posts. RJ45 jack should be flush to the outer wall of the enclosure. About to start melting threads into the 3D printed parts. Insert your magnets before the layer covering thee 6 cavities is printed. I cut a few inches off the Ethernet cable and power leads so everything fits in the enclosure better. ","date":"2021-02-28","objectID":"/poe-stack-light/:5:0","tags":["home assistant","MQTT","ESPHome","has:download"],"title":"PoE powered Stack Light","uri":"/poe-stack-light/"},{"categories":null,"content":"This is “reference” post for anybody else that happens to have this same very specific problem. I was looking for a way to incorporate some of the many cheap / industrial grade sensors from AliExpress with Home Assistant. Long story short: almost everything electronic in the industrial space uses Modbus to communicate, typically with a PLC. While Home Assistant does have support for the Modbus protocol, but wanted to use a PLC that could manage the sensors directly and expose the values over the network in a more standard format; MQTT. Turns out, quite a few PLCs come with network interfaces and can speak MQTT now! So I picked up a PR-18DC-DAI-R-N PLC from the ‘budget friendly’ supplier rievtech. The PLC was put into service in 2018 and never updated; the firmware version it was running was almost certainly below 150 but I didn’t record the specific version. Hoping to squash a small bug, I chose to upgrade the firmware to version 152 which was released at the end of 2020 and somehow managed to brick the device 🤦. I am speculating but it looks like something significant changed around firmware version 150. If you try to update a device from a version prior to 150 - like I did - something in memory is not properly migrated to the format required by versions after 150 and this causes the update process to fail before completion: SO close! That failure message came from the Update_Net_V152_20201205.zip file which is meant for the ethernet equipped PLCs in the PR line. The failure apparently soft bricks the PLC. Blank white screen. Non responsive buttons, Occasional blinking Ethernet lights. Fun! 🙃 The PLC seemed ‘alive’ as I could still see arp packets coming from it’s ethernet port on boot and the web server seemed to accept my connection but never return any data. Even after restarting the PLC, the firmware updater was able to open a new connection and flash the firmware… always failing at the same spot: 99.17%. Clearly something is alive and well inside the PLC… If I can connect to whatever is running and convince that process to update the flash then I have a good shot to do ‘solderless’ recovery. Absolute worst case, I buy another one and clone the flash memory from the working one onto the bricked one. ","date":"2021-01-13","objectID":"/unbrick-rievtech-plc-failed-firmware-update/:0:0","tags":["PLC","recovery","rant"],"title":"Unbrick a rievtech PLC after failed firmware upgrade","uri":"/unbrick-rievtech-plc-failed-firmware-update/"},{"categories":null,"content":"Recovery process Turns out, their support team has a file ready to go for this exact problem! I guess I’m not the first person. Really wish they’d publish this file and/or procedure on their website. I could have recovered from my failure in minutes with a quick google search and saved myself a few hours of trouble shooting before drafting a support ticket… not to mention the days of waiting for a reply. Oh well. That’s why I’m documenting it. I was given a 2.6MB file named UpdateFail_PR-18DC-DAI-R-N_V150.zip. After extracting, it looks a lot like their regular firmware update archives, just much smaller. I suspect that the archive is much smaller because it’s only got flash images for a few affected models/devices. In any event, the archive comes with a doc file that I couldn’t open and was able to eventually convert it to a pdf which is also attached to this post. In short: Connect the PLC using their programming cable Open the COM port and ‘prepare’ the device. This takes only a few seconds Click the update button. In my case, I got a failure telling me to `Please power off the PLC first, and then power on again!\" Power cycle the PLC, keeping the update program and COM port open Click Start. The process of flashing version 150 started and took several minutes to finish This left me with a completely working PLC 🥳! I was able to access the web interface and use the LCD screen. I was then able to use the network update tool to the firmware version released recently; version 152. So there you go. If a failed network update leaves your PR series PLC in a mostly-not-working state, there is hope! Able to flash Version 152 w/o issue! ","date":"2021-01-13","objectID":"/unbrick-rievtech-plc-failed-firmware-update/:1:0","tags":["PLC","recovery","rant"],"title":"Unbrick a rievtech PLC after failed firmware upgrade","uri":"/unbrick-rievtech-plc-failed-firmware-update/"},{"categories":null,"content":"Files files/How to update the hardware.doc.pdf: pdf file sha1(How to update the hardware.doc.pdf): 0b451b11938b58c384465f5bf350b2f133848649 files/UpdateFail_PR-18DC-DAI-R-N_V150.zip: zip file sha1(UpdateFail_PR-18DC-DAI-R-N_V150.zip): 60c306b521cdb15589b0e36dc73df484c2117539 Blank white screen. Non responsive buttons, Occasional blinking Ethernet lights. Fun! 🙃 Able to flash Version 152 w/o issue! SO close! ","date":"2021-01-13","objectID":"/unbrick-rievtech-plc-failed-firmware-update/:2:0","tags":["PLC","recovery","rant"],"title":"Unbrick a rievtech PLC after failed firmware upgrade","uri":"/unbrick-rievtech-plc-failed-firmware-update/"},{"categories":["home-lab"],"content":"Monitor all the things!","date":"2020-12-27","objectID":"/monitoring-ap7900-switched-pdu-prometheus-grafana/","tags":["prometheus","grafana","SNMP"],"title":"Monitoring APC AP7900 switched PDU with Prometheus and Grafana","uri":"/monitoring-ap7900-switched-pdu-prometheus-grafana/"},{"categories":["home-lab"],"content":"The APC AP7900 is a 1U single phase PDU with 8 switchable outlets and a network interface. It’s been EoL’d and can be had for less than 20% of it’s original price on eBay. The network interface is so underpowered tha it can’t support any modern cryptographic ciphers. So with that, here’s a revised copy of my notes from the process of getting the device reset, updated and monitored. ","date":"2020-12-27","objectID":"/monitoring-ap7900-switched-pdu-prometheus-grafana/:0:0","tags":["prometheus","grafana","SNMP"],"title":"Monitoring APC AP7900 switched PDU with Prometheus and Grafana","uri":"/monitoring-ap7900-switched-pdu-prometheus-grafana/"},{"categories":["home-lab"],"content":"The Hardware Unfortunately, there’s no “reset everything to defaults” button or button sequence on the PDU. The unit I purchased had been configured with a manual IP assignment so it wasn’t as straightforward as using an unfolded paperclip to press the reboot button at boot and wait for a successful DHCP negotiation. This process has been covered before, so I’ll omit it here. In short: connect to the local mgmt interface via the serial port, adjust the network configuration and other settings as needed. The firmware can be updated via FTP easily enough. The processor on the network interface is really slow so allow for several minutes between the bin file upload and the flashing to commence/end. I had to repeat this three times for each of the partitions / subsystem OSs. ","date":"2020-12-27","objectID":"/monitoring-ap7900-switched-pdu-prometheus-grafana/:1:0","tags":["prometheus","grafana","SNMP"],"title":"Monitoring APC AP7900 switched PDU with Prometheus and Grafana","uri":"/monitoring-ap7900-switched-pdu-prometheus-grafana/"},{"categories":["home-lab"],"content":"The Metrics Again, because the network interface has an ancient/slow CPU, any method that extracts metrics from the device must be light weight… enter SNMP. SNMP is quite old and cumbersome but there’s an exporter for prometheus which, after some tedious configuration, can interface the complexity that is is legacy SNMP with prometheus. ","date":"2020-12-27","objectID":"/monitoring-ap7900-switched-pdu-prometheus-grafana/:2:0","tags":["prometheus","grafana","SNMP"],"title":"Monitoring APC AP7900 switched PDU with Prometheus and Grafana","uri":"/monitoring-ap7900-switched-pdu-prometheus-grafana/"},{"categories":["home-lab"],"content":"Generating a config In short, SNMP identifies each setting/entity that can be monitored or set with a unique numerical ID. Each number is separated with a . and represents a specific edge/vertex on the graph of all settings that device supports. So, a setting known as rPDUIdentDeviceLinetoLineVoltage may be ‘read’ at the following address: 1.3.6.1.4.1.318.1.1.12.1.15.0. So if you have a few hundred parameters to monitor, you’ll have a few hundred nondescript numerical paths. Keeping track of them all is a royal pain in the ass, even with lookup tables; known as “MIB files”. Unfortunately, there’s no way around it; a map between the numerical paths and the ‘human friendly’ names must be built so the prometheus exporter knows what to expose and how to categorize it. The exporter comes with generator to make this process a bit easier, but the process of obtaining MIB files isn’t quite so straightforward. I hit a few snags and below is an updated Dockerfile that gave me a working generator tool: FROM golang:latest ## # The `mibs` target in the Makefile does not run to completion on OSX. # Somewhere, a `sed` command is run against some vendor's MIB file that's for hardware that I don't want to target. # I don't have the patience to resolve those issues and i'd prefer that the _entire_ MIB parse and generate # process be 100% contained in the container image anyways. # # There are a _variety_ of errors that cropped up when running `generator parse_errors`: # # - level=warn ts=2020-12-27T21:40:42.988Z caller=main.go:120 msg=\"NetSNMP reported parse error(s)\" errors=16924 # - Cannot find module (SNMPv2-SMI): At line 275 in mibs/apc-powernet-mib # - Did not find 'enterprises' in module #-1 (mibs/apc-powernet-mib) # - Did not find 'DisplayString' in module #-1 (mibs/apc-powernet-mib) # - Unlinked OID in PowerNet-MIB: apc ::= { enterprises 318 } # - Undefined identifier: enterprises near line 281 of mibs/apc-powernet-mib # - Cannot adopt OID in PowerNet-MIB: atsInputEntry ::= { atsInputTable 1 } # - \u003cand hundreds more `Cannot adopt OID in PowerNet-MIB:` messages # - Bad operator (INTEGER): At line 73 in /usr/share/snmp/mibs/ietf/SNMPv2-PDU # # # After some searching, it appears that MIBs can refer to other MIBs and some set of 'base' files is not present. # Due to licensing, the Debian docker image that the generator is based on does NOT ship w/ them or the # `snmp-mibs-downloader` tool which is used to fetch the base MIB files. This is easy enough to fix... ## # First, update the repos we'll pull packaged from RUN echo \"deb http://deb.debian.org/debian/ buster main contrib non-free\" | tee -a /etc/apt/sources.list \u0026\u0026 \\ echo \"deb http://deb.debian.org/debian/ buster-updates main contrib non-free\" | tee -a /etc/apt/sources.list \u0026\u0026 \\ echo \"deb http://security.debian.org/debian-security buster/updates main contrib non-free\" | tee -a /etc/apt/sources.list # Then we run the 'original' set of commands, adding in the `snmp-mibs-downloader` package. # As part of the post-install hook, snmp-mibs-downloader will fetch the base MIBs that appear to be # missing. ## RUN apt-get update \u0026\u0026 \\ apt-get install -y libsnmp-dev p7zip-full snmp-mibs-downloader \u0026\u0026 \\ go get github.com/prometheus/snmp_exporter/generator \u0026\u0026 \\ cd /go/src/github.com/prometheus/snmp_exporter/generator \u0026\u0026 \\ go get -v . \u0026\u0026 \\ go install # To fix _this_ error: # Bad operator (INTEGER): At line 73 in /usr/share/snmp/mibs/ietf/SNMPv2-PDU # # we install a 'patched' version. # src: https://serverfault.com/questions/936119/snmp-mibs-on-ubuntu-error-in-mibs ## RUN wget http://pastebin.com/raw.php?i=p3QyuXzZ -O /usr/share/snmp/mibs/ietf/SNMPv2-PDU ## # This command is not needed for generation, but IS needed for manual checking / use of `snmptranslate` within the # container. Add to the above RUN statement if needed. # sed -i \"s/^\\(mibs *:\\).*/#\\1/\" /etc/snmp/snmp.conf # # It simply comments out the `mibs:` line in `/etc/snmp/snmp.conf` ## # The 'stock' generator expects the output of `make mibs","date":"2020-12-27","objectID":"/monitoring-ap7900-switched-pdu-prometheus-grafana/:2:1","tags":["prometheus","grafana","SNMP"],"title":"Monitoring APC AP7900 switched PDU with Prometheus and Grafana","uri":"/monitoring-ap7900-switched-pdu-prometheus-grafana/"},{"categories":["home-lab"],"content":"The Dashboard Once metrics are making their way into prometheus, it’s only a bit of work to get a dashboard up and running. For sanity checking I fired up a load; a crypto-miner. See if you can spot when… :). Simple dashboard in grafana The json file for the dashboard is about 750 lines long, so rather than embed it, I’ve attached it as a file; the sha1 hash of dashboard.json is 400edb0c4064068f12e17c2f1f0d6862d3b8d449. ","date":"2020-12-27","objectID":"/monitoring-ap7900-switched-pdu-prometheus-grafana/:3:0","tags":["prometheus","grafana","SNMP"],"title":"Monitoring APC AP7900 switched PDU with Prometheus and Grafana","uri":"/monitoring-ap7900-switched-pdu-prometheus-grafana/"},{"categories":["home-lab"],"content":"estimating costs The dashboard just multiplies the average Wattage by the average cost of a kWh and then scales that to fit a 24h window. The rate I pay for electricity changes based on the hour in which the power is used; about 40% of the week, my power costs a few cents per kWh more. The cost shown in the image above is a rough approximation based on my average power rate of around 12.5 cents per kWh. This rate can be adjusted with the avgkWH_Cost variable, if needed. ","date":"2020-12-27","objectID":"/monitoring-ap7900-switched-pdu-prometheus-grafana/:3:1","tags":["prometheus","grafana","SNMP"],"title":"Monitoring APC AP7900 switched PDU with Prometheus and Grafana","uri":"/monitoring-ap7900-switched-pdu-prometheus-grafana/"},{"categories":["home-lab"],"content":"Files files/dashboard.json: sha1(dashboard.json): 400edb0c4064068f12e17c2f1f0d6862d3b8d449 Simple dashboard in grafana ","date":"2020-12-27","objectID":"/monitoring-ap7900-switched-pdu-prometheus-grafana/:4:0","tags":["prometheus","grafana","SNMP"],"title":"Monitoring APC AP7900 switched PDU with Prometheus and Grafana","uri":"/monitoring-ap7900-switched-pdu-prometheus-grafana/"},{"categories":null,"content":"Seriously, why is this so hard?","date":"2020-11-27","objectID":"/amcrest-ip-cam-security-isnt-a-feature-its-a-punchine/","tags":["onvif","home assistant","rant","security"],"title":"Amcrest IP Cameras: security isn't a feature, it's a punchline","uri":"/amcrest-ip-cam-security-isnt-a-feature-its-a-punchine/"},{"categories":null,"content":"This is part rant, part “reference” for anybody else that’s struggling to get their Amcrest IP Camera to work with Home Assistant via ONVIF. Skip to TL;DR for a working Home Assistant config. Briefly, ONVIF is an industry group that maintains a set of standards to allow for interoperability between IP Cameras and related devices from multiple vendors. One set of protocols so your cameras from $vendorA will work with with the recording/analytics software from $vendorB which can then pipe events into software from $vendorC. How ONVIF works and how it’s implemented are beyond the scope of this rant, but, like most standards that haven’t aged well, SOAP is involved. 🤮. The IP Camera in question is the Amcrest IP4M-1051, though it does appear that other devices from Amcrest are effected by some of the same issues I’ll detail below. Additionally, Amcrest appears to be a budget brand offering cheaper versions of DaHua hardware, so the firmware Amcrest uses likely originates from DaHua. The hardware is pretty good for the price. About $80 and you get a camera with a pretty wide field of view, 4K resolution, automatic IR leds/filter, PTZ servos, 10/100 Ethernet and 2.4/5ghz WiFi. The software, however is scarry 😱. I’ve only spent a few hours with the camera so far, but here’s an incomplete list of the security-related issues i’ve noticed in that time: There’s no way to require the web interface be served over HTTPS. You can turn on HTTPS support, but you can’t turn of HTTP support! ONVIF runs over HTTP … on port 80! Only the ADMIN user is supported for ONVIF Passwords are limited to 32 characters in length… but the web UI won’t inform you about this. ","date":"2020-11-27","objectID":"/amcrest-ip-cam-security-isnt-a-feature-its-a-punchine/:0:0","tags":["onvif","home assistant","rant","security"],"title":"Amcrest IP Cameras: security isn't a feature, it's a punchline","uri":"/amcrest-ip-cam-security-isnt-a-feature-its-a-punchine/"},{"categories":null,"content":"Firmware Before anybody asks, yes, I did update the firmware to the latest version immediately after unboxing. As of writing, the latest firmware available is version V2.620.00AC000.3.R.20191218 which can be downloaded here. FW for all Amcrest devices can be fetched from https://amcrest.com/firmwaredownloads. In the unlikely event that anybody sees this post and somehow gets Amcrest to correct their issues, the versions of software on the affected cameras are: Software Version: V2.620.00AC000.3.R, Build Date: 2019-12-18 WEB Version: 3.2.1.619604 ONVIF Version: 16.12(V2.4.1.513183) ","date":"2020-11-27","objectID":"/amcrest-ip-cam-security-isnt-a-feature-its-a-punchine/:0:1","tags":["onvif","home assistant","rant","security"],"title":"Amcrest IP Cameras: security isn't a feature, it's a punchline","uri":"/amcrest-ip-cam-security-isnt-a-feature-its-a-punchine/"},{"categories":null,"content":"Web UI Nothing shocking about a networking equipped, consumer-grade bit of electronics with a web based management interface. The only reason I’m noting it here is because I can’t find a way to force the web UI to be served over HTTPS 😢. *sigh* And the HTTPS tab has no way to disable the web server on port 80 or at least do a simple redirect to the HTTPS URL 😞. I'll leave you to determine if it's a good idea for the web interface to generate a self-signed certificate or not. I suspect that the next issue might have something to do with the ‘always on’ HTTP server… 🤔 ","date":"2020-11-27","objectID":"/amcrest-ip-cam-security-isnt-a-feature-its-a-punchine/:1:0","tags":["onvif","home assistant","rant","security"],"title":"Amcrest IP Cameras: security isn't a feature, it's a punchline","uri":"/amcrest-ip-cam-security-isnt-a-feature-its-a-punchine/"},{"categories":null,"content":"ONVIF over port 80 The inciting ‘incident’ for this post was a ‘generic’ error from Home Assistant while trying to connect the camera to HA. While going through the config flow, I’d get a super useful an unknown error occurred message 🙃. After a bit of digging through verbose HA logs, I started to suspect that the default port of 5000 was not the correct port despite the port being ‘open’ on the camera: $ nmap -p1-6553 cameraIPv4Here Starting Nmap 7.91 ( https://nmap.org ) at 2020-11-27 16:14 PST Nmap scan report for cameraIPv4Here Host is up (0.010s latency). Not shown: 6547 closed ports PORT STATE SERVICE 53/tcp open domain 80/tcp open http 123/tcp filtered ntp 443/tcp open https 554/tcp open rtsp 5000/tcp open upnp Nmap done: 1 IP address (1 host up) scanned in 2.21 seconds Sure enough, Home Assistant found a responsive ONVIF endpoint on port 80. Repeated testing showed that port 80 is the ONLY port with a responsive ONVIF endpoint 🤦. So yeah. ONVIF traffic, just like the web UI traffic, can be sniffed by anybody between the client and the camera. That’s not OK for a device that’s intended to be used for security. So this little setting is basically useless: 'Authentication' is misleading. It should be labeled something along the lines of 'allow just ADMIN to use onvif or allow anybody to use onvif' That screenshot is from the PDF file here which has this revision info: Amcrest IP4M-1051B / IP4M-1051W 4MP ProHD Indoor Wi-Fi Camera User Manual Version 1.0.3 Revised April 4th, 2019 ","date":"2020-11-27","objectID":"/amcrest-ip-cam-security-isnt-a-feature-its-a-punchine/:2:0","tags":["onvif","home assistant","rant","security"],"title":"Amcrest IP Cameras: security isn't a feature, it's a punchline","uri":"/amcrest-ip-cam-security-isnt-a-feature-its-a-punchine/"},{"categories":null,"content":"ONVIF only supports authentication with the Admin user After discovering that ONVIF only ‘works’ over port 80, I took a moment to get over my disappointment and then tried to set up a second user with minimal authority on the camera; read only and limited permission to move the camera around. Except I was never able to get HA to successfully connect to the camera when using the secondary user. Home Assistant still failed to connect to the camera over ONVIF even after elevating the secondary user to the privilege level of an admin: Admin users have all 34 permissions enabled My secondary user permissions: As Home Assistant really does not expose a ton of debugging information, I tried the secondary user credentials with the Onvifer app. The debugging logs from that app confirmed that only the admin credential set ‘worked’ with ONVIF. After a bit more research, it turns out that I’m not the first person to discover this: Source: https://amcrest.com/forum/ip-cameras-f18/firmware-security-bug-regarding-onvif--t13445-s10.html Source: https://amcrest.com/forum/ip-cameras-f18/ip3m-941b-onvif-and-user-management-t12647.html Now i’m embarrassed that it took me so long to discover an issue that’s been documented since AT LEAST summer of 2019! 😳 ","date":"2020-11-27","objectID":"/amcrest-ip-cam-security-isnt-a-feature-its-a-punchine/:3:0","tags":["onvif","home assistant","rant","security"],"title":"Amcrest IP Cameras: security isn't a feature, it's a punchline","uri":"/amcrest-ip-cam-security-isnt-a-feature-its-a-punchine/"},{"categories":null,"content":"Password length Can we please stop putting ceilings on password length? Or, at least if you’re going to set an upper bound on password length, please make sure that: You’re consistent about enforcing the length You tell the user when their password is longer than allowed. The very first time the default credentials are used to sign into the camera, you’re prompted to change the default password. Good! Only problem: the password generated by my password was, apparently, longer than the camera supports. The new admin password was silently truncated as I was logged in. I didn’t realize that the password stored in the manager wouldn’t let me in until after the camera applied it’s FW update and rebooted. After a factory reset, I figured out what happened. The maxlength property of the login form differs from the password set form. In any case, there’s no warning that the input exceeds the length! ... ... sigh ","date":"2020-11-27","objectID":"/amcrest-ip-cam-security-isnt-a-feature-its-a-punchine/:3:1","tags":["onvif","home assistant","rant","security"],"title":"Amcrest IP Cameras: security isn't a feature, it's a punchline","uri":"/amcrest-ip-cam-security-isnt-a-feature-its-a-punchine/"},{"categories":null,"content":"TL;DR: It’s almost 2021, but we still have IP Cameras shipping with 2011’s security issues. Absolutely do not expose your IP Cameras directly to the internet or otherwise allow them to contact the internet. Keep cameras on their own dedicated and isolated network and consider the admin credentials for the camera to be compromised. Seriously re-consider using WiFi for your cameras. If you’re trying to use the Home Assistant ONVIF integration to control an Amcrest IP4M-1051, you must use the admin credentials and change the port from 5000 to 80. The first bit of documentation you see when unboxing the camera is this little guy: This is *literally* the first thing you see when unpacking the camera. which reads: IMPORTANT SECURITY NOTICE Please make sure your device has the latest firmware as listed on: www.amcrest.com/firmware-subscribe Never use the default password for your device. Always ensure your password contains a combination of lowercase and uppercase characters and numbers. A for effort, though, Amcrest! 👏🌟 🙃 ","date":"2020-11-27","objectID":"/amcrest-ip-cam-security-isnt-a-feature-its-a-punchine/:4:0","tags":["onvif","home assistant","rant","security"],"title":"Amcrest IP Cameras: security isn't a feature, it's a punchline","uri":"/amcrest-ip-cam-security-isnt-a-feature-its-a-punchine/"},{"categories":["gists","reference"],"content":"A few rules for better home automation with Tasmota","date":"2020-11-20","objectID":"/two-tasmota-rules/","tags":["tasmota","home-assistant","home-automation"],"title":"Two Tasmota rules","uri":"/two-tasmota-rules/"},{"categories":["gists","reference"],"content":" Tasmota is an incredibly powerful alternative/open source firmware for the ever popular Espressif family of WiFi equipped microcontrollers. This does not need to be another post espousing it’s many awesome qualities, so just trust me on this; Tasmota is AWESOME. Tasmota supports user configurable rules which are simple commands wired into various device triggers. In short; a device running Tasmota gains some autonomy to react to events without needing to report the event to, and wait for commands from, a remote server. I find the rules syntax to be a bit awkward and the list of practical examples feels like autodoc with a few practical examples sprinkled in. I have never been able to craft a Tasmota rule without also consulting the list of commands and doing a few searches through the github issues looking for issues/questions similar to mine. This post is a simple “here’s how i did it” that I wish I had found when I needed to solve the problem. Hopefully this will save you some trouble! ","date":"2020-11-20","objectID":"/two-tasmota-rules/:0:0","tags":["tasmota","home-assistant","home-automation"],"title":"Two Tasmota rules","uri":"/two-tasmota-rules/"},{"categories":["gists","reference"],"content":"Mr. Coffee Note I have since replaced my Tasmota based automation with an ESPHome based automation. Details on that are here. A $15 ‘smart relay’ is all that’s needed to turn a simple drip-over coffee maker into a remote-controllable coffee maker. Immediately, you gain the ability to start brewing coffee in the morning from bed. With a little extra integration work, start brewing coffee 10 minutes before your alarm is scheduled to go off. Simple quality of life improvement! Every coffee maker has at least one safety interlock to disable the heating element if it gets too hot, but some have additional interlocks. Specifically, my coffee maker has two more interlocks in series with the heating element; if the carafe is removed or the water tank is empty, the circuit is broken and the heater immediately stops producing heat. From the perspective of the smart relay, the power consumption is either 0 Watts or a bit over 1100 Watts. I was not comfortable using Home Assistant to monitor power consumption and then toggle the relay off after observing an interlock kick in. If something happened to the WiFi connection or the MQTT server or Home Assistant, there’s no way to disconnect power from the coffee maker; the relay will stay ‘on’. If the interlock failed, somehow, the heating element would immediately begin pumping out heat when it really shouldn’t be! Writing a simple “if power consumption drops below 1100 Watts, turn relay off” rule would be enough, except there’s no way to distinguish between the thermal interlock tripping and the carafe being removed for a quick pour. The simple rule is incompatible with the extra interlocks; it will prematurely stop the brewing 100% of the time the carafe is removed. If you want to pour a cup of coffee while it’s still brewing, this is rather inconvenient. Solution: give the user 30 seconds to return the carafe during brewing before turning the relay off. From the perspective of the outlet, ignore any lulls in power consumption as long as they’re shorter than 30 seconds. Otherwise, assume that an interlock has tripped. This is implemented with two rules: Rule1 # When relay1 (heater) is turned on, activate rule2 ON Power1#state=1 DO Rule2 1 ENDON # and deactivate rule2 when the heater is turned off ON Power1#state=0 DO Rule2 0 ENDON # When Timer1 expires, turn the heater off ON Rules#Timer=1 DO Power1 off ENDON # When the current used by the heating element rises above 1 Amp, disable Timer1 ON Energy#Current\u003e1 DO RuleTimer1 0 ENDON # ... and enable rule 2 ON Energy#Current\u003e1 DO Rule2 1 ENDON Rule2 # Wait for power use to drop to 0; start counting down ON Energy#Current\u003c.2 DO RuleTimer1 30 ENDON # and disable rule2 so the timer is not constantly reset ON Energy#Current\u003c.2 DO Rule2 0 ENDON I chose .2 Amps as the trigger, but the logic works the exact same way with Power / Wattage. ","date":"2020-11-20","objectID":"/two-tasmota-rules/:0:1","tags":["tasmota","home-assistant","home-automation"],"title":"Two Tasmota rules","uri":"/two-tasmota-rules/"},{"categories":["gists","reference"],"content":"Electric Kettle I wanted to detect when my electric kettle was done boiling the water so I could play a sound and flash the lights in whichever room I happened to be in at the time. This is trivial to do with a ‘smart outlet’ and a template sensor in Home Assistant: - platform: template sensors: kettle_running: friendly_name: \"Kettle Boiling\" # If the kettle is using more than 5w, assume its on / boiling water icon_template: \u003e- {% if states('sensor.kettle_energy_power') | float \u003e 5 %} mdi:kettle-steam {% else %} mdi:kettle {% endif %} value_template: \"{{states('sensor.kettle_energy_power') | float \u003e 5}}\" Only problem, Tasmota only publishes the kettle’s power once every 300 seconds. This means sensor.kettle_energy_power only gets updated every 300s which makes it really hard to fire off a timely notification when the kettle is done. The ‘brute-force’ solution is to configure Tasmota to transmit the telemetry continuously. Except there’s no need for the Tasmota device on the kettle to be constantly informing Home Assistant that there’s no power being used whenever the kettle is not on; my application only cares about the ‘falling edge’. Borrow the trigger from the Mr. Coffee rule and shorten the telemetry period only when the kettle is consuming more than 1 Watt. Like the coffee maker, it’s either consuming 0 Watts or about 1.1 Kilowatt. Rule1 on ENERGY#Power\u003e1 do Backlog TelePeriod 10; Rule2 1 endon Rule2 on ENERGY#Power=0 do Backlog TelePeriod 1; Rule2 0 endon As soon as the kettle starts using more than 1 Watt, configure Tasmota to publish its sensor data every 10 seconds. I’ll get notified that the water is boiling within 10s; much better than 300s! Once the power consumption goes back down to 0, reset the telemetry update period and disable the rule. The second rule must be disabled to prevent constant triggering of the rule when the kettle is not boiling. Without the Rule2 0, the console/logs for the device would be full of statements like this repeating every few seconds: RUL: ENERGY#POWER\u003e1 performs \"TelePeriod 10\" MQT: stat/tasmota_kettle/RESULT = {\"TelePeriod\":10} Hope that helped! EDIT: 2021-09-24: small typo fixes. Thanks for pointing them out :). ","date":"2020-11-20","objectID":"/two-tasmota-rules/:1:0","tags":["tasmota","home-assistant","home-automation"],"title":"Two Tasmota rules","uri":"/two-tasmota-rules/"},{"categories":null,"content":"A few new hardware features and software tweaks to make the wonderful HASP project even better","date":"2020-10-01","objectID":"/enhanced-homeassistantswitchplate/","tags":["fusion-360","has:download","home assistant"],"title":"Enhanced Home Assistant Switch Plate (HASP)","uri":"/enhanced-homeassistantswitchplate/"},{"categories":null,"content":"The HASwitchPlate project by aderusha is brilliant. He’s managed to arrange some relatively cheap commodity hardware into a package that conveniently fits into a prime location for interacting with Home Automation - the light switch. The entire package sips power off of the already present mains wiring and connects to any MQTT broker via the esp8266 chip. As the HASP was designed to be used with Home Assistant, the humble 2.4 inch LCD transforms into an accessible control surface for an incredibly powerful home automation platform! ","date":"2020-10-01","objectID":"/enhanced-homeassistantswitchplate/:0:0","tags":["fusion-360","has:download","home assistant"],"title":"Enhanced Home Assistant Switch Plate (HASP)","uri":"/enhanced-homeassistantswitchplate/"},{"categories":null,"content":"Modifications First, a brief word about indemnification: All instructions and information on this page is purely for informational purposes. The original HASP and my modifications come with neither an expressed or implied warranty. By constructing your own, you assume all risk. ","date":"2020-10-01","objectID":"/enhanced-homeassistantswitchplate/:1:0","tags":["fusion-360","has:download","home assistant"],"title":"Enhanced Home Assistant Switch Plate (HASP)","uri":"/enhanced-homeassistantswitchplate/"},{"categories":null,"content":"Software The few software modifications I’ve made to the HASP project are relatively small and don’t implement anything significant or new; they are ‘quality of life’ improvements that target small portions of the code. I strongly believe that the hardest part of using a given piece automation technology should be taking it out of the box. To wit, Home Assistant has robust - but not perfect - support for automatic device discovery and configuration via MQTT. Once a device has connected to the MQTT broker, it simply publishes a document detailing how HA should interface with the device. It’s a wonderful experience to see a new device connect to the network for the first time and just a few seconds later the new device is registered in HA, waiting for you to start integrating it into automations 🤩🤤. While there are quite a few sensors/stateful-attributes in the original HASP code, none of them automatically present themselves to Home Assistant 😔. I set about fixing that to the best of my abilities. Unfortunately, the LCD backlight is the only peripheral that could be ‘upgraded’ to automatic configuration without making a ton of changes to the original code base. All of the hardware modifications detailed below automatically configure themselves with Home Assistant. The original HASP code base uses allocates too little memory for storing MQTT credentials. Any username or password longer than 31 bytes/characters would be silently truncated on save. Despite the ‘credentials saved, rebooting’ message, the next screen was always a ‘failure to connect’ message. Frustrating! The pull request to address this is here. ","date":"2020-10-01","objectID":"/enhanced-homeassistantswitchplate/:1:1","tags":["fusion-360","has:download","home assistant"],"title":"Enhanced Home Assistant Switch Plate (HASP)","uri":"/enhanced-homeassistantswitchplate/"},{"categories":null,"content":"Hardware The HASP does support dimming the LCD, but it has no awareness of ambient light levels. This makes it rather difficult to deploy a HASP in any ’light sensitive’ location like a bedroom or media room without another device to cue Home Assistant and lower the LCD brightness. Workable, but too high friction to be ideal. Light Dependent Resistors - LDR for short - are a very cheap and compact way to get an approximate light level. Fortunately, the analogue pin is broken out on the PCB so a simple resistive divider and a few lines of code are all that’s needed to get a a number that linearly correlates to the level of light hitting the face plate. It just so happens that there is just enough room to fit a LDR beneath the surface of the decor plate and out of the way of the LCD. As (not) shown in the picture above, there is no way to tell that the LDR is embedded beneath the surface. The range of values from the LDR isn’t great, but they are adequate enough to reliably detect if the HASP is in a darkened room. ignore the spikes just before noon, those are due to to testing with a flash light While researching potential ways to measure the ambient brightness, I stumbled across the HomeSeer HS-WD200+ which features a rather novel way to convey additional information to a user; seven RGB leds 😍. It’s a brilliant use of such a simple and ubiquitous technology that I’m not really sure why every smart switch doesn’t do this! HomeSeer's WS200 has a delightful innovation... RGB LEDs! With zero room to spare, four LEDs can fit into a small cavity between the LCD and decor plate surface. Like with the LDR, there is no visual ’tell’ that there are LEDs beneath the surface… unless they’re on, of course. Ignore the dirt on the switch. Notice how you can't tell there's an LDR beneath the surface The enclosure Without consuming more than 1 gang, the only realistic way to get the wires for the new components to the HASP PCB is to go around the edge of the LCD’s PCB. This is accomplished with two small ‘channels’ that slightly protrude in the vertical directions from the lip around the LCD and into the box that encloses the electronics. Section analysis from f360 showing small channels around the LCD for wires to LDR and LEDs Additionally, I found that the original printed parts do not properly fit in the two gang electrical box where I intended to deploy the HASP. The only way to fit the HASP in my 2-gang electric boxes is to cut out a small section In total, the modifications required to accommodate the LDR and LED tape are relatively small, but I had to re-create the model from scratch so several things are likely a bit different from the original model. It should be relatively easy to port the modifications to the other multi-gang configurations that the original HASP supports. The .step and .f3z files are available should you want to make the necessary modifications to other switch plate configurations. The .stl and .3mf files are available for easy printing. All files available below and on github. ","date":"2020-10-01","objectID":"/enhanced-homeassistantswitchplate/:1:2","tags":["fusion-360","has:download","home assistant"],"title":"Enhanced Home Assistant Switch Plate (HASP)","uri":"/enhanced-homeassistantswitchplate/"},{"categories":null,"content":"Assembly The steps below are meant to be followed between the original steps 03_Electronics_Assembly and 04_Project_Enclosure. In short, you’ll want to assemble and test the HASP PCB as in the original instructions, but use the steps below as a substitute for the enclosure assembly process. ","date":"2020-10-01","objectID":"/enhanced-homeassistantswitchplate/:2:0","tags":["fusion-360","has:download","home assistant"],"title":"Enhanced Home Assistant Switch Plate (HASP)","uri":"/enhanced-homeassistantswitchplate/"},{"categories":null,"content":"Additional Materials In addition to everything in the original BOM, you’ll need: A LDR. Be aware that LDRs come in many different shapes and sizes and have different resistance values. Space is rather tight, so the form factor matters a lot more than the resistance values or band of light that the LDR responds to. If you use a different LDR, you may need to adjust the resistor value to better match your LDR. You can get 50 of the exact model GL5516 that I used for less than $2 here. A 10KΩ resistor to form a simple resistive divider with the LDR. This will better map the the full range of the LDR to the 0-1 volt range that the ESP8266 ADC uses. Space is rather limited so the smaller the resistor, the better; no need for anything larger than 1/4 Watt. You can get a 10-pack of 10KΩ resistors here WS2812B LED tape featuring the 3535SMD package. The ‘regular size’ LED package will not fit so make sure you use the smaller 3535SMD package! Beyond that, aim for LED tape that is no wider than ~8mm and has highest density possible. After quite some searching, the best that I could find is 8mm wide tape with a density of 144 LEDs per meter. Unfortunately, they don’t sell LEDs 4 at a time, so you can pick up 1 meter of the exact LEDs I used here. Several centimeters of very fine gauge wire. Ideally, multiple colors so you can keep organized but this is not required. Again, space is rather tight, so AWG 28 or 30 is ideal. Much bigger than that and you’ll likely have issues fitting everything together. You can get a 1m length of multiple colors here. HeatShrink Tubing (HST). The exact diameter needed will depend on how compact your soldering is and the size of resistor used. Multiple colors will help keep things organized, but that’s not required. I suggest a kit so you can get the perfect diameter and length. You can get a kit here. Standard 2.54mm pin headers. You can get a set of male and female headers here. All the components needed for assembly Note: Where possible, I’ve used commission links. The links don’t raise the price of any item, they simply let the retailer know that I’m the reason for your business. In return, I get a small cut of your purchase as a ’thanks’ from the retailer. If you’re not comfortable with that, you can use a URL unwinding service to get the ‘raw’ product link and drop the attribution/commission part. ","date":"2020-10-01","objectID":"/enhanced-homeassistantswitchplate/:2:1","tags":["fusion-360","has:download","home assistant"],"title":"Enhanced Home Assistant Switch Plate (HASP)","uri":"/enhanced-homeassistantswitchplate/"},{"categories":null,"content":"Brass inserts The original instructions suggest using glue to secure the brass inserts to the face plate, but I suggest using either a lighter or a very fine tip soldering iron to heat up the brass insert. A hot insert will melt the surrounding plastic which will make for a much stronger joint. The modified version of the HASP face plate used in this guide intentionally features holes slightly too small for the brass inserts so glue won’t be enough. Fully insert the 20mm screw into the brass insert, use pliers to grasp the screw and apply heat with a lighter for a few seconds and then insert into the face plate. Make sure that the screw is completely inserted into the insert so that molten plastic can’t flow into the insert. If molten plastic enters and cools on the threads, it will be rather difficult to later screw things together! Molten plastic can't flow into a filled insert As the inserts cool, you’ll have a few seconds to make adjustments to their orientation before they become fixed. Make sure that each screw is vertical and cool to the touch before moving on to the wiring harness. screws make it easy to perform final alignment on inserts and act as a heatsink ","date":"2020-10-01","objectID":"/enhanced-homeassistantswitchplate/:2:2","tags":["fusion-360","has:download","home assistant"],"title":"Enhanced Home Assistant Switch Plate (HASP)","uri":"/enhanced-homeassistantswitchplate/"},{"categories":null,"content":"Wire Harness There are only six wires for the two components and the LED tape is the only component where polarity matters. A table mapping each pin on the HASP PCB to each component lead is below. HASP PCB Pin Component GND LED Tape, 10KΩ resistor +5V LED Tape VCC in +3.3V LDR A0 LDR \u0026 10KΩ resistor junction D0 N/A D1 LED Tape CLK/DTA in D2 N/A DBG N/A You are strongly encouraged to test / check your work after each step with a simple multimeter. Complete assembly involves irreversible steps, like shrinking HST. If you make a mistake, it’s best to catch it before ‘finalizing’ things as you’re almost certainly going to have to destroy the component and or wiring harness to repair it. Additionally, you can flash my modified HASP firmware to a fully assembled HASP device and use that as a testing device. On boot up, the modified firmware briefly flashes each LED in sequence. About every 10 seconds after boot, the LDR value will be read and published to MQTT. Cover the LDR with your hand and check your MQTT broker or HA to confirm that the value changes significantly between exposed and covered states. LDR Fit the LDR into the face plate and position the leads in the channel under and to the top of the LCD PCB. Then trim the excess length off of the LDR leads so that they extend ‘beyond’ the LCD by about 8mm or so. LDR under the LCD w/ trimmed leads... Remove the LDR from the face plate and straighten the leads out. Lay the LDR, resistor, and wire out as shown below. Use this time to cut the HST down to size so everything but the leg of the LDR that joins the resistor can be covered. Note: the leads on the resistor have also been trimmed down to ~15mm to better fit. rough layout of LDR harness It’s probably going to be easiest to start with the ‘supply’ wire which runs directly from the HASP PCB’s +3.3v pin to the LDR. As space is exceedingly tight, there is no room for overly large solder joints. Carefully wrap the wire around the lead and apply just enough solder to make good electrical contact. Once the supply wire has been soldered to the LDR, affix the HST so the entirety of the lead and solder joint are protected. strip ~1cm off the end of the wire, wrap around the lead, then solder Repeat the same procedure with the lead of the resistor that will go directly to the ground. Affix the HST after the solder joint has cooled. No room for mechanically strong solder joints Use the same ‘wrap’ technique with the remaining leads from the LDR and the resistor. Apply just enough solder for good electrical contact between the signal wire and the two leads of the LDR and resistor. same wrapping technique, just with two leads this time After the solder joint cools, cover the entire LDR/Resistor assembly in HST so there is no exposed wire or component lead. get everything nicely protected behind HST Set the LDR component aside for now and move on to the LED tape. LEDs If you’ve not already trimmed the LED tape to fit in the face plate, do so now. Leave yourself as much room as needed to solder on the one side where you’ll need to feed power and data in. The LED tape has incredibly small pads so take your time on this. You have about 5 cubic millimeters total for the three solder joints on the LED tape. Solder just enough for electrical contact, there will be no significant mechanical stress. Note: The arrows printed on the strip point in the direction of data flow; combined with the off-center placement of the LED packages, there is only one way to properly install the LED tape in the decor plate. know which way the LED tape wires will need to point to make it into the 'channel' prior to soldering After soldering the power, signal and ground wires, flatten them and gently shape them so they align and flow into the channel on the face plate in a manner similar to the LDR. For a bit of mechanical robustness, consider braiding the wires together. twist the wires together for a more compact and robust cable Pin Header After soldering wires o","date":"2020-10-01","objectID":"/enhanced-homeassistantswitchplate/:2:3","tags":["fusion-360","has:download","home assistant"],"title":"Enhanced Home Assistant Switch Plate (HASP)","uri":"/enhanced-homeassistantswitchplate/"},{"categories":null,"content":"Printing In the electrical boxes there’s absolutely no room to spare, so all parts are designed to fit together with very tight clearances. Print as slow as you need to in order too achieve very good dimensional accuracy. Like with the brass inserts, the various screw holes are intentionally undersized for better thread engagement. The obvious orientation is the best, no supports needed The HASP does run a bit warm, but not any warmer than other smart switches with similar form-factor. PLA will likely be fine unless you in tend to deploy the HASP in a particularly hot location. Thermals In testing, the parts of the HASP ran ~20º above ambient. Most of that heat comes from the small AC-\u003eDC converter and the LCD. Surprisingly, the ESP8266 does not emit that much heat. Overall, nothing particularly alarming, especially when the HASP is deployed into a larger multi-gang electrical box with with plenty of air to radiate heat into. Apologies in advance for the mixed ºC/ºF units. HASP removed from electrical box, heat from the AC-DC converter radiating through the enclosure similar to first picture, parts inside enclosure radiate heat through the enclosure, bringing it to about 20 degrees above ambient temperature there are clear hot-spots on the enclosure that match up with the location of the ESP and the AC-DC converter Less heat is radiated through the front of the HASP; the LCD backlight and embedded LEDs are clearly the warmest components The tiny PNP transistor that toggles the LCD power is the hottest component, by far. Everything else has a relatively consistent temperature: PNP Transistor is clearly warmest internal component, ESP8266 cooler than expected When installed in wall, the HASP is radiating heat into the electrical box and through neighboring switches: a little bit of ambient heat radiating through the gap between LCD and switch as well as through the switch ","date":"2020-10-01","objectID":"/enhanced-homeassistantswitchplate/:2:4","tags":["fusion-360","has:download","home assistant"],"title":"Enhanced Home Assistant Switch Plate (HASP)","uri":"/enhanced-homeassistantswitchplate/"},{"categories":null,"content":"Future work I did accomplish my two main goals: Ambient light sensor for more responsive backlight control HomeSeer-like LEDs for additional information display However, there’s a few aspects of the HASP that i’d like to further improve: Increased automatic configuration w/ the HASP. There’s still a non-trivial amount of work required to set up a HASP with Home Assistant. The HASP device has many different attributes that could be exposed to Home Assistant automatically. E.G.: The HASP will periodically check for a firmware update; the HASP should configure Home Assistant with a binary_sensor that indicates if there’s a firmware update available. Some of the automations that live in Home Assistant to manage button presses / update screen content could probably be re-factored down to a few generic scripts and services. The display uses a resistive matrix to detect touch events. Resistive screens, while cheap, are a bit finnicky and inferior to the more consistent and precise capacitive touch screen tech. If Nextion ever makes a capacitive version of the NX3224T024, then it would be an instant upgrade! Similarly, the viewing angle on the LCD is… not great. The HASP, like most light switches, is at a convenient height for hands… not eyes. If you’re standing relatively close to the HASP, you’ll be looking down at the screen with quite a steep angle. Depending on the current screen brightness and colors, this may result in a washed out and illegible screen. Better LED diffusion. There’s not a lot of space for light pipes or similar, but I would like to find a better way of diffusing the LEDs. Or even to fit a masking layer between the LEDs and the plate, so the effect would be akin to a back-lit silhouette. Effects for the LEDs. Right now, the LEDs only support on/off/brightness commands. Their ability to passively indicate information would be enhanced if Home Assistant could send ’effect’ commands, too. E.G.: Rather than HA having to send a constant stream of color/brightness commands to fade between blue, green, yellow, purple, simply send a fade(2s) blue, green, yellow, purple command. There’s plenty of spare room on the HASP PCB for the 10KΩ resistor. This would simplify the creation of the wiring harness. I’ve been meaning to learn KiKad, this might be a very gentle way to start learning it. 🤔 Enclose the LED tape 100% inside the HASP. This version works well and the small ‘hole’ in the enclosure. I don’t think there’s any safety concern w/ the current design, but I’d still like to have the low voltage stuff 100% blocked off from thee electrical box… ","date":"2020-10-01","objectID":"/enhanced-homeassistantswitchplate/:3:0","tags":["fusion-360","has:download","home assistant"],"title":"Enhanced Home Assistant Switch Plate (HASP)","uri":"/enhanced-homeassistantswitchplate/"},{"categories":null,"content":"Files For archive / posterity, all source files are included here. Unless otherwise explicitly stated otherwise, all files below are licensed as Creative Commons Attribution-NonCommercial-ShareAlike (CC BY-NC-SA). Section analysis from f360 showing small channels around the LCD for wires to LDR and LEDs The only way to fit the HASP in my 2-gang electric boxes is to cut out a small section All the components needed for assembly Molten plastic can't flow into a filled insert screws make it easy to perform final alignment on inserts and act as a heatsink LDR under the LCD w/ trimmed leads... rough layout of LDR harness strip ~1cm off the end of the wire, wrap around the lead, then solder No room for mechanically strong solder joints same wrapping technique, just with two leads this time get everything nicely protected behind HST know which way the LED tape wires will need to point to make it into the 'channel' prior to soldering twist the wires together for a more compact and robust cable remove the pin from the plastic 'frame' and carefully solder the wires to the pins A few pins are not needed Align and ensure no pinched wires! If the LEDs weren't on, you'd never know they were there 😊 ignore the spikes just before noon, those are due to to testing with a flash light models/box.step: step file models/box.stl: stl file models/combined.3mf: 3mf file models/combined.step: step file models/enhanced-HASP.f3z: models/plate.step: step file models/plate.stl: stl file Ignore the dirt on the switch. Notice how you can't tell there's an LDR beneath the surface The obvious orientation is the best, no supports needed HASP removed from electrical box, heat from the AC-DC converter radiating through the enclosure similar to first picture, parts inside enclosure radiate heat through the enclosure, bringing it to about 20 degrees above ambient temperature there are clear hot-spots on the enclosure that match up with the location of the ESP and the AC-DC converter Less heat is radiated through the front of the HASP; the LCD backlight and embedded LEDs are clearly the warmest components PNP Transistor is clearly warmest internal component, ESP8266 cooler than expected a little bit of ambient heat radiating through the gap between LCD and switch as well as through the switch HomeSeer's WS200 has a delightful innovation... RGB LEDs! ","date":"2020-10-01","objectID":"/enhanced-homeassistantswitchplate/:4:0","tags":["fusion-360","has:download","home assistant"],"title":"Enhanced Home Assistant Switch Plate (HASP)","uri":"/enhanced-homeassistantswitchplate/"},{"categories":null,"content":"An update to ESPHome custom_component to capture particulate matter sensor values from WS3 Weather Station","date":"2020-08-27","objectID":"/ws3-weather-station-pm25-sensor/","tags":["fusion-360","has:download","esphome","home assistant"],"title":"Adding an airborne particulate mater sensor to WS3 Weather Station","uri":"/ws3-weather-station-pm25-sensor/"},{"categories":null,"content":"A while back, I posted a small bit of code that could decode the data from the ubiquitous WS3 Weather Station and make it accessible to the amazing HomeAssistant via the wonderful ESPHome project. Since then, my weather station has been dutifully collecting data that’s been invaluable for augmenting automation that deals with indoor climate. As the numerous wild fires in California rage on, the air quality has gone from bad to dangerous. Knowing that outside was warmer, but less humid, was no longer enough to make a smart decision about weather or not to open the windows for some cost-effective cooling. I now need HomeAssistant to be aware of how clean the outside air was before making the decision to pipe in outdoor air. This post covers two things: A small update to the existing WS3 -\u003e ESPHome -\u003e HomeAssistant bridge code to take advantage of the WS3s’ support for the ubiquitous PMS5003T sensor. A simple 3d-printable enclosure for deploying the particulate matter sensor outdoors When deployed, it looks like this: Excuse the awkward camera angle; sensor is deployed in an awkward to photograph location. Please ignore the awkward camera angle as the sensor is deployed in a location where there’s not quite enough room for proper camera placement. And results in graphs that look like this: Smoke particles are between .4μm to .7μm in size... which explains the elevated red line relative to other particle sizes. A simplified copy of this post appears on thingiverse and prusaprinters. ","date":"2020-08-27","objectID":"/ws3-weather-station-pm25-sensor/:0:0","tags":["fusion-360","has:download","esphome","home assistant"],"title":"Adding an airborne particulate mater sensor to WS3 Weather Station","uri":"/ws3-weather-station-pm25-sensor/"},{"categories":null,"content":"The enclosure As of writing, there’s one existing enclosure for the sensor on thingiverse. Unfortunately, the enclosure does not appear to have any design features for mounting to a pole nor does it have any bug-proofing design elements. I took this opportunity to design my own that could be easily mounted, features a slanted ‘roof’ to prevent standing moisture ingress and could use standard size tobacco pipe filters to keep all but the tiniest of insects/particles out. The sensor uses a small fan to draw ambient air past an infrared laser. As airborne particles cross the laser beam, they reflect a certain amount of light which can be correlated with the size of the particle. This data can then be turned into fairly accurate counts of how many particles of a given size are in the sampled air. The enclosure is a basic box with two circular air channels pointed downwards to prevent moisture ingress. The intake and exhaust ports are at staggered heights and pointed in opposite directions and to minimize the chance of recirculating the same air. The lower port is the intake which connects to a few small holes on the front of the sensor and the exhaust port is the raised port which connects directly to the exhaust fan. If you could remove the first few mm from the front, it would look something like this: From the side, you can see the two air channels and the few mm of room in the back for wiring. The sensor sits on a ‘pedestal’ to keep it elevated away from any moisture that may collect on the bottom of the enclosure. The base plate/pedestal are secured to the ‘body’ with two M3 screws. I used 10mm as that’s what I had on hand, but screws between 6-12mm should work as well. The holes are sized for a M3, but any similar sized screw will work. Use a lighter or similar to heat the screw as you drive it into the plastic to create your own threads if using a larger/longer screw. Besides the ‘pedestal’ there are a few contact surfaces that hold on to the sensor with a friction fit. The ‘ceiling’ is a few mm thick and shouldn’t permit much moisture ingress but an optional slanted roof component can be printed as an extra precaution. Upper and lower chambers for exhaust and intake. While designing the enclosure, I used this PMS5003 model from Leclercq Gregory. 🙏 ","date":"2020-08-27","objectID":"/ws3-weather-station-pm25-sensor/:1:0","tags":["fusion-360","has:download","esphome","home assistant"],"title":"Adding an airborne particulate mater sensor to WS3 Weather Station","uri":"/ws3-weather-station-pm25-sensor/"},{"categories":null,"content":"Printing This is a functional part with only three small surfaces that require reasonably tight precision to properly hold onto the sensor. The SPEED setting with a .2mm layer height and a reasonable 20% infill gave me part that works and feels water tight. The walls and ceiling need to keep water out so dipping below 15% infill or otherwise using settings that wont give solid layer adhesion is not advised. I printed using ABS for durability, but PLA will probably work if you can deploy into a shaded environment. The shroud and the base are not optional, the triangle shaped block is intended to turn the flat roof of the shroud into a slanted roof so water can’t collect. It is optional but shown below. No raft/support when printed in this orientation. ","date":"2020-08-27","objectID":"/ws3-weather-station-pm25-sensor/:1:1","tags":["fusion-360","has:download","esphome","home assistant"],"title":"Adding an airborne particulate mater sensor to WS3 Weather Station","uri":"/ws3-weather-station-pm25-sensor/"},{"categories":null,"content":"Assemble Briefly: collect materials press-fit the PM2.5 sensor into the enclosure make a wire that can interface the PM2.5 sensor to the WS3 board via RJ11 seal everything up glue on mesh screens and angled roof plug into WS3 flash ESPHome onto ","date":"2020-08-27","objectID":"/ws3-weather-station-pm25-sensor/:2:0","tags":["fusion-360","has:download","esphome","home assistant"],"title":"Adding an airborne particulate mater sensor to WS3 Weather Station","uri":"/ws3-weather-station-pm25-sensor/"},{"categories":null,"content":"Bill of Materials More or less everything that is needed for assembly is pictured below. More or less everything needed to assemble. Components: WS3 Weather Station - Essential / Foundational ST5003T PM2.5 Sensor - Essential / Foundational ESP32 Device - A link to the ESP32 based device that I use but any ESP platform with a spare GPIO that can be used as a UART will work. 3/4 inch tobacco pipe screens - For bug/critter proofing the enclosure. Strongly suggested for outdoor deployments. 2x M3 x 10mm screws - Optional. The base can be glued to the shroud or any similar screw will work Note: Where possible, I’ve used referral links. The links don’t raise the price of any item, they simply let the retailer know that I sent you and, in return, I get a small cut of your purchase. If you’re not comfortable with that, you can use a URL unwinding service to get the ‘raw’ product link and drop the attribution/commission part. General bits: Superglue Waterproofing caulk/sealant Drill/Screwdriver Driver bit for the screws The stepped drill bit in the above picture is not a requirement if you assemble things in the correct oder. The cable egress hole is sized for a ’typical’ 3 pair RJ11 cable plus a tiny bit of wiggle room. I needed a working cable to test the code while the parts were printing so the hole in the printed base needed to be enlarged slightly to fit the head of the cable. ","date":"2020-08-27","objectID":"/ws3-weather-station-pm25-sensor/:2:1","tags":["fusion-360","has:download","esphome","home assistant"],"title":"Adding an airborne particulate mater sensor to WS3 Weather Station","uri":"/ws3-weather-station-pm25-sensor/"},{"categories":null,"content":"Wiring There’s no ready-made cable out there that’ll join the two devices so one must be made. Fortunately, there’s only 6 wires to deal with… 4 of them are distinct. Sacrifice the cable that comes with the PM2.5 sensor and the RJ11 cable by cutting them in half and solder the correct wires together. The color of the wires that come in both the RJ11 cable and the PM2.5 cable are likely going to differ from the ones I used so I’ve left those details out and provided a table showing which pins are to be joined together: Pin # PM2.5 Sensor Pin WS3 Pin 1 VCC 5V 2 GND GND 3 SET ENABLE 4 RX RX 5 TX GND 6 RESET 5V 7 NC 8 NC For reference, Pin 1 on both the WS3 and PM2.5 Sensor: With the wiring done, the sensor just needs to be stuffed into the enclosure. Don’t forget to thread the RJ11 cable through the hole in the base plate BEFORE soldering it to the cable for the PM2.5 sensor… otherwise you’ll need that stepped drill bit! 🙃 Sensor has been press-fit into the enclosure and wire fed through the base plate. To finish, secure the base with screws and a bit of water-proofing caulk for good measure: I suggest waiting until the end to glue on the optional roof and waiting until just before that to glue on the optional mesh screens. ","date":"2020-08-27","objectID":"/ws3-weather-station-pm25-sensor/:2:2","tags":["fusion-360","has:download","esphome","home assistant"],"title":"Adding an airborne particulate mater sensor to WS3 Weather Station","uri":"/ws3-weather-station-pm25-sensor/"},{"categories":null,"content":"The code Setting up and using ESPHome is outside the scope of this post but there are several good guides out there. Once you have that set up, include the ws3.h file and set up your custom sensor as shown below. A working example and more detail is over on the github repo. It’ll look like this: uart: id: uart_bus # At this time, ESP does not Transmit anything to the WS3 tx_pin: GPIO16 rx_pin: GPIO17 baud_rate: 2400 sensor: - platform: custom lambda: |- auto ws3 = new WS3(id(uart_bus)); App.register_component(ws3); return { ws3-\u003etemperature_sensor, ws3-\u003epressure_sensor, ws3-\u003ehumidity_sensor, ws3-\u003ewind_speed_current_sensor, ws3-\u003ewind_speed_peak_5m_sensor, ws3-\u003ewind_direction_sensor, ws3-\u003erain_fall_1h_sensor, ws3-\u003erain_fall_24h_sensor, ws3-\u003eparticles_03um, ws3-\u003eparticles_05um, ws3-\u003eparticles_10um, ws3-\u003eparticles_25um, ws3-\u003eparticles_50um, ws3-\u003eparticles_100um, }; With that, check the logs from your instance of ESPHome and you should see something like this: [D][ws3:157]: pkt_read_ok!\u001b [D][WS3:410]: VALID! Packet: [c000s000g000t093r000p000h35b09880,050,080,088,502,056,065,*18 ], Checksum: [18] chksum: [18]\u001b [E][WS3:342]: Validating: [c000s000g000t093r000p000h35b09880,050,080,088,502,056,065]\u001b indicating that the WS3 has detected the PM2.5 sensor and is reporting it’s readings in addition to the temperature/wind data. Then just check your HomeAssistant install for the data. ","date":"2020-08-27","objectID":"/ws3-weather-station-pm25-sensor/:3:0","tags":["fusion-360","has:download","esphome","home assistant"],"title":"Adding an airborne particulate mater sensor to WS3 Weather Station","uri":"/ws3-weather-station-pm25-sensor/"},{"categories":null,"content":"Files For archive / posterity, all source files are included here. All files are licensed as Creative Commons Attribution-NonCommercial-ShareAlike (CC BY-NC-SA). Sensor has been press-fit into the enclosure and wire fed through the base plate. I suggest waiting until the end to glue on the optional roof and waiting until just before that to glue on the optional mesh screens. Smoke particles are between .4μm to .7μm in size... which explains the elevated red line relative to other particle sizes. Excuse the awkward camera angle; sensor is deployed in an awkward to photograph location. models/BASE.step: step file models/BODY.step: step file models/LID.step: step file models/base.stl: stl file models/body.stl: stl file models/combined.3mf: 3mf file models/lid.stl: stl file More or less everything needed to assemble. No raft/support when printed in this orientation. Upper and lower chambers for exhaust and intake. ","date":"2020-08-27","objectID":"/ws3-weather-station-pm25-sensor/:4:0","tags":["fusion-360","has:download","esphome","home assistant"],"title":"Adding an airborne particulate mater sensor to WS3 Weather Station","uri":"/ws3-weather-station-pm25-sensor/"},{"categories":null,"content":"California Electric Grid Regulators publish alerts indicating a pending blackout","date":"2020-08-16","objectID":"/rss-and-homeassistant-for-early-blackout-warning/","tags":["home assistant","automation"],"title":"RSS and Home Assistant: early warning for grid blackouts","uri":"/rss-and-homeassistant-for-early-blackout-warning/"},{"categories":null,"content":"California, like most of the West Coast, is currently in the middle of a prolonged and serious heat-wave. Record breaking temperatures results in a distribution grid stressed beyond it’s abilities which guarantees blackouts. The organization that oversees the electric grid in California publishes RSS feeds for various types of grid related news and events. All the CA ISO RSS feeds are published here, but the two feed that I’m using are: http://content.caiso.com/awe/noticeRSS.xml http://content.caiso.com/awe/noticeflexRSS.xml As energy demand ramps up, flex alerts are issued as a call to reduce energy consumption. If demand continues to rise warnings and, finally, stage3 events are issued. A warning does not guarantee a stage3 event, but a stage3 event mans that blackouts are all but inevitable in the coming hours. The exact meaning of each alert type is outlined in this PDF. The noticeRSS.xml feed, has early warning notifications that look like this: \u003citem\u003e \\n \u003ctitle\u003eNOTICE 202002440: CAISO Grid Warning Issued \u003c/title\u003e \\n \u003clink\u003ehttp://www.caiso.com/awe/noticelog.html#202002440\u003c/link\u003e \\n \u003cdescription\u003eEffective: 16-Aug-2020 12:00 PM Terminates: 16-Aug-2020 11:59 PM\u003c/description\u003e \\n \u003c/item\u003e Note: there’s nothing wrong w/ your browser, the \\n characters are in the actual feed. No matter, the RSS parser in Home Assistant can tolerate them. I use the alerts/warnings to do a few simple tasks, but there’s so much potential beyond the automation I currently have: bumps thermostats up by a few degrees to lighten demand* re-schedule a few routine activities that are usually done in the evening to as soon as possible (cooking, for example) notify me to immediately go check that the generator has fuel Currently in ‘unarmed’ mode as I tweak the logic driving the decision ","date":"2020-08-16","objectID":"/rss-and-homeassistant-for-early-blackout-warning/:0:0","tags":["home assistant","automation"],"title":"RSS and Home Assistant: early warning for grid blackouts","uri":"/rss-and-homeassistant-for-early-blackout-warning/"},{"categories":null,"content":"How to do it Basically, add the two feeds above to the feedreader integration and use the feedreader type of event to trigger your automation. Somewhere in configuration.yaml, load the feedreader component. feedreader: !include feedreader/rss.yaml and in the feedreader/rss.yaml file, add the URLs: urls: - http://content.caiso.com/awe/noticeRSS.xml - http://content.caiso.com/awe/noticeflexRSS.xml # Pull down the feed 2x/ hour scan_interval: minutes: 30 Unfortunately, Home Assistant does not support setting the scan_interval per feed, so you’ll have to figure out a happy middle ground if you’ve already got a few RSS feeds you monitor. Likewise, don’t pull the feed down excessively… I don’t see a lot of evidence that the feed is cached well and the CA ISO does occasionally have to put banners on the top of their site saying that the site is under heavy load. Don’t be the reason the site goes down because you wanted instant notification. If you’re not in a position to do any sophisticated automation based on the notification, it’s still simple to fire off a notification to manually prepare: ## - alias: Notify when new Flex or Warning issued trigger: platform: event event_type: feedreader action: service: persistent_notification.create data_template: notification_id: \"{{ trigger.event.data.title }}\" title: \"FlexAlert\" message: \u003e {% set tokens = trigger.event.data.description.split(' ') %} {% set start_str = \"{} {} {}\".format(tokens[1], tokens[2], tokens[3]) %} {% set start = strptime(start_str, '%d-%b-%Y %I:%M %p') %} {% set end_str = \"{} {} {}\".format(tokens[5], tokens[6], tokens[7]) %} {% set end = strptime(end_str, '%d-%b-%Y %I:%M %p') %} \"Heads up, electricity demand is likely to exceed production from {{ start.isoformat() }} to {{ end.isoformat() }}\" Which should create a simple notification that’ll look something like this: Ignore the sample text from my testing The strptime function yields start and end objects that can be manipulated further: {% set now = now() %} {% if start.day \u003e now.day -%} It looks like demand will be high *tomorrow* {%- endif %} Happy automating. ","date":"2020-08-16","objectID":"/rss-and-homeassistant-for-early-blackout-warning/:1:0","tags":["home assistant","automation"],"title":"RSS and Home Assistant: early warning for grid blackouts","uri":"/rss-and-homeassistant-for-early-blackout-warning/"},{"categories":["tools"],"content":"A powerful collection of scriptable tools for managing ToDoist","date":"2020-07-26","objectID":"/the-missing-todoist-tools/","tags":["tmtdt","automation","ToDoist"],"title":"Announcing The Missing ToDoist Tools","uri":"/the-missing-todoist-tools/"},{"categories":["tools"],"content":"TMTDT: The Missing ToDoist Tools 🎉 As the name implies, TMTDT started as a small collection of scripts that I used to augment ToDoist with features they can’t/won’t implement. It’s grown quite a bit since then. I don't know how to make flashy demo gifs. See the file driving the demo Those scripts started as simple idea and quickly morphed into a creaky, but essential, tool. As more features were added it continued too morph into an unmaintainable mess. Untangling that mess was on my todo list but never a high priority partly because of issues TMTDT was designed to solve 🤦. I lost my day job right as the spring of 2020 shelter in place order was put in place. TMTDT is certainly not how I thought early summer was going to be spent, but a useful way nonetheless. One significant chunk of my newly-freed time and a lengthy re-write later, I had something that looked promising. After a lot more work and some tinkering, I’ve got something that feels like far more than a hacky tool for personal use. ","date":"2020-07-26","objectID":"/the-missing-todoist-tools/:0:0","tags":["tmtdt","automation","ToDoist"],"title":"Announcing The Missing ToDoist Tools","uri":"/the-missing-todoist-tools/"},{"categories":["tools"],"content":"Why Why not? I had several scripts that I would run on a regular basis to do things like: set up projects with multiple different types of templates based on things like the date fix typos i routinely made while quick adding tasks. re-schedule certain daily tasks if they had been missed No joke, I’d spend a lot of time fixing typos, expanding ideas for a project into proper sub-tasks and sections and other routine administrative work: Representative of time spent during a typical week In that specific week, I kept track of how 37 hours were spent. Of those 37, about 4 were spent on general Inbox review / process. At least 3 of those 4 were spent directly on task triage. 3/37 is about 8%. With no full time day job - hire me - that’s a fairly representative breakdown for a given week; some time planning the things, lots of time doing the things. What would you do with 8% of your time back each week? I’m kidding. We all know that I’m not getting any free time back from this. Credit: XKCD #1319 I’ve written this software to suit my needs, but the decision to make it a bit more robust and featured before release is because I’ve noticed a few ’new’ tools to better augment ToDoist: autodoist shortcuts taskbutler planner. This is more of a UI, but it’s a very pretty app. And I’m genuinely curious about how other people will user it. I am always appreciative when somebody finds a smart way to save some time and shares their trick. I’m hoping somebody figures out how to use this tool in a way that I can learn from. An announcement post for TMTDT is now on /r/todoist. ","date":"2020-07-26","objectID":"/the-missing-todoist-tools/:1:0","tags":["tmtdt","automation","ToDoist"],"title":"Announcing The Missing ToDoist Tools","uri":"/the-missing-todoist-tools/"},{"categories":["tools"],"content":"How The code and some documentation can be found on GitHub. The demo gif at the top of this post illustrates a simple example, but more through (read: contrived) examples are included in the jobs directory. The short version: Scriptable tools for building jobs to manage a TooDoist account Slightly longer version: Architecture inspired by Elastic Search’s Curator. Functionality built for ToDoist. ","date":"2020-07-26","objectID":"/the-missing-todoist-tools/:2:0","tags":["tmtdt","automation","ToDoist"],"title":"Announcing The Missing ToDoist Tools","uri":"/the-missing-todoist-tools/"},{"categories":["tools"],"content":"Demo The full set of resources for the demo are here, but the ‘meaningful’ parts are below: # apply these labels... labels: - \"at_work\" # to tasks that... filters: - filter: # Any task that... task: # ... ends in 'at work' or 'the office' content: match: '(at work$|at the office$)' option: # remove portions of task content that match the query mutate: Yes # *AND* # ... has no labels labels: absent: Yes # *AND* # ... is in this project projects: name: match: 'Inbox' and # Create the projects... projects: # ... as child projects of `Garage Sale 🏚️💵` - parent: project: Garage Sale 🏚️💵 # ... populated with template tasks/sections template: file: ./templates/garage-sale.csv # where the name of the projects to create comes from ... from: filters: - filter: # Any task that... task: content: match: \".\" option: delete: yes projects: # ... is in this project name: match: 'Garage Sale 🏚️💵' ","date":"2020-07-26","objectID":"/the-missing-todoist-tools/:2:1","tags":["tmtdt","automation","ToDoist"],"title":"Announcing The Missing ToDoist Tools","uri":"/the-missing-todoist-tools/"},{"categories":["gists","reference"],"content":"get *.consul domains resolved from within docker containers without resorting to dnsmasq","date":"2020-07-21","objectID":"/systemd-resolved-with-consul-agent/","tags":["consul","systemd","systemd-resolved"],"title":"Systemd Resolved With Consul Agent","uri":"/systemd-resolved-with-consul-agent/"},{"categories":["gists","reference"],"content":"I pieced this technique together a while back and created a gist for it. I’m creating this post as a pointer to that gist so I have something that’s a bit easier to reference and refer others to. And i want to test out the hugo shortcode for embedding a gist 😏. The really short version: Create a dedicated interface that can only be accessed from the local system Bind the consul-agent’s DNS service to this local only interface Tell systemd-resolved that all hostnames with the .consul TLD can be resolved via a DNS server on this local interface No need to disable resolved and replace it with dnsmasq 😄 ","date":"2020-07-21","objectID":"/systemd-resolved-with-consul-agent/:0:0","tags":["consul","systemd","systemd-resolved"],"title":"Systemd Resolved With Consul Agent","uri":"/systemd-resolved-with-consul-agent/"},{"categories":["home-lab"],"content":"Quick / another “i made a thing!” post. Picture showing designed parts deployed as intended (please ignore the lingering dust! 💨) I needed some horizontal / vertical cable rings for cat5 and power cables. I would have used the excellent 1U Rackmount Cable Management Rings by boulwarek except the hole spacing didn’t work for my application. I needed cable rings for the ‘front-to-back’ braces which have distinct dimensions: holes needed to be spaced 10.85mm apart distance between center of screw is 20.0mm Screenshot from Fusion360 showing dimensions between screw holes I made the rings slightly smaller as the horizontal / vertical runs I needed rings for do not carry more than a few cables. A similar copy of this post is on thingiverse and prusaprinters page. ","date":"2020-07-18","objectID":"/home-lab-simple-printable-cable-org/:0:0","tags":["fusion-360","has:download","organization"],"title":"home lab: simple printable cable org","uri":"/home-lab-simple-printable-cable-org/"},{"categories":["home-lab"],"content":"Printing Theses are ‘function’ parts, so the cheapest material and fastest settings work. No support material needed and minimal bridging with the suggested print orientation shown below. Screenshot showing suggested print bed arrangement ","date":"2020-07-18","objectID":"/home-lab-simple-printable-cable-org/:1:0","tags":["fusion-360","has:download","organization"],"title":"home lab: simple printable cable org","uri":"/home-lab-simple-printable-cable-org/"},{"categories":["home-lab"],"content":"Files For archive / posterity, all source files are included here. All files are licensed as Creative Commons Attribution-NonCommercial-ShareAlike (CC BY-NC-SA). Screenshot from Fusion360 showing dimensions between screw holes Picture showing the CAD model for horizontal variant Picture showing designed parts deployed as intended (please ignore the lingering dust! 💨) models/combined.3mf: 3mf file models/horizontal.f3d: Horizontal STL: stl file models/vertical.f3d: Vertical STL: stl file Screenshot showing suggested print bed arrangement Picture showing the CAD model for vertical variant ","date":"2020-07-18","objectID":"/home-lab-simple-printable-cable-org/:2:0","tags":["fusion-360","has:download","organization"],"title":"home lab: simple printable cable org","uri":"/home-lab-simple-printable-cable-org/"},{"categories":["electronics-lab"],"content":"While doing the PoE related testing for this incident, it occurred to me that I never got around to sharing the files for a small modification to the popular RD6006 PSU. While drafting this post, I discovered that there appears to be a newer version of the RD6006: the 6012. As far as I can tell, they’re in the same ‘family’ and have the same dimensions so the CAD and related model files below should work w/ the RD6012 just as they do w/ the 6006, but i can only ‘guarantee’ that the CAD and related model files below will work with the RD6006. A version of this post appears on prusaprinters and thingiverse ","date":"2020-07-09","objectID":"/electronics-lab-enhanced-bench-psu/:0:0","tags":["fusion-360","has:download"],"title":"electronics lab: enhanced psu","uri":"/electronics-lab-enhanced-bench-psu/"},{"categories":["electronics-lab"],"content":"What A small enclosure for a PoE injector and QC 3.0 charger designed to sit on top of the RD6012 PSU ‘kit’ sold all over aliexpress and banggood. Assembled, it looks like this: As seen on AliExpress The RD6006 is incredibly versatile, but can only supply power for about 85% of the devices that make their way onto my ‘healing’ bench. I wasn’t keen on taking up more valuable space with a device dedicated to PoE injection so finding a way to mod one into the PSU seemed like a good idea. Similarly, adding a versatile USB port seemed like a no-brainer as my favorite soldering iron is powered via QuickCharge 3. Three useful bench tools, one footprint, one consumed power outlet. What’s not to love? ","date":"2020-07-09","objectID":"/electronics-lab-enhanced-bench-psu/:1:0","tags":["fusion-360","has:download"],"title":"electronics lab: enhanced psu","uri":"/electronics-lab-enhanced-bench-psu/"},{"categories":["electronics-lab"],"content":"Printing: There are two components for this build: the ‘plate’ which rests on the top of the PSU case and has small ‘fences’ to fix the circuit boards in place. It’s the ‘salmon’ colored component the ’lid’ is the (mostly) transparent yellow component which holds the auxiliary power supplies (pink components) in place and keeps all voltages away from people. Colorized Components Relevant components, colored in F360 I used black PETG, but any material and at least 10% infill should be fine. Tune the layer height to taste. The ‘plate’ does not need any supports nor does the lid if printed in the suggested print orientation shown below 👇. I printed with settings optimized for speed so there was minimal sagging, but nothing substantial. What little there was didn’t interfere with clearance of any other internal component and was completely hidden. If you’re not comfortable with bridging long distances, you can optionally enforce support material from the build plate to the top of the lid or flip the lid upside down and use supports for the four feet where the screws go. Because any sagging would be hidden inside, suggested print orientation ","date":"2020-07-09","objectID":"/electronics-lab-enhanced-bench-psu/:2:0","tags":["fusion-360","has:download"],"title":"electronics lab: enhanced psu","uri":"/electronics-lab-enhanced-bench-psu/"},{"categories":["electronics-lab"],"content":"Components In addition to the miscellaneous wire and crimp connectors, there are two components used in this design: PoE injector QC 3.0 Charger ","date":"2020-07-09","objectID":"/electronics-lab-enhanced-bench-psu/:3:0","tags":["fusion-360","has:download"],"title":"electronics lab: enhanced psu","uri":"/electronics-lab-enhanced-bench-psu/"},{"categories":["electronics-lab"],"content":"Assembly I don’t have any pictures from the assembly 😞, but it’s not particularly difficult to figure out from the attached pictures. In general, the steps to take are: Print everything and clean up the parts as needed de-shell the PoE injector and QC3 charger. A plastic pry-tool or a few flat-head screwdrivers will help here! desolder the existing mains connections from both modules and solder on new ones. The new ones don’t need to be long, just a bit longer than the leads that came on the module PCBs! disconnect power from the assembled PSU and remove the case cover place the ‘plate’ onto the top of the PSU and use a pencil to mark all 5 holes on the cover remove the plate, drill out all 5 holes and use a file to smooth down any sharp edges on the big hole as that’s where the mains wires will go. A burr poking through insulation means the case may become energized @ mains voltages! 💥 💀 crimp connectors onto wires and attach to the mains supply after the switch and fuse! place the ‘plate’ back onto the PSU cover run the wires through the new hole in the top of the PSU case and through the hole in the ‘plate’ add the PoE injector and QC3 module to the plate join the mains leads to the module leads. I used Wago connectors, but simple wirenuts or a screw terminal block will work. Use M3 screws to secure the lid to the plate and the PSU. I intentionally drilled the holes slightly too small so the screws would thread against the case. Not ideal, but works absolutely fine for something that’s not load-bearing or going to be repeatedly re-screwed. re-connect the IEC power connector and power on monitor for sounds and smells that indicate you screwed up. begin testing PoE and USB port for proper power. Just prior to seating the ’lid’ you should have something like this: components seated and wired When all said and done, you’ll get this: everything assembled and powered up ","date":"2020-07-09","objectID":"/electronics-lab-enhanced-bench-psu/:4:0","tags":["fusion-360","has:download"],"title":"electronics lab: enhanced psu","uri":"/electronics-lab-enhanced-bench-psu/"},{"categories":["electronics-lab"],"content":"Files The f360 file is… a mess. I’m not going to share it here. Contact me if you really want it. The stl and 3mf files are below, though. As you can tell from the initials and date, this project was ‘completed’ awhile ago. For archive / posterity, all source files are included here. All files are licensed as Creative Commons Attribution-NonCommercial-ShareAlike (CC BY-NC-SA). everything assembled and powered up Relevant components, colored in F360 models/combined.3mf: 3mf file models/lid.stl: stl file models/plate.stl: stl file components seated and wired suggested print orientation As seen on AliExpress ","date":"2020-07-09","objectID":"/electronics-lab-enhanced-bench-psu/:5:0","tags":["fusion-360","has:download"],"title":"electronics lab: enhanced psu","uri":"/electronics-lab-enhanced-bench-psu/"},{"categories":["home-lab"],"content":"This is another brief “i made a thing!” posts. ","date":"2020-07-05","objectID":"/home-lab-keystone-bracket/:0:0","tags":["fusion-360","has:download"],"title":"home lab: mini 'universal' patch panel","uri":"/home-lab-keystone-bracket/"},{"categories":["home-lab"],"content":"Version 2 Update 2020-12-12: I outgrew version 1! I needed a few more ports and didn’t have much time… so I just scaled the part up to double the number of jacks. The links below and the thingiverse and prusaprinters links have been updated w/ the new STL files. Printing and attachment works exactly the same as with the 1x8 version. Rather than include the Fusion360 source, I have included a standard STEP file. Yes, I do need to re-do the cable runs; they're a mess ","date":"2020-07-05","objectID":"/home-lab-keystone-bracket/:1:0","tags":["fusion-360","has:download"],"title":"home lab: mini 'universal' patch panel","uri":"/home-lab-keystone-bracket/"},{"categories":["home-lab"],"content":"What Taking the side / rear of my rack off every time I needed to change which host(s) were connected to the monitor was starting to get old. Only recently did I realize that you can fit more than just RJ45 jacks in a Keystone Jack. A few measurements, a quick search through thingiverse and some CAD time later, this is the result. The model is tailored to my specific rack, but should be easily adoptable to any other dimensions. Import the Fusion360 model and then edit the first sketch in the timeline as needed and adjust the pattern on line step to adjust the number of keystone jacks. Of course, you can always just glue the print to whichever surface you need it mounted on as there’s plenty of broad/flat surface for adhesive if the two built-in screw holes won’t work! As is, the model has: 8 jacks 178.5mm from ’edge’ to ’edge’ between the two screw holes 6.5mm diameter for the holes as my rack uses M6 screws. Note: After printing the model you see in the pictures below, I added a small cutout which should make it easier to depress the clip on the ‘male’ end of a keystone device from the ‘user facing’ side as you’d typically find on a proper patch panel All in all, I’m quite happy with how it turned out: 8 jacks is more than enough for current and (projected!) future use. The only obvious improvement would be moving the numbers from the bottom to the top where there’s more room. As it is now, the perimeters around the numbers look a bit weird as they merge w/ the bottom edge that are flush w/ the rack and the top edges that are flush w/ the jacks. Many thanks to belfers for the Keystone model. The details are on the thingiverse and prusaprinters page. ","date":"2020-07-05","objectID":"/home-lab-keystone-bracket/:2:0","tags":["fusion-360","has:download"],"title":"home lab: mini 'universal' patch panel","uri":"/home-lab-keystone-bracket/"},{"categories":["home-lab"],"content":"Printing: Any material and at least 10% infill should be fine. No supports if you use the suggested print orientation shown in picture below. Tolerances on the jacks are somewhat tight so printing at a more accurate setting is probably going to be a good idea. ","date":"2020-07-05","objectID":"/home-lab-keystone-bracket/:3:0","tags":["fusion-360","has:download"],"title":"home lab: mini 'universal' patch panel","uri":"/home-lab-keystone-bracket/"},{"categories":["home-lab"],"content":"Files For archive / posterity, all source files are included here. All files are licensed as Creative Commons Attribution-NonCommercial-ShareAlike (CC BY-NC-SA). models/v1_keystone-bracket.3mf: 3mf file models/v1_keystone-bracket.f3z: f3z file Fusion360 Archive models/v1_keystone-bracket.stl: stl file models/v2.3mf: 3mf file models/v2.step: step file STEP file models/v2.stl: stl file Suggested print orientation Yes, I do need to re-do the cable runs; they're a mess ","date":"2020-07-05","objectID":"/home-lab-keystone-bracket/:4:0","tags":["fusion-360","has:download"],"title":"home lab: mini 'universal' patch panel","uri":"/home-lab-keystone-bracket/"},{"categories":["posts","troubleshooting"],"content":"A quick tale of troubleshooting a bizarre PoE related problem","date":"2020-07-01","objectID":"/poe-at-a-distance-ruined-my-cat5-speeds/","tags":["short-posts","home-automation","raspberry-pi","PoE"],"title":"PoE at a distance caused terrible cat5 speeds","uri":"/poe-at-a-distance-ruined-my-cat5-speeds/"},{"categories":["posts","troubleshooting"],"content":"This is a quick post for made in the hopes that some poor soul in the future will find it and save themselves some time. ","date":"2020-07-01","objectID":"/poe-at-a-distance-ruined-my-cat5-speeds/:0:0","tags":["short-posts","home-automation","raspberry-pi","PoE"],"title":"PoE at a distance caused terrible cat5 speeds","uri":"/poe-at-a-distance-ruined-my-cat5-speeds/"},{"categories":["posts","troubleshooting"],"content":"Background I’ve been experimenting with a few different ways to surface various home automation controls in the appropriate place and at a good time. One prototype host is deployed behind a small LCD under some cabinets in a high traffic area. This host is a raspberry pi 4 with a PoE hat. It boots a very stripped down version of Raspberry Pi OS into a web browser running in Kiosk mode. It’s pretty simple and does many things well. There’s a few small issues that need to be addressed in the CAD files as well as some additional electronic improvements that should be made before I can publish the design / files. In any event, this host has been trouble-free until recently. Simple apt update transfers would take DAYS to complete, simple scp operations to other hosts on the LAN would trickle by at tens of kB/s. The web app that the host is primarily responsible for displaying would time out or fail to completely load resulting in some “a-for-effort” graceful degradation. ","date":"2020-07-01","objectID":"/poe-at-a-distance-ruined-my-cat5-speeds/:1:0","tags":["short-posts","home-automation","raspberry-pi","PoE"],"title":"PoE at a distance caused terrible cat5 speeds","uri":"/poe-at-a-distance-ruined-my-cat5-speeds/"},{"categories":["posts","troubleshooting"],"content":"The Facts As soon as I bring up the wlan0 interface and bring down the eth0 interface performance is IMMEDIATELY restored. The web app is responsive and fully loads instantly, scp is fast like it should be on a LAN and apt update completes without any errors as fast as my internet connection will let it! Conclusion: The problem is not network related. Both the eth0 and wlan0 interface are on the same vLan so the bizarre behavior is not likely caused by a QoS policy or firewall rule. The rPi and a few other hosts a powered via a a 120 watt which is in the same closet as my core switch. Two terminations and about 200 feet of cat5 cable later, you get to the rPi host on the other side of the house. Continuity tester was used on every segment of the link to confirm the link is good. The segments of the link from the switch to the injector and to the patch-panel all use high quality pre-made cables, as does the final segment from the wall to the rPi. Shocker, they tested fine, just like the in-wall segment. Additionally, no other host on the PoE injector is misbehaving. No other host on the PoE injector is indicating that there’s not enough power, and the power supply feeding the injector isn’t even warm. Conclusion: The cables are certainly fine and the PoE injector is probably fine. Next, I disabled the PoE injector all together and use the USBC port on the rPi for power. It was just as performant as with WiFi! I did not expect this result, but it did certainly narrow down the possible problem areas. Conclusion: The problem is only present when the host is powered via PoE. I was very confident that the PoE injector was not the problem, but in order to be certain, I used a second cheap PoE injector that lives on my bench power supply. Turns out, the same slow speeds manifested with the second injector, too. Conclusion: The problem is not in the network, nor is it in the cables, nor is it in the injectors. This only leaves one candidate: the host. Unfortunately, there’s nothing about the host that screams “i’m the problem!”. The microSD card is new and very fast. There’s nothing in the logs indicating a hardware failure. On-device performance (via non-networking benchmarks) is inline with what i’d expect. Here’s two additional facts from some brief testing I did a few weeks ago. I had more or less forgotten about them and only really remembered that: When I tried a fresh install of Ubuntu on a fresh microSD card… same slow speeds. The host performs perfectly when plugged into other networks. I was confident then, that the rPi was not the issue and that something about the network was. But I just spent 3 hours systematically testing out every component of the network and concluding that the network is fine! Conclusion: I’m back where I started; angry and confused. The “ah ha!” moment didn’t come until i decided to try my second PoE injector at the client. Much to my surprise, it worked!. After a bit more testing, I determined that the PoE HAT on the rPi is ‘fine’ when the PoE source is CLOSE… which probably explains the ‘works fine on other networks’ fact above. That leaves just the ‘problem is OS independent’ fact which - after thoroughly vetting every part of the network and PoE system - makes it pretty obvious that the problem must be between the rPi and the cat5 cable coming from the wall. There’s only the PoE HAT between the rPi and the cat5 cable coming from the wall. I borrowed a PoE HAT from another host elsewhere on the network and the problematic rPi started behaving again. Network transfer speeds were appropriate and the web app / dashboard was performant again! Conclusion: the PoE HAT powering a home automation dashboard has failed in such a way that makes the eth0 interface all but useless. replacing the HAT solved the problem. ","date":"2020-07-01","objectID":"/poe-at-a-distance-ruined-my-cat5-speeds/:2:0","tags":["short-posts","home-automation","raspberry-pi","PoE"],"title":"PoE at a distance caused terrible cat5 speeds","uri":"/poe-at-a-distance-ruined-my-cat5-speeds/"},{"categories":["posts","troubleshooting"],"content":"TL;DR: Several months ago, the home automation dashboard displayed on a PoE powered rPi 4 started to act up. Further investigation showed absolute crap network performance from the host to any other point on the LAN or WAN. After testing each component in isolation, the PoE HAT was the only reaming suspect. After further investigation, the failure mode is not present when the PoE source is close to the client, only when the source is far from the client. So if you have a PoE powered rPi project out there w/ abysmal eth0 performance, try replacing the PoE hat… Also, if anybody knows why this happened, I’d love to know. ","date":"2020-07-01","objectID":"/poe-at-a-distance-ruined-my-cat5-speeds/:3:0","tags":["short-posts","home-automation","raspberry-pi","PoE"],"title":"PoE at a distance caused terrible cat5 speeds","uri":"/poe-at-a-distance-ruined-my-cat5-speeds/"},{"categories":["posts"],"content":"*tap* *tap* Is this thing on?","date":"2020-06-27","objectID":"/hello-world/","tags":["short-posts"],"title":"Hello World","uri":"/hello-world/"},{"categories":["posts"],"content":"Blowing the dust off the domain, trying Hugo out. tap tap Is this thing on? ","date":"2020-06-27","objectID":"/hello-world/:0:0","tags":["short-posts"],"title":"Hello World","uri":"/hello-world/"},{"categories":["home-lab"],"content":"A while back, I traded writing salt states and managing systemd .service files wrapping podman for the ‘simplicity’ of running kubernetes in my home lab. Jury is still out on weather or not the switch was worth it. The cluster is a hodgepodge of second hand Intel NUCs and other scavenged compute hardware i’ve collected over the past few years. Some of it runs on 12v, some of it on 19v. For each node, there’s a dedicated switch mode power supply. Each supply takes up an outlet and brings a bit of cable mgmt related clutter. The solution is consolidation. So thats how this project came to be. ","date":"2020-06-27","objectID":"/home-lab-consolidated-psu/:0:0","tags":["fusion-360","has:download"],"title":"home lab: consolidating multiple PSUs","uri":"/home-lab-consolidated-psu/"},{"categories":["home-lab"],"content":"What A set of 3d printable parts to compactly combine two LRS-350 PSUs into a compact unit with optional voltage and current displays. The details are on the thingiverse and prusaprinters page. ","date":"2020-06-27","objectID":"/home-lab-consolidated-psu/:1:0","tags":["fusion-360","has:download"],"title":"home lab: consolidating multiple PSUs","uri":"/home-lab-consolidated-psu/"},{"categories":["home-lab"],"content":"Files For archive / posterity, all source files are included here. All files are licensed as Creative Commons Attribution-NonCommercial-ShareAlike (CC BY-NC-SA). Fully Assembled; ignore the messy workbench component view, from rear component view, from front Print Bed arrangement, green is support structures meter panel print orientation Consolidated PSU CAD: f3z file Fusion360 Archive Box: stl file Brace: stl file Core Components: 3mf file Lid: stl file (Optional) Meter Panel: 3mf file (Optional) Meter Panel: stl file using slic3r too remove the second meter cutout ","date":"2020-06-27","objectID":"/home-lab-consolidated-psu/:2:0","tags":["fusion-360","has:download"],"title":"home lab: consolidating multiple PSUs","uri":"/home-lab-consolidated-psu/"},{"categories":null,"content":"The best way to get in touch is to email me ✉️. There are a few clever ways to obfuscate email addresses to prevent spam. Unfortunately, they all rely on javascript or otherwise can break screen readers and other tools that are often used by disabled persons. So with that in mind, here’s a simple algorithm to derive the best email to contact me Visit the home page Split my name into $first_name and $last_name Send your email to contact@$fist_name$last_name.com If you had observed the name Bobby Tables on the home page, you would email contact@bobbytables.com. ","date":"0001-01-01","objectID":"/contact/:0:0","tags":null,"title":"","uri":"/contact/"},{"categories":null,"content":"Security and Privacy related things For sensitive topics, especially any security issues in any software I am responsible for, please use PGP to get in touch with me. The easiest way to do so is through KeyBase ","date":"0001-01-01","objectID":"/contact/:0:1","tags":null,"title":"","uri":"/contact/"},{"categories":null,"content":"TL;DR When asked to summarize my resume, ChatGPT said: Overall, the candidate is a highly skilled SRE with a passion for automation and optimization. When asked to expand on that further I got back a summary that was accurate and concise: I am a Senior+ level engineer with a constellation of skills in the Dev/Sec-Ops and SRE space. An overall tool-smith leveraging a decade+ of cloud computing and software development experience to make both personal and professional tasks more automatic and consistent. My expertise includes designing and building modern, scalable architectures as well as the CI/CD pipelines to facilitate their deployment. I have also spent a decent amount of time modernizing legacy Terraform infrastructure, improving internal documentation and both developing and coaching incident management processes. I believe that quality documentation is one of an engineer’s most valuable resources. I have a strong understanding of security in the application, infrastructure and organizational contexts. I have run vulnerability bounty programs and been responsible for triaging and prioritizing bounty-winning reports. I am an OSS contributor with a strong background in Python and am comfortable working with a range of technologies. I am particularly skilled at identifying opportunities for automation and building tools to streamline workflows. I enjoy using personal time to further develop my skills and build tools to automate tasks outside of work; my personal interests and skills often overlap with my professional expertise. ","date":"0001-01-01","objectID":"/resume/:0:0","tags":["resume"],"title":"Resume","uri":"/resume/"},{"categories":null,"content":"Download Note The files linked below should be considered the most up to date copy of my recent professional roles and accomplishments. JSON document. Complies with the JSON Resume schema. MARKDOWN document which can be easily turned into HTML or PDF if you so choose. HTML document which can be easily turned into a PDF if you so choose. PDF document which mirrors the HTML but has most formatting stripped out for reliable machine parsing. You can also find a similar - but not identical or as current - copy of the information on LinkedIn. ","date":"0001-01-01","objectID":"/resume/:1:0","tags":["resume"],"title":"Resume","uri":"/resume/"}]